       PROGRAM F6228
C$$$  MAIN PROGRAM DOCUMENTATION BLOCK
C
C MAIN PROGRAM: FCST         MAKE GLOBAL FORECAST WITH SPECTRAL MODEL
C   PRGMMR: SELA             ORG: NMC23       DATE: 81-01-01
C
C ABSTRACT: MAKE GLOBAL FORECAST WITH SPECTRAL MODEL.
C
C PROGRAM HISTORY LOG:
C   81-01-01  SELA
C
C INPUT FILES:
C   UNIT   11    SIGMA FILE (ANALYSIS OR AT TIME T-DT)
C   UNIT   12    SIGMA FILE (AT TIME T IF NOT ANALYSIS)
C   UNIT   14    SURFACE FILE
C   UNIT   15    CO2 CONSTANTS (DEPENDENT ON VERTICAL RESOLUTION)
C   UNIT   24    MOUNTAIN VARIANCE (DEPENDENT ON HORIZONTAL RESOLUTION)
C   UNIT   43    CLOUD TUNING
C
C OUTPUT FILES:
C   UNIT   51    SIGMA FILE (AT TIME T-DT)
C   UNIT   52    SIGMA FILE (AT TIME T)
C   UNIT   53    SURFACE FILE
C   UNIT   61    INITIAL ZONAL DIAGNOSTICS
C   UNIT   63    FLUX DIAGNOSTICS
C   UNIT   64    FINAL ZONAL DIAGNOSTICS
C   UNIT   67    GRID POINT DIAGNOSTICS
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
C....
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
      COMMON /PWATER/PWAT( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25)),(cvhi  (1,1),FLUXR(1,1,26)),
C    1         (cvmi  (1,1),FLUXR(1,1,27)),(cvlo  (1,1),FLUXR(1,1,28)),
C    2         (rhhi  (1,1),FLUXR(1,1,29)),(rhmi  (1,1),FLUXR(1,1,30)),
C    3         (rhlo  (1,1),FLUXR(1,1,31))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C...SOF INCLUDE..........................................
C  FORECAST SELECTION PARAMETERS
      COMMON/COMCON/ CON(1700),NUM(1700)
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
C-WAV COMMON/COMWAV/ HSTR,USTRGG( 384 , 47 ),VSTRGG( 384 , 47 )
      LOGICAL LASTEP
       integer*4 idate4(4), itmp(5)
C..........................................
      call w3tagb('cdas-mrf',2000,098,0075,'cpc')

      PRINT 100
100   FORMAT (1H0,'E2 SMF2 62  28 ',
     X        ' CREATED APRIL 92  IBM ORDER ')
C
      CALL GETCON(N1,N2,NGES,NRADR,NRADF,NNMOD,
     1 N3,N4,NFLPS,NSIGI,NSIGS,NZNLI,NSFCF,NSFCFI,NZNLF,
     1 NSGRI,NSGRF,NSGRS,
     2 NDGI,NDGII,NDGF,NDGFI,NGPKEN,
     3 MODS,NITER,INI,NSTEP,NFILES,
     4 KSOUT,IFGES,IBRAD)
C
C DFINI:  DO DIGITAL FILTER INITIALIZATION SETUP
C         NUMMAX AND NUMSUM SAVED AND PASSED IN COMVER
      IF( CON(3).NE.0.0 ) THEN
         NUMMAX=NINT(CON(3)*3600./CON(1)/2.)
         NUMSUM=-NUMMAX-1
         PRINT *,' DO GSM DIGITAL FILTER INITIALIZATION '
         CALL DFINI(0,CON(3),CHOUR,SOLSEC)
      ELSE
        NUMMAX=0
        NUMSUM=-1
      ENDIF
      KDT=1
      INISTP=0
C
      IF(IBRAD.NE.1) THEN
        CALL GETRAD(NRADR,Q,QM,SFCNSW,SFCDLW,COSZEN,SDEC,CDEC,SLAG,
     1              SWH,HLW)
      ENDIF
C
      CALL INDDIA
      CALL ZERDIA(FHOUR)
C-WAV IF(DTWAVE.GT.0.) THEN
C-WAV HSTR=FHOUR
C-WAV USTRGG=0.
C-WAV VSTRGG=0.
C-WAV ENDIF
      IF(INI.NE.0)THEN
      ISAVE=0
      NANLH=81
      NGESH=80
      NGEST=82
      NGESTH=83
      IF(INI.EQ.2.AND.IFGES.EQ.1)CALL DIABH(NGES,NGESH,NSTEP,INI,N1)
      IF(             IFGES.EQ.1)CALL GEST(NGES,NGEST,N1)
      IF(INI.EQ.2)               CALL DIABH(N1  ,NANLH,NSTEP,INI,N1)
      CALL DOINI(N1,NANLH,IFGES,NGEST,NGESH,NGESTH,MODS,NITER,NNMOD,INI)
      IF(NUM(13).EQ.0) GO TO 5
      CALL TWRITE(NSIGI,FHOUR,IDATE,Z,Q,TE,DI,ZE,RQ,SL,SI,GZ,Z00,N1)
      WRITE(NSIGI)GESHEM
      REWIND NSIGI
5     CONTINUE
      CALL ZERDIA(FHOUR)
C-WAV IF(DTWAVE.GT.0.) THEN
C-WAV HSTR=FHOUR
C-WAV USTRGG=0.
C-WAV VSTRGG=0.
C-WAV ENDIF
      CALL STEP1(JUNK1,JUNK1,0,INI,JUNK1,SOLSEC)
      ELSE
      IF(FHOUR.EQ.0.)CALL STEP1(N1,N1,1,INI,N1,SOLSEC)
      IF(FHOUR.NE.0.)CALL STEP1(N1,N2,1,INI,JUNK1,SOLSEC)
      ENDIF
C DFINI : CALL AFTER STEP1
      IF( CON(3).NE.0.0 ) CALL DFINI(1,CON(3),CHOUR,SOLSEC)
      LIMLOW=LIMLOW-NUMMAX
      IF(FHOUR.EQ.0.) KDT=1
      IF(FHOUR.EQ.0.)
     &CALL GLOOPZ(-1,NZNLI,0)
      IF(FHOUR.EQ.0.)
     &  CALL WRIDIA (FHOUR,FHOUR,IDATE,SL,COLRAB,SLMSK,
     &               TSEA,SMC,SHELEG,STC,TG3,CANOPY,
     &               ZORL,GESHEM,BENGSH,DUSFC,DVSFC,DTSFC,DQSFC,
     &               FLUXR,CVAVG,ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     &               NDGI)
C...............................................................
C...      SMOOTH START
C...............................................................
      DELTIM=CON(1)
      MAXSTP=NUM(7)
      ISTEPS=NUM(8)
      XHOUR=SHOUR
      INISTP=0
      TSTEP0=TIMEF()*0.001
81    FORMAT(1H ,'KDT IN MAIN=',I3)
      DTHR = DELTIM/3600. E 0
      HDTHR = 0.5 * DTHR
      DO 20000 ISTEP=1,ISTEPS
C................................................
C...        TIME LOOP
C................................................
      CALL BMCM(TOV,P1,P2,H1,H2,DEL,CI,BM,CM,DELTIM,SV,AM)
      CALL GSICDF(AM,BM,DELTIM,TOV,SV,SL,TE)
      IF(NPOINT.GT.0) THEN
        ISAVE = 1
        ITNUM = 1
        IF(FHOUR.EQ.0.) THEN
          IF(ISTEP.EQ.1) THEN
           IF (IKFREQ.GT.1) ISAVE = 0
           IF (IKFREQ.EQ.1) ITNUM = 2
          END IF
        END IF
      END IF
      DO 10000 JDT=LIMLOW,MAXSTP
      KDT=JDT
      PRINT 81,KDT
      LASTEP=KDT.EQ.MAXSTP
C     CALL RMSGT( Q, DI, TE, ZE,DEL,RQ)
      CALL GLOOPR
      SHOUR=SHOUR+DELTIM
      XHOUR=XHOUR+DELTIM
      CHOUR=SHOUR/3600. E 0
      RHOUR=FHOUR+CHOUR
C     IF(ENDHOUR.GT.0..AND.RHOUR.GE.ENDHOUR) THEN
C       PRINT "(/' FORECAST DONE. RHOUR,ENDHOUR=',2F6.1)",RHOUR,ENDHOUR
C       STOP 'TOOSOON'
C     ENDIF
      IHOUR=CHOUR+0.5 E 0
      CHOUR=IHOUR
      THOUR=FHOUR+CHOUR
      CALL GLOOPA
C...
      CALL SICDIF(DIM,TEM,QM,X,Y,Z,AM,BM,TOV,SV,DELTIM,ULN,VLN)
      CALL DELDIF(RT,W,DELTIM,QM,SL,X,Y)
      DO 25500 J=1, 4032
      QMM=QM(J)
      QM(J)=Q(J)
       Q(J)=Z(J)
       Z(J)=QMM
25500 CONTINUE
      CALL FILTR1(TEM,TE,DIM,DI,ZEM,ZE,RM,RQ,FILTA)
C
C...  SET SWITCH FOR SAVING KUO DATA (FOR INTERACTIVE CLOUDS)..
      CVMOD=AMOD(SOLHR+DTHR,DTCVAV)
      IF(CVMOD.LT.HDTHR.OR.CVMOD.GE.DTCVAV-HDTHR) THEN
        CLSTP=MIN(DTCVAV,SHOUR/3600.)
      ELSEIF(CLSTP.GT.0.) THEN
        CLSTP=0.
      ELSE
        CLSTP=-10.
      ENDIF
      CALL GLOOPB
      CALL DAMPUX(X,W,Y,RT,DELTIM,ULN,VLN,SPDMAX)
      CALL FILTR2(TEM,TE,Y,DIM,DI,X,ZEM,ZE,W,RM,RQ,RT,FILTA)
C-WAV IF(DTWAVE.GT.0.) CALL GWAVE(RHOUR,LASTEP)
C
C DFINI : CALL DIGITAL FILTER INITIALIZATION EVERY STEP IF CON(3).GT.0.0
      IF( CON(3).NE.0.0 ) CALL DFINI(1,CON(3),CHOUR,SOLSEC)
C
C  ADVANCE SOLHR
C
      SOLSEC=SOLSEC+DELTIM
      SOLHR=SOLSEC/3600. E 0
      IDAY=SOLHR/24. E 0
      SOLHR=SOLHR-IDAY*24. E 0
C..... FOR GRID POINT DIAG ADVANCE ITNUM, IF PROPER TIME, AND SET ISAVE
      IF(NUMSUM.LT.0) THEN
      IF (IKFREQ.GT.1) THEN
       IMODK = MOD(JDT,IKFREQ)
       ISAVE = 0
       IF (IMODK.EQ.0) THEN
        ISAVE = 1
        ITNUM = ITNUM + 1
       END IF
      ELSE
       ISAVE = 1
       ITNUM = ITNUM + 1
      END IF
      ELSE
       ISAVE = 0
      END IF
C
C  CHECK FOR INTERMEDIATE OUTPUT
C
c     wne 
c     IF(KSOUT.GT.0.AND.MOD(KDT,KSOUT).EQ.0.AND.KDT.NE.MAXSTP) THEN
      IF(KSOUT.GT.0) then
      if (MOD(KDT,KSOUT).EQ.0.AND.KDT.NE.MAXSTP) THEN
      KSOUT=0
      XHOUR=0. E 0
C  WRITE INTERMEDIATE ASFC FILE
      CALL FIXIO(THOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     1            CV,CVB,CVT,SLMSK,F10M,CANOPY,1,NFLIP,NFLPS)
C  WRITE INTERMEDIATE SIGMA FILE
      CALL TWRITE(NSIGS,THOUR,IDATE,Z,Q,TE,DI,ZE,RQ,SL,SI,GZ,Z00,N1)
      CALL ROWSEP(GESHEM)
      WRITE(NSIGS)GESHEM
      CALL ROW1NS(GESHEM)
      REWIND NSIGS
C  WRITE INTERMEDIATE SIGMA GRID FILE
      CALL GLOOPZ(0,-1,0)
      ENDIF
      endif
10000 CONTINUE
C................................................
C...       TIME LOOP
C................................................
      CALL RMSGT(Q,DI,TE,ZE,DEL,RQ)
      PRINT 102,DELTIM,CHOUR
102   FORMAT(1H0,'STEP=',E10.2,2X,'FCST SEGMENT OF ',E10.2,' H')
      CALL TWRITE(N4,THOUR,IDATE,Z,Q,TE,DI,ZE,RQ,SL,SI,GZ,Z00,N1)
      CALL ROWSEP(GESHEM)
      WRITE(N4)GESHEM
      CALL ROW1NS(GESHEM)
      REWIND N4
      IHOUR=THOUR+0.5 E 0
      MOD12=MOD(IHOUR,12)
      PRINT 107,MOD12
107   FORMAT(1H ,'MOD12=',I2)
      LIMLOW=1
      IF(NPOINT.GT.0) THEN
C...      NOTE, THAT IN SEVERAL SCENERIOS, ITNUM=ITNUM+1 AT THE
C           BOTTOM OF THE 10000 LOOP, SO UNDO IT
       IF (IKFREQ.GT.1) THEN
         IF (IMODK.LE.0) THEN
           ITNUM = ITNUM - 1
         END IF
       ELSE
         ITNUM = ITNUM - 1
       END IF
       PRINT 1047,ITNUM,NPOINT
 1047  FORMAT(1H0,I6,' STEPS OF KEN(CAMPANA) GRIDPT DATA SAVED FOR ',
     1            I5,' POINTS')
C...    NOTE : NOTHING SPECIAL DONE FOR OUTBOARD RADIATION (IBRAD NE 1)
C          IN THIS CASE, TO GET THE RADIATION,CLDS INTO KEN PTS,
C          SOME WORK NEEDS TO BE DONE IN GETRAD....K.A.C.
       DO 730 J=1,NPOINT
        DO 730 K=1,ITNUM
C...      IF OLR.LE ZERO,THEN RADIATION FIELDS HAVE NOT BEEN FILLED
C           FOR THIS TIMESTEP, SO CARRY THE PREVIOUS DATA FORWARD
         IF (SVDATA(50,J,K).LE.0.) THEN
          DO 710 I=25,27
           SVDATA(I,J,K) = SVDATA(I,J,K-1)
  710     CONTINUE
          DO 720 I=41,58
           SVDATA(I,J,K) = SVDATA(I,J,K-1)
  720     CONTINUE
         END IF
  730  CONTINUE
       WRITE(NGPKEN) LAB
       idate4(1) = idate(1)
       idate4(2) = idate(2)
       idate4(3) = idate(3)
       idate4(4) = idate(4)
       WRITE(NGPKEN) FHOUR,idate4,SI,SL
c      WRITE(NGPKEN) FHOUR,IDATE,SI,SL
       itmp(1) = NVRKEN
       itmp(2) = NPTKEN
       itmp(3) = NSTKEN
       itmp(4) = NPOINT
       itmp(5) = ITNUM
       WRITE(NGPKEN) itmp
c      WRITE(NGPKEN) NVRKEN,NPTKEN,NSTKEN,NPOINT,ITNUM

       DO 333 J=1,NPOINT
        WRITE(NGPKEN) ((SVDATA(I,J,K),K=1,ITNUM),I=1,NVRKEN)
  333  CONTINUE
       REWIND NGPKEN
      ENDIF
20000 CONTINUE
       TSTEP=TIMEF()*0.001-TSTEP0
       NSTEPS=ISTEPS*(MAXSTP-LIMLOW+1)
       PRINT*,' TIME, STEPS, TIME PER STEP: ',TSTEP,NSTEPS,TSTEP/NSTEPS
      CALL TWRITE(N3,THOUR,IDATE,Z,QM,TEM,DIM,ZEM,RM,SL,SI,GZ,Z00,N1)
      CALL ROWSEP(GESHEM)
      WRITE(N3)GESHEM
      CALL ROW1NS(GESHEM)
      REWIND N3
C  CREATE SPECIAL DIAGNOSTIC FIELDS
      INISTP = 3
      CALL GLOOPZ(0,NZNLF,NSFCF)
C... WRITE FIXED FIELDS FOR RADIATION PROG. TO DISK...
      CALL FIXIO(THOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     1            CV,CVB,CVT,SLMSK,F10M,CANOPY,1,NFLIP,NFLOP)
        CALL WRIDIA (FHOUR,RHOUR,IDATE,SL,COLRAB,SLMSK,
     1               TSEA,SMC,SHELEG,STC,TG3,CANOPY,
     1               ZORL,GESHEM,BENGSH,DUSFC,DVSFC,DTSFC,DQSFC,
     1               FLUXR,CVAVG,ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     1               NDGF)
      call w3tage('cdas-mrf')
      STOP
      END
      SUBROUTINE STEP1(N1,N2,ITREAD,INI,NANL,SOLSEC)
C....
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C...SOF INCLUDE..........................................
C  FORECAST SELECTION PARAMETERS
      COMMON/COMCON/ CON(1700),NUM(1700)
      DIMENSION IDSAVE(4)
      PRINT 9876,N1,N2,ITREAD,FHOUR
9876  FORMAT(1H ,'N1,N2,ITREAD,FHOUR IN STEP1',3(I4,1X),F6.2)
      IF(ITREAD.EQ.0)GO TO 2000
      CALL TREAD(N1,FHOUR,IDATE,GZ,QM,TEM,DIM,ZEM,RM,SL,SI,Z00)
      REWIND N1
      PRINT 9877,N1,ITREAD,FHOUR
9877  FORMAT(1H ,'N1,ITREAD,FHOUR AFTER TREAD',2(I4,1X),F6.2)
      CALL RMSGT(QM,DIM,TEM,ZEM,DEL,RM)
      CALL TREAD(N2,FHOUR,IDATE,GZ,Q,TE,DI,ZE,RQ,SL,SI,Z00)
      REWIND N2
      PRINT 9878,N2,ITREAD,FHOUR
9878  FORMAT(1H ,'N2,ITREAD,FHOUR AFTER TREAD',2(I4,1X),F6.2)
      CALL RMSGT(Q,DI,TE,ZE,DEL,RQ)
C     SET INITIAL SOLHR
      SOLHR=FHOUR+IDATE(1)
      IDAY=SOLHR/24. E 0
      SOLHR=SOLHR-IDAY*24. E 0
      SOLSEC=SOLHR*3600.
2000  CONTINUE
C............................................................
C............................................................
      DO 22000 L=1, 47
      DO 22000 J=1, 384
      GESHEM(J,L)=0. E 0
      TMPMAX(J,L) = 0.
      TMPMIN(J,L) = 1.E10
22000 CONTINUE
C..
C....READ FIXED FIELDS FROM FIXFLD PROG............
C..
      CALL FIXIO(FHOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     &           CV,CVB,CVT,SLMSK,F10M,CANOPY,0,NFLIP,NFLOP)
C
C  EVENTHOUGH CV, CVB, CVT ARE IN THE ARGUMENT, THEY ARE NOT READ IN
C
C ..............................................................
      CALL ZERFLX(DUSFC,DVSFC,DTSFC,DQSFC,DSWSFC,DLWSFC,
     1 BENGSH,GFLUX,RUNOFF,EP,CLDWRK,
     2 DUGWD,DVGWD,PSMEAN,SNOWFALL,SNOWEVAP,SNOWMELT,
     3 DTFLUX)
C ..............................................................
C...  FIRST STEP IS FORWARD. THEN 2 LEAPFROGS, DOUBLING DELTIM.
C ..............................................................
      SHOUR=0.
      IF(FHOUR.NE.0.0.AND.INI.EQ.0) RETURN
      NFSTEP=2
      DELTIM=CON(1)/2. E 0**2
      INISTP=1
      ISAVE=1
      IF(ITREAD.EQ.1) THEN
        IF(N1.EQ.N2 .AND. N2.NE.NANL) THEN
          SAVFHR=FHOUR
          IDSAVE=IDATE
          Z=Q
          W=TE
          X=DI
          Y=ZE
          RT=RQ
          REWIND NANL
          CALL TREAD(NANL,FHOUR,IDATE,GZ,Q,TE,DI,ZE,RQ,SL,SI,Z00)
          REWIND NANL
        ENDIF
        CALL GLOOPR
        IF(N1.EQ.N2 .AND. N2.NE.NANL) THEN
          FHOUR=SAVFHR
          IDATE=IDSAVE
          Q=Z
          TE=W
          DI=X
          ZE=Y
          RQ=RT
        ENDIF
      ENDIF
      DO 5000 JDT=1,2
      IF (JDT.GT.1) INISTP=0
      IF (JDT.GT.1) ISAVE = 0
      KDT=JDT
      PRINT 102,KDT
102   FORMAT(1H ,'KDT IN FIRST STEP=',I6)
      CALL BMCM(TOV,P1,P2,H1,H2,DEL,CI,BM,CM,DELTIM,SV,AM)
      CALL GSICDF(AM,BM,DELTIM,TOV,SV,SL,TE)
      CALL GLOOPA
      CALL RMSGT(Z ,X  ,Y  ,W  ,DEL,RT)
      CALL SICDIF(DIM,TEM,QM,X,Y,Z,AM,BM,TOV,SV,DELTIM,ULN,VLN)
      CALL DELDIF(RT,W,DELTIM,QM,SL,X,Y)
      DO 3 J=1, 4032
      Q(J)=Z(J)
3     CONTINUE
      CALL GLOOPB
      CALL DAMPUX(X,W,Y,RT,DELTIM,ULN,VLN,SPDMAX)
      DO 5 K=1, 28
      DO 4 J=1, 4032
      DI(J,K)=X(J,K)
      ZE(J,K)=W(J,K)
      TE(J,K)=Y(J,K)
4     CONTINUE
5     CONTINUE
      DO 7 K=1, 28
      DO 8 J=1, 4032
      RQ(J,K)=RT(J,K)
8     CONTINUE
7     CONTINUE
      DELTIM=DELTIM*2. E 0
5000  CONTINUE
      SOLSEC=SOLSEC+DELTIM
      SOLHR=SOLSEC/3600. E 0
      SHOUR=DELTIM
C...............................................................
C...  FIN SMOOTH START
C...............................................................
      DELTIM=CON(1)
      LIMLOW=2
      RETURN
      END
      SUBROUTINE ZERFLX(DUSFC,DVSFC,DTSFC,DQSFC,DSWSFC,DLWSFC,
     1 BENGSH,GFLUX,RUNOFF,EP,CLDWRK,
     2 DUGWD,DVGWD,PSMEAN,SNOWFALL,SNOWEVAP,SNOWMELT,
     3 DTFLUX)
      DIMENSION DUSFC( 384 , 47 ),DVSFC( 384 , 47 )
      DIMENSION DTSFC( 384 , 47 ),DQSFC( 384 , 47 )
      DIMENSION DSWSFC( 384 , 47 ),DLWSFC( 384 , 47 )
      DIMENSION BENGSH( 384 , 47 ),GFLUX( 384 , 47 )
      DIMENSION RUNOFF( 384 , 47 ),EP( 384 , 47 )
      DIMENSION CLDWRK( 384 , 47 )
      DIMENSION DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      DIMENSION PSMEAN( 384 , 47 )
C 05/31/96 MK 
      DIMENSION SNOWFALL( 384 , 47 )
      DIMENSION SNOWEVAP( 384 , 47 )
      DIMENSION SNOWMELT( 384 , 47 )
      DO 23500 L=1, 47
      DO 23500 J=1, 384
       DUSFC(J,L)=0. E 0
       DVSFC(J,L)=0. E 0
       DTSFC(J,L)=0. E 0
       DQSFC(J,L)=0. E 0
      DSWSFC(J,L)=0. E 0
      DLWSFC(J,L)=0. E 0
      BENGSH(J,L)=0. E 0
       GFLUX(J,L)=0. E 0
       RUNOFF(J,L) = 0. E 0
       EP(J,L) = 0. E 0
       CLDWRK(J,L) = 0. E 0
       DUGWD(J,L)=0. E 0
       DVGWD(J,L)=0. E 0
       PSMEAN(J,L)=0. E 0
C 05/31/96 MK
       SNOWFALL(J,L)=0. E 0
       SNOWEVAP(J,L)=0. E 0
       SNOWMELT(J,L)=0. E 0
23500 CONTINUE
C--------------------------------------------------------------
      DTFLUX = 0. E 0
      RETURN
      END
      SUBROUTINE MLTFLX(FAC,DUSFC,DVSFC,DTSFC,DQSFC,DSWSFC,DLWSFC,
     1 BENGSH,GFLUX,
     2 DUGWD,DVGWD,PSMEAN,
     3 DTFLUX)
      DIMENSION DUSFC( 384 , 47 ),DVSFC( 384 , 47 )
      DIMENSION DTSFC( 384 , 47 ),DQSFC( 384 , 47 )
      DIMENSION DSWSFC( 384 , 47 ),DLWSFC( 384 , 47 )
      DIMENSION BENGSH( 384 , 47 ),GFLUX( 384 , 47 )
      DIMENSION DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      DIMENSION PSMEAN( 384 , 47 )
      DO 23500 L=1, 47
      DO 23500 J=1, 384
       DUSFC(J,L)=FAC*DUSFC(J,L)
       DVSFC(J,L)=FAC*DVSFC(J,L)
       DTSFC(J,L)=FAC*DTSFC(J,L)
       DQSFC(J,L)=FAC*DQSFC(J,L)
      DSWSFC(J,L)=FAC*DSWSFC(J,L)
      DLWSFC(J,L)=FAC*DLWSFC(J,L)
      BENGSH(J,L)=FAC*BENGSH(J,L)
       GFLUX(J,L)=FAC*GFLUX(J,L)
       DUGWD(J,L)=FAC*DUGWD(J,L)
       DVGWD(J,L)=FAC*DVGWD(J,L)
       PSMEAN(J,L)=FAC*PSMEAN(J,L)
23500 CONTINUE
      DTFLUX=FAC*DTFLUX
C--------------------------------------------------------------
      RETURN
      END
      SUBROUTINE GETCON(N1,N2,NGES,NRADR,NRADF,NNMOD,
     1 N3,N4,NFLPS,NSIGI,NSIGS,NZNLI,NSFCF,NSFCFI,NZNLF,
     1 NSGRI,NSGRF,NSGRS,
     2 NDGI,NDGII,NDGF,NDGFI,NGPKEN,
     3 MODS,NITER,INI,NSTEP,NFILES,
     4 KSOUT,IFGES,IBRAD)
C....
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C...SOF INCLUDE..........................................
C  FORECAST SELECTION PARAMETERS
      COMMON/COMCON/ CON(1700),NUM(1700)
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
C-WAV COMMON/COMWAV/ HSTR,USTRGG( 384 , 47 ),VSTRGG( 384 , 47 )
      NAMELIST/NAMSMF/ CON,NUM,LABL,ENDHOUR,LDEBUG,FILTA,ICEN,IGEN,ICEN2
       LIMLOW=1
       JCAP= 62
       LEVS= 28
       FILTA= 0.92
       DT80=939.14 E 0
       MODS=4
       NITER=2
       PERCUT=27502. E 0
       ICEN=7
       IGEN= 80
       ICEN2=0
C..........................................
C
C  DEFINE UNIT NUMBERS
C
C  INPUT
      N1    = 11
      N2    = 12
      NGES  = 13
      NFLIP = 14
      NRADR = 21
      NRADF = 22
      NNMOD = 23
      NMTNV = 24
C  OUTPUT
      N3    = 51
      N4    = 52
      NFLOP = 53
      NFLPS = 54
      NSIGI = 55
      NSIGS = 56
      NSGRI = 57*0
      NSGRF = 58*0
      NSGRS = 59*0
      NZNLI = 61
      NSFCF = 63
      NSFCFI= 73
      NZNLF = 64
      NDGI  = 65
      NDGII = 75
      NDGF  = 66
      NDGFI = 76
      NGPKEN= 67
C  WORK FILES
      NR2DDA = 98
C....
C.... CMEAN,CLSTP CONTROL TIME AVERAGING OF CONVECTIVE CLDS IN KUO
C....
      CLSTP=99.
C....
C...  AVERAGING INTERVAL FOR CONV CLD APPROX 3 HRS (NUM OF TIMESTEPS)
C....
      READ(NMTNV) HPRIME
      CALL ROW1NS(HPRIME)
      PRINT 100, JCAP, LEVS
100   FORMAT (1H0,'GETCON ',I3,I3,'CREATED APRIL 92')
      FILTB =(1. E 0-FILTA) * 0.5 E 0
      CALL SETSIG(CI,SI,DEL,SL,CL,RPI,N1)
      SL1=SL(1)
      CALL AMHMTM(DEL,RPI,SV,P1,P2,AM,HM,TM)
      CALL GLATS( 47 , COLRAD, WGT, WGTCS, RCS2)
      CALL GLATS( 47 , COLRAB, WGB, WGBCS, RBS2)
      CALL EPSLON(EPS,  62 )
      DO 3 LEV=1, 28
      TOV(LEV)=300. E 0
3     CONTINUE
C
C     RPI(K) = (SL(K+1)/SL(K))**RK  FROM SETSIG  K=1... 27
C
      DO 9 K=1, 27
      RPIREC(K) = 1. E 0/RPI(K)
9     CONTINUE
      DO 10 K=1, 28
      RDEL2(K)=0.5 E 0/DEL(K)
10    CONTINUE
      IND=0
      DO 7 LL=1, 63
      N=LL-2
      MAXI= 63 +1-LL
      DO 6 I=1,MAXI
      IND=IND+1
      N=N+1
      FACT=FLOAT(N*(N+1))
      SNNP1(IND*2-1) = FACT
      SNNP1(IND*2  ) = FACT
6     CONTINUE
7     CONTINUE
      DLON = 2. E 0 *  3.141593E+0  /  192 . E 0
      DO 20 I=1, 192
        XLON(I) = DLON * (I-1)
  20  CONTINUE
      DO 25 J=1, 47
        SINLAT(J) = COS(COLRAD(J))
  25  CONTINUE
      DO 30 J=1, 47
        SINLAB(J) = COS(COLRAB(J))
        COSLAB(J) = SQRT(1. E 0 - SINLAB(J)*SINLAB(J))
  30  CONTINUE
C    INITIALIZE CV, CVT AND CVB
      DO 40 J=1, 47
      DO 40 I=1, 384
        CV (I,J) = 0. E 0
        CVT(I,J) = 0. E 0
        CVB(I,J) = 100. E 0
  40  CONTINUE
C
      DO 1 I=1,28
1     NUM(I)=0
      NUM( 1) = 11
      NUM( 2) = 11
      NUM( 3) = 51
      NUM( 4) = 52
      NUM( 5) =  0
      NUM( 6) =  1
      NUM( 7) =  0
      NUM( 8) =  1
      NUM( 9) =  8
      NUM(10) = 15
      NUM(11) =  1
      NUM(12) = 23
      NUM(13) =  1
      NUM(14) = 55
      NUM(15) =  0
      NUM(16) = 11
      NUM(17) = 51
      NUM(18) =  4
      NUM(19) =  2
      NUM(20) =  6
      NUM(21) = 15
      NUM(22) = 10
      NUM(23) =  1
      NUM(24) =  0
      NUM(25) =  0
      NUM(26) =  0
      NUM(27) =  0
      NUM(28) =  0
CTEMPORARILY SET SOME CONS AND NUMS (SETC BLOCK DATA NOT YET INCLUDED)
      NUM(1)=0
      CON(1)=0.
      CON(3)=0.        ! GSM DFINI INITIALIZATION IN HOUR OR NOT (0.)
      CON(6)=0.
      CON(7)=12.
      CON(8)=3.
C-WAV CON(10)=0.
      NUM(799)=1
      NUM(1023)=0
      NUM(50)=0
      ENDHOUR=0.
      write(*,*) '>> read namelist icen,icen2,igen=',icen,icen2,igen
      READ(5,NAMSMF,END=199)
      GOTO 202
CTEMPORARILY READ FROM ORIGINAL INPUT CARD IF NAMELIST IS MISSING
199   CONTINUE
      REWIND 5
      READ(5,200)(NUM(I),I=1,28)
  200 FORMAT(28I2)
202   CONTINUE
      write(*,*) '<< read namelist icen,icen2,igen=',icen,icen2,igen
C
C  TEMPORARILY RESET SOME CONS AND NUMS
C
      READ(N1)
      READ(N1) FHOUR
      REWIND N1
      IF(FHOUR.EQ.0.) THEN
        IF(NUM(5).EQ.-1) NUM(5)=2
        IF(NUM(5).EQ.-2) NUM(5)=1
      ELSE
        IF(NUM(5).EQ.-1) NUM(5)=0
        IF(NUM(5).EQ.-2) NUM(5)=0
      ENDIF
      IF(CON(1).LE.0.) CON(1)=DT80 *80./JCAP
      IF(NUM(7).LE.0) THEN
        NUM(7)=3600.*CON(7)/CON(1)+0.99
        CON(1)=NINT(3600.*CON(7)/NUM(7))
      ELSE
        CON(7)=NUM(7)*CON(1)/3600.
      ENDIF
      IF(NUM(1023).EQ.0) NUM(1023)=NUM(7)
      IF(NUM(1).GT.0) CON(6)=NUM(1)
C
C....
C.... DTSWAV IS INTERVAL BETWEEN SHORT-WAVE HEATING CALCULATIONS
C.... DTLWAV IS INTERVAL BETWEEN LONG-WAVE HEATING CALCULATIONS
C....
      DTSWAV=CON(8)
      DTLWAV=CON(8)
      COWAVE=0.
      DTWAVE=0.
C-WAV COWAVE=CON(10)
C-WAV DTWAVE=ABS(CON(10))
C
C>YH  CVMINT - MAXIMUM CONV. CLD ACCUMULATION TIME INTERVAL IN HOURS
C....          CURRENTLY HARDWIRED AS 3 HOURS, BUT MAY BE AS AN
C....          INPUT VARIABLE.
      CVMINT = 3. E 0
      DTCVAV = AMIN1(CVMINT, AMAX1(DTSWAV,DTLWAV))
C
C
      PRINT 201,(NUM(I),I=1,28)
201   FORMAT(1H0,'NUM=',28(1X,I2))
      PRINT *,'CON'
      PRINT *,(CON(I),I=1,10)
C
      IF(CON(6).GT.0) THEN
        KSOUT=3600.*CON(6)/CON(1)+0.5
      ELSE
        KSOUT=0
      ENDIF
C
      IF(NUM(18).NE.0)MODS=NUM(18)
      IF(NUM(19).NE.0)NITER=NUM(19)
      INI=NUM(5)
C TEST IF A GUESS FILE IS AVAILABLE (IF SO ,SET IFGES=1)
      IFGES=0
      IF(INI.NE.0) THEN
        REWIND NGES
        READ(NGES,END=6782)
        IFGES=1
 6782   CONTINUE
        REWIND NGES
      ENDIF
      IBRAD=1
      REWIND NRADR
      READ(NRADR,END=6792)
      IBRAD=0
 6792 CONTINUE
      REWIND NRADR
      NSTEP=NUM(6)
      IF(NSTEP.EQ.1)NSTEP=7
      NFILES=NUM(11)
      DK=NUM(9)
      DK=DK*(10. E 0)**NUM(10)
      TK=NUM(20)
      TK=TK*(10. E 0)**NUM(21)
      IF(NUM(20).EQ.0)TK=DK
      PRINT 105,CON(1),FILTA,DK,TK
105   FORMAT(1H ,5X,F5.0,1X,F4.2,1X,E8.2,1X,E8.2)
      NPOINT=NUM(1300)
      ISAVE=0
      ITNUM=0
      IF(NPOINT.NE.0) THEN
        ISAVE=1
        ITNUM=1
        ISSHRT=NUM(1301)
        ILSHRT=NUM(1302)
        IKFREQ=NUM(1303)
        CALL KENPRE(CON,COLRAD, 192 , 47 ,NFLIP)
      ENDIF
      N50UFL=NUM(50)
CC
CC    CALL  CMPIND  TO SET COMMON/COMIND/ FOR SUBS. TRANSI,TRANSO.
      CALL  CMPIND
CC
      CALL GRDWAT
      CALL GSPECU
      CALL GPLN2I
      CALL EPSILO(EPSI, 62 )
      CALL GGOZRM(EPSI)
      CALL GFT 192
      CALL GFT 192
      CALL GCOSZM(DTSWAV)
      CALL GRDDF
      CALL GRDKT
      RETURN
      END
      SUBROUTINE ZONZER(FLN)
        DIMENSION FLN(2, 2016 )
        INC= 63
        I=1
        DO 1 LL=1, 63
C       PRINT 100,I,INC
C100    FORMAT(1H ,'I INC ',I4,2X,I4)
        FLN(2,I)=0.
        I=I+INC
        INC=INC-1
1       CONTINUE
        RETURN
        END
      SUBROUTINE KENPRE(CON,COLRAD,IDIM,JDIM2,NFLX)
C....
C  THIS ROUTINE COMPUTES THE KENDATA GRID POINT INDICES IGRD,JGRD FOR
C   FCST GRID AND IGRDR,JGRDR FOR RADIATION GRID, FOR THE
C   NPOINT POINTS,GIVEN THE LONGITUDE AND LATITUDE OF SAME (CON).
C   COLRAD IS THE COLATITUDE OF THE FCST GRID (DIMENSIONED JDIM2,WHICH
C   IS HALF OF THE TOTAL LATITUDINAL GRID POINTS),
C....
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
      DIMENSION COLRAD(JDIM2),CON(1700)
      DIMENSION ALAT(NPTKEN),ALON(NPTKEN),KPOI(NPTKEN)
      DIMENSION SLIMSK( 192 , 94 ),BLATF( 94 ),BLATR( 62 )
      DIMENSION COLRAR( 31 ),WGR( 31 ),WGRCS( 31 ),RRS2( 31 )
      integer*4 id1, id2, id3, id4
      DATA PI/ 3.141593E+0 /
C....   BEGIN HERE..
      DO 2 K=1,NSTKEN
       DO 2 J=1,NPTKEN
        DO 2 I=1,NVRKEN
         SVDATA(I,J,K) = 0.
    2 CONTINUE
C--- GET SLMSK BECAUSE WE WISH TO GET NEAREST POINT
C       OF SAME SFC TYPE...THIS ARRAY NOT AVAILABLE TIL AFTER STEP1
C       IF WE WERE NOT TRYING TO COVER OURSELVES FOR OUT-BOARD RADI8
C       ,THEN THIS CODE COULD BE CALLED FROM STEP1...
      REWIND NFLX
      READ(NFLX)
      READ(NFLX) GHOUR,ID1,ID2,ID3,ID4
   99 FORMAT(1H ,'FHOUR, IDATE=',F6.2,2X,4(1X,I4))
      PRINT *,'IN KENPRE READ SLMSK FROM UNIT=',NFLX
      PRINT 99,GHOUR, ID1,ID2,ID3,ID4
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
C.....  SKIP CV, CVB, CVT, ALBEDO
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
      READ(NFLX)
      READ(NFLX) SLIMSK
      REWIND NFLX
CCCC           CALL ROW1NS(SLIMSK)
      CALL GLATS ( 31 , COLRAR, WGR, WGRCS, RRS2)
      DXF = 360. /  192
      DXR = 360. /  128
      ILONF =  192
      ILONR =  128
      JLATG2 =  47
      JLATR2 =  31
      JLATG =  94
      JLATR =  62
      JFP1 = JLATG2 + 1
      JRP1 = JLATR2 + 1
C----    GET LATITUDE OF GAUSSIAN GRIDS
      DO 3 J=1,JLATG2
        BLATF(J) =(PI /2. - COLRAD(J)) * 180. / PI
    3 CONTINUE
      BLATF(JFP1) = -BLATF(JLATG2)
      DO 4 J=1,JLATR2
        BLATR(J) =(PI /2. - COLRAR(J)) * 180. / PI
    4 CONTINUE
      BLATR(JRP1) = -BLATR(JLATR2)
C...    PUT LAT/LON INTO USEABLE ARRAYS (MAX=200),WHERE
C         NPOINT GT 0 IMPLIES NPOINT LAT/LON S IN CON AND
C           IF ABS(LAT) BETWEEN   0, 90 LOOK FOR NEAREST POINT
C                       BETWEEN 100,190 LOOK FOR NEAREST LAND POINT
C                       BETWEEN 200,290 LOOK FOR NEAREST SEA POINT
C         NPOINT LT 0 IMPLIES LAT/LON OF CENTER OF REGION ,ONLY..
C                    LAT,LON=CON(1301),CON(1501)
C           LET XY=ABS(NPOINT) AND ALWAYS BE 2 DIGITS
C                              AND DO NOT DIFFERENTIATE LAND/SEA,
C             THEN X BETWEEN 1,9 MEANS CREATE ARRAY OF EVERY X POINTS
C                   (I.E. X=1 MEANS EVERY POINT,X=3 MEANS EVERY 3RD,..
C              AND Y BETWEEN 0,9 MEANS CREATE (Y+1,Y+1) ARRAY..
C           THUS XY CAN HAVE VALUES 10-99
C....
      NPUTE = -1
      IF (NPOINT.LT.0) THEN
       XY = ABS(NPOINT)
       IF (XY.LT.10..OR.XY.GT.99.) THEN
        NPUTE = 0
        PRINT 98,NPOINT
   98   FORMAT(1H ,' NUM(1300)=',I6,'OUT OF -RANGE, SO SET=1')
        NPOINT = 1
       ELSE
        NPOINT = 1
        ISKP = XY/10
        IY   = XY - ISKP*10 + 1
        PRINT 97,IY,IY,ISKP
   97   FORMAT(1H ,' PREPARE REGIONAL (',I2,',',I2,') ARRAY - EVERY',
     1             I2,' POINTS')
        NPUTE = IY * IY
       END IF
      END IF
      DO 5 K = 1, NPOINT
       ILS = -1
       YLAT = ABS(CON(K+1300))
       IF (YLAT.GE.100.AND.YLAT.LE.190.) THEN
C...     LAND POINT IS DESIRED...
        ILS = 1
        SGN = CON(K+1300) / YLAT
        CON(K+1300) = YLAT-100.
        IF (SGN.LT.0.) CON(K+1300) = - (YLAT-100.)
       END IF
       IF (YLAT.GE.200.AND.YLAT.LE.290.) THEN
        ILS = 0
        SGN = CON(K+1300) / YLAT
        CON(K+1300) = YLAT-200.
        IF (SGN.LT.0.) CON(K+1300) = - (YLAT-200.)
       END IF
       XLAT = CON(K+1300)
       XLON = CON(K+1500)
       IF (NPUTE.LT.0.AND.ILS.EQ.-1) PRINT 197,K,XLAT,XLON
       IF (NPUTE.LT.0.AND.ILS.EQ.0) PRINT 198,K,XLAT,XLON
       IF (NPUTE.LT.0.AND.ILS.EQ.1) PRINT 199,K,XLAT,XLON
  197  FORMAT(1H ,' ==== STATION ',I4,' AT LATLON=',2F8.2,
     1            ' DESIRED AS NEAREST POINT')
  198  FORMAT(1H ,' ==== STATION ',I4,' AT LATLON=',2F8.2,
     1            ' DESIRED AS OCEAN PT')
  199  FORMAT(1H ,' ==== STATION ',I4,' AT LATLON=',2F8.2,
     1            ' DESIRED AS LAND PT')
       IF (NPUTE.GT.0.AND.K.GT.1) GO TO 195
        ALAT(K) = CON(K+1300)
        ALON(K) = CON(K+1500)
  195  CONTINUE
       IF (XLON.LT.0) XLON = 360. + CON(K+1500)
       IF (NPUTE.LT.0) THEN
         CALL GETIJ (XLAT,XLON,SLIMSK,BLATF,DXF,
     1               ILS,ILONF,JLATG,KI,KJ)
         ILS = -1
         CALL GETIJ (XLAT,XLON,SLIMSK,BLATR,DXR,
     1               ILS,ILONR,JLATR,KIR,KJR)
       ELSE
         ILS = -1
         CALL GETIJ (XLAT,XLON,SLIMSK,BLATF,DXF,
     1               ILS,ILONF,JLATG,KI,KJ)
         ILS = -1
         CALL GETIJ (XLAT,XLON,SLIMSK,BLATR,DXR,
     1               ILS,ILONR,JLATR,KIR,KJR)
       END IF
       IGRD(K) = KI
       JGRD(K) = KJ
       IGRDR(K) = KIR
       JGRDR(K) = KJR
       IF(NPUTE.GT.0) GO TO 5
        IF(XLAT.LT.0.) THEN
         IGRD(K) = KI + ILONF
         JGRD(K) = JLATG + 1 - KJ
         IGRDR(K) = KIR + ILONR
         JGRDR(K) = JLATR + 1 - KJR
        ENDIF
    5 CONTINUE
C....    REGIONAL BLOCK , I,J STILL IN SINGLE LATITUDE STRUCTURE..
      IF (NPUTE.GT.0) THEN
       IBACK = IY/2
C....    IF IY = 1 THE ALL WE WANT IS 1 POINT
       IF (IBACK.LE.0) THEN
         NPOINT = 1
         GO TO 59
       END IF
       ISTARF = IGRD(1) - IBACK*ISKP
       JSTARF = JGRD(1) - IBACK*ISKP
       ISTARR = IGRDR(1) - IBACK*ISKP
       JSTARR = JGRDR(1) - IBACK*ISKP
       NPOINT = 0
       DO 30 KYJ=1,IY
        DO 30 KXI=1,IY
         NPOINT = NPOINT + 1
         IGRD(NPOINT) = ISTARF + (KXI-1)*ISKP
         JGRD(NPOINT) = JSTARF + (KYJ-1)*ISKP
         IGRDR(NPOINT) = ISTARR + (KXI-1)*ISKP
         JGRDR(NPOINT) = JSTARR + (KYJ-1)*ISKP
   30  CONTINUE
       DO 32 N=1,NPOINT
         KPOI(N) = 0
         IF (JGRD(N).GT.JLATG.OR.JGRD(N).LT.1) GO TO 32
         IF (JGRDR(N).GT.JLATR.OR.JGRDR(N).LT.1) GO TO 32
         IF (IGRD(N).GT.ILONF) IGRD(N) = IGRD(N) - ILONF
         IF (IGRD(N).LT.1) IGRD(N) = IGRD(N) + ILONF
         IF (IGRDR(N).GT.ILONR) IGRDR(N) = IGRDR(N) - ILONR
         IF (IGRDR(N).LT.1) IGRDR(N) = IGRDR(N) + ILONR
         KPOI(N) = N
   32  CONTINUE
C...    SQUEEZE OUT THE OUT OF BOUNDS POINTS(KPOI=0)
       NPP = 0
       DO 33 N=1,NPOINT
        IF (KPOI(N).LE.0) GO TO 33
         NPP = NPP + 1
         IGRD(NPP) = IGRD(KPOI(N))
         IGRDR(NPP) = IGRDR(KPOI(N))
         JGRD(NPP) = JGRD(KPOI(N))
         JGRDR(NPP) = JGRDR(KPOI(N))
         IF (JGRD(NPP).GT.JLATG2) THEN
          IGRD(NPP) = IGRD(NPP) + ILONF
          JGRD(NPP) = JLATG+1-JGRD(NPP)
         END IF
         IF (JGRDR(NPP).GT.JLATR2) THEN
          IGRDR(NPP) = IGRDR(NPP) + ILONR
          JGRDR(NPP) = JLATR+1-JGRDR(NPP)
         END IF
   33  CONTINUE
       NPOINT = NPP
      END IF
C...................  DEBUG PRINT
   59 CONTINUE
      DO 60 K=1,NPOINT
       IG=IGRD(K)
       JG=JGRD(K)
       ICLND=IG
       JCLND=JG
       IF(IGRD(K).LE.ILONF) THEN
        BLAT=90.-COLRAD(JGRD(K))*180./PI
        BLON=(IGRD(K)-1)*360./ILONF
        IF(BLON.GT.180.) BLON=BLON-360.
       ELSE
        BLAT=COLRAD(JGRD(K))*180./PI-90.
        BLON=(IGRD(K)-1-ILONF)*360./ILONF
        IF(BLON.GT.180.) BLON=BLON-360.
        ICLND=IG-ILONF
        JCLND=JLATG+1-JG
       ENDIF
       WRITE(6,61) K,ALAT(K),ALON(K),BLAT,BLON
       WRITE(6,62) JGRD(K),IGRD(K),SLIMSK(ICLND,JCLND)
       WRITE(6,63) JGRDR(K),IGRDR(K)
60    CONTINUE
61    FORMAT(' KENPRE: K,ORIG LAT-LON,COMPT LAT-LON=',I4,4F8.2)
62    FORMAT('          ....JGRD,IGRD,SLMSK=',2I6,F6.1)
63    FORMAT('             ....JGRDR,  IGRDR    =',2I8)
      RETURN
      END
      SUBROUTINE GETIJ (XLAT,XLON,SLMSK,BLAT,DX,
     1                  ILS,IDM,JDM,KI,KJ)
      DIMENSION BLAT(JDM),DIST(4),KENI(4),KENJ(4)
      DIMENSION IPSORT(4),IPSKP(4)
      DIMENSION SLMSK( 192 , 94 )
      JDM2 = JDM / 2
      JDMP1 = JDM2 + 1
      IF (ABS(XLAT).GT.BLAT(1)) GO TO 70
C----    GET UPPER LEFT GAUSSIAN POINT (IA,JA) ON GRIDBOX
C          SURROUNDING THE INPUT LAT/LON POINT........
        IA = XLON/DX + 1
        IB = IA + 1
        IF (IA.GE.IDM) IB = 1
        XI = XLON/DX + 1. - IA
        DO 10 JAK=2,JDMP1
         JB = JAK - 1
         IF(ABS(XLAT).GT.BLAT(JAK)) GO TO 15
  10    CONTINUE
  15    CONTINUE
        JA = JB
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XJ = (BLAT(JA) - ABS(XLAT)) / (BLAT(JA)-BLAT(JA+1))
C       XOUT(I,LAT)   = (1-XI)* XJ   *XIN(IA,JA+1) +
CC   1                 XI *  XJ  *XIN(IB,JA+1) +
CCC  2              (1-XI)*(1-XJ)*XIN(IA  ,JA  ) +
CCCC 3               XI   *(1-XJ)*XIN(IB,JA  )
C----    SOUTHERN HEMISPHERE
        IF (XLAT.LT.0.) THEN
         JA = JDM - JA
         XJ = 1. - XJ
        END IF
CCCC    XOUT(I,JOUT+1-LAT)=(1-XI)* XJ   *XIN(IA,JA+1) +
CCC  1                 XI *  XJ  *XIN(IB,JA+1) +
CC   2              (1-XI)*(1-XJ)*XIN(IA  ,JA  ) +
C    3               XI   *(1-XJ)*XIN(IB,JA  )
C...     UPPER LEFT POINT
      DIST(1)= SQRT(XI**2+XJ**2)
      KENI(1)= IA
      KENJ(1)= JA
C...     UPPER RIGHT
      DIST(2)= SQRT((1-XI)**2+XJ**2)
      KENI(2)= IB
      KENJ(2)= JA
C...     LOWER RIGHT
      DIST(3)= SQRT((1-XI)**2+(1-XJ)**2)
      KENI(3)= IB
      KENJ(3)= JA+1
C...     LOWER LEFT
      DIST(4)= SQRT(XI**2+(1-XJ)**2)
      KENI(4)= IA
      KENJ(4)= JA+1
C---     NOW SORT THE DISTANCES (BY INDEX, SHORTEST FIRST)
      NPT = 4
      NPT1 = NPT + 1
      DO 20 KD=1,NPT
        IPSKP(KD) = 0
   20 CONTINUE
      DO 40 KD=1,NPT
        DD=100.
C---     FIND SHORTEST DIST OF THE REMAINING UNSORTED DATA...
        DO 25 KK=1,NPT
         IF(IPSKP (KK).GT.0) GO TO 25
          IF(DIST(KK).LT.DD) THEN
            DD = DIST(KK)
            JX = KK
          END IF
   25   CONTINUE
C---   STORE SORTED INDEX
        IPSORT(KD) = JX
        IPSKP (JX) = 1
   40 CONTINUE
      PRINT 102,(DIST(KK),KK=1,NPT),(IPSORT(KK),KK=1,NPT)
  102 FORMAT(1H ,' DISTANCES=',4F8.4,' SORTED INDICES=',4I4)
C---   END OF DISTANCE SORT
      XILS = ILS
      IF (ILS.LT.0) THEN
       KI = KENI(IPSORT(1))
       KJ = KENJ(IPSORT(1))
       RETURN
      END IF
      IF (ILS.EQ.0) THEN
C....     FIND NEAREST SEA POINT
       DO 45 KD=1,NPT
        II = KENI(IPSORT(KD))
        JJ = KENJ(IPSORT(KD))
        IF (SLMSK(II,JJ).LE.XILS) GO TO 46
   45  CONTINUE
C....     NO SEA POINTS SO DEFAULT TO NEAREST POINT
       PRINT 49,XLAT,XLON
   49  FORMAT(1H ,' ASKED FOR SEA POINT BUT CAN T FIND ONE FOR',
     1            ' LAT LON=',2F9.2,'..SO DEFAULT TO NEAREST')
       KI = KENI(IPSORT(1))
       KJ = KENJ(IPSORT(1))
       RETURN
   46  CONTINUE
       KI = II
       KJ = JJ
       RETURN
      END IF
      IF (ILS.EQ.1) THEN
C....     FIND NEAREST LAND/ICE POINT
       DO 55 KD=1,NPT
        II = KENI(IPSORT(KD))
        JJ = KENJ(IPSORT(KD))
        IF (SLMSK(II,JJ).GE.XILS) GO TO 56
   55  CONTINUE
C....     NO LAND POINTS SO DEFAULT TO NEAREST POINT
       PRINT 59,XLAT,XLON
   59  FORMAT(1H ,' ASKED FOR LAND SEA POINT BUT CAN T FIND ONE FOR',
     1            ' LAT LON=',2F9.2,'..SO DEFAULT TO NEAREST')
       KI = KENI(IPSORT(1))
       KJ = KENJ(IPSORT(1))
       RETURN
   56  CONTINUE
       KI = II
       KJ = JJ
       RETURN
      END IF
C...   OUTSIDE LIMIT OF GAUSSIAN POLAR ROWS SO JUST TAKE NEAREST
C        POINT WITHOUT REGARD TO LAND AND SEA
   70 CONTINUE
      IA = XLON/DX + 1
      IB = IA + 1
      IF (IA.GE.IDM) IB = 1
      XI = XLON/DX + 1. - IA
      JA = 1
      IF (XLAT.LT.0.) JA = JDM
      IF (XI.GT.0.5) THEN
       KI = IB
       KJ = JA
      ELSE
       KI = IA
       KJ = JA
      END IF
      RETURN
      END
       SUBROUTINE DFINI(ICALL,HRINI,CHOUR,SOLSEC)
C.................................................................
C.....
C
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C.....
      COMMON/INIGSM/   DTHOUR , DSHOUR, DCHOUR, DSOLSEC, TOTSUM
     2                        ,QS( 4032 )
     2  ,TES( 4032 , 28 ),RQS( 4032 , 28 )
     2  ,DIS( 4032 , 28 ),ZES( 4032 , 28 )
C
      IF(NUMSUM.GE.NUMMAX) RETURN
C
      IF( ICALL.EQ.0 ) THEN
      PRINT *,' INITIAL DFINI '
      PRINT *,' INI TIME IS ',HRINI,' HOUR.'
      DO 10 K=1, 28
      DO 10 I=1, 4032
      DIS(I,K) = 0.0
      ZES(I,K) = 0.0
      TES(I,K) = 0.0
      RQS(I,K) = 0.0
  10  CONTINUE
      DO 12 I=1, 4032
      QS(I) = 0.0
  12  CONTINUE
      TOTSUM=0.0
      ENDIF
C
      NUMSUM=NUMSUM+1
      PRINT *,' ---- IN DFINI ---- NUMSUM NUMMAX ',NUMSUM,NUMMAX
      IF( NUMSUM.NE.0 ) THEN
        SC =  3.141593E+0  / NUMMAX
        SX= NUMSUM*SC
        TX= NUMSUM* 3.141593E+0
        WX= TX/ ( NUMMAX+1 )
        DIGFIL= SIN(WX)/WX * SIN(SX)/TX
      ELSE
        DIGFIL = 1.0/NUMMAX
      ENDIF
      TOTSUM = TOTSUM + DIGFIL
C
C
C------------------------DO SUMMATION WITH WINDOW---
C
C FIRST LAT LOOP
C      AUTOSCOPE
C
C .......OBTAIN FULL FIELD VALUES
      DO 110 K=1, 28
      DO 110 J=1, 4032
      DIS(J,K) = DIS(J,K) + DIGFIL*DI(J,K)
      ZES(J,K) = ZES(J,K) + DIGFIL*ZE(J,K)
      TES(J,K) = TES(J,K) + DIGFIL*TE(J,K)
      RQS(J,K) = RQS(J,K) + DIGFIL*RQ(J,K)
 110  CONTINUE
      DO 120 J=1, 4032
      QS(J) = QS(J) + DIGFIL*Q(J)
 120  CONTINUE
C................................................
C SAVE
      IF( NUMSUM.EQ.0 ) THEN
        DTHOUR=THOUR
        DSHOUR=SHOUR
        DCHOUR=CHOUR
        DSOLSEC=SOLSEC
        PRINT *,' NUMSUM=0, SAVE THOUR= ',DTHOUR
        CALL FIXIO(THOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     1            CV,CVB,CVT,SLMSK,F10M,CANOPY,1,NFLIP,NFLOP)
      ENDIF
C................................................
C RESTORE
      IF( NUMSUM.EQ.NUMMAX ) THEN
        PRINT *,' NUMSUM=NUMMAX REASSIGN PERTURBATION '
        PRINT *,' WITH NORMALIZED FACTOR=',TOTSUM,' AT HOUR=',DTHOUR
        HRINI=0
        THOUR=DTHOUR
        SHOUR=DSHOUR
        CHOUR=DCHOUR
        SOLSEC=DSOLSEC
        CALL FIXIO(THOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     1            CV,CVB,CVT,SLMSK,F10M,CANOPY,0,NFLOP,0)
C      AUTOSCOPE
        DO 210 K=1, 28
        DO 210 J=1, 4032
        DI (J,K) = DIS(J,K) / TOTSUM
        ZE (J,K) = ZES(J,K) / TOTSUM
        TE (J,K) = TES(J,K) / TOTSUM
        RQ (J,K) = RQS(J,K) / TOTSUM
        DIM(J,K) = DIS(J,K) / TOTSUM
        ZEM(J,K) = ZES(J,K) / TOTSUM
        TEM(J,K) = TES(J,K) / TOTSUM
         RM(J,K) = RQS(J,K) / TOTSUM
 210    CONTINUE
        DO 220 J=1, 4032
        QM(J) = QS(J) / TOTSUM
        Q (J) = QS(J) / TOTSUM
 220    CONTINUE
      DO 230 L=1, 47
      DO 230 J=1, 384
      GESHEM(J,L)=0.5*GESHEM(J,L)
230   CONTINUE
      CALL MLTFLX(0.5,DUSFC,DVSFC,DTSFC,DQSFC,DSWSFC,DLWSFC,
     1 BENGSH,GFLUX,
     2 DUGWD,DVGWD,PSMEAN,
     3 DTFLUX)
      CALL MLTDIA(0.5)
      FLUXR=0.5*FLUXR
      CVAVG=0.5*CVAVG

c       write(*,*) '>>FLUXR=0.5*FLUXR'
c       write(*,*) 'fluxr(1,1,*)=',(fluxr(i9,1,1),i9=1,20)

      ENDIF
C................................................
C
      RETURN
      END
      SUBROUTINE TREAD(N,FHOUR,IDATE,GZ,Q,TE,DI,ZE,RQ,SL,SI,Z00)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    TREAD       READS SIGMA LEVEL SPECTRAL COEFFICIENTS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-27
C
C ABSTRACT: READS A COMPLETE SET OF SIGMA LEVEL SPECTRAL COEFFICIENTS
C   AT A SINGLE TIME TO BE USED TO START THE MODEL FORECAST.
C   THE SUBROUTINE COMPARES SI AND SL (THE MODEL'S VERTICAL
C   STRUCTURE) COMPUTED IN SETSIG WITH THE SI AND SL OF THE
C   INPUT COEFFICIENTS IN ORDER TO MAKE SURE THE COEFFICIENTS
C   WERE GENERATED UNDER THE SAME VERTICAL STRUCTURE.
C
C PROGRAM HISTORY LOG:
C   88-04-27  JOSEPH SELA
C
C USAGE:    CALL TREAD (N,FHOUR,IDATE,GZ,Q,TE,DI,ZE,RQ,SL,SI,Z00)
C   INPUT ARGUMENT LIST:
C     N        - FORTRAN UNIT NUMBER FOR FILE CONTAINING THE
C                COMPLETE SET OF SIGMA LEVEL COEFFICIENTS.
C     SL       - SIGMA LAYERS     COMPUTED IN SETSIG.
C     SI       - SIGMA INTERFACES COMPUTED IN SETSIG.
C
C   OUTPUT ARGUMENT LIST:
C     FHOUR    - FORECAST HOUR OF THE SET OF COEFFICIENTS READ
C                FROM UNIT N.
C     IDATE    - IDATE(1)=INITIAL HOUR (GMT) OF FORECAST FROM
C                         WHICH COEFFICIENTS WERE MADE.
C                IDATE(2)=MONTH (1-12).
C                IDATE(3)=DAY OF THE MONTH.
C                IDATE(4)=YEAR OF THE CENTURY.
C     GZ       - LAPLACIAN OF TOPOGRAPHY.
C                GZ IS MULTIPLIED BY THE CONSTANT SNNP1 ARRAY.
C                GZ IS THEN MULTIPLIED BY THE GRAVITY CONSTANT AND
C                DIVIDED BY THE SQUARE OF THE RADIUS OF THE EARTH.
C     Q        - LN(PSFC)          COEFFICIENTS.
C     TE       - TEMPERATURE       COEFFICIENTS.
C     DI       - DIVERGENCE        COEFFICIENTS.
C     ZE       - VORTICITY         COEFFICIENTS.
C     RQ       - SPECIFIC HUMIDITY COEFFICIENTS.
C     Z00      - MEAN TOPOGRAPHY.
C                Z00 IS SET EQUAL TO GZ(1) AFTER GZ IS READ.
C
C   INPUT FILES:
C     UNIT N   - COMPLETE SET OF SIGMA LEVEL SPECTRAL COEFFICIENTS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
      DIMENSION
     1 GZ( 4033 ),
     2  Q( 4033 ),
     3 TE( 4033 , 28 ),DI( 4033 , 28 ),ZE( 4033 , 28 ),
     4 RQ( 4033 , 28 )
      DIMENSION IDATE(4),SI( 29 ),SL( 28 )
      DIMENSION          XI( 29 ),XL( 28 )
      DIMENSION DUMMY(201- 29 - 28 )
      integer*4 idate4(4)
C
C  ADDITION BY MK 4/5/90
C
      SAVE IFP
      DATA IFP/0/
C
      IF(IFP.EQ.0) THEN
        CALL CMPIND
        IFP=1
      ENDIF
C
C  END ADDITION
C
C     SPECTRAL DATA FILE FORMAT
C.....LAB
C.....HOUR,IDATE(4),SI( 29 ),SL( 28 )
C.....ZLN Q TE DI ZE
      READ(N)LAB
      PRINT 3000,LAB,N
3000  FORMAT(1H0,'TREAD LAB  ',4A10,' N=',I3)
c     READ(N)FHOUR,IDATE,(XI(K),K=1, 29 ),(XL(K),K=1, 28 )
      READ(N)FHOUR,idate4,(XI(K),K=1, 29 ),(XL(K),K=1, 28 )
     &       ,DUMMY,WAVES,XLAYERS,TRUN,ORDER,REALFORM,GENCODE
      idate(1) = idate4(1)
      idate(2) = idate4(2)
      idate(3) = idate4(3)
      idate(4) = idate4(4)
	  if (idate(4).lt.100) idate(4)=idate(4)+1900
      IF(IGEN.EQ.0) IGEN=GENCODE
      PRINT *,'TREAD UNIT,FHOUR,IDATE=',N,FHOUR,IDATE
      READ(N)(GZ(I),I=1, 4032 )
C
      Z00=GZ(1)
      DO 300 J=1, 4032
      GZ(J)=GZ(J)*SNNP1(J)
300   CONTINUE
      GA2= 9.8000E+0 /( 6.3712E+6 * 6.3712E+6 )
      DO 350 J=1, 4032
      GZ(J)=GZ(J)*GA2
350   CONTINUE
      CALL BARTRI(GZ,GZ,GZBAR)
      PRINT 99,GZBAR
99    FORMAT(1H ,'LAP(GZ)=',E12.3)
C
      READ(N)(Q(I),I=1, 4032 )
      DO 400 K=1, 28
      READ(N)(TE(I,K),I=1, 4032 )
400   CONTINUE
      DO 401 K=1, 28
      READ(N)(DI(I,K),I=1, 4032 )
      READ(N)(ZE(I,K),I=1, 4032 )
401   CONTINUE
      DO 200 K=1, 28
      READ(N)(RQ(I,K),I=1, 4032 )
200   CONTINUE
C
      DO 3 K=1, 28
      XL(K)=XL(K)-SL(K)
3     CONTINUE
      PRINT 100,(XL(K),K=1, 28 )
      DO 4 K=1, 29
      XI(K)=XI(K)-SI(K)
4     CONTINUE
      PRINT 100,(XI(K),K=1, 29 )
100   FORMAT(1H0, 12   (E9.3))
      PRINT 101,N,FHOUR,IDATE,Z00
101   FORMAT (1H0, 'IF ABOVE TWO ROWS NOT ZERO,INCONSISTENCY IN SIG.DEF'
     1,'ON N=',I2,2X,F6.1,2X,4(I4),'Z00=',E12.4)
      RETURN
      END
      SUBROUTINE EXTREM(A,B,LGTH,IND)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    EXTREM      PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL EXTREM (A, B, LGTH, IND)
C   INPUT ARGUMENT LIST:
C     A        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY A.
C     B        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY B.
C     LGTH     - LENGTH OF ARRAY A AND ARRAY B.
C     IND      - INDICATOR PRINTED WITH MINIMUMS AND MAXIMUMS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C REMARKS: LGTH SHOULD BE GREATER THAN 1.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200
C   MACHINE:  CYBER 205
C
C$$$
      DIMENSION A(LGTH), B(LGTH)
      AMIN = A(1)
      AMAX = A(1)
      DO 25 I=2,LGTH
      IF (A(I).GT.AMAX)  AMAX = A(I)
      IF (A(I).LT.AMIN)  AMIN = A(I)
25    CONTINUE
C
      BMIN = B(1)
      BMAX = B(1)
      DO 50 I=2,LGTH
      IF (B(I).GT.BMAX)  BMAX = B(I)
      IF (B(I).LT.BMIN)  BMIN = B(I)
50    CONTINUE
      PRINT 100,IND,AMIN,AMAX,BMIN,BMAX
100   FORMAT(1H ,'IND AMIN AMAX BMIN BMAX ',I4,2X,4(E12.4,2X))
      RETURN
      END
      SUBROUTINE ROW1NS(A)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ROW1NS      PAIR NORTHERN AND SOUTHERN LATITUDES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-12
C
C ABSTRACT: PAIR NORTHERN AND SOUTHERN LATITUDES OF GAUSSIAN GRID.
C
C PROGRAM HISTORY LOG:
C   88-04-12  JOSEPH SELA
C
C USAGE:    CALL ROW1NS (A)
C   INPUT ARGUMENT LIST:
C     A        - ARRAY OF GAUSSIAN GRID WITH SEPARATED
C                NORTHERN AND SOUTHERN LATITUDES.
C                INPUT ARRAY IS OVERWRITTEN BY OUTPUT ARRAY.
C
C   OUTPUT ARGUMENT LIST:
C     A        - ARRAY OF GAUSSIAN GRID WITH PAIRED
C                NORTHERN AND SOUTHERN LATITUDES.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION A( 192 , 94 )
      DIMENSION B( 192 ),JDONE( 94 )
      DO 1 K=1, 94
      JDONE(K)=0
 1    CONTINUE
      JSAVE=2
 3    CONTINUE
      IF(MOD(JSAVE,2).EQ.0) THEN
        JGET= 94 +1-JSAVE/2
      ELSE
        JGET=(JSAVE+1)/2
      ENDIF
      IF(JGET.EQ.JSAVE) THEN
        JDONE(JSAVE)=1
        GO TO 35
      ENDIF
      DO 5  J=1, 192
      B(J)=A(J,JSAVE)
      A(J,JSAVE)=A(J,JGET)
 5    CONTINUE
      JDONE(JSAVE)=1
10    CONTINUE
      JPUT=JGET
      IF(MOD(JPUT,2).EQ.0) THEN
        JGET= 94 +1-JPUT/2
      ELSE
        JGET=(JPUT+1)/2
      ENDIF
      IF(JGET.EQ.JSAVE) GO TO 20
      DO 15  J=1, 192
      A(J,JPUT)=A(J,JGET)
15    CONTINUE
      JDONE(JPUT)=1
      GO TO 10
20    CONTINUE
      DO 30  J=1, 192
      A(J,JPUT)=B(J)
30    CONTINUE
      JDONE(JPUT)=1
35    CONTINUE
      DO 40 K=JSAVE, 94
      IF(JDONE(K).EQ.0) THEN
        JSAVE=K
        GO TO 3
      ENDIF
40    CONTINUE
      RETURN
      END
      SUBROUTINE ROWSEP(A)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ROWSEP      SEPARATE NORTHERN AND SOUTHERN LATITUDES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-12
C
C ABSTRACT: SEPARATE NORTHERN AND SOUTHERN LATITUDES OF GAUSSIAN GRID.
C
C PROGRAM HISTORY LOG:
C   88-04-12  JOSEPH SELA
C
C USAGE:    CALL ROWSEP (A)
C   INPUT ARGUMENT LIST:
C     A        - ARRAY OF GAUSSIAN GRID WITH PAIRED
C                NORTHERN AND SOUTHERN LATITUDES.
C                INPUT ARRAY IS OVERWRITTEN BY OUTPUT ARRAY.
C
C   OUTPUT ARGUMENT LIST:
C     A        - ARRAY OF GAUSSIAN GRID WITH SEPARATED
C                NORTHERN AND SOUTHERN LATITUDES.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION A( 192 , 94 )
      DIMENSION B( 192 ),JDONE( 94 )
      DO 1 K=1, 94
      JDONE(K)=0
 1    CONTINUE
      JSAVE=2
 3    CONTINUE
      IF(JSAVE.LE. 47 ) THEN
        JGET=2*JSAVE-1
      ELSE
        JGET=2*( 94 +1-JSAVE)
      ENDIF
      IF(JGET.EQ.JSAVE) THEN
        JDONE(JSAVE)=1
        GO TO 35
      ENDIF
      DO 5  J=1, 192
      B(J)=A(J,JSAVE)
      A(J,JSAVE)=A(J,JGET)
 5    CONTINUE
      JDONE(JSAVE)=1
10    CONTINUE
      JPUT=JGET
      IF(JPUT.LE. 47 ) THEN
        JGET=2*JPUT-1
      ELSE
        JGET=2*( 94 +1-JPUT)
      ENDIF
      IF(JGET.EQ.JSAVE) GO TO 20
      DO 15 J=1, 192
      A(J,JPUT)=A(J,JGET)
15    CONTINUE
      JDONE(JPUT)=1
      GO TO 10
20    CONTINUE
      DO 30  J=1, 192
      A(J,JPUT)=B(J)
30    CONTINUE
      JDONE(JPUT)=1
35    CONTINUE
      DO 40 K=JSAVE, 94
      IF(JDONE(K).EQ.0) THEN
        JSAVE=K
        GO TO 3
      ENDIF
40    CONTINUE
      RETURN
      END
      SUBROUTINE ROWSNS(A,B)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ROWSNS      PAIR NORTHERN AND SOUTHERN LATITUDES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-12
C
C ABSTRACT: PAIR NORTHERN AND SOUTHERN LATITUDES OF GAUSSIAN GRIDS.
C   THIS SUBROUTINE DOES MULTIPLE GRIDS.
C
C PROGRAM HISTORY LOG:
C   88-04-12  JOSEPH SELA
C
C USAGE:    CALL ROWSNS (A, B)
C   INPUT ARGUMENT LIST:
C     A        - ARRAY OF LEVS GAUSSIAN GRIDS WITH SEPARATED
C                NORTHERN AND SOUTHERN LATITUDES.
C
C   OUTPUT ARGUMENT LIST:
C     B        - ARRAY OF LEVS GAUSSIAN GRIDS WITH PAIRED
C                NORTHERN AND SOUTHERN LATITUDES.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION A( 192 , 28 , 94 ),B( 384 , 28 , 47 )
      DO 10 LAT=1, 47
      DO 5    K=1, 28
      DO 220  J=1, 192
      B(J,K,LAT)=A(J,K,LAT)
220   CONTINUE
      DO 240  J=1, 192
      B(J+ 192 ,K,LAT)=A(J,K, 94 +1-LAT)
240   CONTINUE
5     CONTINUE
10    CONTINUE
      RETURN
      END
      SUBROUTINE TWRITE(N,FHOUR,IDATE,Z,Q,TE,DI,ZE,RQ,SL,SI,GZ,Z00,NZ)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    TWRITE      WRITES SIGMA LEVEL SPECTRAL COEFFICIENTS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-29
C
C ABSTRACT: WRITES A COMPLETE SET OF FORECAST SIGMA LEVEL
C   SPECTRAL COEFFICIENTS FOR ALL MODEL VARIABLES.
C
C PROGRAM HISTORY LOG:
C   88-04-29  JOSEPH SELA
C   88-11-02  MARK ROZWODOSKI  CHANGED SECOND RECORD TO SELALABEL.
C
C USAGE:    CALL TWRITE (N,FHOUR,IDATE,Z,Q,TE,DI,ZE,RQ,SL,SI,GZ,Z00)
C   INPUT ARGUMENT LIST:
C     N        - FORTRAN UNIT NUMBER FOR FILE TO BE WRITTEN TO.
C     FHOUR    - FORECAST HOUR OF THE SET OF COEFFICIENTS.
C     IDATE    - IDATE(1)=INITIAL HOUR (GMT) OF FORECAST.
C                IDATE(2)=MONTH (1-12).
C                IDATE(3)=DAY OF THE MONTH.
C                IDATE(4)=YEAR OF THE CENTURY.
C     Q        - LN(PSFC)          COEFFICIENTS.
C     TE       - TEMPERATURE       COEFFICIENTS.
C     DI       - DIVERGENCE        COEFFICIENTS.
C     ZE       - VORTICITY         COEFFICIENTS.
C     RQ       - SPECIFIC HUMIDITY COEFFICIENTS.
C     SL       - SIGMA LAYERS     COMPUTED IN SETSIG.
C     SI       - SIGMA INTERFACES COMPUTED IN SETSIG.
C     GZ       - LAPLACIAN OF TOPOGRAPHY.
C     Z00      - MEAN TOPOGRAPHY.
C
C   OUTPUT ARGUMENT LIST:
C     Z        - TOPOGRAPHY SPECTRAL COEFFICIENTS.
C
C   OUTPUT FILES:
C     UNIT N   - COMPLETE SET OF FORECAST SIGMA LEVEL SPECTRAL
C                COEFFICIENTS.
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
      DIMENSION
     1  Z( 4033 ),GZ( 4033 ),Q( 4033 ),
     2 TE( 4033 , 28 ),DI( 4033 , 28 ),ZE( 4033 , 28 ),
     3 RQ( 4033 , 28 )
      DIMENSION IDATE(4),SI( 29 ),SL( 28 )
      integer*4 idate4(4)
C
      DIMENSION DUMMY(201- 29 - 28 )
C
C
      WRITE(N)LAB
      PRINT 3000,LAB,N
3000  FORMAT(1H0,'GWRITE LAB ',4A10,' N=',I3)
      DUMMY=0.
      WAVES= 62
      XLAYERS= 28
      TRUN=1.
      ORDER=2.
      REALFORM=1.
      GENCODE=IGEN
      idate4(1) = idate(1)
      idate4(2) = idate(2)
      idate4(3) = idate(3)
      idate4(4) = idate(4)
c     WRITE(N)FHOUR,IDATE,SI,SL
      WRITE(N)FHOUR,idate4,SI,SL
     &       ,DUMMY,WAVES,XLAYERS,TRUN,ORDER,REALFORM,GENCODE
C
C...  COMPUTE TOPOG. FROM ITS LAPLACIAN
CMI-CHANGED TO READ OROG FROM INPUT (OCT 92)
C     ASQ= 6.3712E+6 * 6.3712E+6 / 9.8000E+0
C     DO 200 J=3, 4032
C     Z(J)=GZ(J)*ASQ/SNNP1(J)
200   CONTINUE
C     Z(1)=Z00
C     Z(2)=0. E 0
      REWIND NZ
      READ(NZ)
      READ(NZ)
      READ(NZ)( Z(I),I=1, 4032 )
C
      WRITE(N)( Z(I),I=1, 4032 )
      WRITE(N)( Q(I),I=1, 4032 )
      DO 15 K=1, 28
      WRITE(N)(TE(I,K),I=1, 4032 )
15    CONTINUE
      DO 20 K=1, 28
      WRITE(N)(DI(I,K),I=1, 4032 )
      WRITE(N)(ZE(I,K),I=1, 4032 )
20    CONTINUE
      DO 25 K=1, 28
      WRITE(N)(RQ(I,K),I=1, 4032 )
25    CONTINUE
      PRINT 3001,FHOUR,IDATE,N
3001  FORMAT(1H0,'GWRITE FHOUR=',F6.2,2X,4I4,2X,'N=',I2)
      RETURN
      END
      SUBROUTINE GLOOPA
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GLOOP  COMPUTES DYNAMIC NON-LINEAR TENDENCY TERMS
C OF TEMP. DIV. LN(PS)
C COMPUTES PREDICTED VALUES OF VORTICITY AND MOISTURE
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-05-13
C
C ABSTRACT:
C   PROGRAM  STARTS WITH SPECTRAL  COEFFICIENTS TEMP.
C   OF VORTICITY, DIVERGENCE, SPECIFIC HUMIDITY, AND
C   LN((PSFC).  CONVERTS THEM TO THE GAUSSIAN GRID AT EACH
C   LATITUDE AND CALLS FIDI,  FOR THE NORTHERN AND SOUTHERN
C   HEMISPHERES AT THE SAME TIME.  AFTER RETURN FROM FIDI
C   SR.  COMPLETES CALCULATION OF TENDENCIES OF TEMP. DIV. AND LNPS.
C   SPECIFIC HUMIDITY, AND VORTICITY ARE PREDICTED BY SR. SIGVOR
C   ALL INPUT/OUTPUT  IS VIA COMMONS.
C
C PROGRAM HISTORY LOG:
C   91-03-06  JOSEPH SELA
C
C USAGE:    CALL GLOOPA
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77
C
C$$$
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
C....
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C...SOF INCLUDE..........................................
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
C...
       DIMENSION RL( 63 )
       DIMENSION VECTOP(2, 63 ,2* 28 +1)
C...
       DIMENSION UFLIP( 28 , 64 ),UFLOP( 28 , 64 )
       DIMENSION UFLPAC( 28 , 64 ,NCPUS)
       SAVE UFLIP
       DATA IUFLIP/0/
       DIMENSION UGRID( 384 , 28 )
C....
C.................................................................
       DIMENSION
     X QTT( 4032 ,NCPUS),QVV( 4158 ,NCPUS),
     X QWW( 4032 ,NCPUS),QDD( 4032 ,NCPUS),SPDLAN( 28 ,NCPUS),
     X FPL(2, 63 , 141 ,NCPUS),FML(2, 63 , 141 ,NCPUS),
     X FPD(2, 63 , 112 ,NCPUS),FMD(2, 63 , 112 ,NCPUS),
     1          APN( 126 , 28 ,NCPUS),APS( 126 , 28 ,NCPUS),
     2          BPN( 126 , 28 ,NCPUS),BPS( 126 , 28 ,NCPUS),
     2          CPN( 126 , 28 ,NCPUS),CPS( 126 , 28 ,NCPUS),
     3          AQN( 126 , 28 ,NCPUS),AQS( 126 , 28 ,NCPUS),
     4          BQN( 126 , 28 ,NCPUS),BQS( 126 , 28 ,NCPUS),
     5          CQN( 126 , 28 ,NCPUS),CQS( 126 , 28 ,NCPUS),
     6          SYN( 386 , 227 ,NCPUS),ANL( 386 , 253 ,NCPUS)
C
C
      DIMENSION
     1 ZFNR( 63 , 28 ),ZFNI( 63 , 28 ),
     2 ZFSR( 63 , 28 ),ZFSI( 63 , 28 ),
     1 QFNR( 63 , 28 ),QFNI( 63 , 28 ),
     2 QFSR( 63 , 28 ),QFSI( 63 , 28 )
C.................................................................
C.................................................................
C SYN(1, 0* 28 +1, LAN)  ZEM     ZEMX
C SYN(1, 1* 28 +1, LAN)  ZE      ZG
C SYN(1, 2* 28 +1, LAN)  DI      DG
C SYN(1, 3* 28 +1, LAN)  TE      TG
C SYN(1, 4* 28 +1, LAN)  RQ      RQG
C SYN(1, 5* 28 +1, LAN)  DPDLAM  DLAM
C SYN(1, 5* 28 +2, LAN)  DPDPHI  DPHI
C SYN(1, 5* 28 +3, LAN)  ULN     UG
C SYN(1, 6* 28 +3, LAN)  VLN     VG
C SYN(1, 7* 28 +3, LAN)  Q       PS
C SYN(1, 7* 28 +4, LAN)  RM      RMX
C.................................................................
C.................................................................
C ANL(1, 0* 28 +1,LAN) UQG
C ANL(1, 1* 28 +1,LAN) VQG
C ANL(1, 2* 28 +1,LAN) EK
C ANL(1, 3* 28 +1,LAN) B
C ANL(1, 4* 28 +1,LAN) TAU
C ANL(1, 5* 28 +1,LAN) A
C ANL(1, 6* 28 +1,LAN) F
C ANL(1, 7* 28 +1,LAN) G
C ANL(1, 8* 28 +1,LAN) RTG
C ANL(1, 9* 28 +1,LAN) DLAX
C.................................................................
      DO 605 LL=1, 63
      RL(LL)=FLOAT(LL-1)/ 6.3712E+6
605   CONTINUE
       IF (IUFLIP.EQ.0) THEN
       IUFLIP=1
                             DO 606 K=1, 64
                             DO 606 J=1, 28
                             UFLIP(J,K)=0. E 0
  606                        CONTINUE
      IF(N50UFL.NE.0) READ(50,END=6069) UFLIP
 6069 CONTINUE
                     ENDIF
      DO 607 J=1, 28
      DO 607 K=1, 64
      UFLOP(J,K)=0. E 0
607   CONTINUE
C
C     BTIM = SECOND()
C
      CALL DELLNP(Q,DPDPHI,VECTOP,DPDLAM)
C
      DO 2 K=1, 28
      CALL DZTOUV(DI(1,K),ZE(1,K),ULN(1,K),VLN(1,K),
     1 VECTOP(1,1,1+K),VECTOP(1,1,1+ 28 +K))
    2 CONTINUE
C
      DO 3 K=1, 28
      RELVOR(K) = ZE(3,K)
      ABSVOR(K) = RELVOR(K)+(2. E 0* 7.2921E-5 * 1.414214E+0 / 1.732051E
     1+0 )
      ZE(3,K)   = ABSVOR(K)
      SPDMAX(K) = 0.0
    3 CONTINUE
C
      DO  33 K=1, 28
      DO  32 J=1, 4032
      X(J,K)=GZ(J)
      Y(J,K)=0. E 0
      W(J,K)=0. E 0
C
       RT(J,K)=0. E 0
      RQ0(J,K)=0. E 0
   32 CONTINUE
   33 CONTINUE
C
      DO 38 J=1, 4032
      Z(J)=0. E 0
38    CONTINUE
C COMPUTE LATITUDE BAND LIMITS
      LAST=MOD( 47 ,NCPUS)
      NGGS=( 47 -LAST)/NCPUS
      IF(LAST.NE.0)NGGS=NGGS+1
      INCLAT=NCPUS
      LAT1=1-NCPUS
      LAT2=0
      LATDON=0
CC
      DO 10000 NGG=1,NGGS
      IF((NGG.EQ.NGGS).AND.(LAST.NE.0)) INCLAT=LAST
      LAT1=LAT1+NCPUS
      LAT2=LAT2+INCLAT
CC    LATPRT=2
C
C           LAT LOOP
C
C FIRST LAT LOOP
C
      DO 1000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
      CALL PLN2I(QTT(1,LAN),QVV(1,LAN),COLRAD,LAT)
C
      CALL SUMS2I(ZEM,SYN(1,1,LAN),QTT(1,LAN),3+8* 28 )
CCC  X            3+ 28 *8,  192 ,  192 /2)
C
      CALL SUMTOP(SYN(1,5* 28 +2,LAN),VECTOP,QVV(1,LAN),
     1 2* 28 +1, 192 , 192 /2)
C
1000  CONTINUE
C
C           LAT LOOP
CKEN POINTS
CKEN POINTS
C
      DO 2000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
C
C   SAVE FOURIER COEFFCIENTS AT TIME=T FOR APRIME=A-UBAR*ETA
C   SAVE FOURIER COEFFCIENTS AT TIME=T FOR (U*Q)PRIME=U*Q-UBAR*Q
      CALL RI2RRI(SYN(1,1* 28 +1,LAN),ZFNR,ZFNI,ZFSR,ZFSI)
      CALL RI2RRI(SYN(1,4* 28 +1,LAN),QFNR,QFNI,QFSR,QFSI)
C
      LOTNFS=(6* 28 +3)*2
      CALL FTI 192 (SYN(1,1* 28 +1,LAN),DUMMY,LOTNFS,1)
C
      DO 665 KK=1, 28
      DO 665 I=1, 384
      UGRID(I,KK)=SYN(I,5* 28 +2+KK,LAN)
665   CONTINUE
CCCCC IF(KDT.LT.5)CALL PRTLAT(...........................
C
      DO  30 K=1, 28
      DO 690 J=1, 384
      SYN(J,3* 28 +K,LAN)=SYN(J,3* 28 +K,LAN)-TOV(K)
  690 CONTINUE
   30 CONTINUE
C
      CALL GFIDI( SYN(1,2* 28 +1,LAN),SYN(1,3* 28 +1,LAN),
     1            SYN(1,1* 28 +1,LAN),SYN(1,5* 28 +3,LAN),
     1            SYN(1,6* 28 +3,LAN),SYN(1,4* 28 +1,LAN),
     1            SYN(1,5* 28 +2,LAN),SYN(1,5* 28 +1,LAN),
     1 RCS2(LAT),DEL,RDEL2,CI,P1,P2,H1,H2,TOV,SPDLAN(1,LAN),
     1            ANL(1,0* 28 +1,LAN),ANL(1,1* 28 +1,LAN),
     1            ANL(1,2* 28 +1,LAN),ANL(1,3* 28 +1,LAN),
     1            ANL(1,4* 28 +1,LAN),ANL(1,5* 28 +1,LAN),
     1            ANL(1,6* 28 +1,LAN),ANL(1,7* 28 +1,LAN),
     1            ANL(1,8* 28 +1,LAN),ANL(1,9* 28 +1,LAN))
C
C  GRID POINT MONITOR  -  DIV AND VORT
C
      IF(ILSHRT.LT.1) THEN
       IF(ISAVE.NE.0.AND.NPOINT.GT.0) THEN
        DO 330 IGPT=1,NPOINT
        IF(LAT.EQ.JGRD(IGPT)) THEN
          DO 331 K=1, 28
          SVDATA(K+ 80 +6* 28 ,IGPT,ITNUM) =
     1                             SYN(IGRD(IGPT),2* 28 +K,LAN)
          SVDATA(K+ 80 +7* 28 ,IGPT,ITNUM) =
     1                             SYN(IGRD(IGPT),1* 28 +K,LAN)
331       CONTINUE
        ENDIF
330     CONTINUE
       ENDIF
      ENDIF
C
      LOTNFA = 2*(9* 28 +1)
      CALL FTI 192 (ANL(1,1,LAN),ANL(1,1,LAN),LOTNFA,-1)
C
C
C AT THIS POINT ARRAYS HOLD TWO LATITUDES  OF FOURIER COEFS
C
      CALL SEMIZQ(DELTIM,SINLAT(LAT),ANL(1,5* 28 +1,LAN),
     1 ANL(1,3* 28 +1,LAN),ZEM,RM,           WGT(LAT),UGRID,
     2 UFLIP,UFLPAC(1,1,LAN),ZFNR,ZFNI,ZFSR,ZFSI,QFNR,QFNI,QFSR,QFSI,
     3 APN(1,1,LAN),APS(1,1,LAN),
     4 BPN(1,1,LAN),BPS(1,1,LAN),
     5 CPN(1,1,LAN),CPS(1,1,LAN),
     6 AQN(1,1,LAN),AQS(1,1,LAN),
     7 BQN(1,1,LAN),BQS(1,1,LAN),
     8 CQN(1,1,LAN),CQS(1,1,LAN),
     9 ANL(1,1,LAN),ANL(1, 28 +1,LAN),ANL(1,8* 28 +1,LAN),
     A SYN(1,1,LAN),SYN(1,7* 28 +4,LAN))
C
C
2000  CONTINUE
C
      DO 40 K=1, 28
      DO 2100 LAT=LAT1,LAT2
      LAN=LAT-LATDON
      SPDMAX(K)=MAX(SPDMAX(K),SPDLAN(K,LAN))
2100  CONTINUE
40    CONTINUE
C
C
C
C
      DO 2500 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
      DO 714 I=1, 4032
      QWW(I,LAN)=QTT(I,LAN)*WGT(LAT)
714   CONTINUE
C
      CALL GOZRIM(QTT(1,LAN),QVV(1,LAN),QDD(1,LAN),
     1            EPSI,LAT,RCS2,WGT(LAT))
C
      CALL FPLFPD(RCS2(LAT),RL,
     X FPL(1,1,1,LAN),FML(1,1,1,LAN),FPD(1,1,1,LAN),FMD(1,1,1,LAN),
     X          APN(1,1,LAN),APS(1,1,LAN),
     X          BPN(1,1,LAN),BPS(1,1,LAN),
     X          CPN(1,1,LAN),CPS(1,1,LAN),
     X          AQN(1,1,LAN),AQS(1,1,LAN),
     X          BQN(1,1,LAN),BQS(1,1,LAN),
     X          CQN(1,1,LAN),CQS(1,1,LAN),
     X          ANL(1,1,LAN))
2500  CONTINUE
C
C     PRINT 4322
C4322 FORMAT(1H ,'RMS GLOOPA  IBM ORDER BEFORE LOOP 3000 ')
C     CALL RMSGT(Z ,X  ,Y  ,W  ,DEL,RT )
C
      DO 3000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
C
      DO 715 I=1,  64
      DO 715 K=1,  28
      UFLOP(K,I) = UFLOP(K,I) + UFLPAC(K,I,LAN)
715   CONTINUE
C..........................................................
C
      CALL FL2I(FPL(1,1,1,LAN),FML(1,1,1,LAN),Z,
     1 QWW(1,LAN),5* 28 +1)
C    1 QWW(1,LAN),5* 28 +1, 62 , 62 )
C
      CALL FL2I(FPD(1,1,1,LAN),FMD(1,1,1,LAN),Y,
     1 QDD(1,LAN),4* 28 )
C    1 QDD(1,LAN),4* 28 , 62 , 62 )
C
C
C     PRINT 4324, LAN, LAT, LATDON
C4324 FORMAT(/ 1H ,'RMS GLOOPA  IBM ORDER DO 3000 MSU2AI',
C    X       '  LAN=',I3, '  LAT=',I3, '  LATDON=',I3 )
C     CALL RMSGT(Z ,X  ,Y  ,W  ,DEL,RT )
C
C
3000  CONTINUE
      LATDON=LATDON+(LAT2-LAT1+1)
10000 CONTINUE
CC
C......................................................
C......................................................
C     RESTORE REL. VORTICITY
C
      DO 18  K=1, 28
      ZE(3,K)=RELVOR(K)
      SPDMAX(K)=SQRT(2. E 0*SPDMAX(K))
      W(1,K)=0. E 0
      W(2,K)=0. E 0
   18 CONTINUE
C
      DO 20  K=1, 28
      DO 19  I=1, 4032
      X(I,K)= SNNP1(I)*RQ0(I,K)/( 6.3712E+6 * 6.3712E+6 ) + X(I,K)
19    CONTINUE
20    CONTINUE
C
      IF(INISTP.NE.1 .OR. KDT.EQ.1) THEN
      DO 720 J=1, 28
      DO 720 K=1, 64
      UFLIP(J,K)=UFLOP(J,K)
  720 CONTINUE
      IF(N50UFL.NE.0) THEN
      REWIND 50
      WRITE(50) UFLIP
      ENDIF
      ENDIF
C     TIM  = SECOND() - BTIM
C     PRINT*, ' IBM ORDER GLOOPA TIME=', TIM
C
      PRINT 100,(SPDMAX(K),K=1, 28 )
100   FORMAT(1H ,'SPDMX=',(T8,0P10F5.0))
C
C     PRINT 4321
C4321 FORMAT(1H ,'RMSOF AT SOF GLOOPA  IBM ORDER ')
C     CALL RMSGT(Z ,X  ,Y  ,W  ,DEL,RT )
      RETURN
      END
      SUBROUTINE GLOOPB
CFPP$ EXPAND(ZNLACM,ACCDIA)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
      COMMON /PWATER/PWAT( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
      DIMENSION GDA(NWGDA,KDGDA)
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
      PARAMETER(CNWATT=- 4.1855E+0 *1.E4/60.,FV= 4.6150E+2 / 2.8705E+2 -
     11.)
      PARAMETER(HFUS= 3.3358E+5,RHOH2O=1000)
      DIMENSION IPTLAT(NPTKEN)
C-WAV COMMON/COMWAV/ HSTR,USTRGG( 384 , 47 ),VSTRGG( 384 , 47 )
C...................................................................
C UGRS=SYN(1,1* 28 -1)   ULN
C VGRS=SYN(1,2* 28 -1)   VLN
C  PGR=SYN(1,3* 28 -1)     Q
C QGRM=SYN(1,3* 28 +0)    RM
C PGRM=SYN(1,4* 28 +0)     Z
C TGRS=SYN(1,4* 28 +1)     Y
C QGRS=SYN(1,5* 28 +1)    RT
C GT0 =SYN(1,4* 28 +1)
C GQ0 =SYN(1,5* 28 +1)
C GU0 =SYN(1,6* 28 +1)
C GV0 =SYN(1,7* 28 +1)
C TFX =SYN(1,0* 28 +1)    TE
C QFX =SYN(1,1* 28 +1)    RQ
C ZEX =SYN(1,2* 28 +1)    ZE
C DIX =SYN(1,3* 28 +1)    DI
      PARAMETER(LOTBS=5* 28 +2,LOTBST=2* 28 ,LOTBA=4* 28 )
      PARAMETER(LOTSYN=8* 28 )
      PARAMETER(KSB=1* 28 -1,KSTB=1* 28 -1,
     &          KAB=4* 28 +1,KAFB=0* 28 +1)
      PARAMETER(KSU=1* 28 -1,KSV=2* 28 -1,KSP=3* 28 -1,
     &          KSQM=3* 28 +0,KSPM=4* 28 +0,
     &          KST=4* 28 +1,KSQ=5* 28 +1,
     &          KAT=4* 28 +1,KAQ=5* 28 +1,
     &          KAU=6* 28 +1,KAV=7* 28 +1)
      DIMENSION RL( 63 )
      DIMENSION
     2 QTT( 4032 ,NCPUS),QVV( 4158 ,NCPUS),
     2 QWW( 4032 ,NCPUS),QDD( 4032 ,NCPUS),
     X FPL(2, 63 , 112 ,NCPUS),FML(2, 63 , 112 ,NCPUS),
     X FPD(2, 63 , 56 ,NCPUS),FMD(2, 63 , 56 ,NCPUS),
     1 SYN( 386 ,LOTSYN,NCPUS)
      DIMENSION VECTOP(2, 63 ,LOTBST)
      DIMENSION TOVZER( 28 ),SLK( 28 )
      DIMENSION TGMXL(NCPUS),IGMXL(NCPUS),KGMXL(NCPUS)
      DIMENSION TGMNL(NCPUS),IGMNL(NCPUS),KGMNL(NCPUS)
C.................................................................
      DIMENSION KBOT( 384 ),KTOP( 384 ),KUO( 384 ),
     1DUDT( 384 , 28 ),DVDT( 384 , 28 ),
     2DTDT( 384 , 28 ),DQDT( 384 , 28 ),
     3 EVAPS( 384 ),EVAPW( 384 ),
     4 GESH( 384 ),EVAPC( 384 ),EVAPD( 384 ),
     5 W1( 384 , 28 ),W2( 384 , 28 ),
     6 W3( 384 , 28 ),W4( 384 , 28 )
C.................................................................
C 05/31/96 MK SNOWEV ADDED
      DIMENSION  TSTAR( 384 ), PSEXP( 384 ),
     1          SNOWMT( 384 ),FACTOR( 384 ),
     1          SNOWEV( 384 ),
     2              FM( 384 ),    FH( 384 ),
     3              CD( 384 ),   CDQ( 384 ),
     4             QSS( 384 ), RADSL( 384 )
      DIMENSION DUSFC1( 384 ),DVSFC1( 384 ),
     1          DTSFC1( 384 ),DQSFC1( 384 ),
     1          DSWSF1( 384 ),DLWSF1( 384 )
      DIMENSION SMSOIL( 384 , 2 ),STSOIL( 384 , 2 )
      DIMENSION SOILTYP( 384 ),SIGMAF( 384 )
      DIMENSION CQ( 384 ),RHSCNPY( 384 )
      DIMENSION AI( 384 , 2 ),BI( 384 , 2 ),DRAIN( 384 )
      DIMENSION CCI( 384 , 2 ),RHSMC( 384 , 2 ),RUNOF( 384 )
      DIMENSION ZSOIL( 384 , 2 ),CLD1D( 384 )
      DIMENSION EVAP( 384 ),HFLX( 384 ),RNET( 384 )
      DIMENSION T850( 384 ),PK( 384 ),PKP( 384 ),EP1D( 384 )
      DIMENSION U10( 384 ),V10( 384 ),T2( 384 ),Q2( 384 )
      INTEGER SOILTYP
C.................................................................
      LOGICAL LADJ
      PARAMETER(LADJ=.TRUE.)
      LOGICAL LDIAG
C.................................................................
C
      DO 605 LL=1, 63
      RL(LL)=FLOAT(LL-1)/ 6.3712E+6
605   CONTINUE
      SIGSHC=0.7
      LEVSHC=0
      P850 = 850. * .1
C
C  FRAIN IS THE FACTOR FOR CENTERED DIFFERENCE SCHEME CORRECTION OF RAIN
C  AMOUNT.
C
      FRAIN = .5
      IF(INISTP.EQ.1) FRAIN = 1.
      DO 205 K=1, 28
      IF(SL(K).GT.SIGSHC) LEVSHC=K+1
      SLK(K)=SL(K)**( 2.8705E+2 / 1.0046E+3 )
205   TOVZER(K)=0. E 0
      MSTA=0
      LDIAG=.FALSE.
C
C  FOR THE TIME BEING, SOILTYP AND SIGMAF WILL BE SET TO CONSTANT
C  WE PLAN TO BRING IN A DATA SET FOR EACH
C  AT A LATTER TIME
C
      DO J = 1,  384
        SOILTYP(J) = 7
        SIGMAF(J) = .7
      ENDDO
C
      SL1=SL(1)
      FACTX=1000. E 0*(DELTIM*DEL(1)/ 9.8000E+0 )
      CSTRN2=1. E 0/(.75 E 0*150. E 0)
      DT2=DELTIM*2. E 0
      DTF=FRAIN*DT2
C
      DO  16 K=1, 28
      DO 421 J=1, 4032
      RQ0(J,K)=RQ(J,K)
421   CONTINUE
16    CONTINUE
      DO 3 K=1, 28
      CALL DZTOUV(X(1,K),W(1,K),ULN(1,K),VLN(1,K),
     1 VECTOP(1,1,K),VECTOP(1,1, 28 +K))
    3 CONTINUE
C
      DO  33 K=1, 28
      DO 220 J=1, 4032
      TE(J,K)=0. E 0
      DI(J,K)=0. E 0
      ZE(J,K)=0. E 0
      RQ(J,K)=0. E 0
  220 CONTINUE
   33 CONTINUE
      TGMX=-1.E20
      TGMN= 1.E20
C
C COMPUTE LATITUDE BAND LIMITS
      LAST=MOD( 47 ,NCPUS)
      NGGS=( 47 -LAST)/NCPUS
      IF(LAST.NE.0)NGGS=NGGS+1
      INCLAT=NCPUS
      LAT1=1-NCPUS
      LAT2=0
      LATDON=0
      DO 10000 NGG=1,NGGS
      CALL GETDIA(NGG,NWGDA*KDGDA,GDA)
      CALL SYNDIA
      IF((NGG.EQ.NGGS).AND.(LAST.NE.0)) INCLAT=LAST
      LAT1=LAT1+NCPUS
      LAT2=LAT2+INCLAT
      TGMXL=TGMX
      TGMNL=TGMN
C   FIRST  LAT LOOP
C 05/31/96 MK SNOWFALL,SNOWEVAP,SNOWMELT ADDED
CKEN POINTS
CKEN POINTS
C 05/31/96 MK SNOWEV ADDED
C
C           LAT LOOP
C
      DO 1000 LAT =LAT1,LAT2
      LAN=LAT-LATDON
C
C  TRANSFER SOIL MOISTURE AND TEMPERATURE FROM GLOBAL TO LOCAL VARIABLES
C
      DO K = 1,  2
        DO J = 1,  384
          SMSOIL(J,K) = SMC(J,LAT,K)
          STSOIL(J,K) = STC(J,LAT,K)
        ENDDO
      ENDDO
C
      DO 240 K=1, 28
      DO 240 J=1, 384
      DUDT(J,K)=0. E 0
      DVDT(J,K)=0. E 0
      DTDT(J,K)=0. E 0
      DQDT(J,K)=0. E 0
  240 CONTINUE
      RCL=RBS2(LAT)
      RCS = SQRT(RCL)
C.... SINLAB= COS(COLRAB(LAT))
C
      CALL PLN2I(QTT(1,LAN),QVV(1,LAN),COLRAB,LAT)
C
      CALL SUMS2I(ULN,SYN(1,KSB,LAN),QTT(1,LAN),LOTBS)
C
      CALL SUMTOP(SYN(1,KSTB,LAN),VECTOP,QVV(1,LAN),LOTBST,
     1             192 , 192 /2)
C
      CALL FTI 192 (SYN(1,KSB,LAN),DUMMY,2*LOTBS,1)
C
C  GET DRY TEP.
C
      DO 270 K=1, 28
      DO 270 J=1, 384
      SYN(J,KST-1+K,LAN)=SYN(J,KST-1+K,LAN)/(1.+FV*SYN(J,KSQ-1+K,LAN))
  270 CONTINUE
      DO 271 K=1, 28
        J=ISMAX( 384 ,SYN(1,KST-1+K,LAN),1)
        IF(SYN(J,KST-1+K,LAN).GT.TGMXL(LAN)) THEN
          TGMXL(LAN)=SYN(J,KST-1+K,LAN)
          IGMXL(LAN)=J
          KGMXL(LAN)=K
        ENDIF
        J=ISMIN( 384 ,SYN(1,KST-1+K,LAN),1)
        IF(SYN(J,KST-1+K,LAN).LT.TGMNL(LAN)) THEN
          TGMNL(LAN)=SYN(J,KST-1+K,LAN)
          IGMNL(LAN)=J
          KGMNL(LAN)=K
        ENDIF
  271 CONTINUE
C
C  GET SURFACE PRESSURE.
C
      DO 280 J=1, 384
      PSEXP(J)= EXP(SYN(J,KSP,LAN))
      FACTOR(J)=FACTX*PSEXP(J)
      PSMEAN(J,LAT)=PSMEAN(J,LAT)+PSEXP(J)*DTF
  280 CONTINUE
C
C  INITIALIZE DTDT WITH HEATING RATE FROM DCYC2 AND GET RADSL FOR PROGTM
C
      CALL DCYC2( 384 , 28 ,SOLHR,SLAG,SINLAB(LAT),COSLAB(LAT),
     &           SDEC,CDEC,XLON,COSZEN(1,LAT),
     &           SFCDLW(1,LAT),SFCNSW(1,LAT),SYN(1,KST,LAN),
     &           TSEA(1,LAT),TSFLW(1,LAT),SWH(1,1,LAT),HLW(1,1,LAT),
     &           DSWSF1,DLWSF1,RADSL,DTDT)
C
      DO 285 J=1, 384
      DSWSFC(J,LAT)=DSWSFC(J,LAT)+DSWSF1(J)*DTF
      DLWSFC(J,LAT)=DLWSFC(J,LAT)+DLWSF1(J)*DTF
285   CONTINUE
C
C  GRID POINT MONITOR-U,V,T,Q IN SYN
C                     SW HEAT = TOTAL-HLW (WHERE, TOTAL=DTDT)
C
      NPTLAT=0
      IF(NPOINT.GT.0) THEN
        DO IGPT=1,NPOINT
          IF (LAT.EQ.JGRD(IGPT)) THEN
            NPTLAT=NPTLAT+1
            IPTLAT(NPTLAT)=IGPT
          ENDIF
        ENDDO
      ENDIF
      LPTLAT=NPTLAT
      IF(ISAVE.EQ.0) NPTLAT=0
C
        DO 332 IPT=1,NPTLAT
          IGPT=IPTLAT(IPT)
          CSLTIV=SQRT(RCL)
          SVDATA( 1,IGPT,ITNUM)= IGRD(IGPT)
          SVDATA( 2,IGPT,ITNUM)= JGRD(IGPT)
          SVDATA( 3,IGPT,ITNUM)= SLMSK (IGRD(IGPT),LAT)
          SVDATA( 4,IGPT,ITNUM)= PSEXP (IGRD(IGPT)) *10.
          SVDATA( 8,IGPT,ITNUM)= TG3 (IGRD(IGPT),LAT)
          SVDATA( 10,IGPT,ITNUM)= SHELEG(IGRD(IGPT),LAT)
          SVDATA( 13,IGPT,ITNUM)= RADSL(IGRD(IGPT))*CNWATT
          SVDATA( 14,IGPT,ITNUM)= DSWSF1(IGRD(IGPT))
332     CONTINUE
        IF (ILSHRT.LT.2) THEN
          DO 333 IPT=1,NPTLAT
            IGPT=IPTLAT(IPT)
          DO 333 K=1, 28
            SVDATA(K+ 80       ,IGPT,ITNUM)=
     1                          SYN(IGRD(IGPT),KSU-1+K,LAN)*CSLTIV
            SVDATA(K+ 80 + 28 ,IGPT,ITNUM) =
     1                          SYN(IGRD(IGPT),KSV-1+K,LAN)*CSLTIV
            IF (ILSHRT.LT.1) THEN
            SVDATA(K+ 80 +4* 28 ,IGPT,ITNUM) =
     1                   DTDT(IGRD(IGPT),K) - HLW(IGRD(IGPT),K,LAT)
            SVDATA(K+ 80 +5* 28 ,IGPT,ITNUM) =
     1                          HLW(IGRD(IGPT),K,LAT)
            ENDIF
333       CONTINUE
        ENDIF
      CALL ZNLACM( 384 ,DTDT,PSEXP, DTF,KDTHSW,LAT)
      CALL ZNLACM( 384 ,HLW(1,1,LAT),PSEXP,-DTF,KDTHSW,LAT)
      CALL ZNLACM( 384 ,HLW(1,1,LAT),PSEXP, DTF,KDTHLW,LAT)
      CALL ACCDIA(LAN, 384 ,DTDT, DTF,KDTHSW,GDA)
      CALL ACCDIA(LAN, 384 ,HLW(1,1,LAT),-DTF,KDTHSW,GDA)
      CALL ACCDIA(LAN, 384 ,HLW(1,1,LAT), DTF,KDTHLW,GDA)
C
C 05/31/96 MK ADDED SNOWEV
      CALL PROGTM( 384 , 2 ,PSEXP,
     1 SYN(1,KSU,LAN),SYN(1,KSV,LAN),
     1 SYN(1,KST,LAN),SYN(1,KSQ,LAN),
     2 SHELEG(1,LAT),TSEA(1,LAT),QSS,
     & SMSOIL,STSOIL,EVAPC,SOILTYP,SIGMAF,CANOPY(1,LAT),
     3 RADSL,SNOWMT,SNOWEV,
     3 DELTIM,ZORL(1,LAT),PLANTR(1,LAT),TG3(1,LAT),
     4 EVAPS,F10M(1,LAT),U10,V10,T2,Q2,ZSOIL,
     5 CD,CDQ,CQ,RHSCNPY,RHSMC,AI,BI,CCI,
     6 RCL,SL1,SLK,SLMSK(1,LAT),INISTP,LAT,
     & DRAIN,EVAP,HFLX,RNET,EP1D,COWAVE)
C
      DO 290 J=1, 384
C 05/31/96 MK
      SNOWEVAP(J,LAT) = SNOWEVAP(J,LAT) + SNOWEV(J)*DELTIM
      GFLUX(J,LAT)=GFLUX(J,LAT)+EVAPS(J)*DTF
      TMPMAX(J,LAT) = MAX(TMPMAX(J,LAT),T2(J))
      TMPMIN(J,LAT) = MIN(TMPMIN(J,LAT),T2(J))
      EP(J,LAT)=EP(J,LAT)+EP1D(J) * DTF
  290 CONTINUE
C
C  GRID POINT MONITOR
C
        DO 342 IPT=1,NPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA( 5,IGPT,ITNUM)= TSEA (IGRD(IGPT),LAT)
          SVDATA( 15,IGPT,ITNUM)= QSS  (IGRD(IGPT))
          SVDATA( 16,IGPT,ITNUM)= PLANTR(IGRD(IGPT),LAT)
          SVDATA( 19,IGPT,ITNUM)= EVAPS(IGRD(IGPT))
          SVDATA( 22,IGPT,ITNUM)= ZORL (IGRD(IGPT),LAT)
          SVDATA( 23,IGPT,ITNUM)= CD  (IGRD(IGPT))
          SVDATA( 24,IGPT,ITNUM)= CDQ (IGRD(IGPT))
          SVDATA( 62,IGPT,ITNUM)= RNET (IGRD(IGPT))
          SVDATA( 63,IGPT,ITNUM)= EVAP (IGRD(IGPT))
          SVDATA( 64,IGPT,ITNUM)= HFLX (IGRD(IGPT))
          SVDATA( 6,IGPT,ITNUM)= STSOIL (IGRD(IGPT),1)
          SVDATA( 7,IGPT,ITNUM)= STSOIL (IGRD(IGPT),2)
          SVDATA( 34,IGPT,ITNUM)= U10 (IGRD(IGPT))
          SVDATA( 35,IGPT,ITNUM)= V10 (IGRD(IGPT))
          SVDATA( 30,IGPT,ITNUM)= T2  (IGRD(IGPT))
          SVDATA( 31,IGPT,ITNUM)= Q2  (IGRD(IGPT))
          SVDATA( 32,IGPT,ITNUM)= CANOPY(IGRD(IGPT),LAT)
          SVDATA( 33,IGPT,ITNUM)= DRAIN(IGRD(IGPT))
342     CONTINUE
C
C     COMPUTE COEFFICIENT OF EVAPORATION IN EVAPC
C
      DO 320 J=1, 384
      TSTAR(J) = TSEA(J,LAT)
      IF (EVAPC(J).GT.1. E 0) EVAPC(J)=1.0 E 0
  320 CONTINUE
C
C     OVER SNOW COVER OR ICE OR SEA, COEF OF EVAP =1.0. E 0
C
      DO 330 J=1, 384
      IF ((SHELEG(J,LAT).GT.0. E 0) .OR.
     1     (SLMSK(J,LAT).NE.1. E 0))
     2      EVAPC(J)=1. E 0
  330 CONTINUE
C
C  DO VERTICAL DIFFUSION
C
      CALL ZNLACM( 384 ,DTDT,PSEXP,-DTF,KDTVRDF,LAT)
      CALL ACCDIA(LAN, 384 ,DTDT,-DTF,KDTVRDF,GDA)
      CALL MONINP( 384 , 386 , 28 ,DVDT,DUDT,
     1 DTDT,DQDT,
     1 SYN(1,KSU,LAN),SYN(1,KSV,LAN),
     1 SYN(1,KST,LAN),SYN(1,KSQ,LAN),
     2         TOV,CD,PSEXP,
     4         CDQ,QSS,EVAPC,EVAPD,
     5         SI,DEL,CL,SL,RCL,DELTIM,TSTAR,LAT,KDT,THOUR,
     6  DUSFC1,DVSFC1,DTSFC1,DQSFC1)
C
      DO 340 J=1, 384
      DUSFC(J,LAT)=DUSFC(J,LAT)+DUSFC1(J)*DTF
      DVSFC(J,LAT)=DVSFC(J,LAT)+DVSFC1(J)*DTF
      DTSFC(J,LAT)=DTSFC(J,LAT)+DTSFC1(J)*DTF
      DQSFC(J,LAT)=DQSFC(J,LAT)+DQSFC1(J)*DTF
C-WAV IF(DTWAVE.GT.0.) THEN
C-WAV USTRGG(J,LAT)=USTRGG(J,LAT)+DUSFC1(J)*DTF
C-WAV VSTRGG(J,LAT)=VSTRGG(J,LAT)+DVSFC1(J)*DTF
C-WAV ENDIF
340   CONTINUE
C
C  GRID POINT MONITOR
C
        DO 334 IPT=1,NPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA( 17,IGPT,ITNUM)= DQSFC1(IGRD(IGPT))
          SVDATA( 18,IGPT,ITNUM)= DTSFC1(IGRD(IGPT))
          SVDATA( 20,IGPT,ITNUM)= DUSFC1(IGRD(IGPT))
          SVDATA( 21,IGPT,ITNUM)= DVSFC1(IGRD(IGPT))
334     CONTINUE
C
      CALL GWDPS( 384 , 386 , 28 ,DVDT,DUDT,
     1 SYN(1,KSU,LAN),SYN(1,KSV,LAN),
     2 SYN(1,KST,LAN),SYN(1,KSQ,LAN),
     3  PSEXP,SI,DEL,CL,SL,RCL,DELTIM,LAT,KDT,HPRIME(1,LAT),
     4  DUSFC1,DVSFC1)
C
      DO 341 J=1, 384
      DUGWD(J,LAT)=DUGWD(J,LAT)+DUSFC1(J)*DTF
      DVGWD(J,LAT)=DVGWD(J,LAT)+DVSFC1(J)*DTF
341   CONTINUE
C
C  GRID POINT MONITOR
C
        DO 335 IPT=1,NPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA( 28,IGPT,ITNUM)= DUSFC1(IGRD(IGPT))
          SVDATA( 29,IGPT,ITNUM)= DVSFC1(IGRD(IGPT))
335     CONTINUE
C
      CALL ZNLACM( 384 ,DUDT,PSEXP, DTF,KDUVRDF,LAT)
      CALL ZNLACM( 384 ,DVDT,PSEXP,-DTF,KDVVRDF,LAT)
      CALL ZNLACM( 384 ,DTDT,PSEXP, DTF,KDTVRDF,LAT)
      CALL ZNLACM( 384 ,DQDT,PSEXP, DTF,KDQVRDF,LAT)
      CALL ACCDIA(LAN, 384 ,DUDT, DTF,KDUVRDF,GDA)
      CALL ACCDIA(LAN, 384 ,DVDT,-DTF,KDVVRDF,GDA)
      CALL ACCDIA(LAN, 384 ,DTDT, DTF,KDTVRDF,GDA)
      CALL ACCDIA(LAN, 384 ,DQDT, DTF,KDQVRDF,GDA)
C
      DO 350 K=1, 28
      DO 350 J=1, 384
      SYN(J,KAT-1+K,LAN)=SYN(J,KST-1+K,LAN)+DTDT(J,K)*DT2
      SYN(J,KAQ-1+K,LAN)=SYN(J,KSQ-1+K,LAN)+DQDT(J,K)*DT2
      SYN(J,KAU-1+K,LAN)=SYN(J,KSU-1+K,LAN)+DUDT(J,K)*DT2
      SYN(J,KAV-1+K,LAN)=SYN(J,KSV-1+K,LAN)-DVDT(J,K)*DT2
  350 CONTINUE
C
C   DUDT NOT USED FROM HERE ON AND WE USE IT TO STORE WIND SPEED
C
      DO K=1, 28
       DO J=1, 384
      DUDT(J,K)=RCS*SQRT(SYN(J,KSU-1+K,LAN)**2
     *                  +SYN(J,KSV-1+K,LAN)**2)
      ENDDO
      ENDDO
C
C  CALL TO GWATER
C
      IF(INISTP.LE.1) THEN
C.....
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP,-FRAIN,KDTCONV,LAT)
      CALL ZNLACM( 386 ,SYN(1,KAQ,LAN),PSEXP,-FRAIN,KDQCONV,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN),-FRAIN,KDTCONV,GDA)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAQ,LAN),-FRAIN,KDQCONV,GDA)
      CALL SASCNV( 384 , 386 , 28 , 62 ,DELTIM,DEL,SL,SLK,PSEXP,
     2            SYN(1,KAQ,LAN),SYN(1,KAT,LAN),CLD1D,
     3            EVAPC,KBOT,KTOP,KUO,DUDT,LAT,SLMSK(1,LAT))
C     CALL KUOCNV( 384 , 386 , 28 , 62 ,DELTIM,DEL,SL,SLK,PSEXP,
C    1            SYN(1,KSQM,LAN),
C    2            SYN(1,KAQ,LAN),SYN(1,KAT,LAN),
C    3            EVAPC,KBOT,KTOP,KUO)
      DO 235 J=1, 384
      EVAPD(J)=FRAIN*EVAPC(J)
      BENGSH(J,LAT)=BENGSH(J,LAT)+EVAPD(J)
      CLDWRK(J,LAT) = CLDWRK(J,LAT) + CLD1D(J) * DTF
235   CONTINUE
      CALL CNVCLD(CLSTP, 384 ,EVAPD,KBOT,KTOP,
     1            CV(1,LAT),CVB(1,LAT),CVT(1,LAT))
C
C  GRID POINT MONITOR - CONVECTIVE
C
        DO 336 IPT=1,LPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA(11,IGPT,ITNUM)=SVDATA(11,IGPT,ITNUM)+EVAPD(IGRD(IGPT))
336     CONTINUE
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP, FRAIN,KDTCONV,LAT)
      CALL ZNLACM( 386 ,SYN(1,KAQ,LAN),PSEXP, FRAIN,KDQCONV,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN), FRAIN,KDTCONV,GDA)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAQ,LAN), FRAIN,KDQCONV,GDA)
C.....
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP,-FRAIN,KDTSHAL,LAT)
      CALL ZNLACM( 386 ,SYN(1,KAQ,LAN),PSEXP,-FRAIN,KDQSHAL,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN),-FRAIN,KDTSHAL,GDA)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAQ,LAN),-FRAIN,KDQSHAL,GDA)
      CALL SHALCV( 384 , 386 ,LEVSHC,DELTIM,DEL,SI,SL,SLK,KUO,PSEXP,
     1            SYN(1,KAQ,LAN),SYN(1,KAT,LAN))
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP, FRAIN,KDTSHAL,LAT)
      CALL ZNLACM( 386 ,SYN(1,KAQ,LAN),PSEXP, FRAIN,KDQSHAL,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN), FRAIN,KDTSHAL,GDA)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAQ,LAN), FRAIN,KDQSHAL,GDA)
C.....
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP,-FRAIN,KDTLARG,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN),-FRAIN,KDTLARG,GDA)
      CALL LRGSCL( 384 , 386 , 28 ,DELTIM,DEL,SL,PSEXP,
     1            SYN(1,KAQ,LAN),SYN(1,KAT,LAN),EVAPC)
      CALL ZNLACM( 386 ,SYN(1,KAT,LAN),PSEXP, FRAIN,KDTLARG,LAT)
      CALL ACCDIA(LAN, 386 ,SYN(1,KAT,LAN), FRAIN,KDTLARG,GDA)
C
      DO 440 J=1, 384
      EVAPD(J)=EVAPD(J)+FRAIN*EVAPC(J)
      GESHEM(J,LAT)=GESHEM(J,LAT)+EVAPD(J)
  440 CONTINUE
C
C  GRID POINT MONITOR - LRGSCL
C
        DO 338 IPT=1,LPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA(12,IGPT,ITNUM)=SVDATA(12,IGPT,ITNUM)+EVAPC(IGRD(IGPT))
338     CONTINUE
        IF (ILSHRT.LT.2) THEN
          DO IPT=1,NPTLAT
            IGPT=IPTLAT(IPT)
            DO K=1, 28
              SVDATA(K+ 80 +2* 28 ,IGPT,ITNUM) =
     1                          SYN(IGRD(IGPT),KST-1+K,LAN)
              SVDATA(K+ 80 +3* 28 ,IGPT,ITNUM) =
     1                          SYN(IGRD(IGPT),KSQ-1+K,LAN)
            ENDDO
          ENDDO
        ENDIF
C
C  ESTIMATE T850 FOR RAIN-SNOW DECISION
C
      DO J = 1,  384
        PK(J) = PSEXP(J) * SL(1)
        T850(J) = SYN(J,KAT,LAN)
      ENDDO
      DO K = 1,  28  - 1
        DO J = 1,  384
          PKP(J) = PSEXP(J) * SL(K+1)
          IF(PK(J) .LE. P850 .AND. PKP(J) .GT. P850) THEN
            T850(J) = SYN(J,KAT-1+K,LAN) - (PK(J) - P850) /
     &                (PK(J) - PKP(J)) * (SYN(J,KAT-1+K,LAN)
     &                - SYN(J,KAT+K,LAN))
          ENDIF
          PK(J) = PKP(J)
        ENDDO
      ENDDO
C
C  FACTOR=WEIGHTED MEAN TEP.
      DO 450 J=1, 384
C     FACTOR(J)=0.35E0*SYN(J,KAT,LAN)+0.65*SYN(J,KAT+1,LAN)
C     IF(FACTOR(J).GT.273.2) THEN
C       GESH(J)=1.
C     ELSE
C       GESH(J)=0.
C     ENDIF
      IF(T850(J).GT.273.16) THEN
        GESH(J) = 1.
      ELSE
        GESH(J) = 0.
      ENDIF
      IF(SLMSK(J,LAT).NE.0.) THEN
        SHELEG(J,LAT)=SHELEG(J,LAT)+1000.*EVAPD(J)*(1.-GESH(J))
C 05/31/96
        SNOWFALL(J,LAT) = SNOWFALL(J,LAT) + EVAPD(J)*(1.-GESH(J))
      ENDIF
      EVAPD(J) = GESH(J) * EVAPD(J)
  450 CONTINUE
C
C
C  UPDATE SOIL MOISTURE AND CANOPY WATER AFTER PRECIPITATION HAS BEEN
C  COMPUTED
C
      CALL PROGT2( 384 , 2 ,RHSCNPY,RHSMC,AI,BI,CCI,SMSOIL,
     &  SLMSK(1,LAT),CANOPY(1,LAT),EVAPD,RUNOF,SNOWMT,
     &  ZSOIL,SOILTYP,SIGMAF,DELTIM,LAT)
        DO IPT=1,NPTLAT
          IGPT=IPTLAT(IPT)
          SVDATA( 9,IGPT,ITNUM)= SMSOIL (IGRD(IGPT),1)
          SVDATA( 61,IGPT,ITNUM)= SMSOIL (IGRD(IGPT),2)
        ENDDO
C
C  TOTAL RUNOFF IS COMPOSED OF DRAINAGE INTO WATER TABLE AND
C  RUNOFF AT THE SURFACE AND IS ACCUMULATED IN UNIT OF METERS
C
      DO J = 1,  384
        RUNOFF(J,LAT) = (DRAIN(J) + RUNOF(J)) * DTF / 1000.
     &                + RUNOFF(J,LAT)
C 05/31/96 MK
        SNOWMELT(J,LAT) = SNOWMELT(J,LAT) + 
     1                    SNOWMT(J)*DELTIM*HFUS*RHOH2O
      ENDDO
C
C  RETURN UPDATED SMSOIL AND STSOIL TO GLOBAL ARRAYS
C
      DO K = 1,  2
        DO J = 1,  384
          SMC(J,LAT,K) = SMSOIL(J,K)
          STC(J,LAT,K) = STSOIL(J,K)
        ENDDO
      ENDDO
      ENDIF
C
      DO 4901 J=1,384
      PWAT(J,LAT)=0.
 4901 CONTINUE
C
      DO 490 K=1, 28
      DO 490 J=1, 384
      SYN(J,KAT-1+K,LAN)=SYN(J,KAT-1+K,LAN)*(1.+FV*SYN(J,KAQ-1+K,LAN))
      PWAT(J,LAT)=PWAT(J,LAT)+DEL(K)*SYN(J,KAQ-1+K,LAN)
  490 CONTINUE
C
      DO 4902 J=1,384
      PWAT(J,LAT)=PWAT(J,LAT)*PSEXP(J)*(1.E3/9.8)
4902  CONTINUE
C
      CALL FTI 192 (SYN(1,KAB,LAN),SYN(1,KAFB,LAN),2*LOTBA,-1)
C
1000  CONTINUE
      CALL PUTDIA(NGG,NWGDA*KDGDA,GDA)
C
C
      DO 2500 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
      DO 714 I=1, 4032
      QWW(I,LAN)=QTT(I,LAN)*WGB(LAT)
714   CONTINUE
C
      CALL GOZRIM(QTT(1,LAN),QVV(1,LAN),QDD(1,LAN),
     1            EPSI,LAT,RBS2,WGB(LAT))
C
      CALL FPLFPB(RBS2(LAT),RL,
     X FPL(1,1,1,LAN),FML(1,1,1,LAN),FPD(1,1,1,LAN),FMD(1,1,1,LAN),
     X          SYN(1,KAFB,LAN))
2500  CONTINUE
C
C  LATITUDE LOOP
      DO 3000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
C
      CALL FL2I(FPL(1,1,1,LAN),FML(1,1,1,LAN),ZE,QWW(1,LAN),4* 28 )
C
      CALL FL2I(FPD(1,1,1,LAN),FMD(1,1,1,LAN),ZE,QDD(1,LAN),2* 28 )
C
      IF(TGMXL(LAN).GT.TGMX) THEN
        TGMX=TGMXL(LAN)
        IGMX=IGMXL(LAN)
        KGMX=KGMXL(LAN)
        JGMX=LAT
      ELSE IF(TGMNL(LAN).LT.TGMN) THEN
        TGMN=TGMNL(LAN)
        IGMN=IGMNL(LAN)
        KGMN=KGMNL(LAN)
        JGMN=LAT
      ENDIF
3000  CONTINUE
      LATDON=LATDON+(LAT2-LAT1+1)
10000 CONTINUE
      DTFLUX=DTFLUX+DTF
      IF(LADJ) THEN
      DO 531 J=1, 4032
      Z(J)=0.0
531   CONTINUE
      ENDIF
CC
      DO  18 K=1, 28
      DO 530 J=1, 4032
      IF(LADJ) THEN
C  INCLUDE MOISTURE CHANGE IN PRESSURE TENDENCY
CHUUG Z(J)=Z(J)+(RQ0(J,K)-RT(J,K))*DEL(K)
      DI(J,K)=-DI(J,K)-X(J,K)
      TE(J,K)= TE(J,K)-Y(J,K)
      ELSE
C  INCLUDE MOISTURE CHANGE IN PRESSURE TENDENCY
CHUUG Q(J)=Q(J)+(RQ0(J,K)-RT(J,K))*DEL(K)
      X(J,K)=-DI(J,K)
      Y(J,K)= TE(J,K)
      ENDIF
      W(J,K)= ZE(J,K)
      RT(J,K)=RQ(J,K)
      RQ(J,K)=RQ0(J,K)
  530 CONTINUE
   18 CONTINUE
      IF(LADJ) THEN
      CALL IMPADI(X,Y,Q,DI,TE,Z,AM,BM,TOV,SV,DELTIM,ULN,VLN)
      ENDIF
      PRINT '(" GLOOPB T RANGE ",2(4X,F6.1," @I,K,LAT ",3I4))',
     & TGMX,IGMX,KGMX,JGMX,TGMN,IGMN,KGMN,JGMN
      CALL SYNDIA
      RETURN
      END
      SUBROUTINE IMPADI(D,T,Q,X,Y,Z,AM,BM,TOV,SV,DT,U,V)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    IMPADJ      IMPLICIT ADJUSTMENT OF PHYSICS TENDENCIES.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: EXTENDS THE SEMI-IMPLICIT TIME INTEGRATION TO INCLUDE
C           THE PHYICAL FORCING TERMS COMPUTED IN GLOOPB.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL IMPADJ (D,T,Q,X,Y,Z,AM,BM,TOV,SV,DT,U,V)
C   INPUT ARGUMENT LIST:
C     D        - DIVERGENCE             BEFORE PHYSICS
C     T        - TEMPERATURE            BEFORE PHYSICS
C     Q        - LN(PSFC)               BEFORE PHYSICS
C     X        - DIVERGENCE  ADJUSTMENT DUE TO PHYSICS
C     Y        - TEMPERATURE ADJUSTMENT DUE TO PHYSICS
C     Z        - LN(PSFC)    ADJUSTMENT DUE TO PHYSICS
C     AM       - MATRIX RELATING GEOPOTENTIAL TO TEMPERATURE.
C     BM       - MATRIX RELATING TEMPERATURE TENDENCY TO DIVERGENCE.
C     TOV      - ARRAY = 300 DEG K AT ALL LEVELS.
C     SV       - NEGATIVE OF SIGMA SPACING FOR EACH LAYER.
C     DT       - TIME STEP (SEC).
C
C   OUTPUT ARGUMENT LIST:
C     X        - DIVERGENCE  ADJUSTED   AFTER PHYSICS
C     Y        - TEMPERATURE ADJUSTED   AFTER PHYSICS
C     Z        - LN(PSFC)    ADJUSTED   AFTER PHYSICS
C     U        - WORK ARRAY.
C     V        - WORK ARRAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C     D, T, Q, ARE SPECTRAL COMPONENTS AT (T-1)
C     X, Y, Z  ARE SPECTRAL COMPONENTS OF NONLIN. TERMS
      DIMENSION D( 4033 , 28 ), T( 4033 , 28 )
      DIMENSION X( 4033 , 28 ), Y( 4033 , 28 )
      DIMENSION U( 4033 , 28 ), V( 4033 , 28 )
      DIMENSION Q( 4033 ),Z( 4033 )
      DIMENSION AM( 28 , 28 ),BM( 28 , 28 )
      DIMENSION TOV( 28 ),SV( 28 )
      COMMON/COMSIC/ INDEX( 2016 ),TOR( 28 ),TKCTA4( 28 ),
     &               DM( 28 , 28 , 63 ),DIAINV( 28 , 63 )
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
      DIMENSION FR( 28 ),FI( 28 ),GR( 28 ),GI( 28 ),
     1  QDTZ( 4032 ),ELN( 4032 , 28 )
C.......................................................
      DO  17 J=1, 28
      DO 300 I=1, 4032
      V(I,J) = 0. E 0
300   CONTINUE
      DO  18 K=1, 28
      DO 350 I=1, 4032
      V(I,J) = V(I,J) + Y(I,K)*AM(J,K)
350   CONTINUE
18    CONTINUE
      DO 400 I=1, 4032
      V(I,J) = V(I,J) + TOR(J)*Z(I)
      V(I,J) = V(I,J)*SNNP1(I)
      U(I,J) = X(I,J) + V(I,J)*DT
400   CONTINUE
17    CONTINUE
C.......................................................
C      2000 IS (L,N) SPECTRAL COMPONENT LOOP
C     SET COLUMN DIAINVTORS FOR PRESENT VALUE OF IN
C....
      DO 10 J=1, 28
      DO 500 I=1, 4032
      V(I,J)=0.
500   CONTINUE
      DO 7 K=1, 28
      DO 7 I=1, 2016
      NN=INDEX(I)
      V(2*I-1,J)=V(2*I-1,J)+DM(J,K,NN)*U(2*I-1,K)
      V(2*I  ,J)=V(2*I  ,J)+DM(J,K,NN)*U(2*I  ,K)
7     CONTINUE
10    CONTINUE
C....
2000  CONTINUE
C...........................................................
      DO 550 I=1, 4032
      U(I,1) = 0. E 0
550   CONTINUE
      DO  25 K=1, 28
      DO 600 I=1, 4032
      U(I,1) = U(I,1) + SV(K)*V(I,K)
600   CONTINUE
25    CONTINUE
      DO 650 I=1, 4032
      Q(I) = Q(I) + Z(I) + DT*U(I,1)
650   CONTINUE
      DO  26 K=1, 28
      DO 700 I=1, 4032
      U(I,K) = 0.
700   CONTINUE
26    CONTINUE
C
      DO  29 J=1, 28
      DO  28 K=1, 28
      DO 800 I=1, 4032
      U(I,J) = U(I,J) + V(I,K)*BM(J,K)
800   CONTINUE
28    CONTINUE
29    CONTINUE
      DO  32 K=1, 28
      DO 850 I=1, 4032
      D(I,K) = D(I,K) + V(I,K)
      T(I,K) = T(I,K) + Y(I,K) + DT*U(I,K)
850   CONTINUE
32    CONTINUE
      RETURN
      END
      SUBROUTINE GLOOPR
C
C        UPDATES MADE TO ADD OCEANIC STRATUS AND TO FIX CONV CLOUD..
C                     TO GLOOPR - IVV(2),IBL ARE SET=1....
C                     TO GLOOPR - SET MIN Q TO 1.E-10,RATHER THAN 1.E-6
C                                 TO ANTICIPATE AVOIDING CLD CREATION
C                                 IN EXTREMELY DRY,COLD (WINTER) REGIONS
C                                 WHERE 1.E-6 COULD IMPLY HI VALU OF RH
C                     TO CLDJMS - MULTITUDE OF CHANGES
C        UPDATES MADE TO FIX THE H2D,H3D FILES...KAC AUG 90...
C        UPDATES MADE TO GLOOPR - CALL WRTH2D BEFORE WRTRAD (SO CTOP OK)
C                     TO GLOOPR - SEND WORK ARRAY TO WRTH3D
C                     TO WRTH3D - TO WRITE PROPER LAYERS OF HEAT..
C                                 (IN WRTRAD)
C        UPDATES MADE TO ADD GRID POINT DIAGNOSTICS ..K.A.C...SEP 91
C                     TO GLOOPR -
C        UPDATES MADE TO FIX SW APPROX              ..K.A.C...NOV 91
C                     TO COSZMN
C        UPDATES MADE TO PASS AND RECEIVE SIB DATA  ..K.A.C...MAR 92
C                     TO GLOOPR -
C        UPDATES MADE TO FIX SW RAD DIAGNOSTICS     ..K.A.C...JUN 92
C                     PROPER DIURNAL WEIGHTING
C                     TO GLOOPR AND COSZMN
C        UPDATES MADE TO CALCULATE CLEAR-SKY "ON-THE-FLY" KAC AUG 92
C                     TO GLOOPR,RADFS,FST,SPA,LWR,SWR
C                     ...FOR CLOUD FORCING....
CYH93...
C        UPDATES MADE FOR THE COMPLETELY NEW CLOUD ROUTINE (CLDJMS),USE
C                     FLAG IVVA TO CONTROL VERTICAL VELOCITY ADJ.
C                     FOR LOW CLD (=0: WITHOUT,  =1: WITH)
CYH94  NOT            USE FLAG IEMIS TO CONTROL CLD EMISS. SCHEME
CYH94  NOT            (=0: ORIG. SCHEME, =1: TEMP. DEP. SCHEME.)
C                     USE FLAG INVR TO CONTROL LAPSE RATE INVERSION
C                     TYPE OF CLD (=0: WITHOUT,  =1: WITH)
C                     TO GLOOPR AND RADFS ...Y.H.           ...DEC92
C        UPDATES MADE TO CALL CLD OPTICAL PROPERTY ROUTINE (CLDPRP),
C                     TO GIVE CLD EMISSIVITY, OPTICAL DEPTH, LAYER
C                     REFLECTANCE AND TRANSMITANCE
C                     TO GLOOPR AND RADFS ...Y.H.           ...FEB93
CYH94                 CLDPRP CALLED FROM RADFS...   Y.H.    ...FEB94
CTUNE
C       UPDATES MADE TO ALLOW TUNED CLD-RH DATA TO BE USED..CTUNE
C                   TO GLOOPR AND CLDJMS          ..K.A.C...DEC 92
C                   SPATIAL INTERPOLATION OF TABLES ........MAY93
C                   USE ONLY 1 SET OF TUNING TABLES FOR ALL FCST HRS,
C                    THE TUNING OF THE 24HR FCST       .....JAN94
C                    OLD CODE USED 6 TABLES..SEE CKC94 .....FEB94
C                   SINCE TUNING DONE FOR H,M,L CLD, VERTICALLY
C                    BLEND THE RELATIONS AT OLD HML BDRIES..JAN94
C        UPDATES MADE TO CHANGE DEFINITION OF H,M,L DOMAINS..
C          TO GLOOPR,GCLJMS,CLDJMS, CLDPRP   K.A.C...DEC92 + AUG93
CYH94         TO GLOOPR, CLDJMS, CLDPRP      K.A.C...JAN94
CYH94         TO CLDJMS..  CVTOP = KCVT (NOT KCVT+1)
CYH94                    AND TO ISTRAT=1 PART...NEW STRATUS +
CYH94                  ..NO CLOUD BELOW LLYRL..  K.A.C...MAR94
CYH94                  ..CHANGES TO CLDPRP.........Y.H...MAR94
CTUNE
CYH93...
C---
c     PARAMETER (NCPUS= 12 ,NCPUS1=NCPUS+1)
      PARAMETER (NCPUS= 1 ,NCPUS1=NCPUS+1)
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
      PARAMETER (NRCHNK=( 256 -1)/IMAX+1)
      PARAMETER (CNWATT=- 4.1855E+0 *1.E4/60.,CNPROG=1./CNWATT)
CTUNE
CKC94 PARAMETER (MCLD=3,NSEAL=2,NBIN=100,NLON=2,NLAT=4,IDA=6)
      PARAMETER (MCLD=3,NSEAL=2,NBIN=100,NLON=2,NLAT=4)
CTUNE
C...
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
c      COMMON IDATE(4),RELVOR( 28 ),ABSVOR( 28 ),
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
      PARAMETER(LOTRS=5* 28 +3,LOTRST=2* 28 +1)
      PARAMETER(LWORKR=(20/LOTRS*20+LOTRS/20*LOTRS)/(20/LOTRS+LOTRS/20))
       DIMENSION VECTOP(2, 63 ,LOTRST)
C....
      DIMENSION WORKR( 256 ,LWORKR)
      DIMENSION IWORKR( 256 )
C....
      COMMON /ASTSAV/ SOLC,RSIN1,RCOS1,RCOS2
C....
      COMMON /VERCON/ ROTSIN,ROTCOS,SEADRY,SL1KAP,C1,C2,RLRV,SL100K
C....
      INTEGER SEASON
	common /diucon/fcstda, daz(12), fjdnmc, tslag, timin, tpi
	common /diucon/ rlag, year, day, dhr, hpi
	common /diucon/season, jtyme(5), jdnmc, ixxxx

C
      COMMON /TABLES/  SC
C....
      DIMENSION COSZER( 256 , 31 )
      DIMENSION COSZDG( 256 , 31 )
C...
	common /SHRCOM/wgrlon(256), wgrlat(31), raddt, dlt, fjd
        common /SHRCOM/ r1,alf,xmin

      COMMON /SHRCOM/
     * COLRAR( 31 ),WGR( 31 ),WGRCS( 31 ),RRS2( 31 )
      COMMON /SHRCOM/ SINLAR( 31 ),COSLAR( 31 )
C...
C.............................................................
      COMMON /SHRCOM/ ALBEDR( 256 , 31 ),SLMSKR( 256 , 31 )
      COMMON /SHRCOM/ HMM( 64 ),RLON( 128 ),RLAT( 64 )
C....
creanl2      DIMENSION AVECLD( 28 , 62 ),CLDL(4, 62 ),CLDSIG( 28 ,18)
      DIMENSION AVECLD( 28 , 62 ),CLDL(12, 62 ),CLDSIG( 28 ,18)
      DIMENSION AVECV(3, 62 ),ZONHT( 28 , 62 )
C....
      COMMON /SHRCOM/ ILEFTR( 256 ),IRGHTR( 256 )
      COMMON /SHRCOM/ INRLAT( 31 )
C....
      COMMON /SHRCOM/ JSNO,JMAXP1,IPOINT,JPOINT,
     1              IUNCO2,KCCO2,ITIMSW,ITIMLW
      COMMON /SHRCOM/ IYR,IMON,IDAY,IZTIM,IHR,LGTH,IND,KDIMP1,KYEAR,
     1                JD,IFJD, MUNTH,IM,ID,IYEAR
      COMMON /SHRCOM/ RUNRAD
      LOGICAL RUNRAD
CSIB  .. ALBEDOES FROM SIB PARAMETERIZATION...NEEDED FOR SW RAD
C     ..   THEY NEED TO BE INTERPOLATED FROM FCST TO RADIATION GRID
C-SIB COMMON/SIB/ ALVBF( 384 , 47 ),ALNBF( 384 , 47 ),
C-SIB1            ALVDF( 384 , 47 ),ALNDF( 384 , 47 )
C...... DOWNWARD SW FLUXES FROM SW RAD..FOR SIB PARAMETERIZATION
C     ..   THEY NEED TO BE INTERPOLATED FROM RADIATION TO FCST GRID
C-SIB COMMON/SIB/ GDFVBF( 384 , 47 ),GDFNBF( 384 , 47 ),
C-SIB1            GDFVDF( 384 , 47 ),GDFNDF( 384 , 47 )
      DIMENSION GDFVB( 256 ),GDFNB( 256 )
      DIMENSION GDFVD( 256 ),GDFND( 256 )
CSIB
      PARAMETER(NVRKEN= 80 + 8 * 28 ,NPTKEN= 50 )
      PARAMETER(NSTKEN= 36 )
      COMMON/COMGPD/ SVDATA(NVRKEN,NPTKEN,NSTKEN),
     1               IGRD(NPTKEN),JGRD(NPTKEN),
     2               IGRDR(NPTKEN),JGRDR(NPTKEN),
     3               ITNUM,NPOINT,ISAVE,ISSHRT,ILSHRT,IKFREQ
C....
CYH93 DIMENSION VVEL( 256 , 28 ),SSNOW( 256 ),EMIS( 256 )
      DIMENSION VVEL( 256 , 28 ),SSNOW( 256 )
C....   CLDARY CONTAINS MULTI LAYERS OF CLOUD
CYH94 DIMENSION CLDARY( 256 , 28 ,NCPUS),CLSTR( 256 ,NCPUS)
      DIMENSION CLDARY( 256 , 28 ,NCPUS)
CYH94 DIMENSION EMIS0( 256 ,3,NCPUS),TAUC0( 256 ,3,NCPUS)
CYH93...
C....
      DIMENSION FLWUP( 256 ),FSWUP( 256 ),FSWDN( 256 )
      DIMENSION SSWUP( 256 ),SSWDN( 256 ),SLWUP( 256 ),SLWDN( 256 )
      DIMENSION FLWUP0( 256 ),FSWUP0( 256 )
      DIMENSION SSWUP0( 256 ),SSWDN0( 256 ),SLWDN0( 256 )
C....
      DIMENSION    QTT( 4032 ,NCPUS),QVV( 4158 ,NCPUS),
     1             SYN( 258 ,LOTRS,NCPUS),PPPRSA( 256 , 28 ,NCPUS),
     1             WRKO3A( 256 , 28 ,NCPUS),ALBDOA( 256 ,NCPUS),
creanl2     2             RLATA( 256 ,NCPUS),CLDSA( 256 ,3,NCPUS),
     2             RLATA( 256 ,NCPUS),CLDSA( 256 ,9,NCPUS),
     3             MTOPA( 256 ,3,NCPUS),MBOTA( 256 ,3,NCPUS),
     4             COSZRO( 256 ,NCPUS),TAUDAR( 256 ,NCPUS),
     5             WRKEMA( 256 ,NCPUS),TRADA( 256 , 28 ,NCPUS),
     6             TSEAR( 256 ,NCPUS),SHELGR( 256 ,NCPUS),
     7             CVR( 256 ,NCPUS),CVTR( 256 ,NCPUS),
     8             CVBR( 256 ,NCPUS),
     9             SWHR( 256 , 28 ,NCPUS1),HLWR( 256 , 28 ,NCPUS1),
     A             SFNSWR( 256 ,NCPUS1),SFDLWR( 256 ,NCPUS1)
     B                                  ,TSFLWR( 256 ,NCPUS1)
C                  ADDED BY BOB GRUMBINE FOR SEA ICE ALBEDO ALGORITHM
     C             , TGR( 256 , NCPUS)
CSIB
      DIMENSION    ALVBR( 256 ,NCPUS),ALNBR( 256 ,NCPUS),
     1             ALVDR( 256 ,NCPUS),ALNDR( 256 ,NCPUS),
     2             GDFVBR( 256 ,NCPUS1),GDFNBR( 256 ,NCPUS1),
     3             GDFVDR( 256 ,NCPUS1),GDFNDR( 256 ,NCPUS1)
C...... DOWNWARD SW FLUXES FROM SW RAD..FOR SIB PARAMETERIZATION
C     ..   SAVED FOR H2D FILE....
      COMMON/SIBSW/ DFVBR( 256 , 31 ),DFNBR( 256 , 31 ),
     1              DFVDR( 256 , 31 ),DFNDR( 256 , 31 )
CSIB
      DIMENSION COSZD( 256 ,NCPUS)
C....
C DI12=SYN(1,0* 28 +1)  DI
C TF12=SYN(1,1* 28 +1)  TE
C RQ12=SYN(1,2* 28 +1)  RQ
C DL12=SYN(1,3* 28 +1)  DPDLAM
C DP12=SYN(1,3* 28 +2)  DPDPHI
C US12=SYN(1,3* 28 +3)  ULN
C VS12=SYN(1,4* 28 +3)  VLN
C  Q12=SYN(1,5* 28 +3)  Q
C....
CYH93...
C     SAVE KDAPRX,KO3,KEMIS,KALB,ISTRAT,IVV,IBL,ICONV,IEMIS,ITHK,
CYH94 SAVE KDAPRX,KO3,KEMIS,KALB,IEMIS,INVR,IVVA,RHMAX,
      SAVE KDAPRX,KO3,      KALB,      INVR,IVVA,RHMAX,
CTUNE1     JCAP,LEVS,CRH,RAD1ST,DTHR,HDTHR,DTLMOD,DTSMOD
     1     JCAP,LEVS,    RAD1ST,DTHR,HDTHR,DTLMOD,DTSMOD,XLABDY,XLOBDY,
     2     XLIM,
     3     RHCLT,RHCL,FHR1,FHR2,FHRTAB,FHR1ST,IDTLN,IDTLS,DLON,ISTRAT
CTUNE
CYH   DIMENSION CRH(3),IVV(3)
CKAC  DIMENSION CRH( 28 ,2)
CTUNE
C...  ARRAY ADDED FOR RH-CL CALCULATION
C     INDICES FOR LON,LAT,CLD TYPE(L,M,H), LAND/SEA RESPECTIVELY
C     NLON=1-2, FOR EASTERN AND WESTERN HEMISPHERES
C     NLAT=1-4, FOR 60N-30N,30N-EQU,EQU-30S,30S-60S
C     LAND/SEA=1-2 FOR LAND(AND SEAICE),SEA
C.... RHCLT WILL CONTAIN ALL TIME LEVELS OF CLD-RH TABLES
      DIMENSION RHCL (NBIN,NLON,NLAT,MCLD,NSEAL)
CKC94 DIMENSION RHCLT(NBIN,NLON,NLAT,MCLD,NSEAL,IDA)
      DIMENSION RHCLA(NBIN,NLON,     MCLD,NSEAL,2)
      DIMENSION RHCLD( 256 ,NBIN,MCLD)
CKC94 DIMENSION FHRTAB(IDA)
      DIMENSION XLABDY(3),XLOBDY(3)
C...   FHRTAB = VALID FCST HRS FOR CLD-RH TABLES
CKC94 DATA FHRTAB / 0. E 0,12. E 0,36. E 0,60. E 0,84. E 0,108. E 0 /
CKAC    ISTRAT = 0, USE CRH BELOW (DEFAULT), = 1 USE TUNED RHCLD
C...    ISTRAT = 0, CALCULATE CRH IN CLDJMS, = 1 USE TUNED RHCLD
      DATA ISTRAT / 1 /
C...   XLABDY = LAT BNDRY BETWEEN TUNING REGIONS,+/- XLIM FOR TRANSITION
C.     XLOBDY = LON BNDRY BETWEEN TUNING REGIONS
      DATA XLABDY / 30. E 0 , 0. E 0 , -30. E 0 /
      DATA XLOBDY / 0. E 0 , 180. E 0 , 360. E 0 /
      DATA XLIM / 5. E 0 /
CTUNE
C..... INITIAL RH CRIT. SET 1 FOR OCEAN, SET 2 FOR LAND.
C      INVR=0 NO LAPSE RATE INVERSION TYPE CLD, =1 WIHT IT
C      IVVA=0 NO VERTICAL VELOCITY ADJ. FOR LOW CLD, =1 WITH ADJ.
CYH93...
CYH94 DATA CRH/9*0.72,7*0.70,12*0.86, 9*0.68,7*0.66,12*0.82/
CKAC  DATA CRH/9*0.75 E 0,7*0.75 E 0,12*0.88 E 0,
CKAC 1          9*0.70 E 0,7*0.70 E 0,12*0.85 E 0/
CYH94 DATA RHMAX/1.00/, IEMIS/1/, INVR/1/, IVVA/1/
      DATA RHMAX/1.00 E 0/, INVR/1/, IVVA/1/
C     DATA CRH/0.8,0.8,0.8/
C     DATA IVV/1,1,0/
C     DATA ISTRAT,IBL,ICONV,IEMIS,ITHK/1,1,1,0,1/
CYH93...
      LOGICAL RAD1ST
CYH94 DATA KDAPRX,KO3,KEMIS,KALB/1,0,0,0/
      DATA KDAPRX,KO3,      KALB/1,0,  0/
      DATA JCAP/ 62 /,LEVS/ 28 /
      DATA RAD1ST/.TRUE./
C....
      IF(RAD1ST) THEN
        RUNRAD = .TRUE.
CTUNE
CKC94  GET CLD-RH RELATIONS IN TABULAR FORM FOR DAY 0-5
CKC94   CALL CRHTAB(RHCLT,IER)
C....  GET CLD-RH RELATIONS IN TABULAR FORM FOR DAY 1
        CALL CRHTAB(RHCL ,IER)
        IF (IER.LT.0) THEN
         ISTRAT = 0
         PRINT 1113
 1113    FORMAT(1H ,'===>TUNING TABLES NOT AVAILABLE..USE DEFAULT CRH')
        END IF
        PRINT 1114,ISTRAT
 1114   FORMAT(1H ,'..FOR DIAGNOSED CLDS....ISTRAT = ',I4)
        FHR1ST = FHOUR - DTSWAV
C....    COMPUTE LONGITUDE REGIONS (DATELINE)
        IDTLN =  128 /2
        IDTLS =  256 *3/4
        DLON  = 360. /  128
CTUNE
        KCCO2 = 0
        IUNCO2 = 15
        IPOINT = 0
        JPOINT = 0
        CALL GLATS ( 31 , COLRAR, WGR, WGRCS, RRS2)
        DO 1 I=1, 31
          SINLAR(I)=COS(COLRAR(I))
          COSLAR(I)=SQRT(1. E 0 - SINLAR(I)*SINLAR(I))
    1   CONTINUE
        CALL GFT 128
CYH93...  THE FOLLOWING CODE HAS BEEN REWRITTEN....
        CALL GCLJMS(SI)
        CALL GRADFS(SL,KCCO2,IUNCO2)
C....
C...      SPECIFY QUANTITIES NEEDED FOR CALL TO NEW RADFS ..KAC JUL89
        KDIMP1 =  28  + 1
        JMAXP1 =  62 +1
C...     SPECIFY THE LATITUDE WHERE PERMANENT SNOW RESIDES POLEWARD...
C         JSNO=LATITUDE CLOSEST TO 70 DEG N-INDICATING EXTENT OF PERM
C         SNOW COVER. WILL CHANGE AS A FCN. OF LATITUDE STRUCTURE.
        JSNO=( 62 +1)/9
C....   GET INTERVAL (HRS) BETWEEN SHORT-WAVE RADIATION CALLS.....
        RADDT = 3600. E 0 * DTSWAV
        CALL LONLAT(RLON, 128 ,RLAT,COLRAR, 31 )
C===>    PREPARE THREE SFC FIELDS AS INPUT TO RADIATION CALCULATIONS
C         ALSO PREPARE 3 CONVECTIVE ARRAYS FOR INPUT TO CLD SCHEME..
C          NEED TO INTERPOLATE FROM FCST MODEL GRID TO RADIATION GRID.
        CALL BILWGT(COLRAB, 47 , 384 ,COLRAR, 31 , 256 ,
     1              INRLAT,WGRLAT,ILEFTR,IRGHTR,WGRLON)
C===>    PREPARE HEATING RATES AND FLUXES FOR SHIPMENT TO FCST MODEL
C          NEED TO INTERPOLATE FROM RADIATION GRID TO FCST MODEL GRID.
        CALL BILWGT(COLRAR, 31 , 256 ,COLRAB, 47 , 384 ,
     1              INSLAT,WGTLAT,ILEFT,IRGHT,WGTLON)
        IF(INISTP.EQ.0) THEN
          DO 50 IV=1,31
           DO 50 J=1, 31
            DO 50 I=1, 256
             FLUXR(I,J,IV) = 0. E 0
   50     CONTINUE
          DO 60 J=1, 47
           DO 60 I=1, 384
            CVAVG(I,J) = 0. E 0
   60     CONTINUE
CSIB
          DO 1877 J=1, 31
            DO 1877 I=1, 256
              DFVBR (I,J) = 0. E 0
              DFNBR (I,J) = 0. E 0
              DFVDR (I,J) = 0. E 0
              DFNDR (I,J) = 0. E 0
 1877     CONTINUE
CSIB
        ENDIF
        CALL INSURF(NFLIP,SHOUR,INISTP,CV,CVB,CVT,SLMSK,
     1              ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,ALBEDR,SLMSKR)
        RAD1ST = .FALSE.
      ENDIF
      DTHR = DELTIM / 3600.0
      HDTHR = 0.5 * DTHR
      ITIMSW = 0
      ITIMLW = 0
      DTSMOD = AMOD(SOLHR,DTSWAV)
      IF(INISTP.NE.0 .OR. DTSMOD.LT.HDTHR .OR. DTSMOD.GE.DTSWAV-HDTHR)
     1   ITIMSW = 1
      DTLMOD = AMOD(SOLHR,DTLWAV)
      IF(INISTP.NE.0 .OR. DTLMOD.LT.HDTHR .OR. DTLMOD.GE.DTLWAV-HDTHR)
     1   ITIMLW = 1
      IF(ITIMSW.EQ.0 .AND. ITIMLW.EQ.0) RETURN
      IF(.NOT.RUNRAD .AND. INISTP.NE.0) GO TO 20000
      PRINT 1001, JCAP, LEVS
 1001 FORMAT (1H0,'GFDL REDUCED RAD',I2,I2,'G, E  TYP, FEB 20 1986')
CTUNE
CKC94 DO 1117 M=1,NSEAL
CKC94  DO 1117 LCC=1,MCLD
CKC94   DO 1117 K=1,NLAT
CKC94    DO 1117 J=1,NLON
CKC94     DO 1117 I=1,NBIN
CKC94      RHCL(I,J,K,LCC,M) = RHCLT(I,J,K,LCC,M,6)
C1117 CONTINUE
C....    ADVANCE THE CLOCK FOR TIME INTERPOLATING THE CLD-RH RELATION
CKC94 FHR1ST = FHR1ST + DTSWAV + .1
CKC94 IHR1ST = FHR1ST
CKC94 FHR1ST = IHR1ST
CKC94 FHLAST = FHRTAB(IDA)
CKC94 IF (FHR1ST.LT.FHLAST) THEN
C...   TIME INTERPOLATE THE CLD-RH RELATION IF .108 HRS
C         LINEAR INTERPOLATION...
C....    DAY 0,1,2,3,4,5 VALID FOR FHR=0,12,36,60,84,108
CKC94  DO 1116 KTIME=2,IDA
CKC94   IF (FHR1ST.LT.FHRTAB(KTIME)) THEN
CKC94    IC2 = KTIME
CKC94    FHR2 = FHRTAB(KTIME)
CKC94    GO TO 1111
CKC94   END IF
C1116  CONTINUE
C1111 CONTINUE
CKC94  IC1 = IC2 - 1
CKC94  FHR1 = FHRTAB(IC1)
CKC94  PRINT 2007,FHR1,FHR2,FHR1ST
C2007  FORMAT(1H ,'..FOR TUNING INTERP, FHR1,FHR2,FHR1ST=',3F6.0)
CKC94  DO 1119 M=1,NSEAL
CKC94   DO 1119 LCC=1,MCLD
CKC94    DO 1119 K=1,NLAT
CKC94     DO 1119 J=1,NLON
CKC94      DO 1119 I=1,NBIN
CKC94       RHCL(I,J,K,LCC,M) =
CKC941                (RHCLT(I,J,K,LCC,M,IC2)-RHCLT(I,J,K,LCC,M,IC1))*
CKC942       (FHR1ST-FHR1)/(FHR2-FHR1)  + RHCLT(I,J,K,LCC,M,IC1)
C1119  CONTINUE
CKC94  IF (FHR1ST.LE.12. E 0) THEN
C....    IF 0-12..USE DAY1 FOR LOW CLOUD..SOME PROBLEM WITH VV OR
C          TUNING ALGORITHM FOR LOW CLD AT DAY0 WHEN VV USED
CKC94   LCC = 1
CKC94   DO 1129 M=1,NSEAL
CKC94    DO 1129 K=1,NLAT
CKC94     DO 1129 J=1,NLON
CKC94      DO 1129 I=1,NBIN
CKC94       RHCL(I,J,K,LCC,M) = RHCLT(I,J,K,LCC,M,2)
C1129   CONTINUE
CKC94  END IF
CKC94 END IF
CTUNE
      IF(INISTP.NE.0) THEN
        DO 70 IV=1,31
         DO 70 J=1, 31
          DO 70 I=1, 256
           FLUXR(I,J,IV) = 0. E 0
   70   CONTINUE
        DO 80 J=1, 47
         DO 80 I=1, 384
          CVAVG(I,J) = 0. E 0
   80   CONTINUE
CSIB
        DO 1888 J=1, 31
         DO 1888 I=1, 256
          DFVBR (I,J) = 0. E 0
          DFNBR (I,J) = 0. E 0
          DFVDR (I,J) = 0. E 0
          DFNDR (I,J) = 0. E 0
 1888   CONTINUE
CSIB
        CALL INSURF(NFLIP,SHOUR,INISTP,CV,CVB,CVT,SLMSK,
     1              ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,ALBEDR,SLMSKR)
      ENDIF
      LGTH= 256 * 31
      IND=-1
      CALL EXTRM1(ALBEDR,LGTH,IND)
      CALL RMSGT ( Q, DI, TE, ZE,DEL,RQ)
C    ****************************************************************
C... * ASTRONOMY CALCULATIONS-ONCE FOR EACH NEW RADIATION STEP      *
C    ****************************************************************
C..      GET 4 DIGIT YEAR FOR JULIAN DAY COMPUTATION
      IYR = IDATE(4)
      IMON = IDATE(2)
      IDAY = IDATE(3)
      IZTIM = IDATE(1)
	  if (iyr.lt.100) then
      KYEAR = 1900 + IYR
	  else
      KYEAR = IYR
	  endif
      CHOUR=FHOUR+SHOUR/3600.
      CALL COMPJD(KYEAR,IMON,IDAY,IZTIM,0,JDNMC,FJDNMC)
      CALL FCSTIM(CHOUR,IMON,IDAY,IZTIM,JDNMC,FJDNMC,RLAG,YEAR,
     1            RSIN1,RCOS1,RCOS2,JD,FJD)
C..**************************
      IF(ITIMSW.EQ.1) THEN
        CALL SOLAR(JD,FJD,R1,DLT,ALF,SLAG,SDEC,CDEC)
        IF(KDAPRX.GE.1) THEN
          CALL COSZMN(SOLHR,SINLAR,COSLAR,SDEC,CDEC,SLAG,
     1                RLON, 128 , 256 , 31 ,COSZER,.TRUE.,COSZDG)
        ENDIF
C..**************************
C...     CALCULATE SOLAR INPUT APPROPRIATE FOR DATE
C..**************************
        SOLC=SC/(R1*R1)
      ENDIF
      CALL CDATE(JD,FJD,MUNTH,IM,ID,IYEAR,IHR,XMIN)
      CALL PRTIME(ID,MUNTH,IYEAR,IHR,XMIN,JD,FJD,DLT,ALF,R1,SLAG,SOLC)
C
      CALL DELLNP(Q,DPDPHI,VECTOP,DPDLAM)
      DO 180 K=1, 28
        CALL DZTOUV(DI(1,K),ZE(1,K),ULN(1,K),VLN(1,K),
     1              VECTOP(1,1,1+K),VECTOP(1,1,1+ 28 +K))
  180 CONTINUE
C..**************************
CC
      LAST=MOD( 31 ,NCPUS)
      NGGS=( 31 -LAST)/NCPUS
      IF(LAST.NE.0)NGGS=NGGS+1
      INCLAT=NCPUS
      LAT1=1-NCPUS
      LAT2=0
      LATDON=0
      DO 10000 NGG=1,NGGS
      IF((NGG.EQ.NGGS).AND.(LAST.NE.0)) INCLAT=LAST
      LAT1=LAT1+NCPUS
      LAT2=LAT2+INCLAT
      IF(NGG.EQ.1) THEN
        LTWIDL=1
        LATRD1=1
      ELSE IF(NGG.EQ.2) THEN
        LTWIDL=MOD(LTWIDL+NCPUS-2,NCPUS1)+1
        LATRD1=LAT1-1
      ELSE
        LTWIDL=MOD(LTWIDL+NCPUS-1,NCPUS1)+1
        LATRD1=LAT1-1
      ENDIF
      LATIN1=INRLAT(LATRD1)+1
CKZ   IF(NGG.EQ.1) LATIN1=1
      IF(LATDON.LE.1) LATIN1=1
      LATIN2=INRLAT(LAT2)
      IF(NGG.EQ.NGGS) LATIN2= 47
      LATOUT=LATIN2-LATIN1+1
      DO 190 LAT=LAT1,LAT2
        LAN=LAT-LATDON
        DO 190 I=1, 256
          CVR (I,LAN) = 0.0 E 0
          CVBR(I,LAN) = 0.0 E 0
          CVTR(I,LAN) = 0.0 E 0
  190 CONTINUE
C...   INTERPOLATE CONVECTIVE CLOUD DATA
      CALL CVINTF(CV,CVT,CVB, 384 , 47 , 47 ,
     1         CVR,CVTR,CVBR, 256 ,INCLAT, 31 ,
     2         ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,
     3         WORKR(1,1),WORKR(1,5),WORKR(1,9),WORKR(1,13),
     4         WORKR(1,17),IWORKR,1,1,LAT1)
      CALL GGINTF(TSEA, 384 , 47 , 47 ,
     1            TSEAR, 256 ,INCLAT, 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
      CALL GGINTF(SHELEG, 384 , 47 , 47 ,
     1            SHELGR, 256 ,INCLAT, 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
C     ADDED BY BOB GRUMBINE FOR SEA ICE/SNOW ALBEDO ALGORITHM
      CALL GGINTF(STC, 384 , 47 , 47 ,
     1            TGR, 256 ,INCLAT, 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
CSIB
C...   INTERPOLATE SIB ALBEDOES.........
      ALVBR=-1.
      ALVBF=-1.
      ALVDR=-1.
      ALVDF=-1.
C-SIB CALL GGINTF(ALVBF, 384 , 47 , 47 ,
C-SIB1            ALVBR, 256 ,INCLAT, 31 ,1,
C-SIB2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
C-SIB CALL GGINTF(ALNBF, 384 , 47 , 47 ,
C-SIB1            ALNBR, 256 ,INCLAT, 31 ,1,
C-SIB2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
C-SIB CALL GGINTF(ALVDF, 384 , 47 , 47 ,
C-SIB1            ALVDR, 256 ,INCLAT, 31 ,1,
C-SIB2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
C-SIB CALL GGINTF(ALNDF, 384 , 47 , 47 ,
C-SIB1            ALNDR, 256 ,INCLAT, 31 ,1,
C-SIB2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORKR,1,1,LAT1)
CSIB
      IF(NGG.EQ.1) THEN
        TSMIN=TSEAR(1,1)
        TSMAX=TSEAR(1,1)
        SHMIN=SHELGR(1,1)
        SHMAX=SHELGR(1,1)
      ENDIF
C
C           LAT LOOP
CTUNE
CTUNE
CYH93...
C....  SHARED(ISTRAT,IVV,IBL,ICONV,IEMIS,ITHK,KDAPRX)
CYH94.........CMIC$6 SHARED(EMIS0,TAUC0,CLSTR)
CYH93...
CYH93...
C....  PRIVATE(SSNOW,VVEL,EMIS)
CYH93...
CTUNE
CTUNE
C
      DO 1000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
      LATCO= 62 +1-LAT
C
      CALL PLN2I(QTT(1,LAN),QVV(1,LAN),COLRAR,LAT)
C
      CALL SUMS2R(DI,SYN(1,1,LAN),QTT(1,LAN),LOTRS)
CCC  X             128 ,  128 /2)
C....
      CALL SUMTOP(SYN(1,3* 28 +2,LAN),VECTOP,QVV(1,LAN),
     1            LOTRST, 128 , 128 /2)
C
C     IF(LAT .EQ. 2) CALL ERREXIT
C
      CALL FTI  128  (SYN(1,1,LAN),WORKR,2*LOTRS,1)
C....
      DO 250 J=1, 256
        SYN(J,5* 28 +3,LAN) = EXP(SYN(J,5* 28 +3,LAN))
  250 CONTINUE
C....
C    CONVERT VIRT. TEMP TO THERMODYNAMIC TEMP.
C.......................................................
      DO 270 K=1, 28
       DO 270 J=1, 256
        IF(SYN(J,2* 28 +K,LAN).LE.0.0 E 0) SYN(J,2* 28 +K,LAN)=1.0 E -10
        SYN(J,1* 28 +K,LAN)=SYN(J,1* 28 +K,LAN)/
     1                       (1.0 E 0+0.6 E 0*SYN(J,2* 28 +K,LAN))
  270 CONTINUE
CTUNE
      XLATNH = RLAT(LAT+1) * 180. E 0 /  3.141593E+0
      XLATSH = - XLATNH
C....  GET RH-CLD RELATION FOR THIS LAT
      IREGNH = 4
      DO 210 K=1,3
       IF (XLATNH.GT.XLABDY(K)) THEN
        IREGNH = K
        GO TO 215
       END IF
  210 CONTINUE
  215 IREGSH = 4
      DO 220 K=1,3
       IF (XLATSH.GT.XLABDY(K)) THEN
        IREGSH = K
        GO TO 225
       END IF
  220 CONTINUE
  225 CONTINUE
      DO 230 ISLA=1,NSEAL
       DO 230 KC=1,MCLD
        DO 230 LO=1,NLON
         DO 230 NBI=1,NBIN
          RHCLA(NBI,LO,KC,ISLA,1) = RHCL(NBI,LO,IREGNH,KC,ISLA)
          RHCLA(NBI,LO,KC,ISLA,2) = RHCL(NBI,LO,IREGSH,KC,ISLA)
  230 CONTINUE
C.....    LINEAR TRANSITION BETWEEN LATITUDINAL REGIONS...
      DO 240 KLA=1,3
       XLNN = XLABDY(KLA)+XLIM
       XLSS = XLABDY(KLA)-XLIM
       IF (XLATNH.LT.XLNN.AND.XLATNH.GT.XLSS) THEN
        DO 235 ISLA=1,NSEAL
         DO 235 KC=1,MCLD
          DO 235 LO=1,NLON
           DO 235 NBI=1,NBIN
            RHCLA (NBI,LO,KC,ISLA,1) =
     1         (RHCL(NBI,LO,KLA,KC,ISLA)-RHCL(NBI,LO,KLA+1,KC,ISLA))
     2       * (XLATNH-XLSS)/(XLNN-XLSS) + RHCL(NBI,LO,KLA+1,KC,ISLA)
  235   CONTINUE
       END IF
       IF (XLATSH.LT.XLNN.AND.XLATSH.GT.XLSS) THEN
        DO 237 ISLA=1,NSEAL
         DO 237 KC=1,MCLD
          DO 237 LO=1,NLON
           DO 237 NBI=1,NBIN
            RHCLA (NBI,LO,KC,ISLA,2) =
     1         (RHCL(NBI,LO,KLA,KC,ISLA)-RHCL(NBI,LO,KLA+1,KC,ISLA))
     2       * (XLATSH-XLSS)/(XLNN-XLSS) + RHCL(NBI,LO,KLA+1,KC,ISLA)
  237   CONTINUE
       END IF
  240 CONTINUE
      PRINT 75,XLATNH,IREGNH,XLATSH,IREGSH
   75 FORMAT(1H ,' NH LAT AND REGION=',F7.2,I4,
     1           ' SH LAT AND REGION=',F7.2,I4)
C...   GET RH-CLD RELATIONSHIP FOR EACH GRID POINT, INTERPOLATING
C       LONGITUDINALLY BETWEEN REGIONS IF NECESSARY..
      DO 248 I=1, 256
       ILSEA = 1
       IF (SLMSKR(I,LAT).LT.1. E 0) THEN
C...  OPEN OCEAN POINT....
        ILSEA = 2
       END IF
C...  WHICH HEMISPHERE
       IH  = 1
       XLONPT = DLON * (I-1)
       IF (I.GT. 128 ) THEN
        IH = 2
        XLONPT = DLON * (I- 128 -1)
       END IF
       ILONGT = 1
       IF (I.GT.IDTLN.AND.I.LE. 128 ) ILONGT = 2
       IF (I.GT.IDTLS) ILONGT = 2
       DO 246 K=1,MCLD
        DO 241 NBI=1,NBIN
         RHCLD(I,NBI,K) = RHCLA(NBI,ILONGT,K,ILSEA,IH)
  241   CONTINUE
        IKN = 0
        DO 243 KLO=1,3
         DIFLO = ABS(XLONPT-XLOBDY(KLO))
         IF (DIFLO.LT.XLIM) THEN
          IKN = KLO
          GO TO 244
         END IF
  243   CONTINUE
        GO TO 246
  244   CONTINUE
        ILFT = ILONGT
        IRGT = ILFT + 1
        IF (IRGT.GT.NLON) IRGT = 1
        XLFT = XLOBDY(IKN) - XLIM
        XRGT = XLOBDY(IKN) + XLIM
        DO 245 NBI=1,NBIN
         RHCLD (I,NBI,K) =
     1     (RHCLA(NBI,ILFT,K,ILSEA,IH)-RHCLA(NBI,IRGT,K,ILSEA,IH))
     2      * (XLONPT-XRGT)/(XLFT-XRGT)+RHCLA(NBI,IRGT,K,ILSEA,IH)
  245   CONTINUE
  246  CONTINUE
  248 CONTINUE
CTUNE
C.......................................................
C....   GET MEAN ZENITH ANGLE FOR THIS DTSWAV-BOTH NH AND SH
C      START RADFS SET-UP FOR BOTH HEMISPHERES
C...      GET VERTICAL MOTION (CB/SEC) IN VVEL
C.......................................................
      CALL OMEGAS( 256 , 258 , 28 ,
     &            SYN(1,3* 28 +2,LAN),SYN(1,3* 28 +1,LAN),WORKR,
     1            SYN(1,3* 28 +3,LAN),SYN(1,4* 28 +3,LAN),
     2            SYN(1,0* 28 +1,LAN),DEL,RRS2(LAT),VVEL,
     3            SYN(1,5* 28 +3,LAN),SL)
C...      GET MODEL DIAGNOSED CLDS
CYH93...
CC    CALL CLDJMS(SYN(1,5* 28 +3,LAN),SYN(1,2* 28 +1,LAN),
CC   1            SYN(1,1* 28 +1,LAN),VVEL,
CC   2            CVR(1,LAN),CVTR(1,LAN),CVBR(1,LAN),
CC   3            SI,SL,CRH,SLMSKR(1,LAT),
CC   4            CLDSA(1,1,LAN),MTOPA(1,1,LAN),MBOTA(1,1,LAN),
CC   5            EMIS,ISTRAT,IVV,IBL,ICONV,IEMIS,ITHK)
      CALL CLDJMS(
     &            SYN(1,5* 28 +3,LAN),SYN(1,2* 28 +1,LAN),
     1            SYN(1,1* 28 +1,LAN),VVEL,
     2            CVR(1,LAN),CVTR(1,LAN),CVBR(1,LAN),
CKAC 3            SI,SL,CRH,SLMSKR(1,LAT),
     3            SI,SL,    SLMSKR(1,LAT),
     4            CLDSA(1,1,LAN),MTOPA(1,1,LAN),MBOTA(1,1,LAN),
CTUNE5            CLDARY(1,1,LAN),IVVA,INVR,RHMAX,CLSTR(1,LAN))
CYH945            CLDARY(1,1,LAN),IVVA,INVR,RHMAX,CLSTR(1,LAN),
     5            CLDARY(1,1,LAN),IVVA,INVR,RHMAX,
     6            RLAT(LAT+1),RHCLD,ISTRAT)
CTUNE
CYH94...   CLDPRP NOW CALLED FROM WITHIN RADFS.....
CYH93...
C...      COMPUTE MEAN CLOUD DIAGNOSTICS
      CALL CLDIAG(AVECLD(1,LAT  ),CLDL(1,LAT  ),
     1            AVECLD(1,LATCO),CLDL(1,LATCO),
     2            CLDSA(1,1,LAN),MTOPA(1,1,LAN),MBOTA(1,1,LAN),
     3            CLDSA(1,2,LAN),MTOPA(1,2,LAN),MBOTA(1,2,LAN),
creanl2     4            CLDSA(1,3,LAN),MTOPA(1,3,LAN),MBOTA(1,3,LAN))
     4            CLDSA(1,3,LAN),MTOPA(1,3,LAN),MBOTA(1,3,LAN),
     4            CLDSA(1,4,LAN),cldsa(1,5,LAN),cldsa(1,6,LAN),
     4            CLDSA(1,7,LAN),cldsa(1,8,LAN),cldsa(1,9,LAN))
C...
CKAC....
      DO 300 K=1, 28
       DO 300 I=1, 256
        WRKO3A(I,K,LAN) = 0. E 0
        PPPRSA(I,K,LAN) = SL(K) * SYN(I,5* 28 +3,LAN)
  300 CONTINUE
      DO 320 I=1, 128
        RLATA(I,LAN) = RLAT(LAT+1)
        RLATA(I+ 128 ,LAN) = -RLAT(LAT+1)
  320 CONTINUE
      DO 340 I=1, 256
        IF(SLMSKR(I,LAT).EQ.2.0 E 0) THEN
           TSEAR(I,LAN) = MIN(TSEAR(I,LAN),271.2 E 0)
        ELSE IF(SLMSKR(I,LAT).EQ.0.0 E 0) THEN
           TSEAR(I,LAN) = MAX(TSEAR(I,LAN),271.21 E 0)
        ELSE IF(SLMSKR(I,LAT).EQ.1.0 E 0 .AND. SHELGR(I,LAN).GT.0.0 E 0)
     1  THEN
           TSEAR(I,LAN) = MIN(TSEAR(I,LAN),273.16 E 0)
        ENDIF
  340 CONTINUE
      IF (KDAPRX.EQ.0) THEN
C        **********************************************
C...      COMPUTE COSINE SOLAR ZENITH ANGLE IF KDAPRX=0
C...      DTSWAV IS SW RADIATIVE TIME STEP IN HOURS
C        **********************************************
        CALL ZENITH(FJD,DLT,SLAG,RLATA(1,LAN),RLON,WRKEMA(1,LAN),
     1              DTSWAV, 256 ,COSZRO(1,LAN),TAUDAR(1,LAN))
      ELSE
C        **********************************
C...      DIURNAL CYCLE APPROXIMATION
C        **********************************
        DO 360 I=1, 256
          TAUDAR(I,LAN) = 1. E 0
          COSZRO(I,LAN) = COSZER(I,LAT)
          COSZD (I,LAN) = COSZDG(I,LAT)
  360   CONTINUE
      ENDIF
C....  ************************************
C   THE FOLLOWING DETERMINES SURFACE ALBEDO (ALBDOA),WHERE SNOW EXISTS.
C....  ************************************
      DO 380 I=1, 256
        WRKEMA(I,LAN) = 0. E 0
        SSNOW(I) = SHELGR(I,LAN) * 0.1 E 0
  380 CONTINUE
      CALL ALBSNO(ALBDOA(1,LAN),LAT,JSNO,ALBEDR(1,LAT),SLMSKR(1,LAT),
     1            SSNOW, TGR(1,LAN), SYN(1, 1* 28 + 28 , LAN) )
 1000 CONTINUE
      DO 4000 IRCHNK = 1 , NRCHNK
      IBEG = (IRCHNK - 1) * IMAX + 1
      IEND = IBEG + IMAX - 1
      IF(IEND .GT.  256 ) IEND =  256
      IPTS = IEND - IBEG + 1
CKAC....
CYH94...
CYH94    SHARED(KO3,KEMIS,KALB)
CYH94...
CSIB
CSIB
CYH93...
CYH94    SHARED(CLDARY,IEMIS,EMIS0,TAUC0)
CYH93...
CKEN POINTS
CKEN POINTS
CLD FORCE
CLD FORCE
      DO 2000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
      LATRAD=MOD(LAT-1,NCPUS1)+1
C     IF(LAT .EQ. 2) CALL ERREXIT
c	if (lat.eq.1) then
c	write(*,*) '>>radfs flwup(*)=',(flwup(i9),i9=1,15)
c	write(*,*) 'lat=',lat
c	endif
      CALL RADFS( 256 , 258 ,SYN(1,5* 28 +3,LAN),PPPRSA(1,1,LAN),
     1           SYN(1,2* 28 +1,LAN),SYN(1,1* 28 +1,LAN),
     2           WRKO3A(1,1,LAN),TSEAR(1,LAN),SLMSKR(1,LAT),
CYH943           ALBDOA(1,LAN),RLATA(1,LAN),CLDSA(1,1,LAN),
     3           ALBDOA(1,LAN),RLATA(1,LAN),CLDARY(1,1,LAN),
CYH944           WRKEMA(1,LAN),MTOPA(1,1,LAN),MBOTA(1,1,LAN),
CYH93...
CYH944           CLDARY(1,1,LAN),IEMIS,EMIS0(1,1,LAN),TAUC0(1,1,LAN),
CYH93...
     5           COSZRO(1,LAN),TAUDAR(1,LAN),IBEG,IPTS,
CYH946           LAT,KO3,KEMIS,KALB,IPOINT,JPOINT,
     6           LAT,KO3,      KALB,IPOINT,JPOINT,
     7           SI,SL,ITIMSW,ITIMLW,
     8           SWHR(1,1,LATRAD),HLWR(1,1,LATRAD),
CSIB 9           FLWUP,FSWUP,FSWDN,SSWDN,SSWUP,SLWDN,SLWUP)
     9           FLWUP,FSWUP,FSWDN,SSWDN,SSWUP,SLWDN,SLWUP,
     9           FLWUP0,FSWUP0,SSWDN0,SSWUP0,SLWDN0,
     1           ALVBR(1,LAN),ALNBR(1,LAN),ALVDR(1,LAN),ALNDR(1,LAN),
     1           GDFVB,GDFNB,GDFVD,GDFND)
	if (lat.eq.1) then
	write(*,*) '<<radfs flwup(*)=',(flwup(i9),i9=1,15)
	endif
CSIB
C...  CNPROG IS CONVERSION FROM W/M**2 TO PROGTM UNITS
      DO 400 IR=IBEG,IEND
        SFNSWR(IR,LATRAD) = (SSWDN(IR)-SSWUP(IR))*CNPROG
        SFDLWR(IR,LATRAD) = SLWDN(IR)*CNPROG
        TSFLWR(IR,LATRAD) = SYN(IR,1* 28 +1,LAN)
  400 CONTINUE
CSIB...
C....... SAVE 4 COMPONENTS OF DOWNWARD SW FLUX
      DO 422 IR=IBEG,IEND
C.....     VISIBLE AND NEAR IR DIFFUSE
       GDFVDR(IR,LATRAD) = GDFVD(IR)
       GDFNDR(IR,LATRAD) = GDFND(IR)
C.....     VISIBLE AND NEAR IR DIRECT BEAM
       GDFVBR(IR,LATRAD) = GDFVB(IR)
       GDFNBR(IR,LATRAD) = GDFNB(IR)
  422 CONTINUE
C.....  ACCUMULATE FOR H2D FILE..
      DO 1889 IR=IBEG,IEND
       DFVBR(IR,LAT) = DFVBR(IR,LAT) + RADDT * GDFVB(IR)
       DFNBR(IR,LAT) = DFNBR(IR,LAT) + RADDT * GDFNB(IR)
       DFVDR(IR,LAT) = DFVDR(IR,LAT) + RADDT * GDFVD(IR)
       DFNDR(IR,LAT) = DFNDR(IR,LAT) + RADDT * GDFND(IR)
 1889 CONTINUE
CSIB...
C
C  GRID POINT MONITOR-DATA ON RADIATION GRID
C
      IF(ISAVE.NE.0.AND.NPOINT.GT.0) THEN
        DO 336 IGPT=1,NPOINT
        IF (LAT.EQ.JGRDR(IGPT)) THEN
         DO 335 IRD=IBEG,IEND
          IF (IRD.EQ.IGRDR(IGPT)) THEN
           SVDATA( 25,IGPT,ITNUM)= CLDSA(IRD,3,LAN)
           SVDATA( 26,IGPT,ITNUM)= CLDSA(IRD,2,LAN)
           SVDATA( 27,IGPT,ITNUM)= CLDSA(IRD,1,LAN)
           IF(ISSHRT.LT.1) THEN
            SVDATA( 41,IGPT,ITNUM)= IRD
            SVDATA( 42,IGPT,ITNUM)= LAT
            SVDATA( 43,IGPT,ITNUM)= SLMSKR(IRD,LAT)
            SVDATA( 44,IGPT,ITNUM)= TSEAR (IRD,LAT)
            SVDATA( 45,IGPT,ITNUM)= SSWDN(IRD)
            SVDATA( 46,IGPT,ITNUM)= SSWUP(IRD)
            SVDATA( 47,IGPT,ITNUM)= SLWDN(IRD)
            SVDATA( 48,IGPT,ITNUM)= FSWDN(IRD)
            SVDATA( 49,IGPT,ITNUM)= FSWUP(IRD)
            SVDATA( 50,IGPT,ITNUM)= FLWUP(IRD)
            SVDATA( 51,IGPT,ITNUM)= MTOPA(IRD,3,LAN)
            SVDATA( 52,IGPT,ITNUM)= MTOPA(IRD,2,LAN)
            SVDATA( 53,IGPT,ITNUM)= MTOPA(IRD,1,LAN)
            SVDATA( 54,IGPT,ITNUM)= MBOTA(IRD,3,LAN)
            SVDATA( 55,IGPT,ITNUM)= MBOTA(IRD,2,LAN)
            SVDATA( 56,IGPT,ITNUM)= MBOTA(IRD,1,LAN)
            SVDATA( 57,IGPT,ITNUM)= COSZRO(IRD,LAN)
            SVDATA( 58,IGPT,ITNUM)= ASIN(SDEC)*180. E 0/3.14159265 E 0
           ENDIF
          ENDIF
335      CONTINUE
        ENDIF
336     CONTINUE
      ENDIF
C....... FIX FLUXES FOR APPROX DIURNAL CYCLE
c	if (ibeg.eq.1.and.lat.eq.1) then
c          write(*,*) '>>prior  += raddt*flwup(ir)'
c           write(*,*) 'fluxr(1,1,*)=',(fluxr(i9,1,1),i9=1,20)
c	  write(*,*) 'ibeg, iend, lat=',ibeg,iend,lat
c	endif
      DO 420 IR=IBEG,IEND
        FLUXR(IR,LAT,1 ) = FLUXR(IR,LAT,1 ) + RADDT * FLWUP(IR)
CSWDG   FLUXR(IR,LAT,2 ) = FLUXR(IR,LAT,2 ) + RADDT * FSWUP(IR)
CSWDG   FLUXR(IR,LAT,3 ) = FLUXR(IR,LAT,3 ) + RADDT * SSWUP(IR)
CSWDG   FLUXR(IR,LAT,4 ) = FLUXR(IR,LAT,4 ) + RADDT * SSWDN(IR)
        FLUXR(IR,LAT,17) = FLUXR(IR,LAT,17) + RADDT * ALBDOA(IR,LAN)
CSWDG   FLUXR(IR,LAT,18) = FLUXR(IR,LAT,18) + RADDT * FSWDN(IR)
        FLUXR(IR,LAT,19) = FLUXR(IR,LAT,19) + RADDT * SLWDN(IR)
        FLUXR(IR,LAT,20) = FLUXR(IR,LAT,20) + RADDT * SLWUP(IR)
        FLUXR(IR,LAT,21) = FLUXR(IR,LAT,21) + RADDT * FLWUP0(IR)
        FLUXR(IR,LAT,25) = FLUXR(IR,LAT,25) + RADDT * SLWDN0(IR)
  420 CONTINUE
c	if (ibeg.eq.1.and.lat.eq.1) then
c          write(*,*) '>>post  += raddt*flwup(ir)'
c           write(*,*) 'fluxr(1,1,*)=',(fluxr(i9,1,1),i9=1,20)
c	endif

CSWDG PROPER DIURNAL SW WGT..COSZRO=MEAN COSZ OVER DAYLIGHT, WHILE
C                           COSZD = MEAN COSZ OVER ENTIRE INTERVAL
      DO 3420 IR=IBEG,IEND
       IF (COSZRO(IR,LAN).GT.0.) THEN
        FLUXR(IR,LAT,2 ) = FLUXR(IR,LAT,2 ) + RADDT * FSWUP(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,3 ) = FLUXR(IR,LAT,3 ) + RADDT * SSWUP(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,4 ) = FLUXR(IR,LAT,4 ) + RADDT * SSWDN(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,18) = FLUXR(IR,LAT,18) + RADDT * FSWDN(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,22) = FLUXR(IR,LAT,22) + RADDT * FSWUP0(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,23) = FLUXR(IR,LAT,23) + RADDT * SSWDN0(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
        FLUXR(IR,LAT,24) = FLUXR(IR,LAT,24) + RADDT * SSWUP0(IR)
     1                                  * COSZD(IR,LAN)/COSZRO(IR,LAN)
       END IF
 3420 CONTINUE
C...   SAVE CLD FRAC,TOPLVL+BOTLVL PRESSURE AND TOP TEMP
C...   NOTE THAT ORDER OF HIGH, MIDDLE AND LOW CLOUDS IS
C...   REVERSED FOR PROPER OUTPUT TO SFLUX AND H2D FILES.
      DO 440 K=1,3
        DO 440 IR=IBEG,IEND
        FLUXR(IR,LAT,8-K) = FLUXR(IR,LAT,8-K) + RADDT * CLDSA(IR,K,LAN)
creanl2
        FLUXR(IR,LAT,29-K) = FLUXR(IR,LAT,29-K) + RADDT * 
     1                       CLDSA(IR,K+3,LAN)
        FLUXR(IR,LAT,32-K) = FLUXR(IR,LAT,32-K) + RADDT * 
     1                       CLDSA(IR,K+6,LAN)
creanl2
CPRS ..........SAVE INTERFACE PRESSURE (CB) OF TOP/BOT,
        ITOP = MTOPA(IR,K,LAN)
        IBTC = MBOTA(IR,K,LAN)
        FLUXR(IR,LAT,11-K) = FLUXR(IR,LAT,11-K) + RADDT *
     1                       SI(ITOP+1) * SYN(IR,5* 28 +3,LAN)
     2                       * CLDSA(IR,K,LAN)
        FLUXR(IR,LAT,14-K) = FLUXR(IR,LAT,14-K) + RADDT *
     1                       SI(IBTC) * SYN(IR,5* 28 +3,LAN)
     2                       * CLDSA(IR,K,LAN)
        FLUXR(IR,LAT,17-K) = FLUXR(IR,LAT,17-K) + RADDT *
     1                       SYN(IR,1* 28 +ITOP,LAN) * CLDSA(IR,K,LAN)
CLYR ...TO SAVE TOP+BOT CLD SIG LYR (UNCOMMENT THE FOLLOWING)
CLYR     FLUXR(IR,LAT,11-K) = FLUXR(IR,LAT,11-K) + RADDT *
CLYR 1                       MTOPA(IR,K,LAN) * CLDSA(IR,K,LAN)
CLYR     FLUXR(IR,LAT,14-K) = FLUXR(IR,LAT,14-K) + RADDT *
CLYR 1                       MBOTA(IR,K,LAN) * CLDSA(IR,K,LAN)
  440 CONTINUE
CDIAG
      DO 460 K=1, 28
        DO 460 IR=IBEG,IEND
          TRADA(IR,K,LAN)= SWHR(IR,K,LATRAD)+HLWR(IR,K,LATRAD)
  460 CONTINUE
 2000 CONTINUE
CKAC....
 4000 CONTINUE
      DO 5000 LAT=LAT1,LAT2
      LAN=LAT-LATDON
      LATCO= 62 +1-LAT
      CALL ZONGRD(TRADA(1,1,LAN),ZONHT(1,LAT  ),ZONHT(1,LATCO))
         CALL CVDIAG(AVECV(1,LAT  ),AVECV(1,LATCO),
     2               CVR(1,LAN),CVTR(1,LAN),CVBR(1,LAN))
 5000 CONTINUE
      LGTH= 256 *INCLAT
      IND=1
      CALL EXTRM2(NGG,NGGS,TSEAR,TSMIN,TSMAX,SHELGR,SHMIN,SHMAX,
     1            LGTH,IND)
CKZ   IF(ITIMSW.EQ.1) THEN
      LATDON=LATDON+(LAT2-LAT1+1)
      IF(LATDON.GT.1 .AND. ITIMSW.EQ.1) THEN
        CALL GGINTF(SWHR, 256 ,NCPUS1, 31 ,
     1              SWH(1,1,LATIN1), 384 ,LATOUT, 47 , 28 ,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
     3              LTWIDL,LATRD1,LATIN1)
        CALL GGINTF(SFNSWR, 256 ,NCPUS1, 31 ,
     1              SFCNSW(1,LATIN1), 384 ,LATOUT, 47 ,1,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
     3              LTWIDL,LATRD1,LATIN1)
CSIB...
C....... INTERPOLATE 4 COMPONENTS OF DOWNWARD SW FLUX TO FCST GRID
C-SIB   CALL GGINTF(GDFVDR, 256 ,NCPUS1, 31 ,
C-SIB1              GDFVDF(1,LATIN1), 384 ,LATOUT, 47 ,1,
C-SIB2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
C-SIB3              LTWIDL,LATRD1,LATIN1)
C-SIB   CALL GGINTF(GDFNDR, 256 ,NCPUS1, 31 ,
C-SIB1              GDFNDF(1,LATIN1), 384 ,LATOUT, 47 ,1,
C-SIB2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
C-SIB3              LTWIDL,LATRD1,LATIN1)
C-SIB   CALL GGINTF(GDFVBR, 256 ,NCPUS1, 31 ,
C-SIB1              GDFVBF(1,LATIN1), 384 ,LATOUT, 47 ,1,
C-SIB2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
C-SIB3              LTWIDL,LATRD1,LATIN1)
C-SIB   CALL GGINTF(GDFNBR, 256 ,NCPUS1, 31 ,
C-SIB1              GDFNBF(1,LATIN1), 384 ,LATOUT, 47 ,1,
C-SIB2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
C-SIB3              LTWIDL,LATRD1,LATIN1)
CSIB...
      ENDIF
CKZ   IF(ITIMLW.EQ.1) THEN
      IF(LATDON.GT.1 .AND. ITIMLW.EQ.1) THEN
        CALL GGINTF(HLWR, 256 ,NCPUS1, 31 ,
     1              HLW(1,1,LATIN1), 384 ,LATOUT, 47 , 28 ,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
     3              LTWIDL,LATRD1,LATIN1)
        CALL GGINTF(SFDLWR, 256 ,NCPUS1, 31 ,
     1              SFCDLW(1,LATIN1), 384 ,LATOUT, 47 ,1,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
     3              LTWIDL,LATRD1,LATIN1)
        CALL GGINTF(TSFLWR, 256 ,NCPUS1, 31 ,
     1              TSFLW(1,LATIN1), 384 ,LATOUT, 47 ,1,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKR,
     3              LTWIDL,LATRD1,LATIN1)
      ENDIF
CKZ   LATDON=LATDON+(LAT2-LAT1+1)
10000 CONTINUE
CC
      DO 600 LAT=1, 62
       DO 600 K=1, 28
        ZONHT(K,LAT) = ZONHT(K,LAT) * 86400. E 0
  600 CONTINUE
      IF( 62 .GE.18) THEN
C...     PRINT MEAN HEATING RATES
      CALL PROFZL(ZONHT,CLDSIG,COLRAR,FHOUR, 28 ,1)
C...     PRINT MEAN CONVECTIVE CLD AMT,TOP,BOT
         CALL PROFZL(AVECV,CLDSIG,COLRAR,FHOUR,3,5)
C...     PRINT MEAN CLOUD DIAGNOSTICS
      CALL PROFZL(AVECLD,CLDSIG,COLRAR,FHOUR, 28 ,2)
creanl2      CALL PROFZL(CLDL,CLDSIG,COLRAR,FHOUR,4,3)
      CALL PROFZL(CLDL,CLDSIG,COLRAR,FHOUR,12,3)
      ENDIF
C
      IF(ITIMSW.EQ.1) THEN
       CALL COSZMN(SOLHR,SINLAB,COSLAB,SDEC,CDEC,SLAG,
     1            XLON, 192 , 384 , 47 ,COSZEN,.FALSE.,WORKR)
      ENDIF
C....   INTERPOLATE DIAGNOSTIC FLUXES (BI-LINEAR)
        DO 650 K=1, 47
        DO 650 J=1, 384
          CVAVG(J,K) = CVAVG(J,K) + RADDT * CV(J,K)
  650   CONTINUE
      IF(INISTP.NE.0) THEN
        RUNRAD=.FALSE.
      ELSE
        RUNRAD=.TRUE.
      ENDIF
20000 CONTINUE
C....
      RETURN
      END
      SUBROUTINE GLOOPZ(ITSTP,NZNL,NSFC)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(FV= 4.6150E+2 / 2.8705E+2 -1.)
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )

      COMMON /PWATER/PWAT( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C-WAV COMMON/COMWAV/ HSTR,USTRGG( 384 , 47 ),VSTRGG( 384 , 47 )
C...................................................................
C SYN(1, 0* 28 +1, LAN)  ZE      ZG
C SYN(1, 1* 28 +1, LAN)  DI      DG
C SYN(1, 2* 28 +1, LAN)  TE      TG
C SYN(1, 3* 28 +1, LAN)  RQ      RQG
C SYN(1, 4* 28 +1, LAN)  DPDLAM  DLAM
C SYN(1, 4* 28 +2, LAN)  DPDPHI  DPHI
C SYN(1, 4* 28 +3, LAN)  ULN     UG
C SYN(1, 5* 28 +3, LAN)  VLN     VG
C SYN(1, 6* 28 +3, LAN)  Q       PS
C SYN(1, 6* 28 +4, LAN)  ZORO    ZSFC
C SYN(1, 6* 28 +5, LAN)  ZORO2   DZDLAM
C SYN(1, 6* 28 +6, LAN)  ZORO3   DZDPHI
      PARAMETER(LOTZS=6* 28 +6,LOTZST=2* 28 +1)
      PARAMETER(KSZ=0* 28 +1,KSD=1* 28 +1,
     &          KST=2* 28 +1,KSQ=3* 28 +1,
     &          KSPX=4* 28 +1,KSPY=4* 28 +2,
     &          KSU=4* 28 +3,KSV=5* 28 +3,KSP=6* 28 +3,
     &          KSO=6* 28 +4,KSOX=6* 28 +5,KSOY=6* 28 +6)
      DIMENSION
     2 QTT( 4032 ,NCPUS),QVV( 4158 ,NCPUS),
     1 SYN( 386 ,LOTZS,NCPUS)
      DIMENSION VECTOP(2, 63 ,LOTZST)
      DIMENSION ZORO( 4033 ,3),ZORTOP(2, 63 )
C
      DIMENSION PSURF( 384 , 47 ),
     1          U10M( 384 , 47 ),V10M( 384 , 47 ),
     1          T2M( 384 , 47 ),Q2M( 384 , 47 )
      DIMENSION DUMTN( 384 , 47 )
C.................................................................
      DIMENSION DDT( 384 , 28 ),EVAPS( 384 )
C.................................................................
C 05/31/96 MK SNOWEV ADDED
      DIMENSION  TSTAR( 384 ),
     1          SNOWMT( 384 ),
     1          SNOWEV( 384 ),
     2              FM( 384 ),    FH( 384 ),
     3              CD( 384 ),   CDQ( 384 ),
     4             QSS( 384 ), RADSL( 384 )
      DIMENSION DSWSF1( 384 ),DLWSF1( 384 )
      DIMENSION WORKGG( 256 )
      DIMENSION TSEA1( 384 ),ZORL1( 384 ),SHEL1( 384 )
      DIMENSION SMSOIL( 384 , 2 ),STSOIL( 384 , 2 )
      DIMENSION SOILTYP( 384 ),SIGMAF( 384 )
      DIMENSION CQ( 384 ),RHSCNPY( 384 )
      DIMENSION AI( 384 , 2 ),BI( 384 , 2 ),DRAIN( 384 )
      DIMENSION CCI( 384 , 2 ),RHSMC( 384 , 2 )
      DIMENSION ZSOIL( 384 , 2 )
      INTEGER SOILTYP
      DIMENSION SFCSW( 384 , 47 ),SFCLW( 384 , 47 )
      DIMENSION EVAP( 384 ),HFLX( 384 ),RNET( 384 ),EP1D( 384 )
      DIMENSION EVAPC( 384 )
C.................................................................
C
      SL1=SL(1)
      SLK1 = SL1 ** ( 2.8705E+2 / 1.0046E+3 )
C
C  FOR THE TIME BEING, SOILTYP AND SIGMAF WILL BE SET TO CONSTANT
C  WE PLAN TO BRING IN A DATA SET FOR EACH
C  AT A LATTER TIME
C
      DO I = 1,  384
        SOILTYP(I) = 7
        SIGMAF(I) = .7
      ENDDO
C
      RHOUR=FHOUR+(SHOUR+ITSTP*DELTIM)/3600.
C
      IF(SHOUR.GT.0.) THEN
      CALL GGINTF(FLUXR(1,1,4), 256 , 31 , 31 ,
     1            SFCSW, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKGG,1,1,1)
      CALL GGINTF(FLUXR(1,1,3), 256 , 31 , 31 ,
     1            SFCLW, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORKGG,1,1,1)
      SFCSW=(SFCSW-SFCLW)/MAX(SHOUR,3600.*DTSWAV)
      SFCLW=(DSWSFC-DLWSFC)/SHOUR
      ELSE
      SFCSW=0.
      SFCLW=0.
      ENDIF
C
      IF(ITSTP.LT.0) THEN
      CALL DELLNP(QM,DPDPHI,VECTOP,DPDLAM)
C
      DO 2 K=1, 28
      CALL DZTOUV(DIM(1,K),ZEM(1,K),ULN(1,K),VLN(1,K),
     1 VECTOP(1,1,1+K),VECTOP(1,1,1+ 28 +K))
    2 CONTINUE
C
      ELSE
      CALL DELLNP(Q,DPDPHI,VECTOP,DPDLAM)
C
      DO 3 K=1, 28
      CALL DZTOUV(DI(1,K),ZE(1,K),ULN(1,K),VLN(1,K),
     1 VECTOP(1,1,1+K),VECTOP(1,1,1+ 28 +K))
    3 CONTINUE
C
      ENDIF
C
      ASQ= 6.3712E+6 * 6.3712E+6 / 9.8000E+0
      DO 200 J=3, 4032
      ZORO(J,1)=GZ(J)*ASQ/SNNP1(J)
200   CONTINUE
      ZORO(1,1)=Z00
      ZORO(2,1)=0. E 0
      CALL DELLNP(ZORO(1,1),ZORO(1,3),ZORTOP,ZORO(1,2))
C
C COMPUTE LATITUDE BAND LIMITS
      NGGS=( 47 -1)/NCPUS+1
C
      DO 10000 NGG=1,NGGS
      LAT1=(NGG-1)*NCPUS+1
      LAT2=MIN(NGG*NCPUS, 47 )
C   FIRST  LAT LOOP
C 05/31/96 MK SNOWEV ADDED
C
C           LAT LOOP
C
      DO 1000 LAT =LAT1,LAT2
      LAN=LAT-LAT1+1
C
C
C  TRANSFER SOIL MOISTURE AND TEMPERATURE FROM GLOBAL TO LOCAL VARIABLES
C
      DO K = 1,  2
        DO J = 1,  384
          SMSOIL(J,K) = SMC(J,LAT,K)
          STSOIL(J,K) = STC(J,LAT,K)
        ENDDO
      ENDDO
C
      DO 240 K=1, 28
      DO 240 J=1, 384
       DDT(J,K)=0. E 0
  240 CONTINUE
      RCL=RBS2(LAT)
C     SINLAB= COS(COLRAB(LAT))
C
      CALL PLN2I(QTT(1,LAN),QVV(1,LAN),COLRAB,LAT)
C
      IF(ITSTP.LT.0) THEN
      CALL SUMS2I(ZEM,SYN(1,KSZ,LAN),QTT(1,LAN), 28 )
      CALL SUMS2I(DIM,SYN(1,KSD,LAN),QTT(1,LAN), 28 )
      CALL SUMS2I(TEM,SYN(1,KST,LAN),QTT(1,LAN), 28 )
      CALL SUMS2I(RM,SYN(1,KSQ,LAN),QTT(1,LAN), 28 )
      CALL SUMS2I(DPDLAM,SYN(1,KSPX,LAN),QTT(1,LAN),2+2* 28 )
      CALL SUMS2I(QM,SYN(1,KSP,LAN),QTT(1,LAN),1)
      ELSE
      CALL SUMS2I(ZE,SYN(1,KSZ,LAN),QTT(1,LAN),6* 28 +3)
      ENDIF
C
      CALL SUMTOP(SYN(1,KSPY,LAN),VECTOP,QVV(1,LAN),
     1 LOTZST, 192 , 192 /2)
C
      CALL SUMS2I(ZORO,SYN(1,KSO,LAN),QTT(1,LAN),3)
      CALL SUMTOP(SYN(1,KSOY,LAN),ZORTOP,QVV(1,LAN),
     1 1, 192 , 192 /2)
C
      CALL FTI 192 (SYN(1,1,LAN),DUMMY,2*LOTZS,1)
C
C  GET DRY TEP.
C
      DO 270 K=1, 28
      DO 270 J=1, 384
      SYN(J,KST-1+K,LAN)=SYN(J,KST-1+K,LAN)/(1.+FV*SYN(J,KSQ-1+K,LAN))
  270 CONTINUE
C
C  GET SURFACE PRESSURE
C
      DO 280 J=1, 384
       SYN(J,KSP,LAN)=EXP(SYN(J,KSP,LAN))
       PSURF(J,LAT)=SYN(J,KSP,LAN)
  280 CONTINUE
C
C  GET MOUNTAIN TORQUE.
C
      FMTN=1.E3*SQRT(RCL)
      DO 282 J=1, 384
       PSREF=101.325*(1.-SYN(J,KSO,LAN)/8.E3)
       PSFAC=FMTN*(PSMEAN(J,LAT)-DTFLUX*PSREF)
       DUMTN(J,LAT)=PSFAC*SYN(J,KSOX,LAN)
  282 CONTINUE
C
C  INITIALIZE DDT WITH HEATING RATE FROM DCYC2 AND GET RADSL FOR PROGTM
C
      IF(INISTP.EQ.3) THEN
      CALL DCYC2( 384 , 28 ,SOLHR,SLAG,SINLAB(LAT),COSLAB(LAT),
     &           SDEC,CDEC,XLON,COSZEN(1,LAT),
     &           SFCDLW(1,LAT),SFCNSW(1,LAT),SYN(1,KST,LAN),
     &           TSEA(1,LAT),TSFLW(1,LAT),SWH(1,1,LAT),HLW(1,1,LAT),
     &           DSWSF1,DLWSF1,RADSL,DDT)
C
      TSEA1=TSEA(:,LAT)
      ZORL1=ZORL(:,LAT)
      SHEL1 = SHELEG(:,LAT)
C
C 05/31/96 MK ADDED SNOWEV
      CALL PROGTM( 384 , 2 ,SYN(1,KSP,LAN),
     1 SYN(1,KSU,LAN),SYN(1,KSV,LAN),
     1 SYN(1,KST,LAN),SYN(1,KSQ,LAN),
     2 SHEL1,TSEA1,QSS,
     & SMSOIL,STSOIL,EVAPC,SOILTYP,SIGMAF,CANOPY(1,LAT),
     3 RADSL,SNOWMT,SNOWEV,
     3 DELTIM,ZORL1,PLANTR(1,LAT),TG3(1,LAT),
     4 EVAPS,F10M(1,LAT),U10M(1,LAT),V10M(1,LAT),T2M(1,LAT),
     & Q2M(1,LAT),ZSOIL,
     5 CD,CDQ,CQ,RHSCNPY,RHSMC,AI,BI,CCI,
     6 RCL,SL1,SLK1,SLMSK(1,LAT),INISTP,LAT,
     & DRAIN,EVAP,HFLX,RNET,EP1D,COWAVE)
      ENDIF
C
1000  CONTINUE
C
C ZONAL DIAGNOSTICS
C
      IF(NZNL.GE.0) THEN
      DO 2000 LAT=LAT1,LAT2
      LAN=LAT-LAT1+1
      DO K = 1,  2
        DO J = 1,  384
          SMSOIL(J,K) = SMC(J,LAT,K)
          STSOIL(J,K) = STC(J,LAT,K)
        ENDDO
      ENDDO
      CALL ZNLDIA(NZNL,RHOUR,IDATE,KDT,
     &            LAT, 47 , 384 , 386 , 28 ,SHOUR,
     &            WGB(LAT),RBS2(LAT),COLRAB(LAT),
     &            SI,SL,DEL,SYN(1,KSP,LAN),GESHEM(1,LAT),BENGSH(1,LAT),
     &            DUSFC(1,LAT),DVSFC(1,LAT),DTSFC(1,LAT),DQSFC(1,LAT),
     &            DUGWD(1,LAT),DVGWD(1,LAT),DUMTN(1,LAT),
     &            SLMSK(1,LAT),SHELEG(1,LAT),TSEA(1,LAT),
     &            SMC(1,LAT, 2 ),STC(1,LAT,1),STC(1,LAT, 2 ),
     &            TG3(1,LAT),
     &            ZORL(1,LAT),SFCSW(1,LAT),SFCLW(1,LAT),
     &            SYN(1,KSZ,LAN),SYN(1,KSD,LAN),
     &            SYN(1,KST,LAN),SYN(1,KSQ,LAN),
     &            SYN(1,KSPX,LAN),SYN(1,KSPY,LAN),
     &            SYN(1,KSU,LAN),SYN(1,KSV,LAN),EP(1,LAT),CLDWRK(1,LAT))
2000  CONTINUE
      ENDIF
C
      DO LAT=LAT1,LAT2
        LAN=LAT-LAT1+1
        DCL=SQRT(RBS2(LAT))
        DO K=1, 28
          DO J=1, 384
            SYN(J,KSU-1+K,LAN)=SYN(J,KSU-1+K,LAN)*DCL
            SYN(J,KSV-1+K,LAN)=SYN(J,KSV-1+K,LAN)*DCL
          ENDDO
        ENDDO
        DO J=1, 384
          SYN(J,KSPX,LAN)=SYN(J,KSPX,LAN)*DCL
          SYN(J,KSPY,LAN)=SYN(J,KSPY,LAN)*DCL
          SYN(J,KSOX,LAN)=SYN(J,KSOX,LAN)*DCL
          SYN(J,KSOY,LAN)=SYN(J,KSOY,LAN)*DCL
        ENDDO
        DO J= 384 +1, 386
          DO K=1,LOTZS
            SYN(J,K,LAN)=0.
          ENDDO
        ENDDO
      ENDDO
10000 CONTINUE
      IF(NSFC.GT.0)
     &CALL WRTSFC(FHOUR,THOUR,IDATE,NSFC,SLMSK,COLRAB,
     &            DUSFC,DVSFC,DTSFC,DQSFC,TSEA,SMC(1,1, 2 ),
     &            SHELEG,
     &            DSWSFC,DLWSFC,GESHEM,BENGSH,GFLUX,
     &            FLUXR,ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     &            U10M,V10M,T2M,Q2M,PSURF,ZORL,TMPMAX,TMPMIN,
     &            SNOWFALL,SNOWEVAP,SNOWMELT,
     &            RUNOFF,EP,CLDWRK,DUGWD,DVGWD,PWAT)
C 05/31/96 MK SNOWFALL,SNOWEVAP,SNOWMELT ADDED ABOVE
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE PLN2I(QLNT,QLNV,COLRAD,LAT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    PLN2T       EVALUATES ASSOCIATED LEGENDRE FUNCTIONS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-10-25
C
C ABSTRACT: EVALUATES THE REQUIRED VALUES OF THE NORMALIZED
C   ASSOCIATED LEGENDRE FUNCTION AT A PRESCRIBED COLATITUDE.
C   A STANDARD RECURSION RELATION IS USED WITH REAL ARITHMETIC.
C
C PROGRAM HISTORY LOG:
C   88-10-25  JOSEPH SELA
C
C USAGE:    CALL PLN2T (QLNT, QLNV, COLRAD, LAT)
C   INPUT ARGUMENT LIST:
C     COLRAD   - HALF PRECISION COLATITUDES IN RADIANS FOR WHICH
C                THE ASSOCIATED LEGENDRE FUNCTIONS ARE TO BE
C                COMPUTED.
C     LAT      - INDEX WHICH INDICATES THE CURRENT LATITUDE.
C
C   OUTPUT ARGUMENT LIST:
C     QLNT     - DOUBLED SCALAR TRIANGLE OF
C                HALF PRECISION ASSOCIATED LEGENDRE FUNCTIONS.
C     QLNV     - DOUBLED VECTOR TRIANGLE OF
C                HALF PRECISION ASSOCIATED LEGENDRE FUNCTIONS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CC
      DIMENSION         QLNT( 4032 )
      DIMENSION         QLNV( 4158 )
      DIMENSION       COLRAD( 47 )
CC
      DIMENSION            X( 63 )
      DIMENSION         DPLN( 4158 )
CC
      COMMON /PLN2TI/ DEPS( 4158 ),RDEPS( 4158 ),
     1                DX( 126 ),Y( 63 ),INDXMV( 4158 )
CC
CCC   DATA IFIR /0/
CCC         PART BETWEEN GUARDS MADE INTO SR GPLN2I.
CCC         7 DEC 1990      M. ROZWODOSKI
CC
      COLR   = COLRAD(LAT)
      SINLAT = COS(COLR)
      COS2   = 1.0 - SINLAT * SINLAT
      PROD   = 1.0
      DO 600 LL=1, 63
             X(LL) = 0.5*PROD
CCCC         IF (PROD .LT. 1.0E-75)  PROD=0.0
             PROD = PROD*COS2*Y(LL)
  600 CONTINUE
      DO 620 LL=1, 63
             X(LL) = SQRT(X(LL))
  620 CONTINUE
      DO 640 LL=1, 63
             DPLN(2*LL-1) = X(LL)
             DPLN(2*LL  ) = X(LL)
  640 CONTINUE
      LPLUS =  126
      DO 700 LL=1, 126
             DPLN(LL+LPLUS) = DX(LL) * SINLAT * DPLN(LL)
  700 CONTINUE
      LP2 = 0
      LP1 =      126
      LP0 = 2 *  126
      LEN =      126  - 2
      DO 740  N=3, 64
      DO 720 LL=1,LEN
             DPLN(LL+LP0) = (SINLAT * DPLN(LL+LP1)
     1               - DEPS(LL+LP1) * DPLN(LL+LP2)) * RDEPS(LL+LP0)
  720 CONTINUE
      LP2 = LP1
      LP1 = LP0
      LP0 = LP0 + LEN
      LEN = LEN - 2
  740 CONTINUE
CC
CC    TRANSPOSE VECTOR DPLN ARRAY FROM CRAY ORDER TO IBM ORDER.
      DO 800 I=1, 4158
             QLNV(INDXMV(I)) = DPLN(I)
  800 CONTINUE
CC
      LPV = 0
      LPT = 0
      LEN =  126
      DO 860  N=1, 63
      DO 840 LL=1,LEN
             QLNT(LL+LPT) = QLNV(LL+LPV)
  840 CONTINUE
      LPV = LPV + LEN + 2
      LPT = LPT + LEN
      LEN = LEN - 2
  860 CONTINUE
CC
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GPLN2I
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GPLN2T      SETS COMMON FOR SUBROUTINE PLN2T.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 91-03-14
C
C ABSTRACT: INITIALIZES THE CONSTANT VARIABLES AND ARRAYS
C   OF A COMMON FOR SUBROUTINE PLN2T.
C
C PROGRAM HISTORY LOG:
C   91-03-14  JOSEPH SELA
C
C USAGE:    CALL GPLN2T
C
C REMARKS: CALL SUBROUTINE ONCE BEFORE CALLS TO PLN2T.
C          REFER TO PLN2T FOR ADDITIONAL DOCUMENTATION.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN, CFT77.
C   MACHINE:  CRAY Y-MP.
C
C$$$
CC
      DIMENSION       X( 63 )
CC
      COMMON /PLN2TI/ DEPS( 4158 ),RDEPS( 4158 ),
     1                DX( 126 ),Y( 63 ),INDXMV( 4158 )
CC
CCC   DATA IFIR /0/
CC
CCC   IF  (IFIR .EQ. 1)  GO TO 500
CCC        IFIR = 1
      DO 200 LL=1, 63
             RDEPS(LL) = 0.0
  200 CONTINUE
      LPLUS =  63
      LEN   =  63
      DO 240 INDE=2, 64
      DO 220   LL=1,LEN
             L = LL - 1
             N = L + INDE - 1
             RDEPS(LL+LPLUS) = (N*N - L*L) / (4.0 * N*N - 1.0)
  220 CONTINUE
      LPLUS = LPLUS + LEN
      LEN = LEN - 1
  240 CONTINUE
      DO 260 I= 64 , 2079
             RDEPS(I) = SQRT(RDEPS(I))
  260 CONTINUE
      DO 300 I=1, 2079
             DEPS(2*I-1) = RDEPS(I)
             DEPS(2*I  ) = RDEPS(I)
  300 CONTINUE
      IBEGIN =  126  + 1
      DO 320 I=IBEGIN, 4158
             RDEPS(I) = 1.0/DEPS(I)
  320 CONTINUE
      DO 400 LL=1, 63
             X(LL) = LL*2+1
  400 CONTINUE
      DO 420 LL=1, 63
             Y(LL) = X(LL)/(X(LL)-1.)
  420 CONTINUE
      DO 440 LL=1, 63
             X(LL) = SQRT(X(LL))
  440 CONTINUE
      DO 460 LL=1, 63
             DX(2*LL-1) = X(LL)
             DX(2*LL  ) = X(LL)
  460 CONTINUE
C 500 CONTINUE
CC
CC    SET INDEX ARRAY FOR TRANSPOSING VECTOR ARRAY
CC    FROM CRAY ORDER TO IBM ORDER.
      L=0
      DO 640 NN=1, 64
      LLN=MIN0( 64 -NN+1, 63 )
      DO 620 LL=1,LLN
      INDX=(( 62 +3)*(LL-1)-(LL-1)*LL/2+NN)*2
      L=L+2
      INDXMV(L-1)=INDX-1
      INDXMV(L  )=INDX
  620 CONTINUE
  640 CONTINUE
CC
      RETURN
      END
      SUBROUTINE RI2RRI(FIRNS,FRN,FIN,FRS,FIS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    RI2RR       SEPARATES COMPLEX FIELDS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-15
C
C ABSTRACT: SEPARATES COMPLEX FIELDS INTO REAL AND IMAGINARY FIELDS.
C
C PROGRAM HISTORY LOG:
C   88-04-15  JOSEPH SELA
C
C USAGE:    CALL RI2RR (FIRNS, FRN, FIN, FRS, FIS)
C   INPUT ARGUMENT LIST:
C     FIRNS    - ARRAY OF LEVS PAIRS OF NORTHERN AND SOUTHERN
C                HEMISPHERE COMPLEX FIELDS.
C
C   OUTPUT ARGUMENT LIST:
C     FRN      - ARRAY OF LEVS NORTHERN HEMISPHERE REAL      FIELDS.
C     FIN      - ARRAY OF LEVS NORTHERN HEMISPHERE IMAGINARY FIELDS.
C     FRS      - ARRAY OF LEVS SOUTHERN HEMISPHERE REAL      FIELDS.
C     FIS      - ARRAY OF LEVS SOUTHERN HEMISPHERE IMAGINARY FIELDS.
C
C REMARKS: RI2RR IS THE SAME AS RI3RR EXCEPT FOR DIMENSION
C   OF FIRNS ARRAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION FIRNS( 386 , 28 ),
     1 FRN( 63 , 28 ), FRS( 63 , 28 ),
     2 FIN( 63 , 28 ), FIS( 63 , 28 )
CC
      DO  10 K=1, 28
      DO 200 I=1, 63
CC
             FRN(I,K) = FIRNS(I*2-1,K)
             FIN(I,K) = FIRNS(I*2  ,K)
             FRS(I,K) = FIRNS(I*2-1+ 192 ,K)
             FIS(I,K) = FIRNS(I*2  + 192 ,K)
CC
  200 CONTINUE
   10 CONTINUE
CC
      RETURN
      END
      SUBROUTINE SHUFLS(TRI, RHO, ISWTCH)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SHUFLS      SCALAR TRIANGLE <--> RHOMBOID SHUFFLE.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-21
C
C ABSTRACT: SCALAR TRIANGLE <--> RHOMBOID SHUFFLE.
C
C PROGRAM HISTORY LOG:
C   88-04-21  JOSEPH SELA
C
C USAGE:    CALL SHUFLS (TRI, RHO, ISWITCH)
C   INPUT ARGUMENT LIST:
C     TRI      - TRIANGLE.
C                WHEN ISWITCH=-1, TRIANGLE TRI IS STORED IN
C                THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C                THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C     RHO      - RHOMBOID.
C                WHEN ISWITCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C                IS STORED IN TRIANGLE TRI.
C     ISWITCH  - INTEGER SWITCH.
C                SHUFLE MUST BE CALLED FIRST WITH ISWITCH=0
C                TO INITIALIZE BIT VECTOR BITV.
C
C   OUTPUT ARGUMENT LIST:
C     TRI      - TRIANGLE.
C                WHEN ISWITCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C                IS STORED IN TRIANGLE TRI.
C     RHO      - RHOMBOID.
C                WHEN ISWITCH=-1, TRIANGLE TRI IS STORED IN
C                THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C                THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION TRI( 4032 ), RHO( 126 , 63 )
C
C     WHEN ISWTCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C     IS STORED IN TRIANGLE TRI.
C
C     WHEN ISWTCH=-1, TRIANGLE TRI IS STORED IN
C     THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C     THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C
      IF (ISWTCH) 200, 400, 600
C
  200 CONTINUE
      DO 340 K=1, 63
      DO 320 I=1, 126
             RHO(I,K) = 0.0 E 0
  320 CONTINUE
  340 CONTINUE
      IPLUS = 0
      LEN =  126
      DO 380 K=1, 63
      DO 360 I=1,LEN
             RHO(I,K) = TRI(I+IPLUS)
  360 CONTINUE
      IPLUS = IPLUS + LEN
      LEN = LEN - 2
  380 CONTINUE
      RETURN
C
  400 CONTINUE
      RETURN
C
  600 CONTINUE
      IPLUS = 0
      LEN =  126
      DO 780 K=1, 63
      DO 760 I=1,LEN
             TRI(I+IPLUS) = RHO(I,K)
  760 CONTINUE
      IPLUS = IPLUS + LEN
      LEN = LEN - 2
  780 CONTINUE
      RETURN
      END
      SUBROUTINE SHUFVI(TRI,RHO,ISWTCH)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SHUFLV      VECTOR TRIANGLE <--> RHOMBOID SHUFFLE.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-21
C
C ABSTRACT: VECTOR TRIANGLE <--> RHOMBOID SHUFFLE.
C
C PROGRAM HISTORY LOG:
C   88-04-21  JOSEPH SELA
C
C USAGE:    CALL SHUFLV (TRI, RHO, ISWITCH)
C   INPUT ARGUMENT LIST:
C     TRI      - TRIANGLE.
C                WHEN ISWITCH=-1, TRIANGLE TRI IS STORED IN
C                THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C                THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C     RHO      - RHOMBOID.
C                WHEN ISWITCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C                IS STORED IN TRIANGLE TRI.
C     ISWITCH  - INTEGER SWITCH.
C                SHUFLE MUST BE CALLED FIRST WITH ISWITCH=0
C                TO INITIALIZE BIT VECTOR BITV.
C
C   OUTPUT ARGUMENT LIST:
C     TRI      - TRIANGLE.
C                WHEN ISWITCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C                IS STORED IN TRIANGLE TRI.
C     RHO      - RHOMBOID.
C                WHEN ISWITCH=-1, TRIANGLE TRI IS STORED IN
C                THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C                THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CCC   DIMENSION TRI( 4158 ), RHO(2, 64 , 63 )
      DIMENSION TRI( 4158 ), RHO( 8064 )
C
C     WHEN ISWTCH=1, THE LOWER TRIANGLE OF RHOMBOID RHO
C     IS STORED IN TRIANGLE TRI.
C
C     WHEN ISWTCH=-1, TRIANGLE TRI IS STORED IN
C     THE LOWER TRIANGLE OF RHOMBOID RHO, AND
C     THE UPPER TRIANGLE OF RHOMBOID RHO IS SET TO ZEROS.
C
      IF (ISWTCH) 200, 400, 600
C
  200 CONTINUE
      DO 320 L=1, 8064
             RHO(L) = 0.0 E 0
  320 CONTINUE
      LTPLUS = 0
      LRPLUS = 0
      LEN    =  64 *2
      DO 380 K=1, 63
      DO 360 L=1,LEN
             RHO(L+LRPLUS) = TRI(L+LTPLUS)
  360 CONTINUE
      LTPLUS = LTPLUS + LEN
      LRPLUS = LRPLUS +  64 *2
      LEN    = LEN - 2
  380 CONTINUE
      RETURN
C
  400 CONTINUE
      RETURN
C
  600 CONTINUE
      LTPLUS = 0
      LRPLUS = 0
      LEN    =  64 *2
      DO 780 K=1, 63
      DO 760 L=1,LEN
             TRI(L+LTPLUS) = RHO(L+LRPLUS)
  760 CONTINUE
      LTPLUS = LTPLUS + LEN
      LRPLUS = LRPLUS +  64 *2
      LEN    = LEN - 2
  780 CONTINUE
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE SEMIZQ(DT,SINF,AL,BL,ZEM,RM,WGT,UGNS,UFLIP,UFLOP,
     1 ZFNR,ZFNI,ZFSR,ZFSI,QFNR,QFNI,QFSR,QFSI,
     2 APN,APS,BPN,BPS,CPN,CPS,AQN,AQS,BQN,BQS,CQN,CQS,
     3 UQF,VQF,RQF,ZEMX,QEMX)
C
      DIMENSION ZEM( 4033 , 28 ), RM( 4033 , 28 )
C
      DIMENSION
     1 ZFNR( 63 , 28 ), ZFNI( 63 , 28 ),
     2 ZFSR( 63 , 28 ), ZFSI( 63 , 28 ),
     1 QFNR( 63 , 28 ), QFNI( 63 , 28 ),
     2 QFSR( 63 , 28 ), QFSI( 63 , 28 )
C
      DIMENSION UFLIP( 28 , 64 ), UFLOP( 28 , 64 )
C
      DIMENSION UGNS( 384 , 28 )
C
      DIMENSION  AL( 386 , 28 ),  BL( 386 , 28 )
      DIMENSION UQF( 386 , 28 ), VQF( 386 , 28 )
      DIMENSION RQF( 386 , 28 )
C
      DIMENSION APN( 126 , 28 ), APS( 126 , 28 ),
     1          BPN( 126 , 28 ), BPS( 126 , 28 ),
     2          CPN( 126 , 28 ), CPS( 126 , 28 ),
     3          AQN( 126 , 28 ), AQS( 126 , 28 ),
     4          BQN( 126 , 28 ), BQS( 126 , 28 ),
     5          CQN( 126 , 28 ), CQS( 126 , 28 )
C
      DIMENSION       BETAL( 63 ), BETAL2( 63 ),
     1 BETAUN( 63 , 28 ), BETAUS( 63 , 28 ),  BIGN( 28 ),
     2 BETUN2( 63 , 28 ), BETUS2( 63 , 28 ),  BIGS( 28 ),
     3  DENON( 63 , 28 ),  DENOS( 63 , 28 ), UBN2C( 28 ),
     4 RDENON( 63 , 28 ), RDENOS( 63 , 28 ), UBS2C( 28 ),
     5    RNR( 63 , 28 ),    RNI( 63 , 28 ),   RSR( 63 , 28 ),
     6    RSI( 63 , 28 ),    SNR( 63 , 28 ),   SNI( 63 , 28 ),
     7    SSR( 63 , 28 ),    SSI( 63 , 28 ),   QNR( 63 , 28 ),
     8    QNI( 63 , 28 ),    QSR( 63 , 28 ),   QSI( 63 , 28 ),
     9    UBN( 28 ), UBS( 28 ), CSDERN( 28 ), CSDERS( 28 )
      DIMENSION
     A ZENR( 63 , 28 ), ZENI( 63 , 28 ), BNR( 63 , 28 ),
     A QENR( 63 , 28 ), QENI( 63 , 28 ), XNN( 126 , 28 ),
     A QESR( 63 , 28 ), QESI( 63 , 28 ), XSS( 126 , 28 ),
     A ZESR( 63 , 28 ), ZESI( 63 , 28 ), BSR( 63 , 28 ),
     B  BNI( 63 , 28 ),  BSI( 63 , 28 ), ASR( 63 , 28 ),
     B  ANI( 63 , 28 ),  ASI( 63 , 28 ), ANR( 63 , 28 ),
     B  CNR( 63 , 28 ),  CNI( 63 , 28 ), CSR( 63 , 28 ),
     C   A1( 63 , 28 ),   A2( 63 , 28 ), CSI( 63 , 28 ),
     C   A3( 63 , 28 ),   A4( 63 , 28 ),  A5( 63 , 28 ),
     D   A6( 63 , 28 ),   A7( 63 , 28 ),  A8( 63 , 28 ),
     G ZEMX( 386 , 28 ), QEMX( 386 , 28 )
C
CCC    CALL SUMS2I(ZEM,ZEMX,QLNT, 28 ,  126 -1,  63 )
CCC    CALL RI3RR (ZEMX,ZENR,ZENI,ZESR,ZESI)
       CALL RI2RRI(ZEMX,ZENR,ZENI,ZESR,ZESI)
       CALL RI2RRI(AL ,ANR ,ANI ,ASR ,ASI )
       CALL RI2RRI(BL ,BNR ,BNI ,BSR ,BSI )
C
      CALL SPECU(UFLIP,UFLOP,UBN,UBS,CSDERN,CSDERS,SINF,WGT,UGNS)
C
      SINS=-SINF
      COSF=SQRT(1.-SINF*SINF)
      COSF2=COSF*COSF
      COSF4=COSF2*COSF2
      DT2=2.*DT
      DTRA=DT/ 6.3712E+6
      DT2CS4=DT2*COSF4
      DO 1 K=1, 28
      BIGN(K)=-DT2*(2. E 0*SINF*UBN(K)+CSDERN(K))/ 6.3712E+6
      BIGS(K)=-DT2*(2. E 0*SINS*UBS(K)+CSDERS(K))/ 6.3712E+6
      UBN2C(K)=2.*UBN(K)*COSF2
      UBS2C(K)=2.*UBS(K)*COSF2
1     CONTINUE
C..
      DO 2 LL=1, 63
      BETAL(LL)=(LL-1)*DTRA
2     CONTINUE
      DO 40120 J=1, 63
      BETAL2(J)=BETAL(J)*BETAL(J)
40120 CONTINUE
C.....
C.....
C.....
      DO 40140 K=1, 28
      DO 40140 J=1, 63
      BETAUN(J,K)=BETAL(J)*UBN(K)
      BETAUS(J,K)=BETAL(J)*UBS(K)
40140 CONTINUE
      DO 40160 K=1, 28
      DO 40160 J=1, 63
      BETUN2(J,K)=BETAUN(J,K)*BETAUN(J,K)
      BETUS2(J,K)=BETAUS(J,K)*BETAUS(J,K)
40160 CONTINUE
      DO 40180 K=1, 28
      DO 40180 J=1, 63
      DENON(J,K)=COSF4+BETUN2(J,K)
      DENOS(J,K)=COSF4+BETUS2(J,K)
40180 CONTINUE
      DO 40220 K=1, 28
      DO 40220 J=1, 63
      RDENON(J,K)=1. E 0/DENON(J,K)
      RDENOS(J,K)=1. E 0/DENOS(J,K)
      RNR(J,K)=COSF4-BETUN2(J,K)
      RSR(J,K)=COSF4-BETUS2(J,K)
40220 CONTINUE
      DO 40240 K=1, 28
      DO 40240 J=1, 63
      RNR(J,K)=RNR(J,K)*RDENON(J,K)
      RSR(J,K)=RSR(J,K)*RDENOS(J,K)
40240 CONTINUE
      DO 40260 K=1, 28
      DO 40260 J=1, 63
      RNI(J,K)=-BETAL(J)*UBN2C(K)
      RSI(J,K)=-BETAL(J)*UBS2C(K)
40260 CONTINUE
      DO 40280 K=1, 28
      DO 40280 J=1, 63
      RNI(J,K)=RNI(J,K)*RDENON(J,K)
      RSI(J,K)=RSI(J,K)*RDENOS(J,K)
      SNR(J,K)=DT2CS4*RDENON(J,K)
      SSR(J,K)=DT2CS4*RDENOS(J,K)
40280 CONTINUE
      DO 40320 K=1, 28
      DO 40320 J=1, 63
      SNI(J,K)=DT*RNI(J,K)
      SSI(J,K)=DT*RSI(J,K)
      RDENON(J,K)=RDENON(J,K)*RDENON(J,K)
      RDENOS(J,K)=RDENOS(J,K)*RDENOS(J,K)
40320 CONTINUE
      DO 40340 K=1, 28
      DO 40340 J=1, 63
      RDENON(J,K)=RDENON(J,K)*BIGN(K)
      RDENOS(J,K)=RDENOS(J,K)*BIGS(K)
40340 CONTINUE
      DO 40360 K=1, 28
      DO 40360 J=1, 63
      QNR(J,K)=RDENON(J,K)*UBN2C(K)*BETAL2(J)
      QSR(J,K)=RDENOS(J,K)*UBS2C(K)*BETAL2(J)
      QNI(J,K)=RDENON(J,K)*BETAL(J)
      QSI(J,K)=RDENOS(J,K)*BETAL(J)
40360 CONTINUE
      DO 40380 K=1, 28
      DO 40380 J=1, 63
      QNI(J,K)=QNI(J,K)*(COSF4-BETUN2(J,K))
      QSI(J,K)=QSI(J,K)*(COSF4-BETUS2(J,K))
40380 CONTINUE
C.....
C...
C...
C
C    COMPUTE R*ZETA(T-1)
C....DO N.HEMI
      DO 40410 K=1, 28
      DO 40410 J=1, 63
      A1(J,K)=RNR(J,K)*ZENR(J,K)
      A2(J,K)=RNI(J,K)*ZENI(J,K)
      A3(J,K)=RNR(J,K)*ZENI(J,K)
      A4(J,K)=RNI(J,K)*ZENR(J,K)
40410 CONTINUE
C..
      DO 40420 K=1, 28
      DO 40420 J=1, 63
      A5(J,K)=A1(J,K)-A2(J,K)
      A6(J,K)=A3(J,K)+A4(J,K)
40420 CONTINUE
C..
C    COMPUTE Q*BL
C..
      DO 40430 K=1, 28
      DO 40430 J=1, 63
      A1(J,K)=QNR(J,K)*BNR(J,K)
      A2(J,K)=QNI(J,K)*BNI(J,K)
      A3(J,K)=QNR(J,K)*BNI(J,K)
      A4(J,K)=QNI(J,K)*BNR(J,K)
40430 CONTINUE
C..
      DO 40440 K=1, 28
      DO 40440 J=1, 63
      A7(J,K)=A1(J,K)-A2(J,K)
      A8(J,K)=A3(J,K)+A4(J,K)
40440 CONTINUE
C ..  A5+A7=REAL R*ZEM+Q*B FOR N. HEMI
C ..  A6+A8=IMAG R*ZEM+Q*B FOR N. HEMI
      DO 40450 K=1, 28
      DO 40450 J=1, 63
      A1(J,K)=A5(J,K)+A7(J,K)
      A2(J,K)=A6(J,K)+A8(J,K)
40450 CONTINUE
C
C
C CP=R*ZETA(T-1)+Q*BL
      CALL RR2RI(XNN,A1,A2)
C
C    COMPUTE R*ZETA(T-1)
C....DO S.HEMI
      DO 40460 K=1, 28
      DO 40460 J=1, 63
      A1(J,K)=RSR(J,K)*ZESR(J,K)
      A2(J,K)=RSI(J,K)*ZESI(J,K)
      A3(J,K)=RSR(J,K)*ZESI(J,K)
      A4(J,K)=RSI(J,K)*ZESR(J,K)
40460 CONTINUE
C..
      DO 40470 K=1, 28
      DO 40470 J=1, 63
      A5(J,K)=A1(J,K)-A2(J,K)
      A6(J,K)=A3(J,K)+A4(J,K)
40470 CONTINUE
C..
C    COMPUTE Q*BL
C..
      DO 40480 K=1, 28
      DO 40480 J=1, 63
      A1(J,K)=QSR(J,K)*BSR(J,K)
      A2(J,K)=QSI(J,K)*BSI(J,K)
      A3(J,K)=QSR(J,K)*BSI(J,K)
      A4(J,K)=QSI(J,K)*BSR(J,K)
40480 CONTINUE
C..
      DO 40490 K=1, 28
      DO 40490 J=1, 63
      A7(J,K)=A1(J,K)-A2(J,K)
      A8(J,K)=A3(J,K)+A4(J,K)
40490 CONTINUE
C ..  A5+A7=REAL R*ZEM+Q*B FOR S. HEMI
C ..  A6+A8=IMAG R*ZEM+Q*B FOR S. HEMI
      DO 40510 K=1, 28
      DO 40510 J=1, 63
      A1(J,K)=A5(J,K)+A7(J,K)
      A2(J,K)=A6(J,K)+A8(J,K)
40510 CONTINUE
C
C
C CP=R*ZETA(T-1)+Q*BL
      CALL RR2RI(XSS,A1,A2)
      DO 40520 K=1, 28
      DO 40520 J=1, 126
      CPN(J,K)=XNN(J,K)+XSS(J,K)
      CPS(J,K)=XNN(J,K)-XSS(J,K)
40520 CONTINUE
C
C ..............................................................
C SOF CP=R*ZETA(T-1)+Q*BL ......................................
C ..............................................................
C...
C   A1 A2 A3 A4 WILL CONTAIN  APRIME=A-U*ETA
      DO 50 K=1, 28
      DO 50 J=1, 63
      A1(J,K)=ANR(J,K)-UBN(K)*ZFNR(J,K)
      A2(J,K)=ANI(J,K)-UBN(K)*ZFNI(J,K)
      A3(J,K)=ASR(J,K)-UBS(K)*ZFSR(J,K)
      A4(J,K)=ASI(J,K)-UBS(K)*ZFSI(J,K)
50    CONTINUE
C..
      DO 40530 K=1, 28
      DO 40530 J=1, 63
      A5(J,K)=SNR(J,K)*A1(J,K)
      A6(J,K)=SNI(J,K)*A2(J,K)
      A7(J,K)=SNR(J,K)*A2(J,K)
      A8(J,K)=SNI(J,K)*A1(J,K)
40530 CONTINUE
C..
      DO 40540 K=1, 28
      DO 40540 J=1, 63
      A1(J,K)=A5(J,K)-A6(J,K)
      A2(J,K)=A7(J,K)+A8(J,K)
40540 CONTINUE
C ..  A5-A6=REAL S*APRIME  FOR N. HEMI
C ..  A7+A8=IMAG S*APRIME  FOR N. HEMI
C
C
      CALL RR2RI(XNN,A1,A2)
C..
      DO 40550 K=1, 28
      DO 40550 J=1, 63
      A5(J,K)=SSR(J,K)*A3(J,K)
      A6(J,K)=SSI(J,K)*A4(J,K)
      A7(J,K)=SSR(J,K)*A4(J,K)
      A8(J,K)=SSI(J,K)*A3(J,K)
40550 CONTINUE
C..
      DO 40560 K=1, 28
      DO 40560 J=1, 63
      A3(J,K)=A5(J,K)-A6(J,K)
      A4(J,K)=A7(J,K)+A8(J,K)
40560 CONTINUE
C ..  A5-A6=REAL S*APRIME  FOR S. HEMI
C ..  A7+A8=IMAG S*APRIME  FOR S. HEMI
C
C
      CALL RR2RI(XSS,A3,A4)
      DO 40570 K=1, 28
      DO 40570 J=1, 126
      APN(J,K)=XNN(J,K)+XSS(J,K)
      APS(J,K)=XNN(J,K)-XSS(J,K)
40570 CONTINUE
C
C..
      DO 40580 K=1, 28
      DO 40580 J=1, 63
      A5(J,K)=SNR(J,K)*BNR(J,K)
      A6(J,K)=SNI(J,K)*BNI(J,K)
      A7(J,K)=SNR(J,K)*BNI(J,K)
      A8(J,K)=SNI(J,K)*BNR(J,K)
40580 CONTINUE
C..
      DO 40590 K=1, 28
      DO 40590 J=1, 63
      A1(J,K)=A5(J,K)-A6(J,K)
      A2(J,K)=A7(J,K)+A8(J,K)
40590 CONTINUE
C ..  A5-A6=REAL S*BL  FOR N. HEMI
C ..  A7+A8=IMAG S*BL  FOR N. HEMI
C
C
      CALL RR2RI(XNN,A1,A2)
C
C..
      DO 40610 K=1, 28
      DO 40610 J=1, 63
      A5(J,K)=SSR(J,K)*BSR(J,K)
      A6(J,K)=SSI(J,K)*BSI(J,K)
      A7(J,K)=SSR(J,K)*BSI(J,K)
      A8(J,K)=SSI(J,K)*BSR(J,K)
40610 CONTINUE
C..
      DO 40620 K=1, 28
      DO 40620 J=1, 63
      A3(J,K)=A5(J,K)-A6(J,K)
      A4(J,K)=A7(J,K)+A8(J,K)
40620 CONTINUE
C ..  A5-A6=REAL S*BL  FOR S. HEMI
C ..  A7+A8=IMAG S*BL  FOR S. HEMI
C
C
      CALL RR2RI(XSS,A3,A4)
      DO 40630 K=1, 28
      DO 40630 J=1, 126
      BPN(J,K)=XNN(J,K)+XSS(J,K)
      BPS(J,K)=XNN(J,K)-XSS(J,K)
40630 CONTINUE
C
C START MIX. RATIO
C
CCC    CALL SUMS2I( RM,QEMX,QLNT, 28 ,  126 -1,  63 )
CCC    CALL RI3RR (QEMX,QENR,QENI,QESR,QESI)
       CALL RI2RRI(QEMX,QENR,QENI,QESR,QESI)
       CALL RI2RRI(UQF ,ANR ,ANI ,ASR ,ASI )
       CALL RI2RRI(VQF ,BNR ,BNI ,BSR ,BSI )
       CALL RI2RRI(RQF ,CNR ,CNI ,CSR ,CSI )
C
C
C    COMPUTE S*RQF    N.HEMI
C
      DO 40640 K=1, 28
      DO 40640 J=1, 63
      A1(J,K)=SNR(J,K)*CNR(J,K)
      A2(J,K)=SNI(J,K)*CNI(J,K)
      A3(J,K)=SNR(J,K)*CNI(J,K)
      A4(J,K)=SNI(J,K)*CNR(J,K)
40640 CONTINUE
C..
      DO 40650 K=1, 28
      DO 40650 J=1, 63
      CNR(J,K)=A1(J,K)-A2(J,K)
      CNI(J,K)=A3(J,K)+A4(J,K)
40650 CONTINUE
C
C    COMPUTE S*RQF    S.HEMI
C
      DO 40660 K=1, 28
      DO 40660 J=1, 63
      A1(J,K)=SSR(J,K)*CSR(J,K)
      A2(J,K)=SSI(J,K)*CSI(J,K)
      A3(J,K)=SSR(J,K)*CSI(J,K)
      A4(J,K)=SSI(J,K)*CSR(J,K)
40660 CONTINUE
C..
      DO 40670 K=1, 28
      DO 40670 J=1, 63
      CSR(J,K)=A1(J,K)-A2(J,K)
      CSI(J,K)=A3(J,K)+A4(J,K)
40670 CONTINUE
C..
C    COMPUTE R*Q(T-1) N.HEMI
C
      DO 40680 K=1, 28
      DO 40680 J=1, 63
      A1(J,K)=RNR(J,K)*QENR(J,K)
      A2(J,K)=RNI(J,K)*QENI(J,K)
      A3(J,K)=RNR(J,K)*QENI(J,K)
      A4(J,K)=RNI(J,K)*QENR(J,K)
40680 CONTINUE
C..
      DO 40690 K=1, 28
      DO 40690 J=1, 63
      A5(J,K)=A1(J,K)-A2(J,K)
      A6(J,K)=A3(J,K)+A4(J,K)
40690 CONTINUE
C..
C    COMPUTE Q*VQF N.HEMI
C..
      DO 40710 K=1, 28
      DO 40710 J=1, 63
      A1(J,K)=QNR(J,K)*BNR(J,K)
      A2(J,K)=QNI(J,K)*BNI(J,K)
      A3(J,K)=QNR(J,K)*BNI(J,K)
      A4(J,K)=QNI(J,K)*BNR(J,K)
40710 CONTINUE
C..
      DO 40720 K=1, 28
      DO 40720 J=1, 63
      A7(J,K)=A1(J,K)-A2(J,K)
      A8(J,K)=A3(J,K)+A4(J,K)
40720 CONTINUE
C ..  A5+A7=REAL R*Q+Q*VQF FOR N. HEMI
C ..  A6+A8=IMAG R*Q+Q*VQF FOR N. HEMI
      DO 40730 K=1, 28
      DO 40730 J=1, 63
      A1(J,K)=A5(J,K)+A7(J,K)+CNR(J,K)
      A2(J,K)=A6(J,K)+A8(J,K)+CNI(J,K)
40730 CONTINUE
C
C
C   XNN=R*Q(T-1)+Q*VQF+RQF N.HEMI
      CALL RR2RI(XNN,A1,A2)
C
C    COMPUTE R*Q(T-1) S.HEMI
C
      DO 40740 K=1, 28
      DO 40740 J=1, 63
      A1(J,K)=RSR(J,K)*QESR(J,K)
      A2(J,K)=RSI(J,K)*QESI(J,K)
      A3(J,K)=RSR(J,K)*QESI(J,K)
      A4(J,K)=RSI(J,K)*QESR(J,K)
40740 CONTINUE
C..
      DO 40750 K=1, 28
      DO 40750 J=1, 63
      A5(J,K)=A1(J,K)-A2(J,K)
      A6(J,K)=A3(J,K)+A4(J,K)
40750 CONTINUE
C..
C    COMPUTE Q*VQF S. HEMI
C..
      DO 40760 K=1, 28
      DO 40760 J=1, 63
      A1(J,K)=QSR(J,K)*BSR(J,K)
      A2(J,K)=QSI(J,K)*BSI(J,K)
      A3(J,K)=QSR(J,K)*BSI(J,K)
      A4(J,K)=QSI(J,K)*BSR(J,K)
40760 CONTINUE
C..
      DO 40770 K=1, 28
      DO 40770 J=1, 63
      A7(J,K)=A1(J,K)-A2(J,K)
      A8(J,K)=A3(J,K)+A4(J,K)
40770 CONTINUE
C ..  A5+A7=REAL R*Q+Q*VQF FOR S. HEMI
C ..  A6+A8=IMAG R*Q+Q*VQF FOR S. HEMI
      DO 40780 K=1, 28
      DO 40780 J=1, 63
      A1(J,K)=A5(J,K)+A7(J,K)+CSR(J,K)
      A2(J,K)=A6(J,K)+A8(J,K)+CSI(J,K)
40780 CONTINUE
C
C
C   XSS=R*Q(T-1)+Q*VQF+RQF S.HEMI
      CALL RR2RI(XSS,A1,A2)
C     PREPARE FOURIER COEFS. FOR MULT. BY SYM AND ANTISYM LEGENDRES
      DO 40810 K=1, 28
      DO 40810 J=1, 126
      CQN(J,K)=XNN(J,K)+XSS(J,K)
      CQS(J,K)=XNN(J,K)-XSS(J,K)
40810 CONTINUE
C
C ..............................................................
C SOF CP=R*Q(T-1)+Q*VQF+RQF
C ..............................................................
C...
C   A1 A2 A3 A4 WILL CONTAIN  UPRIME*Q=U*Q-UBAR*Q
      DO 60 K=1, 28
      DO 60 J=1, 63
      A1(J,K)=ANR(J,K)-UBN(K)*QFNR(J,K)
      A2(J,K)=ANI(J,K)-UBN(K)*QFNI(J,K)
      A3(J,K)=ASR(J,K)-UBS(K)*QFSR(J,K)
      A4(J,K)=ASI(J,K)-UBS(K)*QFSI(J,K)
60    CONTINUE
C..
      DO 40820 K=1, 28
      DO 40820 J=1, 63
      A5(J,K)=SNR(J,K)*A1(J,K)
      A6(J,K)=SNI(J,K)*A2(J,K)
      A7(J,K)=SNR(J,K)*A2(J,K)
      A8(J,K)=SNI(J,K)*A1(J,K)
40820 CONTINUE
C..
      DO 40830 K=1, 28
      DO 40830 J=1, 63
      A1(J,K)=A5(J,K)-A6(J,K)
      A2(J,K)=A7(J,K)+A8(J,K)
40830 CONTINUE
C ..  A5-A6=REAL S*UPRIME*Q  FOR N. HEMI
C ..  A7+A8=IMAG S*UPRIME*Q  FOR N. HEMI
C
C
      CALL RR2RI(XNN,A1,A2)
C..
      DO 40840 K=1, 28
      DO 40840 J=1, 63
      A5(J,K)=SSR(J,K)*A3(J,K)
      A6(J,K)=SSI(J,K)*A4(J,K)
      A7(J,K)=SSR(J,K)*A4(J,K)
      A8(J,K)=SSI(J,K)*A3(J,K)
40840 CONTINUE
C..
      DO 40850 K=1, 28
      DO 40850 J=1, 63
      A3(J,K)=A5(J,K)-A6(J,K)
      A4(J,K)=A7(J,K)+A8(J,K)
40850 CONTINUE
C ..  A5-A6=REAL S*UPRIME*Q  FOR S. HEMI
C ..  A7+A8=IMAG S*UPRIME*Q  FOR S. HEMI
C
C
      CALL RR2RI(XSS,A3,A4)
      DO 40860 K=1, 28
      DO 40860 J=1, 126
      AQN(J,K)=XNN(J,K)+XSS(J,K)
      AQS(J,K)=XNN(J,K)-XSS(J,K)
40860 CONTINUE
C   A5 A6 A7 A8 WILL CONTAIN S*VQF FOR N.HEMI
C..
      DO 40870 K=1, 28
      DO 40870 J=1, 63
      A5(J,K)=SNR(J,K)*BNR(J,K)
      A6(J,K)=SNI(J,K)*BNI(J,K)
      A7(J,K)=SNR(J,K)*BNI(J,K)
      A8(J,K)=SNI(J,K)*BNR(J,K)
40870 CONTINUE
C..
      DO 40880 K=1, 28
      DO 40880 J=1, 63
      A1(J,K)=A5(J,K)-A6(J,K)
      A2(J,K)=A7(J,K)+A8(J,K)
40880 CONTINUE
C ..  A5-A6=REAL S*VQF FOR N. HEMI
C ..  A7+A8=IMAG S*VQF FOR N. HEMI
C
C
      CALL RR2RI(XNN,A1,A2)
C
C   A5 A6 A7 A8 WILL CONTAIN S*VQF FOR S.HEMI
C..
      DO 40910 K=1, 28
      DO 40910 J=1, 63
      A5(J,K)=SSR(J,K)*BSR(J,K)
      A6(J,K)=SSI(J,K)*BSI(J,K)
      A7(J,K)=SSR(J,K)*BSI(J,K)
      A8(J,K)=SSI(J,K)*BSR(J,K)
40910 CONTINUE
C..
      DO 40920 K=1, 28
      DO 40920 J=1, 63
      A3(J,K)=A5(J,K)-A6(J,K)
      A4(J,K)=A7(J,K)+A8(J,K)
40920 CONTINUE
C ..  A5-A6=REAL S*VQF FOR S. HEMI
C ..  A7+A8=IMAG S*VQF FOR S. HEMI
C
C
      CALL RR2RI(XSS,A3,A4)
      DO 40930 K=1, 28
      DO 40930 J=1, 126
      BQN(J,K)=XNN(J,K)+XSS(J,K)
      BQS(J,K)=XNN(J,K)-XSS(J,K)
40930 CONTINUE
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE SPECU(UFLIP,UFLOP,FN,FS,CSDERN,CSDERS,SINF,WGT,UGNS)
      DIMENSION FN( 28 ),FS( 28 ),CSDERN( 28 ),CSDERS( 28 )
      DIMENSION UFLIP( 28 , 64 ),UFLOP( 28 , 64 )
      DIMENSION UGNS( 384 , 28 )
      DIMENSION EPS( 64 )
      DIMENSION FUNEV( 28 ),FUNOD( 28 ),DEREV( 28 ),DEROD( 28 ),
     1          UNMAX( 28 ),UNMIN( 28 ),USMAX( 28 ),USMIN( 28 ),
     2 UBARN( 28 ),UBARS( 28 ),PLN( 64 ),DER( 63 )
      COMMON /SPECUC/EPS,IEPS
CCC   DATA IEPS/1/
CCC         PART BETWEEN GUARDS MADE INTO SR GSPECU.
CCC         7 DEC 1990      M. ROZWODOSKI
C...
      SINLAT = SINF
      P1 = SQRT (0.5 E 0)
      PLN(1)=P1
      P2 = SQRT(3. E 0) * SINLAT * P1
      PLN(2)=P2
      DO 2 N=3, 64
      P3 = (SINLAT*P2 - EPS(N-1)*P1)/EPS(N)
      PLN(N) = P3
      P1 = P2
      P2 = P3
2     CONTINUE
C...
      RN=0. E 0
      DER(1)=0. E 0
      DO 3 I=2, 63
      RN=RN + 1. E 0
      DER(I)=(RN+1. E 0)*EPS(I)*PLN(I-1)-RN*EPS(I+1)*PLN(I+1)
3     CONTINUE
C...
      DO 200 J=1, 28
      FUNEV(J)=0. E 0
      DEROD(J)=0. E 0
200   CONTINUE
      DO 4 I=1, 63 ,2
      DO 4 J=1, 28
      FUNEV(J)=FUNEV(J)+PLN(I)*UFLIP(J,I)
      DEROD(J)=DEROD(J)+DER(I)*UFLIP(J,I)
4     CONTINUE
      DO 300 J=1, 28
      FUNOD(J)=0. E 0
      DEREV(J)=0. E 0
300   CONTINUE
      DO 5 I=2, 62  ,2
      DO 5 J=1, 28
      FUNOD(J)=FUNOD(J)+PLN(I)*UFLIP(J,I)
      DEREV(J)=DEREV(J)+DER(I)*UFLIP(J,I)
5     CONTINUE
      DO 400 J=1, 28
      FUNOD(J)=FUNOD(J)+PLN( 64 )*UFLIP(J, 64 )
400   CONTINUE
      DO 500 J=1, 28
      FN(J)     =    FUNEV(J)+FUNOD(J)
      FS(J)     =    FUNEV(J)-FUNOD(J)
      CSDERN(J) =    DEREV(J)+DEROD(J)
      CSDERS(J) =    DEREV(J)-DEROD(J)
500   CONTINUE
C...
      DO 8 K=1, 28
      UNMIN(K) = UGNS(1,K)
      UNMAX(K) = UGNS(1,K)
      USMIN(K) = UGNS( 192 +1,K)
      USMAX(K) = UGNS( 192 +1,K)
      DO 8 J=1, 192
CRAY      IF (UGNS(J,K) .LT. UNMIN(K))  UNMIN(K) = UGNS(J,K)
CRAY      IF (UGNS(J,K) .GT. UNMAX(K))  UNMAX(K) = UGNS(J,K)
CRAY      IF (UGNS( 192 +J,K) .LT. USMIN(K))  USMIN(K) = UGNS( 192 +J,K)
CRAY      IF (UGNS( 192 +J,K) .GT. USMAX(K))  USMAX(K) = UGNS( 192 +J,K)
         UNMIN(K) = AMIN1(UGNS(J,K),UNMIN(K))
         UNMAX(K) = AMAX1(UGNS(J,K),UNMAX(K))
         USMIN(K) = AMIN1(UGNS( 192 +J,K),USMIN(K))
         USMAX(K) = AMAX1(UGNS( 192 +J,K),USMAX(K))
8     CONTINUE
      DO 9 K=1, 28
      UBARN(K)=0.5 E 0*(UNMAX(K)+UNMIN(K))
      UBARS(K)=0.5 E 0*(USMAX(K)+USMIN(K))
9     CONTINUE
      DO 10 I=1, 64
      PLN(I)=PLN(I)*WGT
10    CONTINUE
      DO 600 J=1, 28
      FUNEV(J)=UBARN(J)+UBARS(J)
      FUNOD(J)=UBARN(J)-UBARS(J)
600   CONTINUE
CRAY      DO 12 I=1, 63 ,2
CRAY      DO 12 J=1, 28
CRAY      UFLOP(J,I)=FUNEV(J)*PLN(I)
CRAY12    CONTINUE
      DO 14 I=2, 64 ,2
      DO 14 J=1, 28
      UFLOP(J,I-1)=FUNEV(J)*PLN(I-1)
      UFLOP(J,I)=FUNOD(J)*PLN(I)
14    CONTINUE
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GSPECU
      DIMENSION EPS( 64 )
      COMMON /SPECUC/EPS,IEPS
CCC   DATA IEPS/1/
CCC   IF(IEPS.EQ.0)GO TO 111
      EPS(1) = 0. E 0
      DO 1 I=2, 64
      RN=  I-1
      EPS(I)=SQRT(RN*RN/(4. E 0*RN*RN-1. E 0))
1     CONTINUE
      IEPS=0
C 111 CONTINUE
C...
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE RI3RR (FIRNS,FRN,FIN,FRS,FIS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    RI3RR       SEPARATES COMPLEX FIELDS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-15
C
C ABSTRACT: SEPARATES COMPLEX FIELDS INTO REAL AND IMAGINARY FIELDS.
C
C PROGRAM HISTORY LOG:
C   88-04-15  JOSEPH SELA
C
C USAGE:    CALL RI3RR (FIRNS, FRN, FIN, FRS, FIS)
C   INPUT ARGUMENT LIST:
C     FIRNS    - ARRAY OF LEVS PAIRS OF NORTHERN AND SOUTHERN
C                HEMISPHERE COMPLEX FIELDS.
C
C   OUTPUT ARGUMENT LIST:
C     FRN      - ARRAY OF LEVS NORTHERN HEMISPHERE REAL      FIELDS.
C     FIN      - ARRAY OF LEVS NORTHERN HEMISPHERE IMAGINARY FIELDS.
C     FRS      - ARRAY OF LEVS SOUTHERN HEMISPHERE REAL      FIELDS.
C     FIS      - ARRAY OF LEVS SOUTHERN HEMISPHERE IMAGINARY FIELDS.
C
C REMARKS: RI3RR IS THE SAME AS RI2RR EXCEPT FOR DIMENSION
C   OF FIRNS ARRAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CRAY       SAVE
      DIMENSION FIRNS( 126 ,2, 28 ),
     1 FRN( 63 , 28 ), FRS( 63 , 28 ),
     2 FIN( 63 , 28 ), FIS( 63 , 28 )
CC
      DO  10 K=1, 28
      DO 200 I=1, 63
CC
             FRN(I,K) = FIRNS(I*2-1,1,K)
             FIN(I,K) = FIRNS(I*2  ,1,K)
             FRS(I,K) = FIRNS(I*2-1,2,K)
             FIS(I,K) = FIRNS(I*2  ,2,K)
CC
  200 CONTINUE
   10 CONTINUE
CC
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE RR2RI(RIRI,A1,A2)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    RR2RI       MERGES 2 ARRAYS INTO 1 ARRAY.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-15
C
C ABSTRACT: MERGES REAL ARRAY AND IMAGINARY ARRAY TO FORM
C   COMPLEX ARRAY MADE UP OF LEVS FIELDS.
C
C PROGRAM HISTORY LOG:
C   88-04-15  JOSEPH SELA
C
C USAGE:    CALL RR2RI (RIRI, A1, A2)
C   INPUT ARGUMENT LIST:
C     A1       - ARRAY OF LEVS FIELDS OF (REAL,REAL...).
C     A2       - ARRAY OF LEVS FIELDS OF (IMAGINARY,IMAGINARY...).
C
C   OUTPUT ARGUMENT LIST:
C     RIRI     - ARRAY OF LEVS FIELDS OF
C                (REAL,IMAGINARY,REAL,IMAGINARY...)
C                MADE BY MERGING ARRAYS A1 AND A2.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CRAY       SAVE
      DIMENSION RIRI(2, 63 , 28 )
      DIMENSION     A1( 63 , 28 )
      DIMENSION     A2( 63 , 28 )
CC
CC    CREATE RIRI=(REAL,IMAGINARY,REAL,IMAGINARY...) ARRAY FROM
CC    A1=(REAL,REAL...),  A2=(IMAGINARY,IMAGINARY...)
CC
      DO  10 K=1, 28
      DO 200 I=1, 63
CC
             RIRI(1,I,K) = A1(I,K)
             RIRI(2,I,K) = A2(I,K)
CC
  200 CONTINUE
   10 CONTINUE
CC
      RETURN
      END
      SUBROUTINE EPSLON(EPS,JCAP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    EPSLON      COMPUTES EPS, A FUNCTION OF WAVE NUMBER.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: COMPUTES EPS, A FUNCTION OF WAVE NUMBER.
C   EPS IS USED IN CALCULATING LEGENDRE POLYS. AND THEIR DERIVATIVES.
C   EPS IS ALSO USED IN COMPUTING WINDS FROM DIVERGENCE AND VORTICITY.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL EPSLON (EPS, JCAP)
C   INPUT ARGUMENT LIST:
C     JCAP     - INDEX INDICATING THE SPECTRAL TRUNCATION USED.
C
C   OUTPUT ARGUMENT LIST:
C     EPS      - ARRAY COMPUTED FROM SQRT((N**2-L**2)/(4*N**2-1)).
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION EPS( 63 , 64 )
      JCAP1 = JCAP + 1
      JCAP2 = JCAP + 2
      DO 1 LL=1,JCAP1
      L = LL - 1
      DO 1 INDE=2,JCAP2
      N = L + INDE - 1
      A = (N*N - L*L) / (4.0 * N*N - 1.0)
      EPS(LL,INDE)= SQRT (A)
1     CONTINUE
      DO 2 LL=1, 63
      EPS(LL,1) = 0.0 E 0
2     CONTINUE
      RETURN
      END
      SUBROUTINE EPSILO(EPS,JCAP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    EPSLON      COMPUTES EPS, A FUNCTION OF WAVE NUMBER.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: COMPUTES EPS, A FUNCTION OF WAVE NUMBER.
C   EPS IS USED IN CALCULATING LEGENDRE POLYS. AND THEIR DERIVATIVES.
C   EPS IS ALSO USED IN COMPUTING WINDS FROM DIVERGENCE AND VORTICITY.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL EPSLON (EPS, JCAP)
C   INPUT ARGUMENT LIST:
C     JCAP     - INDEX INDICATING THE SPECTRAL TRUNCATION USED.
C
C   OUTPUT ARGUMENT LIST:
C     EPS      - ARRAY COMPUTED FROM SQRT((N**2-L**2)/(4*N**2-1)).
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION EPS( 64 , 63 )
      JCAP1 = JCAP + 1
      JCAP2 = JCAP + 2
      DO 1 LL=1,JCAP1
      L = LL - 1
      DO 1 INDE=2,JCAP2
      N = L + INDE - 1
      A = (N*N - L*L) / (4.0 * N*N - 1.0)
      EPS(INDE,LL)= SQRT (A)
1     CONTINUE
      DO 2 LL=1, 63
      EPS(1,LL) = 0.0 E 0
2     CONTINUE
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GFIDI(DG,TG,ZG,UG,VG,RQG,DPHI,DLAM,
     1 RCL,DEL,RDEL2,CI,P1,P2,H1,H2,TOV,
     2 SPDMAX,UQG,VQG,EK,B,TAU,A,F,G,RTG,DLAX)
CRAY       SAVE
C
C INPUT VARIABLES
C
      DIMENSION
     1  DG( 386 , 28 ),TG( 386 , 28 ), ZG( 386 , 28 ),
     2  UG( 386 , 28 ),VG( 386 , 28 ),RQG( 386 , 28 ),
     3          DPHI( 386 ),DLAM( 386 )
C
C OUTPUT VARIABLES
C
      DIMENSION SPDMAX( 28 ),
     1    UQG( 386 , 28 ),VQG( 386 , 28 ), EK( 386 , 28 ),
     2      B( 386 , 28 ),TAU( 386 , 28 ), A( 386 , 28 ),
     3      F( 386 , 28 ), G( 386 , 28 ),RTG( 386 , 28 ),
     4   DLAX( 386 )
C
C CONSTANT ARRAYS
C
       DIMENSION
     1 DEL( 28 ),RDEL2( 28 ),
     2 CI( 29 ),TOV( 28 ),
     3 P1( 28 ),P2( 28 ),H1( 28 ),H2( 28 )
C
C LOCAL VARIABLES
C
      DIMENSION
     1     CG ( 384 , 28 ), DB( 384 , 28 ),CB( 384 , 28 ),
     2     DOT( 384 , 29 ),DUP( 384 , 28 ),DVP( 384 , 28 ),
     3     DUM( 384 , 28  ),DVM( 384 , 28 )
C
      DO 1234 K=1, 28
      SPDMAX(K)=0.
1234  CONTINUE
      RCL2=.5 E 0*RCL
      DO 100 K=1, 28
      DO 100 J=1, 384
      A(J,K)=ZG(J,K)*UG(J,K)+
     1               2.8705E+2  *TG(J,K)*DPHI(J)
      B(J,K)=ZG(J,K)*VG(J,K)-
     1               2.8705E+2  *TG(J,K)*DLAM(J)
  100 CONTINUE
C
      DO 120 K=1, 28
      DO 120 J=1, 384
      F(J,K)=TG(J,K)*UG(J,K)
      G(J,K)=TG(J,K)*VG(J,K)
  120 CONTINUE
      DO 130 K=1, 28
      DO 130 J=1, 384
      UQG(J,K)=UG(J,K)*RQG(J,K)
      VQG(J,K)=VG(J,K)*RQG(J,K)
  130 CONTINUE
C
      DO 140 K=1, 28
      DO 140 J=1, 384
      EK(J,K)=(UG(J,K)*UG(J,K)+VG(J,K)*VG(J,K))*RCL2
  140 CONTINUE
C
CCCCCCCMIC$ GUARD 22
      DO 10 K=1, 28
      DO 10 J=1, 384
      IF (EK(J,K) .GT. SPDMAX(K))  SPDMAX(K)=EK(J,K)
   10 CONTINUE
CCCCCCCMIC$ END GUARD 22
C
C     COMPUTE C=V(TRUE)*DEL(LN(PS)).DIVIDE BY COS FOR DEL COS FOR V
C
      DO 150 J=1, 384
      DPHI(J)=DPHI(J)*RCL
      DLAM(J)=DLAM(J)*RCL
  150 CONTINUE
      DO 180 K=1, 28
      DO 180 J=1, 384
      CG(J,K)=UG(J,K)*DLAM(J)+
     1        VG(J,K)*DPHI(J)
  180 CONTINUE
C
      RK=  2.8705E+2  / 1.0046E+3
      DO 190 J=1, 384
      DB(J,1)=DEL(1)*DG(J,1)
      CB(J,1)=DEL(1)*CG(J,1)
  190 CONTINUE
      DO 210 K=1, 27
      DO 210 J=1, 384
      DB(J,K+1)=DB(J,K)+DEL(K+1)*DG(J,K+1)
      CB(J,K+1)=CB(J,K)+DEL(K+1)*CG(J,K+1)
  210 CONTINUE
C
C   STORE INTEGRAL OF CG IN DLAX
C
      DO 220 J=1, 384
      DLAX(J)= -CB(J, 28 )
  220 CONTINUE
C
C   SIGMA DOT COMPUTED ONLY AT INTERIOR INTERFACES.
C
      DO 230 J=1, 384
      DOT(J,1)=0. E 0
      DVM(J,1)=0. E 0
      DUM(J,1)=0. E 0
      DOT(J, 29 )=0. E 0
      DVP(J, 28  )=0. E 0
      DUP(J, 28  )=0. E 0
  230 CONTINUE
C
      DO 240 K=1, 27
      DO 240 J=1, 384
      DOT(J,K+1)=DOT(J,K)+
     1                 DEL(K)*(DB(J, 28 )+CB(J, 28 )-
     2                 DG(J,K)-CG(J,K))
  240 CONTINUE
C
      DO 250 K=1, 28
      DO 250 J=1, 384
      TAU(J,K)=
     1  TG(J,K)*(DG(J,K)-RK*DB(J, 28 ))
     1 +RK*(TOV(K)+TG(J,K))*(CG(J,K)-CB(J, 28 ))
  250 CONTINUE
C
      DO 260 K=1, 27
      DO 260 J=1, 384
      DVP(J,K  )=VG(J,K+1)-VG(J,K)
      DUP(J,K  )=UG(J,K+1)-UG(J,K)
      DVM(J,K+1)=VG(J,K+1)-VG(J,K)
      DUM(J,K+1)=UG(J,K+1)-UG(J,K)
  260 CONTINUE
      DO 270 K=1, 28
      DO 270 J=1, 384
      A(J,K)=A(J,K)+RDEL2(K)*
     1            ( DOT(J,K+1)*DVP(J,K)
     2             +DOT(J,K  )*DVM(J,K))
      B(J,K)=B(J,K)-RDEL2(K)*
     1            ( DOT(J,K+1)*DUP(J,K)
     2             +DOT(J,K  )*DUM(J,K))
  270 CONTINUE
      DO 280 K=1, 27
      DO 280 J=1, 384
      DUP(J,K  )=P1(K  )*TG(J,K+1)-TG(J,K)
      DVP(J,K  )=CI(K+1)*CB(J, 28 )-CB(J,K)
      DUM(J,K+1)=TG(J,K+1)-P2(K+1)*TG(J,K)
      DVM(J,K+1)=CI(K+1)*CB(J, 28 )-CB(J,K)
  280 CONTINUE
C
C     H1 H2 COME FROM BMCM
C
      DO 290 K=1, 28
      DO 290 J=1, 384
      TAU(J,K)=TAU(J,K)-RDEL2(K)*
     1               (DOT(J,K+1)*DUP(J,K)+
     2                DOT(J,K  )*DUM(J,K)+
     3                H1(K)*DVP(J,K)+H2(K)*DVM(J,K))
  290 CONTINUE
C
      DO 300 K=1, 27
      DO 300 J=1, 384
      DUP(J,K  )=RQG(J,K+1)-RQG(J,K)
      DUM(J,K+1)=RQG(J,K+1)-RQG(J,K)
  300 CONTINUE
      DO 310 J=1, 384
      DUP(J, 28 )=0. E 0
  310 CONTINUE
      DO 320 K=1, 28
      DO 320 J=1, 384
      RTG(J,K)=DG(J,K)*RQG(J,K)-RDEL2(K)*
     1               (DOT(J,K+1)*DUP(J,K)+
     2                DOT(J,K  )*DUM(J,K))
  320 CONTINUE
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE SUMS2I(FLN,AP,QLN,LEVS)
      PARAMETER (LEN0= 192 )
      PARAMETER (LENH= 192 /2)
      PARAMETER (LNT= 2016 )
      PARAMETER (JCAP= 62 )
      DIMENSION AP(2,0:LEN0,LEVS), QLN(2*LNT), FLN(2*LNT+1,LEVS)
C
C     LOCAL SCALARS
C     -------------
C
      INTEGER I, N, L, K
      REAL    EVENR, EVENI
C
C     STATEMENT FUNCTIONS
C     -------------------
C
C     OFFSET(N,L) IS THE OFFSET IN WORDS
C     TO THE (N,L)-ELEMENT OF A LOWER
C     TRIANGULAR MATRIX OF COMPLEX NUMBERS
C     IN AN ARRAY CONTAINING THE MATRIX
C     PACKED IN COLUMN-MAJOR ORDER,
C     WHERE L AND N RANGE FROM 0 TO JCAP,
C     INCLUSIVE
C
C          LOWER TRIANGULAR MATRIX OF COMPLEX NUMBERS:
C
C                     L -->
C
C                   X
C               N   X X
C                   X X X
C               |   X X X X
C               V   X X X X X
C                   X X X X X X
C
C          ORDER OF THE MATRIX ELEMENTS IN MEMORY:
C
C          (0,0), (1,0), (2,0), ..., (JCAP,0), (1,1), (2,1), (3,1), ...
C
      INTEGER OFFSET
      OFFSET(N,L) = (JCAP+1)*(JCAP+2) - (JCAP-L+1)*(JCAP-L+2) + 2*(N-L)
C
C     ---
C
C     TERM(1,N,L,K) AND TERM(2,N,L,K) ARE
C     THE REAL AND IMAGINARY PART, RESP.,
C     OF EXP((0,1)*L*PHI) TIMES THE (N,L) TERM
C     IN THE EXPANSION IN SPHERICAL
C     HARMONICS OF THE FIELD AT LEVEL K,
C     WHERE PHI IS THE AZIMUTHAL ANGLE
C
      TERM(I,N,L,K) = QLN(OFFSET(N,L)+I)*FLN(OFFSET(N,L)+I,K)
C
C     ZERO THE ACCUMULATORS
C     ---------------------
C
      DO K = 1, LEVS
         DO L = 0, JCAP
            AP(1,L,K) = 0.
            AP(2,L,K) = 0.
            AP(1,LENH+L,K) = 0.
            AP(2,LENH+L,K) = 0.
         END DO
      END DO
C
C     COMPUTE THE EVEN AND ODD (N-L) COMPONENTS
C     OF THE FOURIER COEFFICIENTS
C     ---------------------------------------------------------
C
CFPP$ CNCALL
      DO L = 0, JCAP
c        LS=L*((2*JCAP+3)-L)
C
C        COMPUTE THE SUM OF THE EVEN (N-L) TERMS FOR EACH LEVEL
C        ------------------------------------------------------
C
C        REAL PART
C
c        CALL SGEMVX1(LEVS,(JCAP+2-L)/2,1.,FLN(LS+1,1),2*LNT+1,4,
c    &                QLN(LS+1),4,1.,AP(1,L,1),(LEN0+1)*2)
         do n = l, jcap, 2
            do k = 1, levs
c              real part
               ap(1,l,k) = ap(1,l,k) + term(1,n,l,k)
c              imaginary part
               ap(2,l,k) = ap(2,l,k) + term(2,n,l,k)
            enddo
         enddo
C
C        IMAGINARY PART
C
c        CALL SGEMVX1(LEVS,(JCAP+2-L)/2,1.,FLN(LS+2,1),2*LNT+1,4,
c    &                QLN(LS+2),4,1.,AP(2,L,1),(LEN0+1)*2)
C
C        COMPUTE THE SUM OF THE ODD (N-L) TERMS FOR EACH LEVEL
C        -----------------------------------------------------
c        IF(L.LT.JCAP) THEN
C
C        REAL PART
C
c        CALL SGEMVX1(LEVS,(JCAP+1-L)/2,1.,FLN(LS+3,1),2*LNT+1,4,
c    &                QLN(LS+3),4,1.,AP(1,LENH+L,1),(LEN0+1)*2)

         do n = l+1, jcap, 2
            do k = 1, levs
c              real part
               ap(1,lenh+l,k) = ap(1,lenh+l,k) + term(1,n,l,k)
c              imaginary part
               ap(2,lenh+l,k) = ap(2,lenh+l,k) + term(2,n,l,k)
            enddo
         enddo
C
C        IMAGINARY PART
C
c        CALL SGEMVX1(LEVS,(JCAP+1-L)/2,1.,FLN(LS+4,1),2*LNT+1,4,
c    &                QLN(LS+4),4,1.,AP(2,LENH+L,1),(LEN0+1)*2)
c        ENDIF
      END DO
C
C
C     COMPUTE THE FOURIER COEFFICIENTS FOR EACH LEVEL
C     -----------------------------------------------
C
      DO K = 1, LEVS
         DO L = 0, JCAP
            EVENR = AP(1,L,K)
            EVENI = AP(2,L,K)
            AP(1,L,K) = AP(1,L,K) + AP(1,LENH+L,K)
            AP(2,L,K) = AP(2,L,K) + AP(2,LENH+L,K)
            AP(1,LENH+L,K) = EVENR - AP(1,LENH+L,K)
            AP(2,LENH+L,K) = EVENI - AP(2,LENH+L,K)
         END DO
      END DO
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE SUMS2R(FLN,AP,QLN,LEVS)
      PARAMETER (LEN0= 128 )
      PARAMETER (LENH= 128 /2)
      PARAMETER (LNT= 2016 )
      PARAMETER (JCAP= 62 )
      DIMENSION AP(2,0:LEN0,LEVS), QLN(2*LNT), FLN(2*LNT+1,LEVS)
C
C     LOCAL SCALARS
C     -------------
C
      INTEGER I, N, L, K
      REAL    EVENR, EVENI
C
C     STATEMENT FUNCTIONS
C     -------------------
C
C     OFFSET(N,L) IS THE OFFSET IN WORDS
C     TO THE (N,L)-ELEMENT OF A LOWER
C     TRIANGULAR MATRIX OF COMPLEX NUMBERS
C     IN AN ARRAY CONTAINING THE MATRIX
C     PACKED IN COLUMN-MAJOR ORDER,
C     WHERE L AND N RANGE FROM 0 TO JCAP,
C     INCLUSIVE
C
C          LOWER TRIANGULAR MATRIX OF COMPLEX NUMBERS:
C
C                     L -->
C
C                   X
C               N   X X
C                   X X X
C               |   X X X X
C               V   X X X X X
C                   X X X X X X
C
C          ORDER OF THE MATRIX ELEMENTS IN MEMORY:
C
C          (0,0), (1,0), (2,0), ..., (JCAP,0), (1,1), (2,1), (3,1), ...
C
      INTEGER OFFSET
      OFFSET(N,L) = (JCAP+1)*(JCAP+2) - (JCAP-L+1)*(JCAP-L+2) + 2*(N-L)
C
C     ---
C
C     TERM(1,N,L,K) AND TERM(2,N,L,K) ARE
C     THE REAL AND IMAGINARY PART, RESP.,
C     OF EXP((0,1)*L*PHI) TIMES THE (N,L) TERM
C     IN THE EXPANSION IN SPHERICAL
C     HARMONICS OF THE FIELD AT LEVEL K,
C     WHERE PHI IS THE AZIMUTHAL ANGLE
C
      TERM(I,N,L,K) = QLN(OFFSET(N,L)+I)*FLN(OFFSET(N,L)+I,K)
C
C     ZERO THE ACCUMULATORS
C     ---------------------
C
      DO K = 1, LEVS
         DO L = 0, JCAP
            AP(1,L,K) = 0.
            AP(2,L,K) = 0.
            AP(1,LENH+L,K) = 0.
            AP(2,LENH+L,K) = 0.
         END DO
      END DO
C
C     COMPUTE THE EVEN AND ODD (N-L) COMPONENTS
C     OF THE FOURIER COEFFICIENTS
C     ---------------------------------------------------------
C
CFPP$ CNCALL
      DO L = 0, JCAP
c        LS=L*((2*JCAP+3)-L)
C
C        COMPUTE THE SUM OF THE EVEN (N-L) TERMS FOR EACH LEVEL
C        ------------------------------------------------------
C
C        REAL PART
C
c        CALL SGEMVX1(LEVS,(JCAP+2-L)/2,1.,FLN(LS+1,1),2*LNT+1,4,
c    &                QLN(LS+1),4,1.,AP(1,L,1),(LEN0+1)*2)
         do n = l, jcap, 2
            do k = 1, levs
c              real part
               ap(1,l,k) = ap(1,l,k) + term(1,n,l,k)
c              imaginary part
               ap(2,l,k) = ap(2,l,k) + term(2,n,l,k)
            end do
         end do

C
C        IMAGINARY PART
C
c        CALL SGEMVX1(LEVS,(JCAP+2-L)/2,1.,FLN(LS+2,1),2*LNT+1,4,
c    &                QLN(LS+2),4,1.,AP(2,L,1),(LEN0+1)*2)
C
C        COMPUTE THE SUM OF THE ODD (N-L) TERMS FOR EACH LEVEL
C        -----------------------------------------------------
c        IF(L.LT.JCAP) THEN
C
C        REAL PART
C
c        CALL SGEMVX1(LEVS,(JCAP+1-L)/2,1.,FLN(LS+3,1),2*LNT+1,4,
c    &                QLN(LS+3),4,1.,AP(1,LENH+L,1),(LEN0+1)*2)

         do n = l+1, jcap, 2
            do k = 1, levs
c              real part
               ap(1,lenh+l,k) = ap(1,lenh+l,k) + term(1,n,l,k)
c              imaginary part
               ap(2,lenh+l,k) = ap(2,lenh+l,k) + term(2,n,l,k)
            enddo
         enddo
C
C        IMAGINARY PART
C
c        CALL SGEMVX1(LEVS,(JCAP+1-L)/2,1.,FLN(LS+4,1),2*LNT+1,4,
c    &                QLN(LS+4),4,1.,AP(2,LENH+L,1),(LEN0+1)*2)
c        ENDIF
      END DO
C
C
C     COMPUTE THE FOURIER COEFFICIENTS FOR EACH LEVEL
C     -----------------------------------------------
C
      DO K = 1, LEVS
         DO L = 0, JCAP
            EVENR = AP(1,L,K)
            EVENI = AP(2,L,K)
            AP(1,L,K) = AP(1,L,K) + AP(1,LENH+L,K)
            AP(2,L,K) = AP(2,L,K) + AP(2,LENH+L,K)
            AP(1,LENH+L,K) = EVENR - AP(1,LENH+L,K)
            AP(2,LENH+L,K) = EVENI - AP(2,LENH+L,K)
         END DO
      END DO
C
      RETURN
      END
      SUBROUTINE FL2I(FP,FM,FLN,QLN,LEVS)
      PARAMETER (LEN0P= 62 )
      PARAMETER (LEN0M= 62 )
      PARAMETER (LNT= 2016 )
      PARAMETER (JCAP= 62 )
      DIMENSION FP(2,0:LEN0P,LEVS), FM(2,0:LEN0M,LEVS),
     .          QLN(2*LNT), FLN(2*LNT+1,LEVS)
C
C     LOCAL SCALARS
C     -------------
C
      INTEGER N, L, K
C
C     STATEMENT FUNCTION
C     ------------------
C
C     OFFSET(N,L) IS THE OFFSET IN WORDS
C     TO THE (N,L)-ELEMENT OF A LOWER
C     TRIANGULAR MATRIX OF COMPLEX NUMBERS
C     IN AN ARRAY CONTAINING THE MATRIX
C     PACKED IN COLUMN-MAJOR ORDER,
C     WHERE L AND N RANGE FROM 0 TO JCAP,
C     INCLUSIVE
C
C          LOWER TRIANGULAR MATRIX OF COMPLEX NUMBERS:
C
C                     L -->
C
C                   X
C               N   X X
C                   X X X
C               |   X X X X
C               V   X X X X X
C                   X X X X X X
C
C          ORDER OF THE MATRIX ELEMENTS IN MEMORY:
C
C          (0,0), (1,0), (2,0), ..., (JCAP,0), (1,1), (2,1), (3,1), ...
C
      INTEGER OFFSET
      OFFSET(N,L) = (JCAP+1)*(JCAP+2) - (JCAP+1-L)*(JCAP+2-L) + 2*(N-L)
C
C     ----------------------------------------------------------------
C     COMPUTE THE COEFFICIENTS OF THE EXPANSION IN SPHERICAL HARMONICS
C     OF THE FIELD AT EACH LEVEL
C     ----------------------------------------------------------------
C
CFPP$ CNCALL
      DO L = 0, JCAP
c        LS=L*((2*JCAP+3)-L)
C
C        COMPUTE THE EVEN (N-L) EXPANSION COEFFICIENTS FOR EACH LEVEL
C        ------------------------------------------------------------
C
C        REAL PART
C
c        CALL SGERX1((JCAP+2-L)/2,LEVS,1.,QLN(LS+1),4,
c    &               FP(1,L,1),(LEN0P+1)*2,FLN(LS+1,1),4,2*LNT+1)

         do n = l, jcap, 2
            do k = 1, levs
c              real part
               fln(offset(n,l)+1,k) = fln(offset(n,l)+1,k)
     1                                + fp(1,l,k)*qln(offset(n,l)+1)
c              imaginary part
               fln(offset(n,l)+2,k) = fln(offset(n,l)+2,k)
     1                                + fp(2,l,k)*qln(offset(n,l)+2)
            enddo
         enddo

C
C        IMAGINARY PART
C
c        CALL SGERX1((JCAP+2-L)/2,LEVS,1.,QLN(LS+2),4,
c    &               FP(2,L,1),(LEN0P+1)*2,FLN(LS+2,1),4,2*LNT+1)
C
C        COMPUTE THE ODD (N-L) EXPANSION COEFFICIENTS FOR EACH LEVEL
C        -----------------------------------------------------------
c        IF(L.LT.JCAP) THEN
C
C        REAL PART
C
c        CALL SGERX1((JCAP+1-L)/2,LEVS,1.,QLN(LS+3),4,
c    &               FM(1,L,1),(LEN0M+1)*2,FLN(LS+3,1),4,2*LNT+1)
         do n = l+1, jcap, 2
            do k = 1, levs
c              real part
               fln(offset(n,l)+1,k) = fln(offset(n,l)+1,k)
     1                                + fm(1,l,k)*qln(offset(n,l)+1)
c              imaginary part
               fln(offset(n,l)+2,k) = fln(offset(n,l)+2,k)
     1                                + fm(2,l,k)*qln(offset(n,l)+2)
            enddo
         enddo
C
C        IMAGINARY PART
C
c        CALL SGERX1((JCAP+1-L)/2,LEVS,1.,QLN(LS+4),4,
c    &               FM(2,L,1),(LEN0M+1)*2,FLN(LS+4,1),4,2*LNT+1)
C
c        ENDIF
      END DO
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE FTI 192  (A, B, LOT, ISIGN)
      PARAMETER (LOTMIN=64,LOTMAX=64,NCPU=1)
      DIMENSION A( 386 ,LOT)
      DIMENSION B( 386 ,LOT)
C
      DIMENSION WORK( 192 ,LOTMAX,2), AL( 195 ,LOTMAX)
      COMMON /COM 192 /ITEST,JUMP,IFAX(20),TRIGS( 192 ,2)
C
CCC   CMIC$ GUARD 21
CCC         PART BETWEEN GUARDS MADE INTO SR GFT 192 .
CCC         4 DEC 1990      M. ROZWODOSKI
CCC   CMIC$ END GUARD 21
C
C
      IF (ISIGN .EQ.  1)  THEN
C
C  MULTIPLE FAST FOURIER TRANSFORM - SYNTHESIS.  ISIGN=1
C  GOOD FOR ZONAL WAVE NUMBER  62 .
C
C     DIMENSION A( 192 ,LOT)
C
C   INPUT - LOT SETS OF COMPLEX COEFFICIENTS IN
C           A(1,J), A(2,J), ..., A( 63 *2,J), J=1,...,LOT.
C           A( 63 *2+1,J), ..., A( 192 ,J), J=1,...,LOT ARE NOT SET
C           BEFORE CALL FFT 192 .
C
C  OUTPUT - LOT SETS OF GRID VALUES IN
C           A(1,J), A(2,J), ..., A( 192 ,J), J=1,...,LOT.
C
      NLOT=MAX0(LOT/NCPU,LOTMIN)
      NLOT=MIN0(NLOT    ,LOTMAX)
CRAYCMIC$ DO ALL PRIVATE(AL,WORK,LOTS) SHARED(A,TRIGS,IFAX,JUMP) AUTOSCO
      DO 460 I=1,LOT,NLOT
      LOTS = MIN0(NLOT, LOT-I+1)
      DO 360 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 192
      DO 320 L=1, 126
             AL(L,J-I+1) = A(L+LOFF,K)
320   CONTINUE
      DO 340 L= 127 , 194
             AL(L,J-I+1) = 0.0
340   CONTINUE
360   CONTINUE
C
C     CALL CRAY FFT FOR SYSTHESIS.
C     CALL FFT777 (AL,WORK,TRIGS,IFAX,1,JUMP, 192 ,LOTS,1)
      CALL RFFTMLT(AL,WORK,TRIGS,IFAX,1,JUMP, 192 ,LOTS,1)
C
      DO 440 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 192
      DO 420 L=1, 192
             A(L+LOFF,K) = AL(L,J-I+1)
420   CONTINUE
440   CONTINUE
460   CONTINUE
C
      ENDIF
C
C
      IF (ISIGN .EQ. -1)  THEN
C
C  MULTIPLE FAST FOURIER TRANSFORM - ANALYSIS.  ISIGN=-1
C  GOOD FOR ZONAL WAVE NUMBER  62 .
C
C     DIMENSION A( 192 ,LOT), B( 192 ,LOT)
C
C   INPUT - LOT SETS OF GRID VALUES IN
C           A(1,J), A(2,J), ..., A( 192 ,J), J=1,...,LOT.
C           A ARRAY IS NOT CHANGED BY SR FFT 192 .
C
C  OUTPUT - LOT SETS OF COMPLEX COEFFICIENTS IN
C           B(1,J), B(2,J), ..., B( 63 *2,J), J=1,...,LOT.
C           B( 63 *2+1,J), ..., B( 192 ,J), J=1,...,LOT ARE NOT SET.
C
      NLOT=MAX0(LOT/NCPU,LOTMIN)
      NLOT=MIN0(NLOT    ,LOTMAX)
CRAYCMIC$ DO ALL PRIVATE(AL,WORK,LOTS) SHARED(A,B,TRIGS,IFAX,JUMP) AUTOS
      DO 660 I=1,LOT,NLOT
      LOTS = MIN0(NLOT, LOT-I+1)
      DO 560 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 192
      DO 520 L=1, 192
             AL(L,J-I+1) = A(L+LOFF,K)
520   CONTINUE
560   CONTINUE
C
C     CALL CRAY FFT FOR ANALYSIS.
C     CALL FFT777 (AL,WORK,TRIGS,IFAX,1,JUMP, 192 ,LOTS,-1)
      CALL RFFTMLT(AL,WORK,TRIGS,IFAX,1,JUMP, 192 ,LOTS,-1)
C
      DO 640 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 192
      DO 620 L=1, 126
             B(L+LOFF,K) = AL(L,J-I+1)
620   CONTINUE
640   CONTINUE
660   CONTINUE
C
      ENDIF
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GFT 192
C
      COMMON /COM 192 /ITEST,JUMP,IFAX(20),TRIGS( 192 ,2)
C
CCC    DATA ITEST/0/
CCC    CMIC$ GUARD 21
CCC     IF (ITEST.EQ.0)  THEN
            ITEST=1
            JUMP = 192 +3
C           CALL SET777 (TRIGS, IFAX,  192 )
            CALL FFTFAX ( 192 ,IFAX,TRIGS)
            IF (IFAX(1) .EQ. -99)  PRINT 120
            IF (IFAX(1) .EQ. -99)  STOP
120         FORMAT (' ERROR IN GFT 192 .   192  NOT FACTORABLE. ')
            PRINT 140, JUMP
140         FORMAT (' FFTFAX CALLED IN GFT 192 .  LONF =  192  ',
     X                                          ' JUMP =', I5 )
CCC   ENDIF
CCC   CMIC$ END GUARD 21
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE FTI 128  (A, B, LOT, ISIGN)
      PARAMETER (LOTMIN=64,LOTMAX=64,NCPU=1)
      DIMENSION A( 258 ,LOT)
      DIMENSION B( 258 ,LOT)
C
      DIMENSION WORK( 128 ,LOTMAX,2), AL( 131 ,LOTMAX)
      COMMON /COM 128 /ITEST,JUMP,IFAX(20),TRIGS( 128 ,2)
C
CCC         PART BETWEEN GUARDS MADE INTO SR GFT 128 .
CCC         4 DEC 1990      M. ROZWODOSKI
C
C
      IF (ISIGN .EQ.  1)  THEN
C
C  MULTIPLE FAST FOURIER TRANSFORM - SYNTHESIS.  ISIGN=1
C  GOOD FOR ZONAL WAVE NUMBER  62 .
C
C     DIMENSION A( 128 ,LOT)
C
C   INPUT - LOT SETS OF COMPLEX COEFFICIENTS IN
C           A(1,J), A(2,J), ..., A( 63 *2,J), J=1,...,LOT.
C           A( 63 *2+1,J), ..., A( 128 ,J), J=1,...,LOT ARE NOT SET
C           BEFORE CALL FFT 128 .
C
C  OUTPUT - LOT SETS OF GRID VALUES IN
C           A(1,J), A(2,J), ..., A( 128 ,J), J=1,...,LOT.
C
      NLOT=MAX0(LOT/NCPU,LOTMIN)
      NLOT=MIN0(NLOT    ,LOTMAX)
      DO 460 I=1,LOT,NLOT
      LOTS = MIN0(NLOT, LOT-I+1)
      DO 360 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 128
      DO 320 L=1, 126
             AL(L,J-I+1) = A(L+LOFF,K)
320   CONTINUE
      DO 340 L= 127 , 130
             AL(L,J-I+1) = 0.0
340   CONTINUE
360   CONTINUE
C
C     CALL CRAY FFT FOR SYSTHESIS.
C     CALL FFT777 (AL,WORK,TRIGS,IFAX,1,JUMP, 128 ,LOTS,1)
      CALL RFFTMLT(AL,WORK,TRIGS,IFAX,1,JUMP, 128 ,LOTS,1)
C
      DO 440 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 128
      DO 420 L=1, 128
             A(L+LOFF,K) = AL(L,J-I+1)
420   CONTINUE
440   CONTINUE
460   CONTINUE
C
      ENDIF
C
C
      IF (ISIGN .EQ. -1)  THEN
C
C  MULTIPLE FAST FOURIER TRANSFORM - ANALYSIS.  ISIGN=-1
C  GOOD FOR ZONAL WAVE NUMBER  62 .
C
C     DIMENSION A( 128 ,LOT), B( 128 ,LOT)
C
C   INPUT - LOT SETS OF GRID VALUES IN
C           A(1,J), A(2,J), ..., A( 128 ,J), J=1,...,LOT.
C           A ARRAY IS NOT CHANGED BY SR FFT 128 .
C
C  OUTPUT - LOT SETS OF COMPLEX COEFFICIENTS IN
C           B(1,J), B(2,J), ..., B( 63 *2,J), J=1,...,LOT.
C           B( 63 *2+1,J), ..., B( 128 ,J), J=1,...,LOT ARE NOT SET.
C
      NLOT=MAX0(LOT/NCPU,LOTMIN)
      NLOT=MIN0(NLOT    ,LOTMAX)
      DO 660 I=1,LOT,NLOT
      LOTS = MIN0(NLOT, LOT-I+1)
      DO 560 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 128
      DO 520 L=1, 128
             AL(L,J-I+1) = A(L+LOFF,K)
520   CONTINUE
560   CONTINUE
C
C     CALL CRAY FFT FOR ANALYSIS.
C     CALL FFT777 (AL,WORK,TRIGS,IFAX,1,JUMP, 128 ,LOTS,-1)
      CALL RFFTMLT(AL,WORK,TRIGS,IFAX,1,JUMP, 128 ,LOTS,-1)
C
      DO 640 J=I,I+LOTS-1
      K=(J+1)/2
      LOFF=MOD(J+1,2)* 128
      DO 620 L=1, 126
             B(L+LOFF,K) = AL(L,J-I+1)
620   CONTINUE
640   CONTINUE
660   CONTINUE
C
      ENDIF
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GFT 128
C
      COMMON /COM 128 /ITEST,JUMP,IFAX(20),TRIGS( 128 ,2)
C
CCC    DATA ITEST/0/
CCC     IF (ITEST.EQ.0)  THEN
            ITEST=1
            JUMP = 128 +3
C           CALL SET777 (TRIGS, IFAX,  128 )
            CALL FFTFAX ( 128 ,IFAX,TRIGS)
            IF (IFAX(1) .EQ. -99)  PRINT 120
            IF (IFAX(1) .EQ. -99)  STOP
120         FORMAT (' ERROR IN GFT 128 .   128  NOT FACTORABLE. ')
            PRINT 140, JUMP
140         FORMAT (' FFTFAX CALLED IN GFT 128 .  LONF =  128  ',
     X                                          ' JUMP =', I5 )
CCC   ENDIF
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GOZRIM(QLNT,QLNV,QDERT,EPSI,LAT,RCS2,WGTL)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GOZRMT      COMPUTES DERIVATIVES OF LEGENDRES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-11-02
C
C ABSTRACT: COMPUTES DERIVATIVES OF ASSOCIATED LEGENDRE FUNCTIONS
C   AND FOR CONVENIENCE, OTHER REQUIRED PRODUCTS OF
C   LEGENDRES AND FACTORS INVOLVING WAVE NUMBER AND LATITUDE.
C   THE RESULTING ARRAYS ARE REQUIRED FOR THE APPLICATION
C   OF DIVERGENCE AND CURL OPERATORS IN MSU22 AND PSU22.
C
C PROGRAM HISTORY LOG:
C   88-11-02  JOSEPH SELA
C
C USAGE:    CALL GOZRMT (QLNT,QLNV,QDERT,EPS,LAT,QLNWCT,RCS2,WGTL)
C   INPUT ARGUMENT LIST:
C     QLNT     - DOUBLED SCALAR TRIANGULAR
C                ARRAY OF ASSOCIATED LEGENDRE FUNCTIONS AT
C                A GIVEN LATITUDE.
C                ON INPUT, VALUES OF QLNT ARE A SUBSET OF QLNV.
C     QLNV     - DOUBLED VECTOR TRIANGULAR
C                ARRAY OF ASSOCIATED LEGENDRE FUNCTIONS AT
C                A GIVEN LATITUDE.
C     EPS      - ARRAY OF FUNCTION OF WAVE NUMBER COMPUTED IN EPSLON.
C                EPS IS USED ONLY DURING FIRST CALL TO GOZRMT.
C     LAT      - LATITUDE INDEX.
C     RCS2     - ARRAY OF CONSTANTS COMPUTED IN GLATS (1/SIN(LAT)**2).
C     WGTL     - WEIGHT AT GAUSSIAN LATITUDE.
C                MULTIPLIER OF OUTPUT ARRAYS QLNT, QDERT, QLNWCT.
C
C   OUTPUT ARGUMENT LIST:
C     QLNT     - DOUBLED SCALAR TRIANGULAR
C                ARRAY OF QLNT*N*(N+1)*1/A**2   TIMES WGTL.
C     QDERT    - DOUBLED SCALAR TRIANGULAR
C                ARRAY OF LEGENDRE DERIVATIVES  TIMES WGTL.
C     QLNWCT   - DOUBLED SCALAR TRIANGULAR
C                ARRAY OF QLNT*L*RCS2(LAT)/A    TIMES WGTL.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CRAY       SAVE
CC
      DIMENSION          QLNT( 4032 )
      DIMENSION          QLNV( 4158 )
      DIMENSION         QDERT( 4032 )
      DIMENSION          EPSI( 64 , 63 )
      DIMENSION          RCS2( 47 )
CC
      COMMON /GOZCOM/ DXA( 4032 ),DXB( 4032 )
CC
CCC         PART BETWEEN GUARDS MADE INTO SR GGOZRI.
CCC         7 DEC 1990      M. ROZWODOSKI
CC
CC    COMPUTE PLN DERIVATIVES IN IBM ORDER.
      WCSA=RCS2(LAT)*WGTL/ 6.3712E+6
CC
      LP0 = 0
      LP1 = 2
      LEN =  126
      DO 640  I=1, 63
      DO 620 LL=1,LEN
             QDERT(LL+LP0) = QLNV(LL+LP1) * DXB(LL+LP0)
  620 CONTINUE
      LP1 = LP1 + LEN + 2
      LP0 = LP0 + LEN
      LEN = LEN - 2
  640 CONTINUE
CC
                  LEND =  4032  - 4
      DO 720 LL=1,LEND
             QDERT(LL+2) = QDERT(LL+2) + QLNT(LL) * DXA(LL+2)
  720 CONTINUE
CC
      DO 760 LL=1, 4032
             QDERT(LL) = QDERT(LL) * WCSA
  760 CONTINUE
CC
CC
CC
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GGOZRM(EPSI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GGOZRM      SETS COMMON FOR SUBROUTINE GOZRMT.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 91-03-14
C
C ABSTRACT: INITIALIZES THE CONSTANT VARIABLES AND ARRAYS
C   OF A COMMON FOR SUBROUTINE GOZRMT.
C
C PROGRAM HISTORY LOG:
C   91-03-14  JOSEPH SELA
C
C USAGE:    CALL GGOZRM ( EPS )
C
C REMARKS: CALL SUBROUTINE ONCE BEFORE CALLS TO GOZRMT.
C          REFER TO GOZRMT FOR ADDITIONAL DOCUMENTATION.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN, CFT77.
C   MACHINE:  CRAY Y-MP.
C
C$$$
CC
      DIMENSION          EPSI( 64 , 63 )
CC
      DIMENSION         DXINT( 4032 )
      DIMENSION            DX( 126 , 64 )
      DIMENSION          DEPS( 126 , 64 )
CC
      COMMON /GOZCOM/ DXA( 4032 ),DXB( 4032 )
CC
      DO 200 LL=1, 126
             DXINT(2*LL-1) = LL
             DXINT(2*LL  ) = LL
  200 CONTINUE
      LP = 0
      DO 240  I=1, 64
      DO 220 LL=1, 126
             DX(LL,I) = DXINT(LL+LP)
  220 CONTINUE
      LP = LP + 2
  240 CONTINUE
      DO 280  I=1, 64
      DO 260 LL=1, 63
             DEPS(2*LL-1,I) = EPSI(I,LL)
             DEPS(2*LL  ,I) = EPSI(I,LL)
  260 CONTINUE
  280 CONTINUE
      DO 300 LL=1, 126
             DXA(LL) = 0.0
  300 CONTINUE
      LP1 =  126
      LEN =  126  - 2
      DO 340  I=1, 62
      DO 320 LL=1,LEN
             DXA(LL+LP1) =  DX(LL,I+1) * DEPS(LL,I+1)
             DXB(LL+LP1) = -DX(LL,I  ) * DEPS(LL,I+2)
  320 CONTINUE
      LP1 = LP1 + LEN
      LEN = LEN - 2
  340 CONTINUE
      DO 380  I=1, 64
      DO 360 LL=1, 126
             DX(LL,I) = DX(LL,I) - 1. E 0
  360 CONTINUE
  380 CONTINUE
      DO 400 LL=1, 126
             DXB(LL) = -DX(LL,1) * DEPS(LL,2)
  400 CONTINUE
CC
CC    TRANSPOSE SCALAR ARRAYS DXA, DXB, DXC, DXD
CC    FROM CRAY ORDER TO IBM ORDER.
      CALL TRANSO (DXA, 2)
CC
      RETURN
      END
      SUBROUTINE FPLFPD(RCS2,RL,
     X FPL,FML,FPD,FMD,
     X APN,APS,BPN,BPS,CPN,CPS,AQN,AQS,BQN,BQS,CQN,CQS,ANL)
C     CALL FPLFPD(RCS2(LAT),RL,
C    X FPL(1,1,1,LAN),FML(1,1,1,LAN),FPD(1,1,1,LAN),FMD(1,1,1,LAN),
C    X          APN(1,1,LAN),APS(1,1,LAN),
C    X          BPN(1,1,LAN),BPS(1,1,LAN),
C    X          CPN(1,1,LAN),CPS(1,1,LAN),
C    X          AQN(1,1,LAN),AQS(1,1,LAN),
C    X          BQN(1,1,LAN),BQS(1,1,LAN),
C    X          CQN(1,1,LAN),CQS(1,1,LAN),
C    X          ANL(1,1,LAN))
C
      DIMENSION SPLITR( 63 , 28 ),SPLITI( 63 , 28 )
      DIMENSION ALF( 192 , 28 ),BLF( 192 , 28 )
      DIMENSION RL( 63 )
C
C.................................................................
       DIMENSION
     X FPL(2, 63 , 141 ),FML(2, 63 , 141 ),
     X FPD(2, 63 , 112 ),FMD(2, 63 , 112 ),
     1          APN( 126 , 28 ),APS( 126 , 28 ),
     2          BPN( 126 , 28 ),BPS( 126 , 28 ),
     2          CPN( 126 , 28 ),CPS( 126 , 28 ),
     3          AQN( 126 , 28 ),AQS( 126 , 28 ),
     4          BQN( 126 , 28 ),BQS( 126 , 28 ),
     5          CQN( 126 , 28 ),CQS( 126 , 28 ),
     6 ANL( 386 , 253 )
C
      DO 310 LL=1, 63
      FPL(1,LL,1)=ANL(2*(LL-1)+1,9* 28 +1)+
     1            ANL(2*(LL-1)+1+ 192 ,9* 28 +1)
      FPL(2,LL,1)=ANL(2*(LL-1)+2,9* 28 +1)+
     1            ANL(2*(LL-1)+2+ 192 ,9* 28 +1)
C
      FML(1,LL,1)=ANL(2*(LL-1)+1,9* 28 +1)-
     1            ANL(2*(LL-1)+1+ 192 ,9* 28 +1)
      FML(2,LL,1)=ANL(2*(LL-1)+2,9* 28 +1)-
     1            ANL(2*(LL-1)+2+ 192 ,9* 28 +1)
310   CONTINUE
C..........................................................
C
C     COMPUTE NON LIN CONTRIB. TO Y FROM TAU AND I*L*DIV(VT)
C
CCC   CALL SYMI(ANL(1,4* 28 +1),ALF, 28 , 386 , 192 )
CC
      DO 413 K=1, 28
      DO 411 I=1, 126
      ALF(I,K) = ANL(I,4* 28 +K) - ANL(I+ 192 ,4* 28 +K)
  411 CONTINUE
      DO 412 I=1, 126
      ANL(I,4* 28 +K) = ANL(I,4* 28 +K) + ANL(I+ 192 ,4* 28 +K)
  412 CONTINUE
  413 CONTINUE
CC
CCC   CALL SYMI(ANL(1,6* 28 +1),BLF, 28 , 386 , 192 )
CC
      DO 453 K=1, 28
      DO 451 I=1, 126
      BLF(I,K) = ANL(I,6* 28 +K) - ANL(I+ 192 ,6* 28 +K)
  451 CONTINUE
      DO 452 I=1, 126
      ANL(I,6* 28 +K) = ANL(I,6* 28 +K) + ANL(I+ 192 ,6* 28 +K)
  452 CONTINUE
  453 CONTINUE
CC
      DO 510 K=1, 28
      DO 500 LL=1, 63
      SPLITR(LL,K)= ANL(2*(LL-1)+2,6* 28 +K)*
     1  RL(LL)*RCS2
      SPLITI(LL,K)=-ANL(2*(LL-1)+1,6* 28 +K)*
     1  RL(LL)*RCS2
500   CONTINUE
510   CONTINUE
C
      DO 530  K=1, 28
      DO 520 LL=1, 63
        FPL(1,LL,K+1)=
     1  ANL(2*(LL-1)+1,4* 28 +K)+SPLITR(LL,K)
C
        FPL(2,LL,K+1)=
     1  ANL(2*(LL-1)+2,4* 28 +K)+SPLITI(LL,K)
520   CONTINUE
530   CONTINUE
C
      DO 550  K=1, 28
      DO 540 LL=1, 63
      SPLITR(LL,K)= BLF(2*(LL-1)+2,K)*RL(LL)*RCS2
      SPLITI(LL,K)=-BLF(2*(LL-1)+1,K)*RL(LL)*RCS2
540   CONTINUE
550   CONTINUE
C
      DO 570  K=1, 28
      DO 560 LL=1, 63
      FML(1,LL,K+1)=ALF(2*(LL-1)+1,K)+SPLITR(LL,K)
      FML(2,LL,K+1)=ALF(2*(LL-1)+2,K)+SPLITI(LL,K)
560   CONTINUE
570   CONTINUE
C
C..........................................................
C
C     COMPUTE  CONTRIB. TO RT
C
      DO 610 K=1, 28
      DO 600 LL=1, 63
      SPLITR(LL,K)= AQN(2*(LL-1)+2,K)*
     1  RL(LL)*RCS2
      SPLITI(LL,K)=-AQN(2*(LL-1)+1,K)*
     1  RL(LL)*RCS2
600   CONTINUE
610   CONTINUE
C
      DO 630  K=1, 28
      DO 620 LL=1, 63
        FPL(1,LL, 28 +K+1)=
     1  CQN(2*(LL-1)+1,K)+SPLITR(LL,K)
        FPL(2,LL, 28 +K+1)=
     1  CQN(2*(LL-1)+2,K)+SPLITI(LL,K)
620   CONTINUE
630   CONTINUE
C
      DO 650  K=1, 28
      DO 640 LL=1, 63
      SPLITR(LL,K)= AQS(2*(LL-1)+2,K)*RL(LL)*RCS2
      SPLITI(LL,K)=-AQS(2*(LL-1)+1,K)*RL(LL)*RCS2
640   CONTINUE
650   CONTINUE
C
      DO 670  K=1, 28
      DO 660 LL=1, 63
      FML(1,LL, 28 +K+1)=CQS(2*(LL-1)+1,K)+SPLITR(LL,K)
      FML(2,LL, 28 +K+1)=CQS(2*(LL-1)+2,K)+SPLITI(LL,K)
660   CONTINUE
670   CONTINUE
C..........................................................
C FIN CONTRIB. TO RT
C
C..........................................................
C
C     COMPUTE  CONTRIB. TO W
C
      DO 710 K=1, 28
      DO 700 LL=1, 63
      SPLITR(LL,K)= APN(2*(LL-1)+2,K)*
     1  RL(LL)*RCS2
      SPLITI(LL,K)=-APN(2*(LL-1)+1,K)*
     1  RL(LL)*RCS2
700   CONTINUE
710   CONTINUE
C
      DO 730  K=1, 28
      DO 726 LL=1, 63
        FPL(1,LL,2* 28 +K+1)=
     1  CPN(2*(LL-1)+1,K)+SPLITR(LL,K)
        FPL(2,LL,2* 28 +K+1)=
     1  CPN(2*(LL-1)+2,K)+SPLITI(LL,K)
726   CONTINUE
730   CONTINUE
C
      DO 750  K=1, 28
      DO 740 LL=1, 63
      SPLITR(LL,K)= APS(2*(LL-1)+2,K)*RL(LL)*RCS2
      SPLITI(LL,K)=-APS(2*(LL-1)+1,K)*RL(LL)*RCS2
740   CONTINUE
750   CONTINUE
C
      DO 770  K=1, 28
      DO 760 LL=1, 63
      FML(1,LL,2* 28 +K+1)=CPS(2*(LL-1)+1,K)+SPLITR(LL,K)
      FML(2,LL,2* 28 +K+1)=CPS(2*(LL-1)+2,K)+SPLITI(LL,K)
760   CONTINUE
770   CONTINUE
C..........................................................
C FIN CONTRIB. TO W
C..........................................................
C.CONTRIB TO X
C
CCC   CALL SYMI(ANL(1,5* 28 +1),ALF, 28 , 386 , 192 )
CC
      DO 793 K=1, 28
      DO 791 I=1, 126
      ALF(I,K) = ANL(I,5* 28 +K) - ANL(I+ 192 ,5* 28 +K)
  791 CONTINUE
      DO 792 I=1, 126
      ANL(I,5* 28 +K) = ANL(I,5* 28 +K) + ANL(I+ 192 ,5* 28 +K)
  792 CONTINUE
  793 CONTINUE
CC
CCC   CALL SYMI(ANL(1,3* 28 +1),BLF, 28 , 386 , 192 )
CC
      DO 893 K=1, 28
      DO 891 I=1, 126
      BLF(I,K) = ANL(I,3* 28 +K) - ANL(I+ 192 ,3* 28 +K)
  891 CONTINUE
      DO 892 I=1, 126
      ANL(I,3* 28 +K) = ANL(I,3* 28 +K) + ANL(I+ 192 ,3* 28 +K)
  892 CONTINUE
  893 CONTINUE
CC
      DO 957 K=1, 28
      DO 956 LL=1, 63
      FPL(1,LL,3* 28 +K+1)=-ANL(2*(LL-1)+2,3* 28 +K)
     1 *RL(LL)*RCS2
C
      FPL(2,LL,3* 28 +K+1)= ANL(2*(LL-1)+1,3* 28 +K)
     1 *RL(LL)*RCS2
C
      FML(1,LL,3* 28 +K+1)=-BLF(2*(LL-1)+2,K)*RL(LL)*RCS2
      FML(2,LL,3* 28 +K+1)= BLF(2*(LL-1)+1,K)*RL(LL)*RCS2
C
956   CONTINUE
957   CONTINUE
C
      DO 959 K=1, 28
      DO 958 LL=1, 63
      FMD(1,LL,3* 28 +K)=ANL(2*(LL-1)+1,5* 28 +K)
      FMD(2,LL,3* 28 +K)=ANL(2*(LL-1)+2,5* 28 +K)
C
      FPD(1,LL,3* 28 +K)=ALF(2*(LL-1)+1,K)
      FPD(2,LL,3* 28 +K)=ALF(2*(LL-1)+2,K)
C
958   CONTINUE
959   CONTINUE
C
CCC   CALL SYMI(ANL(1,2* 28 +1),ALF, 28 , 386 , 192 )
CC
      DO 993 K=1, 28
      DO 991 I=1, 126
      ALF(I,K) = ANL(I,2* 28 +K) - ANL(I+ 192 ,2* 28 +K)
  991 CONTINUE
      DO 992 I=1, 126
      ANL(I,2* 28 +K) = ANL(I,2* 28 +K) + ANL(I+ 192 ,2* 28 +K)
  992 CONTINUE
  993 CONTINUE
CC
      DO 962 K=1, 28
      DO 961 LL=1, 63
      FPL(1,LL,4* 28 +K+1)=ANL(2*(LL-1)+1,2* 28 +K)
      FPL(2,LL,4* 28 +K+1)=ANL(2*(LL-1)+2,2* 28 +K)
C
      FML(1,LL,4* 28 +K+1)=ALF(2*(LL-1)+1,K)
      FML(2,LL,4* 28 +K+1)=ALF(2*(LL-1)+2,K)
C
961   CONTINUE
962   CONTINUE
C..........................................................
C..........................................................
C
      DO 810 K=1, 28
      DO 800 LL=1, 63
      FPD(1,LL,K)=ANL(2*(LL-1)+1,7* 28 +K)-
     1            ANL(2*(LL-1)+1+ 192 ,7* 28 +K)
C
      FMD(1,LL,K)=ANL(2*(LL-1)+1,7* 28 +K)+
     1            ANL(2*(LL-1)+1+ 192 ,7* 28 +K)
C
      FPD(2,LL,K)=ANL(2*(LL-1)+2,7* 28 +K)-
     1            ANL(2*(LL-1)+2+ 192 ,7* 28 +K)
C
      FMD(2,LL,K)=ANL(2*(LL-1)+2,7* 28 +K)+
     1            ANL(2*(LL-1)+2+ 192 ,7* 28 +K)
800   CONTINUE
810   CONTINUE
C
      DO 820 K=1, 28
      DO 815 LL=1, 63
      FPD(1,LL,K+ 28 )=BQS(2*(LL-1)+1,K)
      FPD(2,LL,K+ 28 )=BQS(2*(LL-1)+2,K)
C
      FMD(1,LL,K+ 28 )=BQN(2*(LL-1)+1,K)
      FMD(2,LL,K+ 28 )=BQN(2*(LL-1)+2,K)
815   CONTINUE
820   CONTINUE
C
C
      DO 920 K=1, 28
      DO 915 LL=1, 63
      FPD(1,LL,K+2* 28 )=BPS(2*(LL-1)+1,K)
      FPD(2,LL,K+2* 28 )=BPS(2*(LL-1)+2,K)
C
      FMD(1,LL,K+2* 28 )=BPN(2*(LL-1)+1,K)
      FMD(2,LL,K+2* 28 )=BPN(2*(LL-1)+2,K)
915   CONTINUE
920   CONTINUE
      RETURN
      END
      SUBROUTINE FPLFPB(RBS2,RL,
     X FPL,FML,FPD,FMD,ANL)
C     CALL FPLFPD(RBS2(LAT),RL,
C    X FPL(1,1,1,LAN),FML(1,1,1,LAN),FPD(1,1,1,LAN),FMD(1,1,1,LAN),
C    X          ANL(1,1,LAN))
C
      DIMENSION ALF( 192 , 28 ),BLF( 192 , 28 )
      DIMENSION RL( 63 )
C
C.................................................................
       DIMENSION
     X FPL(2, 63 , 112 ),FML(2, 63 , 112 ),
     X FPD(2, 63 , 56 ),FMD(2, 63 , 56 ),
     6 ANL( 386 , 224 )
C
C
C  TE
C
CCC   CALL SYMI(ANL(1,1        ),ALF, 28 , 386 , 192 )
CC
      DO 413 K=1, 28
      DO 411 I=1, 126
      ALF(I,K) = ANL(I,K) - ANL(I+ 192 ,K)
  411 CONTINUE
      DO 412 I=1, 126
      ANL(I,K) = ANL(I,K) + ANL(I+ 192 ,K)
  412 CONTINUE
  413 CONTINUE
CC
C
      DO 530  K=1, 28
      DO 520 LL=1, 63
        FPL(1,LL,2* 28 +K)=ANL(2*(LL-1)+1,K)
        FPL(2,LL,2* 28 +K)=ANL(2*(LL-1)+2,K)
520   CONTINUE
530   CONTINUE
C
C
      DO 570  K=1, 28
      DO 560 LL=1, 63
      FML(1,LL,2* 28 +K)=ALF(2*(LL-1)+1,K)
      FML(2,LL,2* 28 +K)=ALF(2*(LL-1)+2,K)
560   CONTINUE
570   CONTINUE
C
C  RQ
C
CCC   CALL SYMI(ANL(1, 28 +1  ),ALF, 28 , 386 , 192 )
CC
      DO 573 K=1, 28
      DO 571 I=1, 126
      ALF(I,K) = ANL(I, 28 +K) - ANL(I+ 192 , 28 +K)
  571 CONTINUE
      DO 572 I=1, 126
      ANL(I, 28 +K) = ANL(I, 28 +K) + ANL(I+ 192 , 28 +K)
  572 CONTINUE
  573 CONTINUE
CC
C
      DO 590  K=1, 28
      DO 580 LL=1, 63
        FPL(1,LL,3* 28 +K)=ANL(2*(LL-1)+1, 28 +K)
        FPL(2,LL,3* 28 +K)=ANL(2*(LL-1)+2, 28 +K)
580   CONTINUE
590   CONTINUE
C
C
      DO 610  K=1, 28
      DO 600 LL=1, 63
      FML(1,LL,3* 28 +K)=ALF(2*(LL-1)+1,K)
      FML(2,LL,3* 28 +K)=ALF(2*(LL-1)+2,K)
600   CONTINUE
610   CONTINUE
C
C
C ZE
C
CCC   CALL SYMI(ANL(1,2* 28 +1),ALF, 28 , 386 , 192 )
CC
      DO 633 K=1, 28
      DO 631 I=1, 126
      ALF(I,K) = ANL(I,2* 28 +K) - ANL(I+ 192 ,2* 28 +K)
  631 CONTINUE
      DO 632 I=1, 126
      ANL(I,2* 28 +K) = ANL(I,2* 28 +K) + ANL(I+ 192 ,2* 28 +K)
  632 CONTINUE
  633 CONTINUE
CC
CCC   CALL SYMI(ANL(1,3* 28 +1),BLF, 28 , 386 , 192 )
CC
      DO 653 K=1, 28
      DO 651 I=1, 126
      BLF(I,K) = ANL(I,3* 28 +K) - ANL(I+ 192 ,3* 28 +K)
  651 CONTINUE
      DO 652 I=1, 126
      ANL(I,3* 28 +K) = ANL(I,3* 28 +K) + ANL(I+ 192 ,3* 28 +K)
  652 CONTINUE
  653 CONTINUE
CC
      DO 670  K=1, 28
      DO 660 LL=1, 63
      FPL(1,LL,K)=-ANL(2*(LL-1)+2,3* 28 +K)*RL(LL)*RBS2
      FPL(2,LL,K)= ANL(2*(LL-1)+1,3* 28 +K)*RL(LL)*RBS2
660   CONTINUE
670   CONTINUE
C
      DO 730  K=1, 28
      DO 726 LL=1, 63
      FML(1,LL,K)=-BLF(2*(LL-1)+2,K)*RL(LL)*RBS2
      FML(2,LL,K)= BLF(2*(LL-1)+1,K)*RL(LL)*RBS2
726   CONTINUE
730   CONTINUE
C
C
C
      DO 770  K=1, 28
      DO 760 LL=1, 63
      FPD(1,LL,K)=ALF(2*(LL-1)+1,K)
      FPD(2,LL,K)=ALF(2*(LL-1)+2,K)
760   CONTINUE
770   CONTINUE
C
      DO 957 K=1, 28
      DO 956 LL=1, 63
      FMD(1,LL,K)=ANL(2*(LL-1)+1,2* 28 +K)
      FMD(2,LL,K)=ANL(2*(LL-1)+2,2* 28 +K)
956   CONTINUE
957   CONTINUE
C
C DI
C
      DO 959 K=1, 28
      DO 958 LL=1, 63
      FPL(1,LL, 28 +K)= ANL(2*(LL-1)+2,2* 28 +K)*RL(LL)*RBS2
      FPL(2,LL, 28 +K)=-ANL(2*(LL-1)+1,2* 28 +K)*RL(LL)*RBS2
958   CONTINUE
959   CONTINUE
C
C
      DO 962 K=1, 28
      DO 961 LL=1, 63
      FML(1,LL, 28 +K)= ALF(2*(LL-1)+2,K)*RL(LL)*RBS2
      FML(2,LL, 28 +K)=-ALF(2*(LL-1)+1,K)*RL(LL)*RBS2
961   CONTINUE
962   CONTINUE
C
      DO 810 K=1, 28
      DO 800 LL=1, 63
      FPD(1,LL, 28 +K)=BLF(2*(LL-1)+1,K)
      FPD(2,LL, 28 +K)=BLF(2*(LL-1)+2,K)
800   CONTINUE
810   CONTINUE
C
      DO 820 K=1, 28
      DO 815 LL=1, 63
      FMD(1,LL, 28 +K)=ANL(2*(LL-1)+1,3* 28 +K)
      FMD(2,LL, 28 +K)=ANL(2*(LL-1)+2,3* 28 +K)
815   CONTINUE
820   CONTINUE
      RETURN
      END
      SUBROUTINE DAMPUX(DIV,VOR,TEM,RMX,DELTIM,FDAMP,ARN,SPDMAX)
      DIMENSION FDAMP( 4032 ),ARN( 4032 ),SPDMAX( 28 ),
     1 RMX( 4033 , 28 ),
     3 VOR( 4033 , 28 ), DIV( 4033 , 28 ),TEM( 4033 , 28 )
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C.................................................................
      DO 410 J=1, 4032
      ARN(J)=SNNP1(J)+0.25 E 0
      ARN(J)= SQRT(ARN(J))
      ARN(J)=ARN(J)-0.5 E 0
  410 CONTINUE
      ALFA=2.5 E 0
      BETA= 6.3712E+6 *1.009 E 0/DELTIM
      ALFADT=ALFA*DELTIM/ 6.3712E+6
C.................................................
      DO 80 K=1, 28
      RNCRIT=BETA/SPDMAX(K)
      COEF=ALFADT*SPDMAX(K)
      DO 420 J=1, 4032
      IF (ARN(J).GT.RNCRIT) THEN
      DIV(J,K) =DIV(J,K)/(1.+(ARN(J)-RNCRIT)*COEF)
      VOR(J,K) =VOR(J,K)/(1.+(ARN(J)-RNCRIT)*COEF)
      TEM(J,K) =TEM(J,K)/(1.+(ARN(J)-RNCRIT)*COEF)
      RMX(J,K) =RMX(J,K)/(1.+(ARN(J)-RNCRIT)*COEF)
      END IF
  420 CONTINUE
   80 CONTINUE
      RETURN
      END
      SUBROUTINE DELDIF(RT,W,DELTIM,QM,SL,X,Y)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    DELDIF      HORIZONTAL DIFFUSION.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: HORIZONTAL DIFFUSION OF TEMPERATURE, MOISTURE,
C           VORTICITY AND DIVERGENCE. THE IMPLICIT LINEAR EQUATION
C           IS SOLVED USING THE LAPSE RATES OF GLOBALLY AVERAGED
C           TEMPERATURE AND MOISTURE TO TRANSFORM THE LAPLACIAN
C           FROM CONSTANT PRESSURE TO CONSTANT SIGMA SURFACES.
C           FOR THE T126 OPERATIONAL MODEL, DELDIF INVOKES
C           SECOND ORDER LEITH DIFFUSION ONLY ABOVE WAVENUMBER 69
C           WITH A TIME SCALE OF 13080 SECONDS AT WAVENUMBER 126.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL DELDIF (RT,W,DELTIM,QM,SL,X,Y)
C   INPUT ARGUMENT LIST:
C     RT       - SPECIFIC HUMIDITY
C     W        - VORTICITY
C     DELTIM   - TIMESTEP
C     QM       - LN(PSFC)
C     SL       - SIGMA LAYER VALUES
C     X        - DIVERGENCE
C     Y        - TEMPERATURE
C
C   OUTPUT ARGUMENT LIST:
C     RT       - SPECIFIC HUMIDITY
C     W        - VORTICITY
C     X        - DIVERGENCE
C     Y        - TEMPERATURE
C
C REMARKS: LOCAL VARIABLES THAT CAN BE MODIFIED TO CHANGE DIFFUSION ARE:
C          RTNP- RECIPROCAL OF TIME SCALE OF DIFFUSION AT WAVENUMBER NP
C          NP  - WAVENUMBER AT WHICH RTNP DIFFUSION IS APPLIED
C          N0  - MAXIMUM WAVENUMBER FOR ZERO DIFFUSION
C          JDEL- ORDER OF DIFFUSION
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$

      DIMENSION SL( 28 ),QM( 4033 )
      DIMENSION W( 4033 , 28 ),X( 4033 , 28 ),
     &          Y( 4033 , 28 ),RT( 4033 , 28 )
      DIMENSION DN( 4032 ),SF( 28 )
      DATA IFIRST/0/
      SAVE IFIRST,DN,SF

      IF(IFIRST.EQ.0) THEN
        IFIRST=1
C  RECIPROCAL OF TIME SCALE OF DIFFUSION AT REFERENCE WAVENUMBER NP
        RTNP=3.E15/( 6.3712E+6 **4)*FLOAT(80*81)**2
C       NP=80
        NP= 62
C  MAXIMUM WAVENUMBER FOR ZERO DIFFUSION
C       N0=0
        N0=0.55* 62
C  ORDER OF DIFFUSION (EVEN POWER TO RAISE DEL)
C       JDEL=4
        JDEL=2
C
        PRINT 6,RTNP,NP,N0,JDEL
6       FORMAT(' HORIZONTAL DIFFUSION PARAMETERS'/
     &  '   EFFECTIVE ',6PF10.3,' MICROHERTZ AT WAVENUMBER ',I4/
     &  '   MAXIMUM WAVENUMBER FOR ZERO DIFFUSION ',I4/
     &  '   ORDER OF DIFFUSION ',I2)
C
        JDELH=JDEL/2
        NPD=MAX(NP-N0,0)
        DN1=2.*RTNP/FLOAT(NPD*(NPD+1))**JDELH
        I=0
        DO 10 NM=0, 62
        DO 10 M=0, 62 -NM
          ND=MAX(NM+M-N0,0)
          DN(I+1)=DN1*FLOAT(ND*(ND+1))**JDELH
          DN(I+2)=DN(I+1)
          I=I+2
10      CONTINUE
        DO 20 K=1, 28
          KD=MAX(K-1,1)
          KU=MIN(K+1, 28 )
          SF(K)=SL(K)/(SL(KU)-SL(KD))/SQRT(2.)
20      CONTINUE
      ENDIF

CFPP$ NODEPCHK
      DO 70 K=1, 28
        KD=MAX(K-1,1)
        KU=MIN(K+1, 28 )
        YSK=(Y(1,KU)-Y(1,KD))*SF(K)
        RTSK=(RT(1,KU)-RT(1,KD))*SF(K)
        DO 60 I=3, 4032
          W(I,K)= W(I,K)/(1.+DELTIM*DN(I))
          X(I,K)= X(I,K)/(1.+DELTIM*DN(I))
          Y(I,K)=(Y(I,K)+DELTIM*DN(I)*YSK*QM(I))/(1.+DELTIM*DN(I))
          RT(I,K)=(RT(I,K)+DELTIM*DN(I)*RTSK*QM(I))/(1.+DELTIM*DN(I))
60      CONTINUE
70    CONTINUE

      RETURN
      END
      SUBROUTINE SICDIF(D,T,Q,X,Y,Z,AM,BM,TOV,SV,DT,U,V)
C     D, T, Q, ARE SPECTRAL COMPONENTS AT (T-1)
C     X, Y, Z  ARE SPECTRAL COMPONENTS OF NONLIN. TERMS
      DIMENSION D( 4033 , 28 ), T( 4033 , 28 )
      DIMENSION X( 4033 , 28 ), Y( 4033 , 28 )
      DIMENSION U( 4033 , 28 ), V( 4033 , 28 )
      DIMENSION Q( 4033 ),Z( 4033 )
      DIMENSION AM( 28 , 28 ),BM( 28 , 28 )
      DIMENSION TOV( 28 ),SV( 28 )
      COMMON/COMSIC/ INDEX( 2016 ),TOR( 28 ),TKCTA4( 28 ),
     &               DM( 28 , 28 , 63 ),DIAINV( 28 , 63 )
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
      DIMENSION FR( 28 ),FI( 28 ),GR( 28 ),GI( 28 ),
     1  QDTZ( 4032 ),ELN( 4032 , 28 )
C.......................................................
      DO 200 I=1, 4032
      QDTZ(I) = Q(I) + DT*Z(I)
      V(I,1) = SNNP1(I)*QDTZ(I)
      V(I,1) = SNNP1(I)* V(I,1)
200   CONTINUE
C     NOW HAVE  (N(N+1))**2 (Q+DT*Z)
      DO 3 K=1, 28
      DO 2001 I=1, 2016
      NN=INDEX(I)
      ELN(2*I-1,K) = Y(2*I-1,K) + TKCTA4(K)*V(2*I-1,1)
      ELN(2*I-1,K) = T(2*I-1,K) + DT*ELN(2*I-1,K)
      ELN(2*I-1,K) = ELN(2*I-1,K)*DIAINV(K,NN)

C     NOW HAVE  ELN = T(-) + DT * (Y + TKCTA4(Q(-) + DT*Z))

      ELN(2*I  ,K) = Y(2*I  ,K) + TKCTA4(K)*V(2*I  ,1)
      ELN(2*I  ,K) = T(2*I  ,K) + DT*ELN(2*I  ,K)
      ELN(2*I  ,K) = ELN(2*I  ,K)*DIAINV(K,NN)
2001  CONTINUE
3     CONTINUE
      DO  17 J=1, 28
      DO 300 I=1, 4032
      V(I,J) = 0. E 0
300   CONTINUE
      DO  18 K=1, 28 ,2
      DO 350 I=1, 4032
      V(I,J) = V(I,J) + ELN(I,K)*AM(J,K)
     +                + ELN(I,K+1)*AM(J,K+1)
350   CONTINUE
18    CONTINUE
      DO 400 I=1, 4032
      V(I,J) = V(I,J) + TOR(J)*QDTZ(I)
      V(I,J) = V(I,J)*SNNP1(I)
      V(I,J) = V(I,J) + X(I,J)
      U(I,J) = D(I,J) + V(I,J)*DT
400   CONTINUE
17    CONTINUE
C.......................................................
C      2000 IS (L,N) SPECTRAL COMPONENT LOOP
C     SET COLUMN DIAINVTORS FOR PRESENT VALUE OF IN
C....
      DO 10 J=1, 28
      DO 500 I=1, 4032
      V(I,J)=0.
500   CONTINUE
      DO 7 K=1, 28 ,2
      DO 7 I=1, 2016
      NN=INDEX(I)
      V(2*I-1,J)=V(2*I-1,J)+DM(J,K,NN)*U(2*I-1,K)
     +                     +DM(J,K+1,NN)*U(2*I-1,K+1)
      V(2*I  ,J)=V(2*I  ,J)+DM(J,K,NN)*U(2*I  ,K)
     +                     +DM(J,K+1,NN)*U(2*I  ,K+1)
7     CONTINUE
10    CONTINUE
C....
2000  CONTINUE
C...........................................................
      DO 550 I=1, 4032
      U(I,1) = 0. E 0
550   CONTINUE
      DO  25 K=1, 28
      SVDT = SV(K)*DT
      DO 600 I=1, 4032
      U(I,1) = U(I,1) + SVDT*V(I,K)
600   CONTINUE
25    CONTINUE
      DO 650 I=1, 4032
      QDTZ(I) = QDTZ(I) + U(I,1)
      Z(I)  = 2. E 0*QDTZ(I) -   Q(I)
      U(I,1) = SNNP1(I)*U(I,1)
      U(I,1) = SNNP1(I)*U(I,1)
650   CONTINUE
      DO  26 K=2, 28
      DO 700 I=1, 4032
      U(I,K) = U(I,1)*TKCTA4(K)
700   CONTINUE
26    CONTINUE
      DO 750 I=1, 4032
      U(I,1) = U(I,1)*TKCTA4(1)
750   CONTINUE
C
      DO  29 J=1, 28
      DO  28 K=1, 28 ,2
      DO 800 I=1, 4032
      U(I,J) = U(I,J) + V(I,K)*BM(J,K)
     +                + V(I,K+1)*BM(J,K+1)
800   CONTINUE
28    CONTINUE
29    CONTINUE
      DO  32 K=1, 28
      DO 850 I=1, 2016
      NN=INDEX(I)
      U1         = U(2*I-1,K)*DIAINV(K,NN)
      U1         = ELN(2*I-1,K) + DT*U1
      Y(2*I-1,K)=  2. E 0*U1         - T(2*I-1,K)
      X(2*I-1,K)=  2. E 0*V(2*I-1,K) - D(2*I-1,K)

      U2         = U(2*I  ,K)*DIAINV(K,NN)
      U2         = ELN(2*I  ,K) + DT*U2
      Y(2*I  ,K)=  2. E 0*U2         - T(2*I  ,K)
      X(2*I  ,K)=  2. E 0*V(2*I  ,K) - D(2*I  ,K)
850   CONTINUE
32    CONTINUE
C...........................................................
      RETURN
      END
      SUBROUTINE GSICDF(AM,BM,DT,TOV,SV,SL,TE)
      DIMENSION AM( 28 , 28 ),BM( 28 , 28 )
      DIMENSION TOV( 28 ),SV( 28 )
      DIMENSION SL( 28 ),TE( 4033 , 28 ),CT( 28 )
      COMMON/COMSIC/ INDEX( 2016 ),TOR( 28 ),TKCTA4( 28 ),
     &               DM( 28 , 28 , 63 ),DIAINV( 28 , 63 )
      CALL GETIND(INDEX)
      DO 1 J=1, 28
      TOR(J)=( 2.8705E+2 /( 6.3712E+6 * 6.3712E+6 ))*TOV(J)
      JD=MAX(J-1,1)
      JU=MIN(J+1, 28 )
      CT(J)=(TE(1,JU)-TE(1,JD))*SL(J)/((SL(JU)-SL(JD))* 1.414214E+0 )
1     CONTINUE
      PRINT '(" CT=",10F7.3)',CT
      CALL GETCD1(AM,BM,DM,DIAINV,DT,TKCTA4,TOV,SV,CT)
      RETURN
      END
      SUBROUTINE GETIND(INDEX)
      DIMENSION INDEX( 2016 )
      IN=0
      IMAX= 64
      DO 10 M1=1, 63
      N=M1-2
      IMAX=IMAX-1
      DO 5 M2=1,IMAX
      N=N+1
      IN=IN+1
      INDEX(IN)=N+1
C      PRINT 100,IN,N,M2,IMAX,M1
C100   FORMAT(1H ,'SR',15(1X,I3))
5     CONTINUE
10    CONTINUE
      RETURN
      END
      SUBROUTINE GETCD1(AM,BM,DM,DIAINV,DT,TKCTA4,TOV,SV,CT)
      SAVE TK,DK,LEVS,JCAP1
      DIMENSION AM( 28 , 28 ),BM( 28 , 28 )
      DIMENSION XM( 28 , 28 ),YM( 28 , 28 )
      DIMENSION TK( 28 ), DK( 28 ), DKA4( 28 )
      DIMENSION TKCTA4( 28 ),CT( 28 )
      DIMENSION DIAINV( 28 , 63 ),DM( 28 , 28 , 63 )
      DIMENSION RIM( 28 , 28 )
      DIMENSION LU( 28 ),MU( 28 ),SV( 28 ),TOV( 28 )
      DIMENSION DM205( 63 , 28 , 28 ),
     1 DDD( 63 ),PPP( 63 ),RRR( 63 )
C     DATA TK / 28 *1.0 E 15/
      DATA TK / 28 *0.0 E 15/
C     DATA DK / 28 *3.0 E 15/
      DATA DK / 28 *0.0 E 15/
      DATA LEVS/ 28 /,JCAP1/ 63 /
C.................................................................
      DO 250 K=1, 28
      DO 200 J=1, 28
      RIM(J,K)=0. E 0
200   CONTINUE
250   CONTINUE
      DO 1 K=1, 28
      TKCTA4(K) =   TK(K)/( 6.3712E+6 * 6.3712E+6 )
      TKCTA4(K) = TKCTA4(K)/( 6.3712E+6 * 6.3712E+6 )
      TKCTA4(K) = TKCTA4(K)*CT(K)
      DKA4(K) =   DK(K)/( 6.3712E+6 * 6.3712E+6 )
      DKA4(K) = DKA4(K)/( 6.3712E+6 * 6.3712E+6 )
      RIM(K,K) = 1. E 0
1     CONTINUE
      DO 2000 NN=1, 63
      N = NN-1
      RNN1 = FLOAT(N*(N+1))
      RNN2 = RNN1*RNN1
      DO 2 K=1, 28
      TEM = TK(K)/( 6.3712E+6 * 6.3712E+6 )
      TEM =   TEM/( 6.3712E+6 * 6.3712E+6 )
      TEM = TEM*RNN2
      TEM = 1. E 0 + DT*TEM
      DIAINV(K,NN) = 1. E 0/TEM
2     CONTINUE
      RAA =  2.8705E+2 /( 6.3712E+6 * 6.3712E+6 )
      DO 5 I=1, 28
      DO 4 J=1, 28
      TEM = 0. E 0
      TEM = TKCTA4(I)*SV(J)*DT
      XM(I,J) = RNN2*TEM + BM(I,J)
4     CONTINUE
5     CONTINUE
      DO 7 I=1, 28
      DO 6 J=1, 28
      XM(I,J) = DIAINV(I,NN)*XM(I,J)
6     CONTINUE
7     CONTINUE
      DO 10 I=1, 28
      DO  9 J=1, 28
      YM(I,J) = TOV(I)*SV(J)*RAA
9     CONTINUE
      DO 11 K=1, 28
      DO 19 J=1, 28
      YM(I,J) = YM(I,J) + AM(I,K)*XM(K,J)
19    CONTINUE
11    CONTINUE
10    CONTINUE
      DO 12 I=1, 28
      DO 12 J=1, 28
      XM(I,J) = RNN1*DT*DT*YM(I,J)
12    CONTINUE
      DO 14 I=1, 28
      DO 13 J=1, 28
      DM205(NN,I,J) = RIM(I,J) - XM(I,J)
13    CONTINUE
      DM205(NN,I,I) = DM205(NN,I,I) + DT*DKA4(I)*RNN2
14    CONTINUE
2000  CONTINUE
      CALL MATINV(DM205,JCAP1,LEVS,DDD,PPP,RRR)
C.. TRNASPOSE FROM 205 FORMAT
      DO 23 NN=1, 63
      DO 22 I=1, 28
      DO 21 J=1, 28
      DM(I,J,NN)=DM205(NN,I,J)
21    CONTINUE
22    CONTINUE
23    CONTINUE
C..
      PRINT 100,DT
100   FORMAT(1H ,'COMPLETED GETCD1 DT=',F7.1)
      RETURN
      END
      SUBROUTINE MATINV(A,M,N,D,P,R)
      DIMENSION A(M,N,N),D(M),P(M),R(M)
C-----------------------------------------------------------------------
C VIMINV DOES MULTPLE MATRIX INVERSIONS.
C
C INPUT : A(I,*,*) CONTAINS THE I-TH  N X N  MATRIX.
C         M IS THE TOTAL NUMBER OF MATRICES TO BE INVERTED.
C         N IS THE DIMENSIONALITY OF EACH MATRIX.
C         D(*),P(*) AND R(*) ARE ARRAYS OF LENGTH N.
C
C OUTPUT: A(I,*,*) IS REPLACED BY ITS INVERSE.
C         M AND N ARE UNMODIFIED.
C         D(I) CONTAINS THE DETERMINANT OF THE I-TH MATRIX.
C         P(*) AND R(*) CONTAIN UNDEFINED RESULTS.
C-----------------------------------------------------------------------
      DO 200 L=1,M
      D(L)=1.0 E 0
  200 CONTINUE
C
      DO 100 K=1,N
      DO 250 L=1,M
      P(L)=A(L,K,K)
  250 CONTINUE
      DO 300 L=1,M
      R(L)=-1.0 E 0/P(L)
  300 CONTINUE
      DO 350 L=1,M
      A(L,K,K)=0.0 E 0
  350 CONTINUE
      DO  20 I=1,N
      DO 400 L=1,M
      A(L,I,K)=A(L,I,K)*R(L)
  400 CONTINUE
   20 CONTINUE
      DO 60 I=1,N
      IF(I.EQ.K) GO TO 60
      DO  40 J=1,N
      DO 450 L=1,M
      A(L,I,J)=A(L,I,K)*A(L,K,J)+A(L,I,J)
  450 CONTINUE
   40 CONTINUE
   60 CONTINUE
      DO 600 L=1,M
      R(L)=-R(L)
  600 CONTINUE
      DO  80 J=1,N
      DO 650 L=1,M
      A(L,K,J)=A(L,K,J)*R(L)
  650 CONTINUE
   80 CONTINUE
      DO 700 L=1,M
      D(L)=D(L)*P(L)
  700 CONTINUE
      DO 750 L=1,M
      A(L,K,K)=R(L)
  750 CONTINUE
  100 CONTINUE
C-----------------------------------------------------------------------
      RETURN
      END
      SUBROUTINE SUMTOP(AP,TOP,QVV,KLIL,LEN0,LENH)
CC
      PARAMETER ( LEV2P1 = 2* 28 +1 )
CC
      DIMENSION     AP(2,0:LEN0,KLIL)
CC
      DIMENSION    TOP(2,0: 62 ,KLIL)
      DIMENSION     EV(2,0: 62 ,LEV2P1)
      DIMENSION     OD(2,0: 62 ,LEV2P1)
CC
      DIMENSION   QTOP(2,0: 62 )
CC
      DIMENSION    QVV( 4158 )
CC
CC
CC
      LEN=2* 63
      J=LEN+1
      DO 10 L=0, 62
      QTOP(1,L) = QVV(J)
      QTOP(2,L) = QVV(J+1)
      J=LEN+J
      LEN=LEN-2
   10 CONTINUE
CC
CC
CC
      DO 24 K=1,KLIL
      DO 22 L=0, 62
            EV(1,L,K) = 0.0
            EV(2,L,K) = 0.0
            OD(1,L,K) = 0.0
            OD(2,L,K) = 0.0
   22 CONTINUE
   24 CONTINUE
CC
CC
CC
CC    ODD
      DO 50 L=0, 63 ,2
CC
CC    REAL
      DO 30 K=1,KLIL
            OD(1,L,K) = TOP(1,L,K) * QTOP(1,L)
   30 CONTINUE
CC
CC    IMAGINARY
      DO 40 K=1,KLIL
            OD(2,L,K) = TOP(2,L,K) * QTOP(2,L)
   40 CONTINUE
CC
   50 CONTINUE
CC
CC
CC
CC    EVEN
      DO 150 L=1, 62 ,2
CC
CC    REAL
      DO 130 K=1,KLIL
            EV(1,L,K) = TOP(1,L,K) * QTOP(1,L)
  130 CONTINUE
CC
CC    IMAGINARY
      DO 140 K=1,KLIL
            EV(2,L,K) = TOP(2,L,K) * QTOP(2,L)
  140 CONTINUE
CC
  150 CONTINUE
CC
CC
CC
      DO 250 K=1,KLIL
      DO 240 L=0, 62
            AP(1,L,K) = AP(1,L,K) + EV(1,L,K) + OD(1,L,K)
            AP(2,L,K) = AP(2,L,K) + EV(2,L,K) + OD(2,L,K)
CC
            AP(1,L+LENH,K) = AP(1,L+LENH,K) + EV(1,L,K) - OD(1,L,K)
            AP(2,L+LENH,K) = AP(2,L+LENH,K) + EV(2,L,K) - OD(2,L,K)
  240 CONTINUE
  250 CONTINUE
CC
      RETURN
      END
      SUBROUTINE DZTOUV(D,Z,U,V,UTOP,VTOP)
      PARAMETER (JCAP= 62 )
      PARAMETER (LNT22=(JCAP+1)*(JCAP+2)+1)
      PARAMETER (LNEP=(JCAP+2)*(JCAP+3)/2)
      DIMENSION  D(LNT22),Z(LNT22)
      DIMENSION  U(LNT22),V(LNT22)
      DIMENSION  UTOP(2,JCAP+1)
      DIMENSION  VTOP(2,JCAP+1)
      DIMENSION  E(LNEP)
C
      SAVE E, IFIRST
C
C   ARRAY E =EPS/N
C   ARRAY E =EPS/N
C            EPS/N=0. FOR N=L
C   ARRAY E =EPS/N
C   ARRAY E =EPS/N
C
      JE(N,L) =((JCAP+2)*(JCAP+3)-(JCAP+2-L)*(JCAP+3-L))/2+N-L
C
      JC(N,L) = (JCAP+1)*(JCAP+2)-(JCAP+1-L)*(JCAP+2-L)+2*(N-L)
C
      DATA IFIRST/1/
      IF(IFIRST.NE.1)GO TO 280
C
      DO 220 L=0,JCAP
             N=L
        IE=JE(N,L)+1
      E(IE)=0.
220   CONTINUE
      DO 260 L=  0,JCAP
      DO 240 N=L+1,JCAP+1
      RN=N
      RL=L
      A=(RN*RN-RL*RL)/(4.*RN*RN-1.)
        IE=JE(N,L)+1
      E(IE)=SQRT(A) / RN
240   CONTINUE
260   CONTINUE
      IFIRST=0
280   CONTINUE
C
             L=0
      DO 320 N=0,JCAP
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
C     U(L,N)=-I*L*D(L,N)/(N*(N+1))
C
      U(ICI)=0.0
      U(ICR)=0.0
C
      V(ICI)=0.0
      V(ICR)=0.0
320   CONTINUE
C
      DO 440 L=1,JCAP
          RL=L
      DO 420 N=L,JCAP
          RN=N
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
C     U(L,N)=-I*L*D(L,N)/(N*(N+1))
C
      U(ICI)=-RL*D(ICR)/(RN*(RN+1.))
      U(ICR)= RL*D(ICI)/(RN*(RN+1.))
C
      V(ICI)=-RL*Z(ICR)/(RN*(RN+1.))
      V(ICR)= RL*Z(ICI)/(RN*(RN+1.))
420   CONTINUE
440   CONTINUE
C
      DO 540 L=  0,JCAP-1
      DO 520 N=L+1,JCAP
         IE=JE(N,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
      U(ICR)=U(ICR)-E(IE)*Z(ICR-2)
      U(ICI)=U(ICI)-E(IE)*Z(ICI-2)
C
      V(ICR)=V(ICR)+E(IE)*D(ICR-2)
      V(ICI)=V(ICI)+E(IE)*D(ICI-2)
520   CONTINUE
540   CONTINUE
C
      DO 640 L=0,JCAP-1
      DO 620 N=L,JCAP-1
         IE=JE(N+1,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
      U(ICR)=U(ICR)+E(IE)*Z(ICR+2)
      U(ICI)=U(ICI)+E(IE)*Z(ICI+2)
C
      V(ICR)=V(ICR)-E(IE)*D(ICR+2)
      V(ICI)=V(ICI)-E(IE)*D(ICI+2)
620   CONTINUE
640   CONTINUE
C
      N=JCAP+1
      DO 740 L=0,JCAP
         IE=JE(N,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
      UTOP(1,L+1)=-E(IE)*Z(ICR-2)
      UTOP(2,L+1)=-E(IE)*Z(ICI-2)
C
      VTOP(1,L+1)= E(IE)*D(ICR-2)
      VTOP(2,L+1)= E(IE)*D(ICI-2)
740   CONTINUE
C
      DO 820 J=1, 4032
      U(J)=U(J)* 6.3712E+6
      V(J)=V(J)* 6.3712E+6
820   CONTINUE
C
      DO 840 J=1, 63
      UTOP(1,J)=UTOP(1,J)* 6.3712E+6
      UTOP(2,J)=UTOP(2,J)* 6.3712E+6
      VTOP(1,J)=VTOP(1,J)* 6.3712E+6
      VTOP(2,J)=VTOP(2,J)* 6.3712E+6
840   CONTINUE
C
      RETURN
      END
      SUBROUTINE DELLNP(Q,DPDPHS,DPDTOP,DPDLA)
C
      PARAMETER (JCAP= 62 )
      PARAMETER (LNEP=(JCAP+2)*(JCAP+3)/2)
C
C INPUT Q IS IN IBM TRIANG. ORDER
C OUTPUT  IS IN IBM TRIANG. ORDER
C
      DIMENSION         Q( 4033 )
      DIMENSION    DPDPHS( 4033 )
      DIMENSION    DPDTOP(2, 63 )
      DIMENSION     DPDLA( 4033 )
      DIMENSION         E(LNEP)
C
      SAVE E, IFIRST
C
      JE(N,L) =((JCAP+2)*(JCAP+3)-(JCAP+2-L)*(JCAP+3-L))/2+N-L
C
      JC(N,L) = (JCAP+1)*(JCAP+2)-(JCAP+1-L)*(JCAP+2-L)+2*(N-L)
C
      DATA IFIRST/1/
      IF(IFIRST.NE.1)GO TO 280
C
      DO 220 L=0,JCAP
             N=L
        IE=JE(N,L)+1
      E(IE)=0.
220   CONTINUE
      DO 260 L=  0,JCAP
      DO 240 N=L+1,JCAP+1
      RN=N
      RL=L
      A=(RN*RN-RL*RL)/(4.*RN*RN-1.)
        IE=JE(N,L)+1
      E(IE)=SQRT(A)
240   CONTINUE
260   CONTINUE
      IFIRST=0
280   CONTINUE
C
      DO 340 L=0,JCAP
          RL=L
      DO 320 N=L,JCAP
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
C     DPDLA(L,N)= I*L*Q(L,N)
C
      DPDLA(ICI)= RL*Q(ICR)
      DPDLA(ICR)=-RL*Q(ICI)
320   CONTINUE
340   CONTINUE
C
      DO 440 L=0,JCAP-1
      DO 420 N=L,JCAP-1
         IE=JE(N+1,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
         RN=N
      DPDPHS(ICR)=(RN+2.)*E(IE)*Q(ICR+2)
      DPDPHS(ICI)=(RN+2.)*E(IE)*Q(ICI+2)
420   CONTINUE
440   CONTINUE
C
             N=  JCAP
      DO 540 L=0,JCAP
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
      DPDPHS(ICR)=0.0
      DPDPHS(ICI)=0.0
540   CONTINUE
C
      DO 640 L=  0,JCAP-1
      DO 620 N=L+1,JCAP
         IE=JE(N,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
         RN=N
      DPDPHS(ICR)=DPDPHS(ICR)+(1.-RN)*E(IE)*Q(ICR-2)
      DPDPHS(ICI)=DPDPHS(ICI)+(1.-RN)*E(IE)*Q(ICI-2)
620   CONTINUE
640   CONTINUE
C
          N=JCAP+1
         RN=N
      DO 740 L=0,JCAP
         IE=JE(N,L)+1
        ICR=JC(N,L)+1
        ICI=JC(N,L)+2
      DPDTOP(1,L+1)=(1.-RN)*E(IE)*Q(ICR-2)
      DPDTOP(2,L+1)=(1.-RN)*E(IE)*Q(ICI-2)
740   CONTINUE
C
      AA=1./ 6.3712E+6
      DO 820 J=1, 4032
       DPDLA(J)= DPDLA(J)*AA
      DPDPHS(J)=DPDPHS(J)*AA
820   CONTINUE
C
      DO 840 J=1, 63
      DPDTOP(1,J)=DPDTOP(1,J)*AA
      DPDTOP(2,J)=DPDTOP(2,J)*AA
840   CONTINUE
C
      RETURN
      END
      SUBROUTINE BMCM(TOV,P1,P2,H1,H2,DEL,CI,BM,CM,DT,SV,AM)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    BMCM        COMPUTES VECTORS H1 H2, MATRICES BM CM.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-06
C
C ABSTRACT: COMPUTES VECTORS H1 AND H2 AND SQUARE
C   MATRICES BM AND CM.  THESE MATRICES ARE REQUIRED BY THE
C   SEMI-IMPLICIT SCHEME.  NOTE THAT CM DEPENDS ON THE TIME STEP
C   AND MUST BE RECOMPUTED AFTER THE FIRST FORWARD TIME STEP.
C   H1 H2 ARE NEEDED IN THE THERMODYNAMIC EQ.
C
C PROGRAM HISTORY LOG:
C   88-04-06  JOSEPH SELA
C
C USAGE:    CALL BMCM (TOV,P1,P2,H1,H2,DEL,CI,BM,CM,DT,SV,AM)
C   INPUT ARGUMENT LIST:
C     TOV      - ARRAY SET TO CONSTANT =300 DEG K ALL LEVELS.
C     P1       - ARRAY OF PI RATIOS FORMED IN AMHMTM.
C     P2       - ARRAY OF PI RATIOS FORMED IN AMHMTM.
C     DEL      - ARRAY OF SIGMA SPACING SET IN SETSIG.
C     CI       - ARRAY OF SIGMA VALUE AT EACH LEVEL SET IN SETSIG.
C     DT       - TIME STEP (SEC).
C     SV       - ARRAY OF MINUS DEL SET IN AMHMTM.
C     AM       - ARRAY OF MATRIX COMPUTED IN AMHMTM.
C                CONSTANT IN SPACE/TIME.
C
C   OUTPUT ARGUMENT LIST:
C     H1       - ARRAY OF P1(LE)*300 - 300;  H1(LEVS)=0.
C     H2       - ARRAY OF 300 - P2(LE)*300;  H2(1)=0.
C     BM       - ARRAY OF CONSTANT MATRIX (SPACE,TIME) COMPUTED
C                FROM COMBINATIONS OF SIGMA RATIOS.
C     CM       - ARRAY OF MATRIX COMPUTED FROM AM AND BM AND DT.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION X1( 28 ),X2( 28 )
      DIMENSION BM( 28 , 28 ), CM( 28 , 28 ),
     1  TOV( 28 ), P1( 28 ), P2( 28 ), H1( 28 ), H2( 28 ),
     2  DEL( 28 ), CI( 29 ), SV( 28 ), AM( 28 , 28 )
      RK =  2.8705E+2  /  1.0046E+3
      DO 1 LE=1, 27
1     H1(LE) = P1(LE) * TOV(LE+1) - TOV(LE)
      H1( 28 ) = 0. E 0
      H2( 1 ) = 0. E 0
      DO 2 LE=2, 28
2     H2(LE) = TOV(LE) - P2(LE) * TOV(LE-1)
      DO 7 K=1, 28
      X1(K) = RK*TOV(K)+(CI(K+1)*H1(K)+CI(K)*H2(K))/(2. E 0*DEL(K))
      X2(K) = (H1(K)+H2(K)) / (2. E 0*DEL(K))
7     CONTINUE
      DO 33 J=1, 28
      DO 33 K=1, 28
      BM(K,J) = -X1(K)*DEL(J)
33    CONTINUE
      DO 34 K=1, 28
      DO 34 J=1, 28
      KK = K
      IF(J.GT.KK) GO TO 34
      BM(K,J) = BM(K,J) + X2(K)*DEL(J)
34    CONTINUE
      DO 3 K=1, 28
      BM(K,K) = BM(K,K) - H2(K) / 2. E 0
3     CONTINUE
      RAA =  2.8705E+2  / ( 6.3712E+6 * 6.3712E+6 )
      DO 4 I=1, 28
      DO 4 J=1, 28
      CM(I,J) = 0. E 0
      DO 44 K=1, 28
      CM(I,J) = CM(I,J) + AM(I,K) * BM(K,J)
44    CONTINUE
      CM(I,J) = (CM(I,J)+RAA*TOV(I)*SV(J))*DT*DT
4     CONTINUE
      RETURN
      END
      SUBROUTINE PRINTA(A,JCAP1)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    PRINTA      PRINTS SCALED MATRIX.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-26
C
C ABSTRACT: FINDS R, THE MAXIMUM ABSOLUTE VALUE OF THE MATRIX.
C   PRINTS R.  SCALES MATRIX BY DIVIDING BY R.  PRINTS SCALED MATRIX.
C   UNSCALES MATRIX BY MULTIPLYING BY R.
C
C PROGRAM HISTORY LOG:
C   88-04-26  JOSEPH SELA
C
C USAGE:    CALL PRINTA (A, JCAP1)
C   INPUT ARGUMENT LIST:
C     A        - SQUARE MATRIX.
C     JCAP1    - ORDER OF MATRIX A.
C
C   OUTPUT ARGUMENT LIST:
C     A        - SQUARE MATRIX AFTER BEING SCALED AND UNSCALED.
C                INPUT AND OUTPUT MATRICES SHOULD BE IDENTICAL
C                EXCEPT FOR ROUND OFF ERRORS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION A(JCAP1,JCAP1)
      R = -1. E +20
      DO 1 I=1,JCAP1
      DO 1 J=1,JCAP1
      IF ( ABS (A(I,J)).GT.R) R= ABS (A(I,J))
1     CONTINUE
      PRINT 100, R
100   FORMAT (1H0, 'SCALE OF MATRIX  =', E12.5)
      DO 2 I=1,JCAP1
      DO 2 J=1,JCAP1
      A(I,J) = A(I,J) / R
2     CONTINUE
      DO 3 I=1,JCAP1
      PRINT 101, (A(I,J), J=1,JCAP1)
101   FORMAT (1X, 16(F6.3, 1X))
3     CONTINUE
      DO 4 I=1,JCAP1
      DO 4 J=1,JCAP1
      A(I,J) = A(I,J) * R
4     CONTINUE
      RETURN
      END
      SUBROUTINE PRINTB(A,JCAP1)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    PRINTB      PRINTS SCALED VECTOR.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-26
C
C ABSTRACT: FINDS R, THE MAXIMUM ABSOLUTE VALUE OF THE VECTOR.
C   PRINTS R.  IF R IS EQUAL TO 0.0, THEN RETURN FROM SUBROUTINE.
C   SCALES VECTOR BY DIVIDING BY R.  PRINTS SCALED VECTOR.
C   UNSCALES VECTOR BY MULTIPLYING BY R.
C
C PROGRAM HISTORY LOG:
C   88-04-26  JOSEPH SELA
C
C USAGE:    CALL PRINTB (A, JCAP1)
C   INPUT ARGUMENT LIST:
C     A        - VECTOR.
C     JCAP1    - LENGTH OF VECTOR A.
C
C   OUTPUT ARGUMENT LIST:
C     A        - VECTOR AFTER BEING SCALED AND UNSCALED.
C                INPUT AND OUTPUT VECTORS SHOULD BE IDENTICAL
C                EXCEPT FOR ROUND OFF ERRORS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION A(JCAP1)
      R = -1. E +20
      DO 1 J=1,JCAP1
      IF ( ABS (A(J)).GT.R) R= ABS (A(J))
1     CONTINUE
      PRINT 100, R
100   FORMAT (1H0, 'SCALE OF VECTOR  =', E12.5)
      IF(R.EQ.0. E 0)RETURN
      DO 2 J=1,JCAP1
      A(J) = A(J) / R
2     CONTINUE
      PRINT 101, (A(J), J=1,JCAP1)
101   FORMAT (1X, 16(F6.3, 1X))
      DO 4 J=1,JCAP1
      A(J) = A(J) * R
4     CONTINUE
      RETURN
      END
      SUBROUTINE AMHMTM(DEL,RPI,SV,P1,P2,AM,HM,TM)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    AMHMTM      COMPUTES 6 CONSTANT MATRICES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-06
C
C ABSTRACT: COMPUTES 6 MATRICES WHICH ARE CONSTANT IN SPACE AND TIME.
C   THE MATRICES ARE REQUIRED IN VERTICAL INTEGRATIONS.
C
C PROGRAM HISTORY LOG:
C   88-04-06  JOSEPH SELA
C
C USAGE:    CALL AMHMTM (DEL, RPI, SV, P1, P2, AM, HM, TM)
C   INPUT ARGUMENT LIST:
C     DEL      - ARRAY OF SIGMA SPACING FOR EACH LAYER.
C                COMPUTED IN SETSIG.
C     RPI      - ARRAY OF PI RATIO NEEDED IN THERMODYNAMIC EQUATION.
C                COMPUTED IN SETSIG.
C
C   OUTPUT ARGUMENT LIST:
C     SV       - ARRAY OF NEGATIVE OF DEL ARRAY.
C     P1       - ARRAY OF RECIPROCAL OF RPI ARRAY;  P1(LEVS)=0.
C     P2       - ARRAY P2(LE+1)=RPI(LE);  P2(1)=0.
C     AM       - ARRAY OF GEOGRAPHICALLY CONSTANT SQUARE MATRIX.
C     HM       - ARRAY OF GEOGRAPHICALLY CONSTANT SQUARE MATRIX.
C     TM       - ARRAY OF GEOGRAPHICALLY CONSTANT SQUARE MATRIX.
C
C     HM*GEOPOTENTIAL=TM*TEMP
C        GEOPOTENTIAL=AM*TEMP
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION DEL( 28 ),RPI( 27 ),SV( 28 ),
     1 P1( 28 ),P2( 28 ),LLL( 28 ),MMM( 28 ),
     2 AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 )
      DO 5 J=1, 28
      DO 5 I=1, 28
      HM(I,J) = 0. E 0
5     TM(I,J) = 0. E 0
      DO 6 LE=1, 27
      HM(LE,LE) = 1. E 0
      TM(LE,LE) = 0.5 E 0 *  1.0046E+3  * (RPI(LE)-1. E 0)
6     CONTINUE
C     CALL PRINTA(HM, 28 )
C     CALL PRINTA(TM, 28 )
      DO 66 LE=1, 27
      HM(LE,LE+1) = -1. E 0
      TM(LE,LE+1) = 0.5 E 0 *  1.0046E+3  * (1. E 0-1. E 0/RPI(LE))
66    CONTINUE
C     CALL PRINTA(HM, 28 )
C     CALL PRINTA(TM, 28 )
      DO 7 LE=1, 28
      HM( 28 ,LE) = DEL(LE)
      TM( 28 ,LE) =  2.8705E+2  * DEL(LE)
7     CONTINUE
C     CALL PRINTA(HM, 28 )
C     CALL PRINTA(TM, 28 )
      CALL IMINV (HM,  28 , DET, LLL, MMM)
C     CALL PRINTA(HM, 28 )
      DO 88 I=1, 28
      DO 88 J=1, 28
      AM(I,J) = 0. E 0
      DO 8 K=1, 28
      AM(I,J) = AM(I,J) + HM(I,K)*TM(K,J)
8     CONTINUE
88    CONTINUE
C     CALL PRINTA(AM, 28 )
C     HERE IS A GOOD PLACE TO DIVIDE BY A*A  FOR LAPLACIAN
C     STORE AM IN TM AND DIVIDE AM
      DO 10 I=1, 28
      DO 10 J=1, 28
      TM(I,J) = AM(I,J)
      HM(I,J) = AM(I,J)
      AM(I,J) = AM(I,J) / ( 6.3712E+6  *  6.3712E+6 )
10    CONTINUE
C     CALL PRINTA(AM, 28 )
C     CALL PRINTA(TM, 28 )
      CALL IMINV(TM, 28 ,DET,LLL,MMM)
C     CALL PRINTA(TM, 28 )
      DO 9 LE=1, 28
9     SV(LE) = -DEL(LE)
      DO 11 LE=1, 27
      P1(LE) = 1. E 0 / RPI(LE)
      P2(LE+1) = RPI(LE)
11    CONTINUE
      P1( 28 ) = 0. E 0
      P2 ( 1 ) = 0. E 0
C     CALL PRINTB(SV, 28 )
C     CALL PRINTB(P1, 28 )
C     CALL PRINTB(P2, 28 )
      PRINT 333
333   FORMAT(1H0,'SHALOM  AMHMTM')
      RETURN
      END
      SUBROUTINE SETSIG(CI, SI, DEL, SL, CL, RPI, NSG)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SETSIG      SETS UP MODEL SIGMA STRUCTURE.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-05
C
C ABSTRACT: SETS UP MODEL SIGMA STRUCTURE BASED ON VERTICAL
C   SIGMA SPACING DEFINED IN THE SUBROUTINE.
C
C PROGRAM HISTORY LOG:
C   88-04-05  JOSEPH SELA
C
C USAGE:    CALL SETSIG (CI, SI, DEL, SL, CL, RPI)
C
c   input argument list:
c     nsg      - file number of sigma file
c
C   OUTPUT ARGUMENT LIST:
C     CI       - ARRAY OF 1.0-SI AT EACH LEVEL.
C     SI       - ARRAY OF SIGMA VALUE AT EACH LEVEL.
C     DEL      - ARRAY OF SIGMA SPACING AT EACH LAYER.
C     SL       - ARRAY OF SIGMA AT MIDPOINT OF SIGMA LAYERS.
C     CL       - ARRAY OF 1.0-SL AT EACH LAYER MIDPOINT.
C     RPI      - ARRAY OF PI RATIOS NEEDED IN THERMODYNAMIC EQUATION.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      REAL RK,RK1,RKR
      DIMENSION CI( 29 ), SI( 29 ),
     1 DEL( 28 ), SL( 28 ), CL( 28 ), RPI( 27 )
c      INTEGER IDATE(4)
      integer*4 IDATE(4)
C
      PRINT 98, NSG
98    FORMAT (1H0, 'BEGIN SETSIG - GETTING SIGS FROM UNIT',I4)
      REWIND NSG
      READ(NSG)
      READ(NSG) FHOUR,IDATE,SI,SL
      REWIND NSG
      DO 1 LI=1, 29
1     CI(LI) = 1. E 0 - SI(LI)
      DO 3 LE=1, 28
      CL(LE) = 1. E 0 - SL(LE)
      DEL(LE) = SI(LE) - SI(LE+1)
3     CONTINUE
C     COMPUTE PI RATIOS FOR TEMP. MATRIX.
      RK =  2.8705E+2 / 1.0046E+3
      DO 4 LE=1, 27
      BASE = SL(LE+1)/SL(LE)
4     RPI(LE) = BASE**RK
      DO 5 LE=1, 29
      PRINT 100, LE, CI(LE), SI(LE)
100   FORMAT (1H , 'LEVEL=', I2, 2X, 'CI=', F6.3, 2X, 'SI=', F6.3)
5     CONTINUE
      PRINT 97
97    FORMAT (1H0)
      DO 6 LE=1, 28
      PRINT 101, LE, CL(LE), SL(LE), DEL(LE)
101   FORMAT (1H , 'LAYER=', I2, 2X, 'CL=', F6.3, 2X, 'SL=', F6.3, 2X,
     1 'DEL=', F6.3)
6     CONTINUE
      PRINT 102, (RPI(LE), LE=1, 27 )
102   FORMAT (1H0, 'RPI=', (18(1X,F6.3)) )
      RETURN
      END
      SUBROUTINE GLATS(LGGHAF,COLRAD,WGT,WGTCS,RCS2)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GLATS       COMPUTES LOCATION OF GAUSSIAN LATITUDES.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-05
C
C ABSTRACT: COMPUTES THE LOCATION OF THE GAUSSIAN LATITUDES FOR THE
C   INPUT LGGHAF.  THE LATITUDES ARE DETERMINED BY FINDING
C   THE ZEROS OF THE LEGENDRE POLYNOMIALS.
C
C PROGRAM HISTORY LOG:
C   88-04-05  JOSEPH SELA
C
C USAGE:    CALL GLATS (LGGHAF, COLRAD, WGT, WGTCS, RCS2)
C   INPUT ARGUMENT LIST:
C     LGGHAF   - NUMBER OF GAUSSIAN LATITUDES IN A HEMISPHERE.
C
C   OUTPUT ARGUMENT LIST:
C     COLRAD   - ARRAY OF COLATITUDE OF GAUSSIAN LATITUDES
C                IN NORTHERN HEMISPHERE.
C     WGT      - ARRAY OF WEIGHTS AT EACH GAUSSIAN LATITUDE
C                REQUIRED FOR GAUSSIAN QUADRATURE.
C     WGTCS    - ARRAY OF GAUSSIAN WEIGHT/SIN OF COLATITUDE SQUARED.
C     RCS2     - ARRAY OF RECIPROCAL  OF  SIN OF COLATITUDE SQUARED.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
CCCC  HALF PRECISION COLRAD,WGT,WGTCS,RCS2
       REAL  COLRAD,WGT,WGTCS,RCS2
      DIMENSION COLRAD(  47  ),WGT(  47  ),WGTCS(  47  )
      DIMENSION RCS2(  47  )
      EPS=1.E-12
C     PRINT 101
C101  FORMAT ('0 I   COLAT   COLRAD     WGT', 12X, 'WGTCS',
CCCC 1 10X, 'ITER  RES')
      SI = 1.0
      L2=2*LGGHAF
      RL2=L2
      SCALE = 2.0/(RL2*RL2)
      K1=L2-1
      PI = ATAN(SI)*4.E+00
      DRADZ = PI / 360.
      RAD = 0.0
      DO 1000 K=1,LGGHAF
      ITER=0
      DRAD=DRADZ
1     CALL POLY(L2,RAD,P2)
2     P1 =P2
      ITER=ITER+1
      RAD=RAD+DRAD
      CALL POLY(L2,RAD,P2)
      IF(SIGN(SI,P1).EQ.SIGN(SI,P2)) GO TO 2
      IF(DRAD.LT.EPS)GO TO 3
      RAD=RAD-DRAD
      DRAD = DRAD * 0.25
      GO TO 1
3     CONTINUE
      COLRAD(K)=RAD
      PHI = RAD * 180 / PI
      CALL POLY(K1,RAD,P1)
      X = COS(RAD)
      W = SCALE * (1.0 - X*X)/ (P1*P1)
      WGT(K) = W
      SN = SIN(RAD)
      W=W/(SN*SN)
      WGTCS(K) = W
      RC=1./(SN*SN)
      RCS2(K) = RC
      CALL POLY(L2,RAD,P1)
C     PRINT 102,K,PHI,COLRAD(K),WGT(K),WGTCS(K),ITER,P1
C102  FORMAT(1H ,I2,2X,F6.2,2X,F10.7,2X,E13.7,2X,E13.7,2X,I4,2X,D13.7)
1000  CONTINUE
      PRINT 100,LGGHAF
100   FORMAT(1H ,'SHALOM FROM 0.0 E 0 GLATS FOR ',I3)
      RETURN
      END
      SUBROUTINE POLY(N,RAD,P)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    POLY        EVALUATES LEGENDRE POLYNOMIAL.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: EVALUATES THE UNNORMALIZED LEGENDRE POLYNOMIAL
C   OF SPECIFIED DEGREE AT A GIVEN COLATITUDE USING A STANDARD
C   RECURSION FORMULA.  REAL ARITHMETIC IS USED.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL POLY (N, RAD, P)
C   INPUT ARGUMENT LIST:
C     N        - DEGREE OF LEGENDRE POLYNOMIAL.
C     RAD      - REAL COLATITUDE IN RADIANS.
C
C   OUTPUT ARGUMENT LIST:
C     P        - REAL VALUE OF LEGENDRE POLYNOMIAL.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      X = COS(RAD)
      Y1 = 1.0
      Y2=X
      DO 1 I=2,N
      G=X*Y2
      Y3=G-Y1+G-(G-Y1)/FLOAT(I)
      Y1=Y2
      Y2=Y3
1     CONTINUE
      P=Y3
      RETURN
      END
      SUBROUTINE IMINV (A,N,D,L,M)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    IMINV       COMPUTES INVERSE OF MATRIX IN PLACE.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-21
C
C ABSTRACT: COMPUTES INVERSE OF MATRIX IN PLACE USING
C   GAUSS-JORDAN REDUCTION WITH MAX PIVOT.
C
C PROGRAM HISTORY LOG:
C   88-04-21  IBM SCIENTIFIC SUBROUTINE PACKAGE.
C
C USAGE:    CALL IMINV (A, N, D, L, M)
C   INPUT ARGUMENT LIST:
C     A        - SQUARE MATRIX WHICH WILL BE INVERTED.
C                MATRIX A WILL BE DESTROYED AND REPLACED BY INVERSE.
C     N        - ORDER OF MATRIX A.
C
C   OUTPUT ARGUMENT LIST:
C     A        - INVERSE OF INPUT MATRIX A.
C     D        - DETERMINANT OF A INVERSE.
C                IF D=0.0, MATRIX A IS SINGULAR.
C     L        - WORK VECTOR OF LENGTH N.
C     M        - WORK VECTOR OF LENGTH N.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C
C     ..................................................................
C
C        ................
C
C        PURPOSE
C           INVERT A MATRIX
C
C        USAGE
C           CALL IMINV (A,N,D,L,M)
C
C        DESCRIPTION OF PARAMETERS
C           A - INPUT MATRIX, DESTROYED IN COMPUTATION AND REPLACED BY
C               RESULTANT INVERSE.
C           N - ORDER OF MATRIX A
C           D - RESULTANT DETERMINANT
C           L - WORK VECTOR OF LENGTH N
C           M - WORK VECTOR OF LENGTH N
C
C        REMARKS
C           MATRIX A MUST BE A GENERAL MATRIX
C
C        .............................................
C           NONE
C
C        METHOD
C           THE STANDARD GAUSS-JORDAN METHOD IS USED. THE DETERMINANT
C           IS ALSO CALCULATED. A DETERMINANT OF ZERO INDICATES THAT
C           THE MATRIX IS SINGULAR.
C
C     ..................................................................
C
      DIMENSION A(N*N),L(N),M(N)
C
C        ...............................................................
C
C        IF A DOUBLE PRECISION VERSION OF THIS ROUTINE IS DESIRED, THE
C        C IN COLUMN 1 SHOULD BE REMOVED FROM THE DOUBLE PRECISION
C        STATEMENT WHICH FOLLOWS.
C
C     DOUBLE PRECISION A, D, BIGA, HOLD
C
C        THE C MUST ALSO BE REMOVED FROM DOUBLE PRECISION STATEMENTS
C        APPEARING IN OTHER ROUTINES USED IN CONJUNCTION WITH THIS
C        ROUTINE.
C
C        THE DOUBLE PRECISION VERSION OF THIS SR........ MUST ALSO
C        CONTAIN DOUBLE PRECISION FORTRAN FUNCTIONS.  ABS IN STATEMEN
C        10 MUST BE CHANGED TO DABS  .
C
C        ...............................................................
C
C        SEARCH FOR LARGEST ELEMENT
C
      D=1.0 E 0
      NK=-N
      DO 80 K=1,N
      NK=NK+N
      L(K)=K
      M(K)=K
      KK=NK+K
      BIGA=A(KK)
      DO 20 J=K,N
      IZ=N*(J-1)
      DO 20 I=K,N
      IJ=IZ+I
C  10 IF (DABS(BIGA)-DABS(A(IJ))) 15,20,20
   10 IF( ABS (BIGA)- ABS (A(IJ))) 15,20,20
   15 BIGA=A(IJ)
      L(K)=I
      M(K)=J
   20 CONTINUE
C
C        INTERCHANGE ROWS
C
      J=L(K)
      IF(J-K) 35,35,25
   25 KI=K-N
      DO 30 I=1,N
      KI=KI+N
      HOLD=-A(KI)
      JI=KI-K+J
      A(KI)=A(JI)
   30 A(JI) =HOLD
C
C        INTERCHANGE COLUMNS
C
   35 I=M(K)
      IF(I-K) 45,45,38
   38 JP=N*(I-1)
      DO 40 J=1,N
      JK=NK+J
      JI=JP+J
      HOLD=-A(JK)
      A(JK)=A(JI)
   40 A(JI) =HOLD
C
C        DIVIDE COLUMN BY MINUS PIVOT (VALUE OF PIVOT ELEMENT IS
C        CONTAINED IN BIGA)
C
   45 IF(BIGA) 48,46,48
   46 D=0.0 E 0
      RETURN
   48 continue
      DO 55 I=1,N
         if (i.ne.k) then
            ik=nk+i
            a(ik) = - a(ik) / biga
         endif
c     IF(I-K) 50,55,50
c  50 IK=NK+I
c     A(IK)=A(IK)/(-BIGA)

   55 CONTINUE
C
C        REDUCE MATRIX
C
      DO 65 I=1,N
      IK=NK+I
      IJ=I-N
      DO 65 J=1,N
      IJ=IJ+N
      IF(I-K) 60,65,60
   60 IF(J-K) 62,65,62
   62 KJ=IJ-I+K
      A(IJ)=A(IK)*A(KJ)+A(IJ)
   65 CONTINUE
C
C        DIVIDE ROW BY PIVOT
C
      KJ=K-N
      DO 75 J=1,N
      KJ=KJ+N
      IF(J-K) 70,75,70
   70 A(KJ)=A(KJ)/BIGA
   75 CONTINUE
C
C        PRODUCT OF PIVOTS
C
      D=D*BIGA
C
C        REPLACE PIVOT BY RECIPROCAL
C
      A(KK)=1.0 E 0/BIGA
   80 CONTINUE
C
C        FINAL ROW AND COLUMN INTERCHANGE
C
      K=N
  100 K=(K-1)
      IF(K) 150,150,105
  105 I=L(K)
      IF(I-K) 120,120,108
  108 JQ=N*(K-1)
      JR=N*(I-1)
      DO 110 J=1,N
      JK=JQ+J
      HOLD=A(JK)
      JI=JR+J
      A(JK)=-A(JI)
  110 A(JI) =HOLD
  120 J=M(K)
      IF(J-K) 100,100,125
  125 KI=K-N
      DO 130 I=1,N
      KI=KI+N
      HOLD=A(KI)
      JI=KI-K+J
      A(KI)=-A(JI)
  130 A(JI) =HOLD
      GO TO 100
  150 RETURN
      END
      SUBROUTINE RMSGT(Q,X,Y,W,DEL,R)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    RMSGT       COMPUTES ROOT MEAN SQUARE.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-25
C
C ABSTRACT: COMPUTES THE ROOT MEAN SQUARE IN EACH LEVEL AND OF
C   THE VERTICAL INTEGRAL (WHEN APPROPRIATE) GIVEN THE SPECTRAL
C   COEFFICIENTS OF THE MODEL VARIABLES OR THE TENDENCIES.
C   THE RESULTS ARE PRINTED.  RMSGT IS STRICTLY DIAGNOSTIC.
C
C PROGRAM HISTORY LOG:
C   88-04-25  JOSEPH SELA
C
C USAGE:    CALL RMSGT (Q, X, Y, W, DEL, R)
C   INPUT ARGUMENT LIST:
C     Q        - SPECTRAL COEFS OF LN(PSFC)     OR ITS TENDENCY.
C     X        - SPECTRAL COEFS OF DIVERGENCE   OR ITS TENDENCY.
C     Y        - SPECTRAL COEFS OF TEMPERATURE  OR ITS TENDENCY.
C     W        - SPECTRAL COEFS OF VORTICITY    OR ITS TENDENCY.
C     DEL      - SIGMA SPACING AT EACH LAYER.
C     R        - SPECTRAL COEFS OF MIXING RATIO OR ITS TENDENCY.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION Q( 4033 ),X( 4033 , 28 ),Y( 4033 , 28 )
      DIMENSION W( 4033 , 28 ),R( 4033 , 28 )
      DIMENSION
     1RX( 28 ),RY( 28 ),RW( 28 ),DEL( 28 ),RR( 28 )
      VR=0. E 0
      VX=0. E 0
      VY=0. E 0
      VW=0. E 0
      DO 10 K=1, 28
      CALL BARTRI(X(1,K),X(1,K),RX(K))
      CALL BARTRI(Y(1,K),Y(1,K),RY(K))
      CALL BARTRI(W(1,K),W(1,K),RW(K))
      VX=VX+RX(K)*DEL(K)
      VY=VY+RY(K)*DEL(K)
      VW=VW+RW(K)*DEL(K)
10    CONTINUE
      DO 20 K=1, 28
      CALL BARTRI(R(1,K),R(1,K),RR(K))
      VR=VR+RR(K)*DEL(K)
20    CONTINUE
      CALL BARTRI(Q,Q,RQ)
C     PRINT 50
C50   FORMAT(1H ,'BEGIN RMSGT')
      PRINT 100,VX,VW,VY,VR,RQ
100   FORMAT(1H0,'DIV VORT TEMP MIXRATIO LN(PS) IBM SEDER ',5(E13.7,1X))
200   FORMAT(1H ,4(2X,E13.7))
      DO 40 K=1, 28
      IF(K.GT. 28 )GO TO 35
      PRINT 200,RX(K),RW(K),RY(K),RR(K)
      GO TO 39
35    CONTINUE
      PRINT 200,RX(K),RW(K),RY(K)
39    CONTINUE
40    CONTINUE
C     PRINT 300
C300  FORMAT(1H ,'END RMSGT')
      RETURN
      END
      SUBROUTINE BARTRI (F, G, FGBAR)
      DIMENSION F( 4033 ),G( 4033 )
C
      JOFF(N,L)=( 63 )*( 64 )-( 63 -L)*( 64 -L)+2*(N-L)
C
      L=0
      FGBAR = 0.
      DO 1 N=0,  62
      FGBAR = FGBAR + F(JOFF(N,L)+1)*G(JOFF(N,L)+1)
1     CONTINUE
      DO 11 N=0,  62
      FGBAR = FGBAR + F(JOFF(N,L)+2)*G(JOFF(N,L)+2)
11    CONTINUE
      FGBAR=FGBAR*0.5
      DO 3 L=1,  62
      DO 2 N=L,  62
      FGBAR = FGBAR + F(JOFF(N,L)+1)*G(JOFF(N,L)+1)
2     CONTINUE
      DO 22 N=L,  62
      FGBAR = FGBAR + F(JOFF(N,L)+2)*G(JOFF(N,L)+2)
22    CONTINUE
3     CONTINUE
      FGBAR = SQRT(FGBAR)
      RETURN
      END
      SUBROUTINE CMPIND
C
      PARAMETER(MWAVE= 62 ,IROMB= 0 )
C
      PARAMETER(MWAVEP=MWAVE+1,
     1          MDIM=(MWAVE+1)*(MWAVE+1)*2*IROMB+
     2               (MWAVE+1)*(MWAVE+2)*(1-IROMB))
C
      COMMON/COMIND/ INDXNN(MDIM),INDXMM(MDIM)
C
C  INDXNN(MDIM) :  1-D INDEX OF CONVERTING INPUT FORM SPHER COEFF ARRAY
C                  TO TRANSPOSED FORM ARRAY
C  INDXMM(MDIM) :  1-D INDEX OF CONVERTING TRANSPOSED FORM SPHER COEFF
C                  ARRAY TO INPUT FORM SPHERICAL COEFF ARRAY
C
      IF(IROMB.EQ.0) THEN
      L=0
      DO 10 M=1,MWAVEP
      NEND=MWAVEP-M+1
      DO 10 NN=1,NEND
      N=NN+M-1
      L=L+2
      INDX=(MWAVEP*(N-M)-(N-M)*(N-M-1)/2+M)*2-1
      INDXNN(L-1)=INDX
      INDXNN(L  )=INDX+1
   10 CONTINUE
C
      L=0
      DO 20 NN=1,MWAVEP
      LLN=MWAVEP-NN+1
      DO 20 LL=1,LLN
      N=LL+NN-1
      M=LL
      INDX=(M*MWAVEP-(MWAVEP-N)-(M-1)*M/2)*2-1
      L=L+2
      INDXMM(L-1)=INDX
      INDXMM(L  )=INDX+1
   20 CONTINUE
      RETURN
      ENDIF
C
      IF(IROMB.EQ.1) THEN
      L=0
      DO 30 M=1,MWAVEP
      DO 30 NN=1,MWAVEP
      N=NN+M-1
      INDX=((N-M)*MWAVEP+M)*2-1
      L=L+2
      INDXNN(L-1)=INDX
      INDXNN(L  )=INDX+1
   30 CONTINUE
C
      L=0
      DO 40 NN=1,MWAVEP
      DO 40 LL=1,MWAVEP
      N=LL+NN-1
      M=LL
      INDX=(MWAVEP*(M-1)+N-M+1)*2-1
      L=L+2
      INDXMM(L-1)=INDX
      INDXMM(L  )=INDX+1
   40 CONTINUE
      RETURN
      ENDIF
C
      END
      SUBROUTINE TRANSI(A,KMAX)
C
      PARAMETER(MWAVE= 62 ,IROMB= 0 )
C
      PARAMETER(MWAVEP=MWAVE+1,
     1          MDIM=(MWAVE+1)*(MWAVE+1)*2*IROMB+
     2               (MWAVE+1)*(MWAVE+2)*(1-IROMB))
C
      COMMON/COMIND/ INDXNN(MDIM),INDXMM(MDIM)
C
      DIMENSION A(MDIM,KMAX)
      DIMENSION B(MDIM)
C
      DO 1 K=1,KMAX
      DO 2 M=1,MDIM
      B(INDXNN(M))=A(M,K)
    2 CONTINUE
      DO 3 M=1,MDIM
      A(M,K)=B(M)
    3 CONTINUE
    1 CONTINUE
C
      RETURN
      END
      SUBROUTINE TRANSO(A,KMAX)
C
      PARAMETER(MWAVE= 62 ,IROMB= 0 )
C
      PARAMETER(MWAVEP=MWAVE+1,
     1          MDIM=(MWAVE+1)*(MWAVE+1)*2*IROMB+
     2               (MWAVE+1)*(MWAVE+2)*(1-IROMB))
C
      COMMON/COMIND/ INDXNN(MDIM),INDXMM(MDIM)
C
      DIMENSION A(MDIM,KMAX)
      DIMENSION B(MDIM)
C
      DO 10 K=1,KMAX
      DO 11 M=1,MDIM
      B(INDXMM(M))=A(M,K)
   11 CONTINUE
      DO 12 M=1,MDIM
      A(M,K)=B(M)
   12 CONTINUE
   10 CONTINUE
C
      RETURN
      END
      SUBROUTINE FILTR1(TEM,TE,DIM,DI,ZEM,ZE,RM,RQ,FILTA)
      DIMENSION
     1  TE( 4033 , 28 ), DI( 4033 , 28 ), ZE( 4033 , 28 ),
     1 TEM( 4033 , 28 ),DIM( 4033 , 28 ),ZEM( 4033 , 28 ),
     1  RM( 4033 , 28 ), RQ( 4033 , 28 )
      FILTB = (1.-FILTA)*0.5
      DO 4900 K=1, 28
      DO 4900 J=1, 4032
      TEM(J,K)=FILTB*TEM(J,K)+FILTA*TE(J,K)
      DIM(J,K)=FILTB*DIM(J,K)+FILTA*DI(J,K)
      ZEM(J,K)=FILTB*ZEM(J,K)+FILTA*ZE(J,K)
      RQ(J,K)=FILTB*RM(J,K)+FILTA*RQ(J,K)
4900  CONTINUE
      RETURN
      END
      SUBROUTINE FILTR2(TEM,TE,Y,DIM,DI,X,ZEM,ZE,W,RM,RQ,RT,FILTA)
      DIMENSION
     1  TE( 4033 , 28 ), DI( 4033 , 28 ), ZE( 4033 , 28 ),
     1 TEM( 4033 , 28 ),DIM( 4033 , 28 ),ZEM( 4033 , 28 ),
     1   Y( 4033 , 28 ),  X( 4033 , 28 ),  W( 4033 , 28 ),
     1  RQ( 4033 , 28 ), RT( 4033 , 28 ), RM( 4033 , 28 )
      FILTB = (1.-FILTA)* 0.5
      DO 4900 K=1, 28
      DO 4900 J=1, 4032
      TEM(J,K)=TEM(J,K)+FILTB*Y(J,K)
      TE(J,K)=Y(J,K)
C.......
      DIM(J,K)=DIM(J,K)+FILTB*X(J,K)
      DI(J,K)=X(J,K)
C.......
      ZEM(J,K)=ZEM(J,K)+FILTB*W(J,K)
      ZE(J,K)=W(J,K)
C.......
      RM(J,K)=RQ(J,K)+FILTB*RT(J,K)
      RQ(J,K)=RT(J,K)
4900  CONTINUE
      RETURN
      END
      SUBROUTINE FIXIO (FHOUR,TSEA,SMC,SHELEG,STC,TG3,ZORL,PLANTR,
     &            CV,CVB,CVT,SLMSK,F10M,CANOPY,IOFLAG,NREAD,NWRIT)
      DIMENSION IDATE(4)
      integer*4 idate4(4)
      CHARACTER*8 LABEL(4)
      DIMENSION TSEA  ( 384 , 47 ), SMC ( 384 , 47 , 2 ),
     &          SHELEG( 384 , 47 ), STC ( 384 , 47 , 2 ),
     &          TG3   ( 384 , 47 ),
     &          ZORL  ( 384 , 47 ), SLMSK ( 384 , 47 ),
     &          CV    ( 384 , 47 ), CVB   ( 384 , 47 ),
     &          CVT   ( 384 , 47 ), PLANTR( 384 , 47 ),
     &          F10M  ( 384 , 47 ),CANOPY( 384 , 47 )
      DIMENSION WORK( 384 * 47 )
C
C
C  IOFLAG = 0  ...  READ FIXED FIELD FROM UNIT NREAD
C  IOFLAG = 1  ...  WRITE FIXED FIELD TO UNIT NWRIT
C
      LOLA =  384  *  47
      IF(IOFLAG.EQ.0) THEN
      REWIND NREAD
      READ(NREAD) LABEL
c     READ(NREAD) GHOUR, IDATE
      READ(NREAD) GHOUR, idate4
      idate = idate4
      if (idate(4) .lt. 100) idate(4)=idate(4)+1900
99    FORMAT(1H ,'FHOUR, IDATE=',F6.2,2X,4(1X,I4))
      PRINT *,'FIX FIELD READ IN FROM UNIT=',NREAD
      PRINT 99,FHOUR, IDATE
      READ(NREAD) TSEA
      READ(NREAD) SMC
      READ(NREAD) SHELEG
      READ(NREAD) STC
      READ(NREAD) TG3
      READ(NREAD) ZORL
C
C  SKIP CV, CVB, CVT, ALBEDO
C
      READ(NREAD)
      READ(NREAD)
      READ(NREAD)
      READ(NREAD)
      READ(NREAD) SLMSK
      READ(NREAD) PLANTR
      READ(NREAD,ERR=5000) CANOPY
C     READ(NREAD,ERR=5000) F10M
C
      CALL ROW1NS(TSEA)
      CALL ROW1NS(SHELEG)
      CALL ROW1NS(TG3)
      CALL ROW1NS(ZORL)
      CALL ROW1NS(PLANTR)
      CALL ROW1NS(SLMSK)
      CALL ROW1NS(CANOPY)
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = SMC(I,J,K)
          ENDDO
        ENDDO
        CALL ROW1NS(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            SMC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = STC(I,J,K)
          ENDDO
        ENDDO
        CALL ROW1NS(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            STC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
C
      PRINT 101,FHOUR,IDATE,LOLA
101   FORMAT(1H ,'IN FIXIO FHOUR IDATE LOLA=',F6.2,2X,4(1X,I4),2X,I5)
      ELSE
      CALL ROWSEP(TSEA)
      CALL ROWSEP(SHELEG)
      CALL ROWSEP(TG3)
      CALL ROWSEP(ZORL)
      CALL ROWSEP(CV)
      CALL ROWSEP(CVB)
      CALL ROWSEP(CVT)
      CALL ROWSEP(SLMSK)
      CALL ROWSEP(F10M)
      CALL ROWSEP(CANOPY)
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = SMC(I,J,K)
          ENDDO
        ENDDO
        CALL ROWSEP(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            SMC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = STC(I,J,K)
          ENDDO
        ENDDO
        CALL ROWSEP(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            STC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
C
      REWIND NREAD
      REWIND NWRIT
      READ(NREAD) LABEL
      WRITE(NWRIT) LABEL
c     READ(NREAD) GHOUR, IDATE
      READ(NREAD) GHOUR, idate4
      idate = idate4
      if (idate(4) .lt. 100) idate(4)=idate(4)+1900
      idate4(4) = idate(4)
      PRINT *,'FIX FIELD READ IN FROM UNIT=',NREAD
c     PRINT 99,FHOUR, IDATE
      PRINT 99,FHOUR, idate4
c     WRITE(NWRIT) FHOUR, IDATE
      WRITE(NWRIT) FHOUR, idate4
      READ(NREAD)
      WRITE(NWRIT) TSEA
      READ(NREAD)
      WRITE(NWRIT) SMC
      READ(NREAD)
      WRITE(NWRIT) SHELEG
      READ(NREAD)
      WRITE(NWRIT) STC
      READ(NREAD)  WORK
      WRITE(NWRIT) WORK
      READ(NREAD)
      WRITE(NWRIT) ZORL
      READ(NREAD)
      WRITE(NWRIT) CV
      READ(NREAD)
      WRITE(NWRIT) CVB
      READ(NREAD)
      WRITE(NWRIT) CVT
      READ(NREAD) WORK
      WRITE(NWRIT) WORK
      READ(NREAD)
      WRITE(NWRIT) SLMSK
      READ(NREAD) WORK
      WRITE(NWRIT) WORK
C     READ(NREAD)
      WRITE(NWRIT) CANOPY
      WRITE(NWRIT) F10M
C
      CALL ROW1NS(TSEA)
      CALL ROW1NS(SHELEG)
      CALL ROW1NS(TG3)
      CALL ROW1NS(ZORL)
      CALL ROW1NS(CV)
      CALL ROW1NS(CVB)
      CALL ROW1NS(CVT)
      CALL ROW1NS(SLMSK)
      CALL ROW1NS(F10M)
      CALL ROW1NS(CANOPY)
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = SMC(I,J,K)
          ENDDO
        ENDDO
        CALL ROW1NS(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            SMC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
      DO K = 1,  2
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            WORK(IJ) = STC(I,J,K)
          ENDDO
        ENDDO
        CALL ROW1NS(WORK)
        DO J = 1,  47
          DO I = 1,  384
            IJ = (J-1) *  384  + I
            STC(I,J,K) = WORK(IJ)
          ENDDO
        ENDDO
      ENDDO
C
100   FORMAT(1H ,'OUT FIXIO FHOUR IDATE LOLA=',F6.2,2X,4(1X,I4),2X,I5)
103   FORMAT(1H ,'SHALOM FROM FIXIO BENCH NWRIT=',I2)
      PRINT 100,FHOUR,IDATE,LOLA
      PRINT 103,NWRIT
      ENDIF
C
      RETURN
 5000 PRINT *, ' ERROR IN INPUT IN FIXIO'
      STOP
      END
      SUBROUTINE GRDWAT
      CALL GPVS
      CALL GTDP
      CALL GTHE
      CALL GTMA
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GPVS
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GPVS         COMPUTE SATURATION VAPOR PRESSURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE SATURATION VAPOR PRESSURE TABLE AS A FUNCTION OF
C   TEMPERATURE FOR FUNCTION FPVS. THE WATER MODEL ASSUMES A PERFECT GAS
C   CONSTANT SPECIFIC HEATS FOR GAS AND LIQUID, AND NEGLECTS
C   THE VOLUME OF THE LIQUID. THE ICE OPTION IS NO LONGER INCLUDED.
C   THE MODEL DOES ACCOUNT FOR THE VARIATION OF THE LATENT HEAT
C   OF CONDENSATION WITH TEMPERATURE. THE CLAUSIUS-CLAPEYRON EQUATION
C   IS INTEGRATED FROM THE TRIPLE POINT TO GET THE FORMULA
C       PVS=PSATK*(TR**XA)*EXP(XB*(1.-TR))
C   WHERE TR IS TTP/T AND OTHER VALUES ARE PHYSICAL CONSTANTS
C   DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A LENGTH
C   OF 1501 FOR TEMPERATURES RANGING FROM 180. TO 330. KELVIN.
C
C USAGE:  CALL GPVS
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMPVS   - SCALING PARAMETERS AND TABLE FOR FUNCTION FPVS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=1501)
      DIMENSION TBPVS(NX)
      COMMON/COMPVS/ C1XPVS,C2XPVS,ANXPVS,TBPVS
C-----------------------------------------------------------------------
      XMIN=180.0
      XMAX=330.0
      XINC=(XMAX-XMIN)/(NX-1)
      C1XPVS=1.-XMIN/XINC
      C2XPVS=1./XINC
      ANXPVS=NX-0.01
      DO 10 JX=1,NX
        X=XMIN+(JX-1)*XINC
        T=X
        TR=TTP/T
        TBPVS(JX)=PSATK*(TR**XA)*EXP(XB*(1.-TR))
10    CONTINUE
      PRINT 90,XMIN,XMAX,XINC
90    FORMAT(' GPVS. SATURATION VAPOR PRESSURE TABLE CREATED'/
     &       '       FOR TEMPERATURE RANGE AND INCREMENT OF ',3F8.3)
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTDP
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTDP         COMPUTE DEWPOINT TEMPERATURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE DEWPOINT TEMPERATURE TABLE AS A FUNCTION OF
C   VAPOR PRESSURE FOR FUNCTION FTDP. THE WATER MODEL ASSUMES
C   A PERFECT GAS, CONSTANT SPECIFIC HEATS FOR GAS AND LIQUID,
C   AND NEGLECTS THE VOLUME OF THE LIQUID AND ICE FORMATION.
C   THE MODEL DOES ACCOUNT FOR THE VARIATION OF THE LATENT HEAT
C   OF CONDENSATION WITH TEMPERATURE. THE CLAUSIUS-CLAPEYRON EQUATION
C   IS INTEGRATED FROM THE TRIPLE POINT TO GET THE FORMULA
C   FOR SATURATION VAPOR PRESSURE PVS AS A FUNCTION OF TEMPERATURE T
C       PVS=PSATK*(TR**XA)*EXP(XB*(1.-TR))
C   WHERE TR IS TTP/T AND OTHER VALUES ARE PHYSICAL CONSTANTS
C   DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE FORMULA IS INVERTED BY ITERATING NEWTONIAN APPROXIMATIONS
C   FOR EACH PVS UNTIL T IS FOUND TO WITHIN 1.E-6 KELVIN.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A LENGTH
C   OF 1000 FOR VAPOR PRESSURES RANGING FROM 0.02 TO 8.00 KILOPASCALS,
C   GIVING A DEWPOINT TEMPERATURE RANGE OF 233.6 TO 314.7 KELVIN.
C
C USAGE:  CALL GTDP
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMTDP   - SCALING PARAMETERS AND TABLE FOR FUNCTION FTDP.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=1000)
      DIMENSION TBTDP(NX)
      COMMON/COMTDP/ C1XTDP,C2XTDP,ANXTDP,TBTDP
C-----------------------------------------------------------------------
      XMIN=0.02
      XMAX=8.00
      XINC=(XMAX-XMIN)/(NX-1)
      C1XTDP=1.-XMIN/XINC
      C2XTDP=1./XINC
      ANXTDP=NX-0.01
      TERRM=1.E-6
      T=TTP
      DO 20 JX=1,NX
        X=XMIN+(JX-1)*XINC
        PV=X
10      CONTINUE
          TR=TTP/T
          PVT=PSATK*(TR**XA)*EXP(XB*(1.-TR))
          EL=HVAP+DLDT*(T-TTP)
          DPVT=EL*PVT/(RV*T**2)
          TERR=(PVT-PV)/DPVT
          T=T-TERR
        IF(TERR.GT.TERRM) GOTO 10
        TBTDP(JX)=T
20    CONTINUE
      PRINT 90,XMIN,XMAX,XINC
90    FORMAT(' GTDP. DEWPOINT TEMPERATURE TABLE CREATED'/
     &       '       FOR VAPOR PRESSURE RANGE AND INCREMENT OF ',3F8.3)
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTHE
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTHE        COMPUTE EQUIVALENT POTENTIAL TEMPERATURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE EQUIVALENT POTENTIAL TEMPERATURE TABLE
C   AS A FUNCTION OF LCL TEMPERATURE AND PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER FOR FUNCTION FTHE. ROSSBY SHOWED THAT THE
C   EQUIVALENT POTENTIAL TEMPERATURE IS CONSTANT FOR A SATURATED PARCEL
C   RISING ADIABATICALLY UP A MOIST ADIABAT WHEN THE HEAT AND MASS
C   OF THE CONDENSED WATER ARE NEGLECTED. THE FORMULA FOR
C   EQUIVALENT POTENTIAL TEMPERATURE (DERIVED IN HOLTON) IS
C       THE=T*(PD**(-ROCP))*EXP(EL*EPS*PV/(CP*T*PD))
C   WHERE T IS THE TEMPERATURE, PV IS THE SATURATED VAPOR PRESSURE,
C   PD IS THE DRY PRESSURE P-PV, EL IS THE TEMPERATURE DEPENDENT
C   LATENT HEAT OF CONDENSATION HVAP+DLDT*(T-TTP), AND OTHER VALUES
C   ARE PHYSICAL CONSTANTS DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A FIRST DIMENSION
C   OF 41 FOR TEMPERATURES RANGING FROM 253.16 TO 303.16 KELVIN
C   AND A SECOND DIMENSION OF 10 FOR PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER RANGING FROM 0.5**ROCP TO 1.1**ROCP.
C
C USAGE:  CALL GTHE
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMTHE   - SCALING PARAMETERS AND TABLE FOR FUNCTION FTHE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(ROCP=RD/CP,CPOR=CP/RD,PSATB=PSATK*1.E-2,EPS=RD/RV,
     &          DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=41,NY=10)
      DIMENSION TBTHE(NX,NY)
      COMMON/COMTHE/ C1XTHE,C2XTHE,ANXTHE,C1YTHE,C2YTHE,ANYTHE,TBTHE
C-----------------------------------------------------------------------
      XMIN=TTP-20.
      XMAX=TTP+30.
      XINC=(XMAX-XMIN)/(NX-1)
      C1XTHE=1.-XMIN/XINC
      C2XTHE=1./XINC
      ANXTHE=NX-0.01
      YMIN=0.5**ROCP
      YMAX=1.1**ROCP
      YINC=(YMAX-YMIN)/(NY-1)
      C1YTHE=1.-YMIN/YINC
      C2YTHE=1./YINC
      ANYTHE=NY-0.01
      DO 20 JY=1,NY
        Y=YMIN+(JY-1)*YINC
        P=Y**CPOR
        DO 10 JX=1,NX
          X=XMIN+(JX-1)*XINC
          T=X
          TR=TTP/T
          PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
          PD=P-PV
          EL=HVAP+DLDT*(T-TTP)
          EXPO=EL*EPS*PV/(CP*T*PD)
          TBTHE(JX,JY)=T*PD**(-ROCP)*EXP(EXPO)
10      CONTINUE
20    CONTINUE
      PRINT 90,XMIN,XMAX,XINC,YMIN,YMAX,YINC
90    FORMAT(' GTHE. EQUIVALENT POTENTIAL TEMPERATURE TABLE CREATED'/
     &       '       FOR TEMPERATURE RANGE AND INCREMENT OF ',3F8.3/
     &       '       AND P**KAPPA RANGE AND INCREMENT OF ',3F8.5)
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTMA
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTMA         COMPUTE MOIST ADIABAT TABLES
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AND SPECIFIC HUMIDITY TABLES
C   AS A FUNCTION OF EQUIVALENT POTENTIAL TEMPERATURE AND
C   PRESSURE OVER 100 KPA TO THE KAPPA POWER FOR FUNCTION FTMA.
C   EQUIVALENT POTENTIAL TEMPERATURE IS CONSTANT FOR A SATURATED PARCEL
C   RISING ADIABATICALLY UP A MOIST ADIABAT WHEN THE HEAT AND MASS
C   OF THE CONDENSED WATER ARE NEGLECTED. THE FORMULA FOR
C   EQUIVALENT POTENTIAL TEMPERATURE (DERIVED IN HOLTON) IS
C       THE=T*(PD**(-ROCP))*EXP(EL*EPS*PV/(CP*T*PD))
C   WHERE T IS THE TEMPERATURE, PV IS THE SATURATED VAPOR PRESSURE,
C   PD IS THE DRY PRESSURE P-PV, EL IS THE TEMPERATURE DEPENDENT
C   LATENT HEAT OF CONDENSATION HVAP+DLDT*(T-TTP), AND OTHER VALUES
C   ARE PHYSICAL CONSTANTS DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE FORMULA IS INVERTED BY ITERATING NEWTONIAN APPROXIMATIONS
C   FOR EACH THE AND P UNTIL T IS FOUND TO WITHIN 1.E-4 KELVIN.
C   THE SPECIFIC HUMIDITY IS THEN COMPUTED FROM PV AND PD.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A FIRST DIMENSION
C   OF 41 FOR EQUIVALENT POTENTIAL TEMPERATURES RANGING FROM 248 TO 500
C   KELVIN AND A SECOND DIMENSION OF 41 FOR PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER RANGING FROM 0.05**ROCP TO 1.1**ROCP.
C
C USAGE:  CALL GTMA
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMTHE   - SCALING PARAMETERS AND TABLE FOR FUNCTION FTHE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(ROCP=RD/CP,CPOR=CP/RD,PSATB=PSATK*1.E-2,EPS=RD/RV,
     &          DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=41,NY=41)
      DIMENSION TBTMA(NX,NY),TBQMA(NX,NY)
      COMMON/COMMA/ C1XMA,C2XMA,ANXMA,C1YMA,C2YMA,ANYMA,TBTMA,TBQMA
C-----------------------------------------------------------------------
      XMIN=248.
      XMAX=500.
      XINC=(XMAX-XMIN)/(NX-1)
      C1XMA=1.-XMIN/XINC
      C2XMA=1./XINC
      ANXMA=NX-0.01
      YMIN=0.05**ROCP
      YMAX=1.1**ROCP
      YINC=(YMAX-YMIN)/(NY-1)
      C1YMA=1.-YMIN/YINC
      C2YMA=1./YINC
      ANYMA=NY-0.01
      TERRM=1.E-4
      DO 30 JY=1,NY
        Y=YMIN+(JY-1)*YINC
        P=Y**CPOR
        T=XMIN*Y
        DO 20 JX=1,NX
          X=XMIN+(JX-1)*XINC
          THE=X
10        CONTINUE
            TR=TTP/T
            PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
            PD=P-PV
            EL=HVAP+DLDT*(T-TTP)
            EXPO=EL*EPS*PV/(CP*T*PD)
            THET=T*PD**(-ROCP)*EXP(EXPO)
            DTHET=THET/T*(1.+EXPO*(DLDT*T/EL+EL*P/(RV*T*PD)))
            TERR=(THET-THE)/DTHET
            T=T-TERR
          IF(ABS(TERR).GT.TERRM) GOTO 10
          TR=TTP/T
          PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
          PD=P-PV
          Q=EPS*PV/(PD+EPS*PV)
          TBTMA(JX,JY)=T
          TBQMA(JX,JY)=Q
20      CONTINUE
30    CONTINUE
      PRINT 90,XMIN,XMAX,XINC,YMIN,YMAX,YINC
90    FORMAT(' GTMA. MOIST ADIABAT TEMPERATURE AND',
     &             ' SPECIFIC HUMIDITY TABLES CREATED'/
     &       '       FOR EQUIVALENT POTENTIAL TEMPERATURE',
     &             ' RANGE AND INCREMENT OF ',3F8.3/
     &       '       AND P**KAPPA RANGE AND INCREMENT OF ',3F8.5)
      RETURN
      END
      SUBROUTINE GETRAD(N,UGM,VGM,SFCNSW,SFCDLW,CZMN,SDEC,CDEC,SLAG,
     1                  SWH,HLW)
      DIMENSION
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * CZMN( 384 , 47 ),
     * UGM( 384 , 28 , 47 ),
     * VGM( 384 , 28 , 47 )
C....
      SDEC=0. E 0
      REWIND N
        READ(N)UGM,VGM,SFCNSW,SFCDLW,CZMN,SDEC,CDEC,SLAG
      REWIND N
      PRINT 100,SDEC,CDEC,SLAG
100   FORMAT(1H ,'SDEC,CDEC, SLAG IN GETRAD=',3E12.3)
      CALL ROW1NS(SFCNSW)
      CALL ROW1NS(SFCDLW)
      CALL ROWSNS(UGM,SWH)
      CALL ROWSNS(VGM,HLW)
C
      RETURN
      END
      SUBROUTINE WRTSFC(FHOUR,THOUR,IDATE,NN,SLMASK,COLRAB,
     1                  DUSFC,DVSFC,DTSFC,DQSFC,TSEA,SOILM,SHELEG,
     2                  DSWSFC,DLWSFC,GESHEM,BENGSH,GFLUX,
     3                  FLUXR,ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     4                  U10,V10,T2,Q2,PSURF,ZORL,TMPMAX,TMPMIN,
     5                  SNOWFALL,SNOWEVAP,SNOWMELT,
     &                  RUNOFF,EP,CLDWRK,DUGWD,DVGWD,PWAT)
C 05/31/96 MK SNOWFALL,SNOWEVAP,SNOWMELT ADDED ABOVE
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
      PARAMETER(IPRS=1,ITEMP=11,IZNLW=33,IMERW=34,ISPHUM=51,IPWAT=54,
creanl2     $          IPCPR=59,ISNOWD=65,ICLDF=71,ICCLDF=72,
     $          IPCPR=59,ISNOWD=65,ICLDF=71,ICCLDF=72,IRHCLD=225,
     $          ISLMSK=81,IZORL=83,IALBDO=84,ISOILM=144,ICEMSK=91,
     $          ILHFLX=121,ISHFLX=122,IZWS=124,IMWS=125,IGHFLX=155,
     $          IUSWFC=160,IDSWFC=161,IULWFC=162,IDLWFC=163,
     $          INSWFC=164,INLWFC=165,
     $          IDSWVB=166,IDSWVD=167,IDSWNB=168,IDSWND=169,
     $          ITMX=15,ITMN=16,IRNOF=90,IEP=145,
C 06/03/96 MK 1 LINE ADDED BELOW
     $          ISNWFLL=64,ISNWEVP=230,ISNWMLT=229,
     &          ICLDWK=146,IZGW=147,IMGW=148,
     $          IDSWF=204,IDLWF=205,IUSWF=211,IULWF=212,ICPCPR=214)
      PARAMETER(ISFC=1,ITOA=8,IELEV=105,ISGLEV=107,IDBLS=111,I2DBLS=112,
     $          ICOLMN=200,
     $          ILCBL=212,ILCTL=213,ILCLYR=214,
     $          IMCBL=222,IMCTL=223,IMCLYR=224,
     $          IHCBL=232,IHCTL=233,IHCLYR=234)
      PARAMETER(INST=10,IAVG=3,IACC=4)
      PARAMETER(IFHOUR=1,IFDAY=2)
      PARAMETER(LONB2= 384 ,LATB2= 47 )
      PARAMETER(LONR2= 256 ,LATR2= 31 )
      PARAMETER(LONB=LONB2/2,LATB=LATB2*2,LEN=LONB*LATB)
      LOGICAL   LBM(LEN)
      CHARACTER G(200+LEN*(16+1)/8)
      PARAMETER(NFLD=16)
      parameter(ireanl=6)
      integer ipurr(ireanl),itlrr(ireanl)
      INTEGER   IPUR(NFLD),ITLR(NFLD)
      DATA      IPUR/IULWF , IUSWF , IUSWF , IDSWF ,  ICLDF,   IPRS,
     $               IPRS, ITEMP ,  ICLDF,   IPRS,   IPRS, ITEMP ,
     $               ICLDF,   IPRS,   IPRS, ITEMP /
      DATA      ITLR/ITOA  , ITOA  , ISFC  , ISFC  , IHCLYR, IHCTL ,
     $               IHCBL , IHCTL , IMCLYR, IMCTL , IMCBL , IMCTL ,
     $               ILCLYR, ILCTL , ILCBL , ILCTL /
      DATA     IPURR/ICCLDF, iccldf, iccldf, irhcld, irhcld, irhcld/
      DATA     ITLRR/ihclyr, imclyr, ilclyr, ihclyr, imclyr, ilclyr/
      INTEGER       IDATE(4)
      DIMENSION    SLMASK(LEN)
      DIMENSION    COLRAB(LONB)
      DIMENSION    DUSFC(LEN)
      DIMENSION    DVSFC(LEN)
      DIMENSION    DTSFC(LEN)
      DIMENSION    DQSFC(LEN)
      DIMENSION     TSEA(LEN)
      DIMENSION    SOILM(LEN)
      DIMENSION   SHELEG(LEN)
      DIMENSION   DSWSFC(LEN)
      DIMENSION   DLWSFC(LEN)
      DIMENSION   GESHEM(LEN)
      DIMENSION   BENGSH(LEN)
      DIMENSION   GFLUX(LEN)
      DIMENSION   FLUXR(LONR2,LATR2,31)
      DIMENSION   ILEFT(LONB2),IRGHT(LONB2),WGTLON(LONB2)
      DIMENSION   INSLAT(LATB2),WGTLAT(LATB2)
      DIMENSION   U10  (LEN)
      DIMENSION   V10  (LEN)
      DIMENSION   T2   (LEN)
      DIMENSION   Q2   (LEN)
      DIMENSION   PSURF(LEN)
C 05/31/96 MK 3 LINES BELOW
      DIMENSION   SNOWFALL(LEN)
      DIMENSION   SNOWEVAP(LEN)
      DIMENSION   SNOWMELT(LEN)
      DIMENSION   ZORL (LEN)
      DIMENSION   TMPMAX (LEN)
      DIMENSION   TMPMIN (LEN)
      DIMENSION   RUNOFF (LEN)
      DIMENSION   PWAT (LEN)
      DIMENSION   EP (LEN)
      DIMENSION   CLDWRK (LEN)
      DIMENSION DUGWD(LEN), DVGWD(LEN)
      DIMENSION FLUXF(LEN,4),WORK1(LEN),WORK2(LONB2),SLMSEP(LEN)
      DIMENSION WORKC(LONB2*20),IWORKC(LONB2)
      DIMENSION IDS(255)
C
      REWIND NN
      CALL IDSDEF(1,IDS)
      IYR=IDATE(4)
      IMO=IDATE(2)
      IDA=IDATE(3)
      IHR=IDATE(1)
      IFHR=NINT(FHOUR)
      ITHR=NINT(THOUR)
      IF(THOUR.GT.FHOUR) THEN
        RTIME=1./(3600.*(THOUR-FHOUR))
      ELSE
        RTIME=0.
      ENDIF
      SLMSEP=SLMASK
      CALL ROWSEP(SLMSEP)
CC
      WORK1=DUSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IZWS,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IZWS),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DVSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IMWS,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IMWS),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DTSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISHFLX,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISHFLX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DQSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ILHFLX,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ILHFLX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=TSEA
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ITEMP,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=SOILM
      CALL ROWSEP(WORK1)
      LBM=SLMSEP.EQ.1.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ISOILM,I2DBLS,10,200,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ISOILM),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=SHELEG
      CALL ROWSEP(WORK1)
C     LBM=WORK1.GT.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISNOWD,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ISNOWD),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DSWSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDLWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDLWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DLWSFC*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IULWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IULWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
C.......  FIX FLUXES FOR APPROX DIURNAL CYCLE
      DO 113 K=1,4
        CALL GGINTF(FLUXR(1,1,K),LONR2,LATR2,LATR2,
     1              WORK1,LONB2,LATB2,LATB2,1,
     2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
        WORK1=WORK1*RTIME
        CALL ROWSEP(WORK1)
        CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              0,IPUR(K),ITLR(K),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPUR(K)),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
  113 CONTINUE
C....INTERPOLATE CLD TOP/BOT DATA ONLY FROM THOSE POINTS W/CLDS
C    CARE IS TAKEN NOT TO SPREAD CLOUDS....
      IW1=1
      IW2=IW1+4*LONB2
      IW3=IW2+4*LONB2
      IW4=IW3+4*LONB2
      IW5=IW4+4*LONB2
      DO 813 K=5,7
        DO 413 J=1,LATR2
        DO 413 I=1,LONR2
          IF(FLUXR(I,J,K).GT.0.) THEN
            FLUXR(I,J,K+3) = FLUXR(I,J,K+3) / FLUXR(I,J,K)
            FLUXR(I,J,K+6) = FLUXR(I,J,K+6) / FLUXR(I,J,K)
            FLUXR(I,J,K+9) = FLUXR(I,J,K+9) / FLUXR(I,J,K)
            FLUXR(I,J,K) = FLUXR(I,J,K) * RTIME
          ELSE
C....  ZERO CLD TOP TEMP IF NO CLDS--SAFETY, CAUSE USE ZERO IN GGINTT
            FLUXR(I,J,K+9) = 0.
          END IF
  413   CONTINUE
        CALL CVINTFX(FLUXR(1,1,K),FLUXR(1,1,K+3),FLUXR(1,1,K+6),
     1              LONR2,LATR2,LATR2,
     2              FLUXF(1,1),FLUXF(1,2),FLUXF(1,3),
     3              LONB2,LATB2,LATB2,
     4              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     5              WORKC(IW1),WORKC(IW2),WORKC(IW3),WORKC(IW4),
     6              WORKC(IW5),IWORKC,1,1,1)
C....AVERAGE CLD TOP TEMPS FROM ONLY THE CLOUD-FILLED POINTS...
        CALL GGAVET(FLUXR(1,1,K+9),LONR2,LATR2,LATR2,
     1              FLUXF(1,4),LONB2,LATB2,LATB2,
     2              ILEFT,IRGHT,INSLAT,WGTLAT,
     3              WORKC(IW1),WORKC(IW2),IWORKC,1,1,1)
CKAC    CALL GGINTF(FLUXR(1,1,K+9),LONR2,LATR2,LATR2,
CKAC 1              FLUXF(1,4),LONB2,LATB2,LATB2,1,
CKAC 2              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
        DO 513 J=1,LATR2
        DO 513 I=1,LONR2
          IF(FLUXR(I,J,K).GT.0.) THEN
            FLUXR(I,J,K) = FLUXR(I,J,K) / RTIME
            FLUXR(I,J,K+3) = FLUXR(I,J,K+3) * FLUXR(I,J,K)
            FLUXR(I,J,K+6) = FLUXR(I,J,K+6) * FLUXR(I,J,K)
            FLUXR(I,J,K+9) = FLUXR(I,J,K+9) * FLUXR(I,J,K)
          ELSE
C....  ZERO CLD TOP TEMP IF NO CLDS--SAFETY, CAUSE USE ZERO IN GGINTT
            FLUXR(I,J,K+9) = 0.
          END IF
  513   CONTINUE
C
        K4=4+(K-5)*4
        CALL ROWSEP(FLUXF(1,1))
        FLUXF(:,1)=FLUXF(:,1)*1.E2
        LBM=FLUXF(:,1).GT.0.
        L=K4+1
        CALL GRIBIT(FLUXF(1,1),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              0,IPUR(L),ITLR(L),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPUR(L)),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
        CALL ROWSEP(FLUXF(1,2))
        FLUXF(:,2)=FLUXF(:,2)*1.E3
        L=K4+2
        CALL GRIBIT(FLUXF(1,2),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              1,IPUR(L),ITLR(L),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPUR(L)),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
        CALL ROWSEP(FLUXF(1,3))
        FLUXF(:,3)=FLUXF(:,3)*1.E3
        L=K4+3
        CALL GRIBIT(FLUXF(1,3),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              1,IPUR(L),ITLR(L),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPUR(L)),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
        CALL ROWSEP(FLUXF(1,4))
        L=K4+4
        CALL GRIBIT(FLUXF(1,4),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              1,IPUR(L),ITLR(L),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPUR(L)),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
  813 CONTINUE
CC
      WORK1=GESHEM*1.E3*RTIME
      CALL ROWSEP(WORK1)
C     LBM=WORK1.GT.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IPCPR,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPCPR),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=BENGSH*1.E3*RTIME
      CALL ROWSEP(WORK1)
C     LBM=WORK1.GT.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ICPCPR,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ICPCPR),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=GFLUX*RTIME
      CALL ROWSEP(WORK1)
      LBM=SLMSEP.NE.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,IGHFLX,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IGHFLX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=MOD(SLMSEP,2.)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISLMSK,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ISLMSK),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=MAX(SLMSEP-1.,0.)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ICEMSK,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ICEMSK),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=U10
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IZNLW,IELEV,0,10,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IZNLW),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=V10
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IMERW,IELEV,0,10,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IMERW),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=T2
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ITEMP,IELEV,0,2,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=Q2
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISPHUM,IELEV,0,2,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ISPHUM),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=PSURF*1.E3
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IPRS,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IPRS),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
C-WAV WORK1=ZORL*1.E-2
C-WAV CALL ROWSEP(WORK1)
C-WAV LBM=SLMSEP.EQ.0.
C-WAV CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
C-WAV&            1,IZORL,ISFC,0,0,IYR,IMO,IDA,IHR,
C-WAV&            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IZORL),
C-WAV&            G,LG,IERR)
C-WAV IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=TMPMAX
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ITMX,IELEV,0,2,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ITMX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
C  RESET TMPMAX
C
      TMPMAX = 0.
CC
      WORK1=TMPMIN
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ITMN,IELEV,0,2,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ITMN),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
C  RESET TMPMIN
C
      TMPMIN = 1.E10
CC
      WORK1=RUNOFF * 1.E3
      CALL ROWSEP(WORK1)
      LBM=SLMSEP.NE.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,IRNOF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IRNOF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=EP * RTIME
      CALL ROWSEP(WORK1)
      LBM=SLMSEP.NE.0.
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,IEP,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IEP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=CLDWRK * RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ICLDWK,ICOLMN,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(ICLDWK),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DUGWD*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IZGW,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IZGW),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
CC
      WORK1=DVGWD*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IMGW,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IMGW),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
      WORK1=PWAT
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IPWAT,ICOLMN,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IPWAT),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
C  05/31/96 MK ADD SNOW BUDGETS
C
      WORK1=SNOWFALL*1.E3*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISNWFLL,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISNWFLL),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
      WORK1=SNOWEVAP*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISNWEVP,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISNWEVP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
      WORK1=SNOWMELT*RTIME
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISNWMLT,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISNWMLT),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
C
C  END OF SNOW BUDGETS
C
      CALL GGINTF(FLUXR(1,1,17),LONR2,LATR2,LATR2,
     1            WORK1,LONB2,LATB2,LATB2,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
C  CONVERT TO PERCENT
      WORK1=WORK1*RTIME * 100.
CC
      CALL ROWSEP(WORK1)
      CALL GRIBIT(WORK1,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IALBDO,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFHOUR,ITHR,0,INST,0,0,ICEN2,IDS(IALBDO),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
creanl2    write cv h,m,l then rh-type h,m,l to flux file
      do 1313 krea=1,6
       DO 1413 J=1,LATR2
        DO 1413 I=1,LONR2
          FLUXR(I,J,25+krea) = FLUXR(I,J,25+krea) * RTIME
 1413  CONTINUE
       CALL CVINAMT(FLUXR(1,1,25+krea),
     1              LONR2,LATR2,LATR2,
     2              FLUXF(1,1),
     3              LONB2,LATB2,LATB2,
     4              ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     5              WORKC(IW1),WORKC(IW2),
     6              WORKC(IW5),IWORKC,1,1,1)
C... RESET DATA
       DO 1513 J=1,LATR2
        DO 1513 I=1,LONR2
          FLUXR(I,J,25+krea) = FLUXR(I,J,25+krea) / RTIME
 1513  CONTINUE
C
       CALL ROWSEP(FLUXF(1,1))
       FLUXF(:,1)=FLUXF(:,1)*1.E2
       LBM=FLUXF(:,1).GT.0.
       CALL GRIBIT(FLUXF(1,1),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              0,ipurr(krea),itlrr(krea),0,0,IYR,IMO,IDA,IHR,
     &              IFHOUR,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ipurr(krea)),
     &              G,LG,IERR)
       IF(IERR.EQ.0) CALL WRYTE(NN,LG,G)
 1313 continue
CC
CC
      PRINT *,'GRIB FLUX FILE WRITTEN ',THOUR,IDATE,NN
      RETURN
      END
      SUBROUTINE CVINAMT(CVIN,            IIN,JTWIDL,JIN,
     1                  CVOUT,              IOUT,JPOUT,JOUT,
     2                  ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     3                  XX,WGT,      SUM,NN,
     4                  LTWIDL,LATRD1,LATINB)
C--   *****************************************************************
C     *  CODE BILINEARLY INTERPOLATES CLD AMT BETWEEN GAUSSIAN GRIDS--*
C     *  CLONE OF CVINTFX WITHOUT THE CLOUD TOP/BASE INTERPOLATION    *
C-    *  J = 1 IS JUST BELO N.POLE, I = 1 IS GREENWICH (THEN GO EAST).*
C     * IIN,JIN ARE I,J DIMENSIONS OF INPUT GRID--IOUT,JOUT FOR OUTPUT*
C     * JIN2,JOUT2=JIN/2,JOUT/2                                       *
C     *                           CAMPANA+KATZ+CAMPANA(AGAIN) NOV94   *
C--   *****************************************************************
      DIMENSION CVIN(IIN,JTWIDL)
      DIMENSION CVOUT(IOUT,JPOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION INSLAT(JOUT),WGTLAT(JOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4), SUM(IOUT,4)
      DIMENSION NN(IOUT)
      III = IIN
      JBB = JTWIDL
      JJJ = JIN
      IIIOUT = IOUT
      LBB = LTWIDL
      LR1 = LATRD1
      DO 50 LATOUT=1,JPOUT
       LAT=LATOUT+LATINB-1
CCC     PRINT 100,LAT,XLAT
C===>    IF OUTPUT LAT IS POLEWARD OF INPUT LAT=1 ,THEN SIMPL AVERAGE
C          (SMALL REGION AND CLD AMT WOULDN T EXTRAPOLATE WELL)
       CALL CINPAMT(III,JBB,JJJ,IIIOUT,
     1            ILEFT,IRGHT,WGTLON,INSLAT(LAT),WGTLAT(LAT),
     2            CVIN,            CVOUT(1,LATOUT),
     3            XX,WGT,      SUM,NN,LBB,LR1)
   50 CONTINUE
CK100 FORMAT(1H ,' ROW =',I5,'  LAT =',E15.5)
      RETURN
      END
      SUBROUTINE CINPAMT(IIN,JTWIDL,JIN,IOUT,
     1                 ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     2                 CV,        CAMT,
     3                 XX,WGT,      SUM,NN,LTWIDL,LATRD1)
      DIMENSION CV(IIN,JTWIDL)
      DIMENSION CAMT(IOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4),                      SUM(IOUT,4)
      DIMENSION NN(IOUT)
C..        CLONE OF CINTPX WITHOUT CLDTOP/BASE INTERPOLATION.....
C        SIMPL LINEAR INTERPOLATION OF CLDAMT, UNLESS ONLY 1,2 OF THE
C         SURROUNDING PTS HAS CV. THEN,IF OUTPUT GRIDPT NOT CLOSE ENUF
C         DO NOT INTERPOLATE TO IT(PREVENTS SPREADING OF CLDS)..
C           FOR 1 PT CONVECTION-INTRP WGT GE (.7)**2 ...
C           FOR 2 PT CONVECTION-SUM OF INTRP WGT GE .45...
C              .45 USED RATHER THAN .5 TO GIVE BETTER RESULT FOR
C              DIAGONALLY OPPOSED PTS...
C         NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
C---     NHSH = 1,-1 FOR NORTHERN,SOUTHERN HEMISPHERE
C         HERE INSTEAD OF AN EXTRAPOLATION,JUST DO A SIMPLE MEAN....
C
      IF (INSLAT.LT.0) GO TO 600
      INTH = MOD(LTWIDL + INSLAT - LATRD1 - 1,JTWIDL) + 1
      INTH1 = MOD(INTH,JTWIDL) + 1
      IF (INSLAT.EQ.JIN) GO TO 105
      DO 100 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INTH)
        XX(I,2) = CV(ILEFT(I),INTH1)
        XX(I,3) = CV(IRGHT(I),INTH)
        XX(I,4) = CV(IRGHT(I),INTH1)
        WGT(I,1) = (1.E 0-WGTLON(I))*(1.E 0-WGTLAT)
        WGT(I,2) = (1.E 0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1.E 0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
  100 CONTINUE
      GO TO 130
  105 continue
      DO 110 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INTH)
        XX(I,3) = CV(IRGHT(I),INTH)
        WGT(I,1) = (1.E 0-WGTLON(I))*(1.E 0-WGTLAT)
        WGT(I,2) = (1.E 0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1.E 0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
  110 CONTINUE
      IOUT2 = IOUT / 2
      DO 120 I=1,IOUT2
        XX(I,2) = CV(ILEFT(I+IOUT2),INTH)
        XX(I+IOUT2,2) = CV(ILEFT(I),INTH)
        XX(I,4) = CV(IRGHT(I+IOUT2),INTH)
        XX(I+IOUT2,4) = CV(IRGHT(I),INTH)
  120 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
  130 continue
      DO 10 I=1,IOUT
        NN(I) = 0
   10 CONTINUE
      DO 12 J=1,4
       DO 12 I=1,IOUT
        SUM(I,J) = 0.E0
   12 CONTINUE
        DO 150 KPT=1,4
          DO 14 I=1,IOUT
            IF (XX(I,KPT).GT.0.E0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
            ENDIF
   14     CONTINUE
          DO 15 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   15     CONTINUE
  150   CONTINUE
        DO 16 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.49E0) GO TO 17
          IF (NN(I).EQ.2.AND.SUM(I,1).GE.0.45E0) GO TO 17
          IF (NN(I).GE.3) GO TO 17
            CAMT(I) = 0.E0
            GO TO 18
   17     CONTINUE
            CAMT(I) = SUM(I,4)
   18     CONTINUE
   16   CONTINUE
      RETURN
C--- POLAR REGION-NO EXTRAPOLATION
  600 CONTINUE
      JA = IABS(INSLAT)
      DO 200 I=1,IOUT
C----    GET LEFT POINT ON NEAREST LATITUDE
        XX(I,1) = CV(ILEFT(I),JA)
        XX(I,2) = CV(IRGHT(I),JA)
        WGT(I,1) = 1.E 0-WGTLON(I)
        WGT(I,2) = WGTLON(I)
  200 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
      DO 20 I=1,IOUT
        NN(I) = 0
   20 CONTINUE
      DO 22 J=1,4
       DO 22 I=1,IOUT
        SUM(I,J) = 0.E0
   22 CONTINUE
        DO 202 KPT=1,2
          DO 24 I=1,IOUT
            IF (XX(I,KPT).GT.0.E0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
            ENDIF
   24     CONTINUE
          DO 25 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   25     CONTINUE
  202   CONTINUE
        DO 26 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.7E0) GO TO 27
          IF (NN(I).EQ.2) GO TO 27
            CAMT(I) = 0.E0
            GO TO 28
   27     CONTINUE
            CAMT(I) = SUM(I,4)
   28     CONTINUE
   26   CONTINUE
      RETURN
      END
      SUBROUTINE CVINTFX(CVIN,CVTIN,CVBIN,IIN,JTWIDL,JIN,
     1                  CVOUT,CVTOUT,CVBOUT,IOUT,JPOUT,JOUT,
     2                  ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     3                  XX,WGT,TT,BB,SUM,NN,
     4                  LTWIDL,LATRD1,LATINB)
C--   *****************************************************************
C     *  CODE BILINEARLY INTERPOLATES CLD AMT BETWEEN GAUSSIAN GRIDS--*
C     *  CLONE OF GGINTP FOR INTERPOLATION OF CONVECTIVE CLD AMT (CV).*
C     *    SPECIAL INTERP PROCEDURE FOR TOPS(CVT) AND BOTS(CVB)...    *
C-    *  J = 1 IS JUST BELO N.POLE, I = 1 IS GREENWICH (THEN GO EAST).*
C     * IIN,JIN ARE I,J DIMENSIONS OF INPUT GRID--IOUT,JOUT FOR OUTPUT*
C     * JIN2,JOUT2=JIN/2,JOUT/2                                       *
C     *                                     --K.CAMPANA - JUNE 1988   *
C--   *****************************************************************
      DIMENSION CVIN(IIN,JTWIDL),CVTIN(IIN,JTWIDL),CVBIN(IIN,JTWIDL)
      DIMENSION CVOUT(IOUT,JPOUT)
      DIMENSION CVTOUT(IOUT,JPOUT),CVBOUT(IOUT,JPOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION INSLAT(JOUT),WGTLAT(JOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4),TT(IOUT,4),BB(IOUT,4),SUM(IOUT,4)
      DIMENSION NN(IOUT)
      III = IIN
      JJJ = JIN
      IIIOUT = IOUT
      DO 50 LATOUT=1,JPOUT
      LAT=LATOUT+LATINB-1
CCC     PRINT 100,LAT,XLAT
C===>    IF OUTPUT LAT IS POLEWARD OF INPUT LAT=1 ,THEN SIMPL AVERAGE
C          (SMALL REGION AND CLD AMT WOULDN T EXTRAPOLATE WELL)
      IF(INSLAT(LAT).LT.0) GO TO 70
      INTH = MOD(LTWIDL + INSLAT(LAT) - LATRD1 - 1,JTWIDL) + 1
      CALL CINTPX(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,WGTLON,INTH,WGTLAT(LAT),
     2           CVIN,CVTIN,CVBIN,CVOUT(1,LATOUT),
     3           CVTOUT(1,LATOUT),CVBOUT(1,LATOUT),
     4           XX,WGT,TT,BB,SUM,NN)
      GO TO 50
C---   POLAR REGIONS,NO EXTRAP
   70 CONTINUE
      INTH = IABS(INSLAT(LAT))
      CALL CINTPX(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,WGTLON,INTH,WGTLAT(LAT),
     2           CVIN,CVTIN,CVBIN,CVOUT(1,LATOUT),
     3           CVTOUT(1,LATOUT),CVBOUT(1,LATOUT),
     4           XX,WGT,TT,BB,SUM,NN)
   50 CONTINUE
CK100 FORMAT(1H ,' ROW =',I5,'  LAT =',E15.5)
      RETURN
      END
      SUBROUTINE CINTPX(IIN,JIN,IOUT,
     1                 ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     2                 CV,CVT,CVB,CAMT,CTOP,CBOT,
     3                 XX,WGT,TT,BB,SUM,NN)
      DIMENSION CV(IIN,JIN),CVT(IIN,JIN),CVB(IIN,JIN)
      DIMENSION CAMT(IOUT),CTOP(IOUT),CBOT(IOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4),TT(IOUT,4),BB(IOUT,4),SUM(IOUT,4)
      DIMENSION NN(IOUT)
C        SIMPL LINEAR INTERPOLATION OF CLDAMT, UNLESS ONLY 1,2 OF THE
C         SURROUNDING PTS HAS CV. THEN,IF OUTPUT GRIDPT NOT CLOSE ENUF
C         DO NOT INTERPOLATE TO IT(PREVENTS SPREADING OF CV CLDS)..
C           FOR 1 PT CONVECTION-INTRP WGT GE (.7)**2 ...
C           FOR 2 PT CONVECTION-SUM OF INTRP WGT GE .45...
C              .45 USED RATHER THAN .5 TO GIVE BETTER RESULT FOR
C              DIAGONALLY OPPOSED PTS...
C===>    FOR TOPS(CVT) AND BOTS(CVB) JUST TAKE AVERAGE OF SURROUNDING
C         NON-ZERO CV POINTS.....
C         NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
C---     NHSH = 1,-1 FOR NORTHERN,SOUTHERN HEMISPHERE
C         HERE INSTEAD OF AN EXTRAPOLATION,JUST DO A SIMPLE MEAN....
C
      IF (INSLAT.LT.0) GO TO 600
      IF (INSLAT.EQ.JIN) GO TO 105
      DO 100 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INSLAT)
        XX(I,2) = CV(ILEFT(I),INSLAT+1)
        XX(I,3) = CV(IRGHT(I),INSLAT)
        XX(I,4) = CV(IRGHT(I),INSLAT+1)
        WGT(I,1) = (1. E  0-WGTLON(I))*(1. E  0-WGTLAT)
        WGT(I,2) = (1. E  0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1. E  0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
        TT(I,1) = CVT(ILEFT(I),INSLAT)
        TT(I,2) = CVT(ILEFT(I),INSLAT+1)
        TT(I,3) = CVT(IRGHT(I),INSLAT)
        TT(I,4) = CVT(IRGHT(I),INSLAT+1)
        BB(I,1) = CVB(ILEFT(I),INSLAT)
        BB(I,2) = CVB(ILEFT(I),INSLAT+1)
        BB(I,3) = CVB(IRGHT(I),INSLAT)
        BB(I,4) = CVB(IRGHT(I),INSLAT+1)
  100 CONTINUE
      GO TO 130
  105 continue
      DO 110 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INSLAT)
        XX(I,3) = CV(IRGHT(I),INSLAT)
        WGT(I,1) = (1. E  0-WGTLON(I))*(1. E  0-WGTLAT)
        WGT(I,2) = (1. E  0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1. E  0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
        TT(I,1) = CVT(ILEFT(I),INSLAT)
        TT(I,3) = CVT(IRGHT(I),INSLAT)
        BB(I,1) = CVB(ILEFT(I),INSLAT)
        BB(I,3) = CVB(IRGHT(I),INSLAT)
  110 CONTINUE
      IOUT2 = IOUT / 2
      DO 120 I=1,IOUT2
        XX(I,2) = CV(ILEFT(I+IOUT2),INSLAT)
        XX(I+IOUT2,2) = CV(ILEFT(I),INSLAT)
        XX(I,4) = CV(IRGHT(I+IOUT2),INSLAT)
        XX(I+IOUT2,4) = CV(IRGHT(I),INSLAT)
        BB(I,2) = CVB(ILEFT(I+IOUT2),INSLAT)
        BB(I+IOUT2,2) = CVB(ILEFT(I),INSLAT)
        BB(I,4) = CVB(IRGHT(I+IOUT2),INSLAT)
        BB(I+IOUT2,4) = CVB(IRGHT(I),INSLAT)
        TT(I,2) = CVT(ILEFT(I+IOUT2),INSLAT)
        TT(I+IOUT2,2) = CVT(ILEFT(I),INSLAT)
        TT(I,4) = CVT(IRGHT(I+IOUT2),INSLAT)
        TT(I+IOUT2,4) = CVT(IRGHT(I),INSLAT)
  120 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
CKAC    NN(1;IOUT) = 0
CKAC    SUM(1,1;IOUT*4) = 0. E  0
  130 continue
      DO 10 I=1,IOUT
        NN(I) = 0
   10 CONTINUE
      DO 12 J=1,4
       DO 12 I=1,IOUT
        SUM(I,J) = 0. E 0
   12 CONTINUE
        DO 150 KPT=1,4
CKAC      WHERE (XX(1,KPT;IOUT).GT.0. E  0)
CKAC        NN(1;IOUT) = NN(1;IOUT) + 1
CKAC        SUM(1,1;IOUT) = SUM(1,1;IOUT) + WGT(1,KPT;IOUT)
CKAC        SUM(1,2;IOUT) = SUM(1,2;IOUT) + TT(1,KPT;IOUT)
CKAC        SUM(1,3;IOUT) = SUM(1,3;IOUT) + BB(1,KPT;IOUT)
CKAC      ENDWHERE
CKAC      SUM(1,4;IOUT) = SUM(1,4;IOUT) + WGT(1,KPT;IOUT) *
CKAC 1                    XX(1,KPT;IOUT)
          DO 14 I=1,IOUT
            IF (XX(I,KPT).GT.0. E 0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
              SUM(I,2) = SUM(I,2) + TT(I,KPT)
              SUM(I,3) = SUM(I,3) + BB(I,KPT)
            ENDIF
   14     CONTINUE
          DO 15 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   15     CONTINUE
  150   CONTINUE
CKAC    WHERE((NN(1;IOUT).EQ.1 .AND. SUM(1,1;IOUT).GT.0.49 E  0) .OR.
CKAC 1        (NN(1;IOUT).EQ.2 .AND. SUM(1,1;IOUT).GE.0.45 E  0) .OR.
CKAC 2         NN(1;IOUT).GE.3)
CKAC      CTOP(1;IOUT) = VAINT(SUM(1,2;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CTOP(1;IOUT))
CKAC      CBOT(1;IOUT) = VAINT(SUM(1,3;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CBOT(1;IOUT))
CKAC      CAMT(1;IOUT) = SUM(1,4;IOUT)
CKAC    OTHERWISE
CKAC      CTOP(1;IOUT) = 0. E  0
CKAC      CBOT(1;IOUT) = 100. E  0
CKAC      CAMT(1;IOUT) = 0. E  0
CKAC    ENDWHERE
        DO 16 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.49 E 0) GO TO 17
          IF (NN(I).EQ.2.AND.SUM(I,1).GE.0.45 E 0) GO TO 17
          IF (NN(I).GE.3) GO TO 17
            CTOP(I) = 0. E 0
            CBOT(I) = 100. E 0
            CAMT(I) = 0. E 0
            GO TO 18
   17     CONTINUE
            CTOP(I) = SUM(I,2)/NN(I)
            CBOT(I) = SUM(I,3)/NN(I)
            CAMT(I) = SUM(I,4)
   18     CONTINUE
   16   CONTINUE
      RETURN
C--- POLAR REGION-NO EXTRAPOLATION
  600 CONTINUE
      JA = IABS(INSLAT)
      DO 200 I=1,IOUT
C----    GET LEFT POINT ON NEAREST LATITUDE
        XX(I,1) = CV(ILEFT(I),JA)
        XX(I,2) = CV(IRGHT(I),JA)
        WGT(I,1) = 1. E  0-WGTLON(I)
        WGT(I,2) = WGTLON(I)
        TT(I,1) = CVT(ILEFT(I),JA)
        TT(I,2) = CVT(IRGHT(I),JA)
        BB(I,1) = CVB(ILEFT(I),JA)
        BB(I,2) = CVB(IRGHT(I),JA)
  200 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
CKAC    NN(1;IOUT) = 0
CKAC    SUM(1,1;IOUT*4) = 0. E  0
      DO 20 I=1,IOUT
        NN(I) = 0
   20 CONTINUE
      DO 22 J=1,4
       DO 22 I=1,IOUT
        SUM(I,J) = 0. E 0
   22 CONTINUE
        DO 202 KPT=1,2
CKAC      WHERE (XX(1,KPT;IOUT).GT.0. E  0)
CKAC        NN(1;IOUT) = NN(1;IOUT) + 1
CKAC        SUM(1,1;IOUT) = SUM(1,1;IOUT) + WGT(1,KPT;IOUT)
CKAC        SUM(1,2;IOUT) = SUM(1,2;IOUT) + TT(1,KPT;IOUT)
CKAC        SUM(1,3;IOUT) = SUM(1,3;IOUT) + BB(1,KPT;IOUT)
CKAC      ENDWHERE
CKAC      SUM(1,4;IOUT) = SUM(1,4;IOUT) + WGT(1,KPT;IOUT) *
CKAC 1                    XX(1,KPT;IOUT)
          DO 24 I=1,IOUT
            IF (XX(I,KPT).GT.0. E 0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
              SUM(I,2) = SUM(I,2) + TT(I,KPT)
              SUM(I,3) = SUM(I,3) + BB(I,KPT)
            ENDIF
   24     CONTINUE
          DO 25 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   25     CONTINUE
  202   CONTINUE
CKAC    WHERE((NN(1;IOUT).EQ.1 .AND. SUM(1,1;IOUT).GT.0.7 E  0) .OR.
CKAC 1         NN(1;IOUT).EQ.2)
CKAC      CTOP(1;IOUT) = VAINT(SUM(1,2;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CTOP(1;IOUT))
CKAC      CBOT(1;IOUT) = VAINT(SUM(1,3;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CBOT(1;IOUT))
CKAC      CAMT(1;IOUT) = SUM(1,4;IOUT)
CKAC    OTHERWISE
CKAC      CTOP(1;IOUT) = 0. E  0
CKAC      CBOT(1;IOUT) = 100. E  0
CKAC      CAMT(1;IOUT) = 0. E  0
CKAC    ENDWHERE
        DO 26 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.7 E 0) GO TO 27
          IF (NN(I).EQ.2) GO TO 27
            CTOP(I) = 0. E 0
            CBOT(I) = 100. E 0
            CAMT(I) = 0. E 0
            GO TO 28
   27     CONTINUE
            CTOP(I) = SUM(I,2)/NN(I)
            CBOT(I) = SUM(I,3)/NN(I)
            CAMT(I) = SUM(I,4)
   28     CONTINUE
   26   CONTINUE
      RETURN
      END
      SUBROUTINE GGAVET(CTTIN,IIN,JTWIDL,JIN,CTTOUT,IOUT,JPOUT,JOUT,
     1                  ILEFT,IRGHT,INSLAT,WGTLAT,
     2                  TT,SUM,NN,LTWIDL,LATRD1,LATINB)
C--   *****************************************************************
C     * PUT CLOUD TOP TEMPERATURE ONTO FCST MODEL GRID......          *
C     *    ONLY AVERAGE THOSE POINTS WHICH HAVE CLD (IE TEMP NONZERO) *
C-    *  J = 1 IS JUST BELO N.POLE, I = 1 IS GREENWICH (THEN GO EAST).*
C     * IIN,JIN ARE I,J DIMENSIONS OF INPUT GRID--IOUT,JOUT FOR OUTPUT*
C     * JIN2,JOUT2=JIN/2,JOUT/2                                       *
C     *                                     --K.CAMPANA - AUGUST 91   *
C--   *****************************************************************
      DIMENSION CTTIN(IIN,JTWIDL)
      DIMENSION CTTOUT(IOUT,JPOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT)
      DIMENSION INSLAT(JOUT),WGTLAT(JOUT)
      DIMENSION TT(IOUT,4),SUM(IOUT)
      DIMENSION NN(IOUT)
      III = IIN
      JJJ = JIN
      IIIOUT = IOUT
      DO 50 LATOUT=1,JPOUT
      LAT=LATOUT+LATINB-1
      IF(INSLAT(LAT).LT.0) GO TO 70
      INTH = MOD(LTWIDL + INSLAT(LAT) - LATRD1 - 1,JTWIDL) + 1
      CALL GINTP(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,INTH,WGTLAT(LAT),
     2           CTTIN,CTTOUT(1,LATOUT),TT,SUM,NN)
      GO TO 50
C---   POLAR REGIONS
   70 CONTINUE
      INTH = IABS(INSLAT(LAT))
      CALL GINTP(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,INTH,WGTLAT(LAT),
     2           CTTIN,CTTOUT(1,LATOUT),TT,SUM,NN)
   50 CONTINUE
      RETURN
      END
      SUBROUTINE GINTP(IIN,JIN,IOUT,
     1                 ILEFT,IRGHT,INSLAT,WGTLAT,
     2                 CTT,CLDT,TT,SUM,NN)
      DIMENSION CTT(IIN,JIN)
      DIMENSION CLDT(IOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT)
      DIMENSION TT(IOUT,4),SUM(IOUT)
      DIMENSION NN(IOUT)
C....    FOR TOP TEMP JUST TAKE AVERAGE OF SURROUNDING
C..       NON-ZERO POINTS (THESE ARE THE CLOUD-FILLED ONES)....
C..       NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
      IF (INSLAT.LT.0) GO TO 600
      IF (INSLAT.EQ.JIN) GO TO 105
      DO 100 I=1,IOUT
        TT(I,1) = CTT(ILEFT(I),INSLAT)
        TT(I,2) = CTT(ILEFT(I),INSLAT+1)
        TT(I,3) = CTT(IRGHT(I),INSLAT)
        TT(I,4) = CTT(IRGHT(I),INSLAT+1)
  100 CONTINUE
      GO TO 130
  105 continue
      DO 110 I=1,IOUT
        TT(I,1) = CTT(ILEFT(I),INSLAT)
        TT(I,3) = CTT(IRGHT(I),INSLAT)
  110 CONTINUE
      IOUT2 = IOUT / 2
      DO 120 I=1,IOUT2
        TT(I,2) = CTT(ILEFT(I+IOUT2),INSLAT)
        TT(I+IOUT2,2) = CTT(ILEFT(I),INSLAT)
        TT(I,4) = CTT(IRGHT(I+IOUT2),INSLAT)
        TT(I+IOUT2,4) = CTT(IRGHT(I),INSLAT)
  120 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
  130 continue
      DO 10 I=1,IOUT
        NN(I) = 0
   10 CONTINUE
      DO 12 I=1,IOUT
        SUM(I) = 0. E 0
   12 CONTINUE
      DO 150 KPT=1,4
       DO 14 I=1,IOUT
        IF (TT(I,KPT).GT.0. E 0) THEN
          NN(I) = NN(I) + 1
          SUM(I) = SUM(I) + TT(I,KPT)
        ENDIF
   14  CONTINUE
  150  CONTINUE
      DO 16 I=1,IOUT
        IF (NN(I).LT.1) THEN
          CLDT(I) = 0. E 0
        ELSE
          CLDT(I) = SUM(I) / NN(I)
        END IF
   16 CONTINUE
      RETURN
C--- POLAR REGION
  600 CONTINUE
      JA = IABS(INSLAT)
      DO 200 I=1,IOUT
        TT(I,1) = CTT(ILEFT(I),JA)
        TT(I,2) = CTT(IRGHT(I),JA)
  200 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
      DO 20 I=1,IOUT
        NN(I) = 0
   20 CONTINUE
      DO 22 I=1,IOUT
       SUM(I) = 0. E 0
   22 CONTINUE
      DO 202 KPT=1,2
        DO 24 I=1,IOUT
          IF (TT(I,KPT).GT.0. E 0) THEN
            NN(I) = NN(I) + 1
            SUM(I) = SUM(I) + TT(I,KPT)
          ENDIF
   24   CONTINUE
  202 CONTINUE
      DO 26 I=1,IOUT
        IF (NN(I).LT.1) THEN
          CLDT(I) = 0. E 0
        ELSE
          CLDT(I) = SUM(I) / NN(I)
        END IF
   26 CONTINUE
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE IDSDEF(IPTV,IDS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: IDSDEF         SETS DEFAULT DECIMAL SCALINGS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: SETS DECIMAL SCALINGS DEFAULTS FOR VARIOUS PARAMETERS.
C   A DECIMAL SCALING OF -3 MEANS DATA IS PACKED IN KILO-SI UNITS.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL IDSDEF(IPTV,IDS)
C   INPUT ARGUMENTS:
C     IPTV         PARAMTER TABLE VERSION (ONLY 1 OR 2 IS RECOGNIZED)
C   OUTPUT ARGUMENTS:
C     IDS          INTEGER (255) DECIMAL SCALINGS
C                  (UNKNOWN DECIMAL SCALINGS WILL NOT BE SET)
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION IDS(255)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      IF(IPTV.EQ.1.OR.IPTV.EQ.2) THEN
        IDS(001)=-1     ! PRESSURE (PA)
        IDS(002)=-1     ! SEA-LEVEL PRESSURE (PA)
        IDS(003)=5      ! PRESSURE TENDENCY (PA/S)
                        !
                        !
        IDS(006)=-1     ! GEOPOTENTIAL (M2/S2)
        IDS(007)=0      ! GEOPOTENTIAL HEIGHT (M)
        IDS(008)=0      ! GEOMETRIC HEIGHT (M)
        IDS(009)=0      ! STANDARD DEVIATION OF HEIGHT (M)
                        !
        IDS(011)=1      ! TEMPERATURE (K)
        IDS(012)=1      ! VIRTUAL TEMPERATURE (K)
        IDS(013)=1      ! POTENTIAL TEMPERATURE (K)
        IDS(014)=1      ! PSEUDO-ADIABATIC POTENTIAL TEMPERATURE (K)
        IDS(015)=1      ! MAXIMUM TEMPERATURE (K)
        IDS(016)=1      ! MINIMUM TEMPERATURE (K)
        IDS(017)=1      ! DEWPOINT TEMPERATURE (K)
        IDS(018)=1      ! DEWPOINT DEPRESSION (K)
        IDS(019)=4      ! TEMPERATURE LAPSE RATE (K/M)
        IDS(020)=0      ! VISIBILITY (M)
                        ! RADAR SPECTRA 1 ()
                        ! RADAR SPECTRA 2 ()
                        ! RADAR SPECTRA 3 ()
                        !
        IDS(025)=1      ! TEMPERATURE ANOMALY (K)
        IDS(026)=-1     ! PRESSURE ANOMALY (PA)
        IDS(027)=0      ! GEOPOTENTIAL HEIGHT ANOMALY (M)
                        ! WAVE SPECTRA 1 ()
                        ! WAVE SPECTRA 2 ()
                        ! WAVE SPECTRA 3 ()
        IDS(031)=0      ! WIND DIRECTION (DEGREES)
        IDS(032)=1      ! WIND SPEED (M/S)
        IDS(033)=1      ! ZONAL WIND (M/S)
        IDS(034)=1      ! MERIDIONAL WIND (M/S)
        IDS(035)=-4     ! STREAMFUNCTION (M2/S)
        IDS(036)=-4     ! VELOCITY POTENTIAL (M2/S)
        IDS(037)=-1     ! MONTGOMERY STREAM FUNCTION (M2/S2)
        IDS(038)=8      ! SIGMA VERTICAL VELOCITY (1/S)
        IDS(039)=3      ! PRESSURE VERTICAL VELOCITY (PA/S)
        IDS(040)=4      ! GEOMETRIC VERTICAL VELOCITY (M/S)
        IDS(041)=6      ! ABSOLUTE VORTICITY (1/S)
        IDS(042)=6      ! ABSOLUTE DIVERGENCE (1/S)
        IDS(043)=6      ! RELATIVE VORTICITY (1/S)
        IDS(044)=6      ! RELATIVE DIVERGENCE (1/S)
        IDS(045)=4      ! VERTICAL U SHEAR (1/S)
        IDS(046)=4      ! VERTICAL V SHEAR (1/S)
        IDS(047)=0      ! DIRECTION OF CURRENT (DEGREES)
                        ! SPEED OF CURRENT (M/S)
                        ! U OF CURRENT (M/S)
                        ! V OF CURRENT (M/S)
        IDS(051)=4      ! SPECIFIC HUMIDITY (KG/KG)
        IDS(052)=0      ! RELATIVE HUMIDITY (PERCENT)
        IDS(053)=4      ! HUMIDITY MIXING RATIO (KG/KG)
        IDS(054)=1      ! PRECIPITABLE WATER (KG/M2)
        IDS(055)=-1     ! VAPOR PRESSURE (PA)
        IDS(056)=-1     ! SATURATION DEFICIT (PA)
        IDS(057)=1      ! EVAPORATION (KG/M2)
        IDS(058)=1      ! CLOUD ICE (KG/M2)
        IDS(059)=6      ! PRECIPITATION RATE (KG/M2/S)
        IDS(060)=0      ! THUNDERSTORM PROBABILITY (PERCENT)
        IDS(061)=1      ! TOTAL PRECIPITATION (KG/M2)
        IDS(062)=1      ! LARGE-SCALE PRECIPITATION (KG/M2)
        IDS(063)=1      ! CONVECTIVE PRECIPITATION (KG/M2)
        IDS(064)=6      ! WATER EQUIVALENT SNOWFALL RATE (KG/M2/S)
        IDS(065)=0      ! WATER EQUIVALENT OF SNOW DEPTH (KG/M2)
        IDS(066)=2      ! SNOW DEPTH (M)
                        ! MIXED-LAYER DEPTH (M)
                        ! TRANSIENT THERMOCLINE DEPTH (M)
                        ! MAIN THERMOCLINE DEPTH (M)
                        ! MAIN THERMOCLINE ANOMALY (M)
        IDS(071)=0      ! TOTAL CLOUD COVER (PERCENT)
        IDS(072)=0      ! CONVECTIVE CLOUD COVER (PERCENT)
        IDS(073)=0      ! LOW CLOUD COVER (PERCENT)
        IDS(074)=0      ! MIDDLE CLOUD COVER (PERCENT)
        IDS(075)=0      ! HIGH CLOUD COVER (PERCENT)
        IDS(076)=1      ! CLOUD WATER (KG/M2)
                        !
        IDS(078)=1      ! CONVECTIVE SNOW (KG/M2)
        IDS(079)=1      ! LARGE SCALE SNOW (KG/M2)
        IDS(080)=1      ! WATER TEMPERATURE (K)
        IDS(081)=0      ! SEA-LAND MASK ()
                        ! DEVIATION OF SEA LEVEL FROM MEAN (M)
        IDS(083)=5      ! ROUGHNESS (M)
        IDS(084)=1      ! ALBEDO (PERCENT)
        IDS(085)=1      ! SOIL TEMPERATURE (K)
        IDS(086)=0      ! SOIL WETNESS (KG/M2)
        IDS(087)=0      ! VEGETATION (PERCENT)
                        ! SALINITY (KG/KG)
        IDS(089)=4      ! DENSITY (KG/M3)
        IDS(090)=1      ! RUNOFF (KG/M2)
        IDS(091)=0      ! ICE CONCENTRATION ()
                        ! ICE THICKNESS (M)
        IDS(093)=0      ! DIRECTION OF ICE DRIFT (DEGREES)
                        ! SPEED OF ICE DRIFT (M/S)
                        ! U OF ICE DRIFT (M/S)
                        ! V OF ICE DRIFT (M/S)
                        ! ICE GROWTH (M)
                        ! ICE DIVERGENCE (1/S)
        IDS(099)=1      ! SNOW MELT (KG/M2)
                        ! SIG HEIGHT OF WAVES AND SWELL (M)
        IDS(101)=0      ! DIRECTION OF WIND WAVES (DEGREES)
                        ! SIG HEIGHT OF WIND WAVES (M)
                        ! MEAN PERIOD OF WIND WAVES (S)
        IDS(104)=0      ! DIRECTION OF SWELL WAVES (DEGREES)
                        ! SIG HEIGHT OF SWELL WAVES (M)
                        ! MEAN PERIOD OF SWELL WAVES (S)
        IDS(107)=0      ! PRIMARY WAVE DIRECTION (DEGREES)
                        ! PRIMARY WAVE MEAN PERIOD (S)
        IDS(109)=0      ! SECONDARY WAVE DIRECTION (DEGREES)
                        ! SECONDARY WAVE MEAN PERIOD (S)
        IDS(111)=0      ! NET SOLAR RADIATIVE FLUX AT SURFACE (W/M2)
        IDS(112)=0      ! NET LONGWAVE RADIATIVE FLUX AT SURFACE (W/M2)
        IDS(113)=0      ! NET SOLAR RADIATIVE FLUX AT TOP (W/M2)
        IDS(114)=0      ! NET LONGWAVE RADIATIVE FLUX AT TOP (W/M2)
        IDS(115)=0      ! NET LONGWAVE RADIATIVE FLUX (W/M2)
        IDS(116)=0      ! NET SOLAR RADIATIVE FLUX (W/M2)
        IDS(117)=0      ! TOTAL RADIATIVE FLUX (W/M2)
                        !
                        !
                        !
        IDS(121)=0      ! LATENT HEAT FLUX (W/M2)
        IDS(122)=0      ! SENSIBLE HEAT FLUX (W/M2)
        IDS(123)=0      ! BOUNDARY LAYER DISSIPATION (W/M2)
        IDS(124)=3      ! U WIND STRESS (N/M2)
        IDS(125)=3      ! V WIND STRESS (N/M2)
                        ! WIND MIXING ENERGY (J)
                        ! IMAGE DATA ()
        IDS(128)=-1     ! MEAN SEA-LEVEL PRESSURE (STDATM) (PA)
        IDS(129)=-1     ! MEAN SEA-LEVEL PRESSURE (MAPS) (PA)
        IDS(130)=-1     ! MEAN SEA-LEVEL PRESSURE (ETA) (PA)
        IDS(131)=1      ! SURFACE LIFTED INDEX (K)
        IDS(132)=1      ! BEST LIFTED INDEX (K)
        IDS(133)=1      ! K INDEX (K)
        IDS(134)=1      ! SWEAT INDEX (K)
        IDS(135)=10     ! HORIZONTAL MOISTURE DIVERGENCE (KG/KG/S)
        IDS(136)=4      ! SPEED SHEAR (1/S)
        IDS(137)=5      ! 3-HR PRESSURE TENDENCY (PA/S)
        IDS(138)=6      ! BRUNT-VAISALA FREQUENCY SQUARED (1/S2)
        IDS(139)=11     ! POTENTIAL VORTICITY (MASS-WEIGHTED) (1/S/M)
        IDS(140)=0      ! RAIN MASK ()
        IDS(141)=0      ! FREEZING RAIN MASK ()
        IDS(142)=0      ! ICE PELLETS MASK ()
        IDS(143)=0      ! SNOW MASK ()
        IDS(144)=3      ! VOLUMETRIC SOIL MOISTURE CONTENT (FRACTION)
        IDS(145)=0      ! POTENTIAL EVAPORATION RATE (W/M2)
        IDS(146)=0      ! CLOUD WORKFUNCTION (J/KG)
        IDS(147)=3      ! U GRAVITY WAVE STRESS (N/M2)
        IDS(148)=3      ! V GRAVITY WAVE STRESS (N/M2)
                        !
                        ! COVARIANCE BETWEEN V AND U (M2/S2)
                        ! COVARIANCE BETWEEN U AND T (K*M/S)
                        ! COVARIANCE BETWEEN V AND T (K*M/S)
                        !
                        !
        IDS(155)=0      ! GROUND HEAT FLUX (W/M2)
        IDS(156)=0      ! CONVECTIVE INHIBITION (W/M2)
        IDS(157)=0      ! CONVECTIVE APE (J/KG)
        IDS(158)=0      ! TURBULENT KE (J/KG)
        IDS(159)=-1     ! CONDENSATION PRESSURE OF LIFTED PARCEL (PA)
        IDS(160)=0      ! CLEAR SKY UPWARD SOLAR FLUX (W/M2)
        IDS(161)=0      ! CLEAR SKY DOWNWARD SOLAR FLUX (W/M2)
        IDS(162)=0      ! CLEAR SKY UPWARD LONGWAVE FLUX (W/M2)
        IDS(163)=0      ! CLEAR SKY DOWNWARD LONGWAVE FLUX (W/M2)
        IDS(164)=0      ! CLOUD FORCING NET SOLAR FLUX (W/M2)
        IDS(165)=0      ! CLOUD FORCING NET LONGWAVE FLUX (W/M2)
        IDS(166)=0      ! VISIBLE BEAM DOWNWARD SOLAR FLUX (W/M2)
        IDS(167)=0      ! VISIBLE DIFFUSE DOWNWARD SOLAR FLUX (W/M2)
        IDS(168)=0      ! NEAR IR BEAM DOWNWARD SOLAR FLUX (W/M2)
        IDS(169)=0      ! NEAR IR DIFFUSE DOWNWARD SOLAR FLUX (W/M2)
                        !
                        !
        IDS(172)=3      ! MOMENTUM FLUX (N/M2)
        IDS(173)=0      ! MASS POINT MODEL SURFACE ()
        IDS(174)=0      ! VELOCITY POINT MODEL SURFACE ()
        IDS(175)=0      ! SIGMA LAYER NUMBER ()
        IDS(176)=2      ! LATITUDE (DEGREES)
        IDS(177)=2      ! EAST LONGITUDE (DEGREES)
                        !
                        !
                        !
        IDS(181)=9      ! X-GRADIENT LOG PRESSURE (1/M)
        IDS(182)=9      ! Y-GRADIENT LOG PRESSURE (1/M)
        IDS(183)=5      ! X-GRADIENT HEIGHT (M/M)
        IDS(184)=5      ! Y-GRADIENT HEIGHT (M/M)
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
                        !
        IDS(201)=0      ! ICE-FREE WATER SURCACE (PERCENT)
                        !
                        !
        IDS(204)=0      ! DOWNWARD SOLAR RADIATIVE FLUX (W/M2)
        IDS(205)=0      ! DOWNWARD LONGWAVE RADIATIVE FLUX (W/M2)
                        !
        IDS(207)=0      ! MOISTURE AVAILABILITY (PERCENT)
                        ! EXCHANGE COEFFICIENT (KG/M2/S)
        IDS(209)=0      ! NUMBER OF MIXED LAYER NEXT TO SFC ()
                        !
        IDS(211)=0      ! UPWARD SOLAR RADIATIVE FLUX (W/M2)
        IDS(212)=0      ! UPWARD LONGWAVE RADIATIVE FLUX (W/M2)
        IDS(213)=0      ! NON-CONVECTIVE CLOUD COVER (PERCENT)
        IDS(214)=6      ! CONVECTIVE PRECIPITATION RATE (KG/M2/S)
        IDS(215)=7      ! TOTAL DIABATIC HEATING RATE (K/S)
        IDS(216)=7      ! TOTAL RADIATIVE HEATING RATE (K/S)
        IDS(217)=7      ! TOTAL DIABATIC NONRADIATIVE HEATING RATE (K/S)
        IDS(218)=2      ! PRECIPITATION INDEX (FRACTION)
        IDS(219)=1      ! STD DEV OF IR T OVER 1X1 DEG AREA (K)
        IDS(220)=4      ! NATURAL LOG OF SURFACE PRESSURE OVER 1 KPA ()
                        !
        IDS(222)=0      ! 5-WAVE GEOPOTENTIAL HEIGHT (M)
        IDS(223)=1      ! PLANT CANOPY SURFACE WATER (KG/M2)
        IDS(224)=0      ! RH-TYPE CLOUD COVER (PERCENT)
                        !
                        ! BLACKADARS MIXING LENGTH (M)
                        ! ASYMPTOTIC MIXING LENGTH (M)
        IDS(228)=1      ! POTENTIAL EVAPORATION (KG/M2)
        IDS(229)=0      ! SNOW MELT HEAT FLUX (W/M2)
        IDS(230)=0      ! SNOW SUBLIMATION FLUX (W/M2)
        IDS(231)=3      ! CONVECTIVE CLOUD MASS FLUX (PA/S)
        IDS(232)=0      ! DOWNWARD TOTAL RADIATION FLUX (W/M2)
        IDS(233)=0      ! UPWARD TOTAL RADIATION FLUX (W/M2)
        IDS(224)=1      ! BASEFLOW-GROUNDWATER RUNOFF (KG/M2)
        IDS(225)=1      ! STORM SURFACE RUNOFF (KG/M2)
                        !
                        !
        IDS(238)=0      ! SNOW COVER (PERCENT)
        IDS(239)=1      ! SNOW TEMPERATURE (K)
                        !
        IDS(241)=7      ! LARGE SCALE CONDENSATION HEATING RATE (K/S)
        IDS(242)=7      ! DEEP CONVECTIVE HEATING RATE (K/S)
        IDS(243)=10     ! DEEP CONVECTIVE MOISTENING RATE (KG/KG/S)
        IDS(244)=7      ! SHALLOW CONVECTIVE HEATING RATE (K/S)
        IDS(245)=10     ! SHALLOW CONVECTIVE MOISTENING RATE (KG/KG/S)
        IDS(246)=7      ! VERTICAL DIFFUSION HEATING RATE (KG/KG/S)
        IDS(247)=7      ! VERTICAL DIFFUSION ZONAL ACCELERATION (M/S/S)
        IDS(248)=7      ! VERTICAL DIFFUSION MERID ACCELERATION (M/S/S)
        IDS(249)=10     ! VERTICAL DIFFUSION MOISTENING RATE (KG/KG/S)
        IDS(250)=7      ! SOLAR RADIATIVE HEATING RATE (K/S)
        IDS(251)=7      ! LONGWAVE RADIATIVE HEATING RATE (K/S)
                        ! DRAG COEFFICIENT ()
                        ! FRICTION VELOCITY (M/S)
                        ! RICHARDSON NUMBER ()
                        !
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE GRIBIT(F,LBM,IDRT,IM,JM,MXBIT,COLAT1,
     &                  ILPDS,IPTV,ICEN,IGEN,IBMS,IPU,ITL,IL1,IL2,
     &                  IYYYY,IMO,IDY,IHR,IFTU,IP1,IP2,ITR,
     &                  INA,INM,ICEN2,IDS,
     &                  GRIB,LGRIB,IERR)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GRIBIT      CREATE GRIB MESSAGE
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: CREATE A GRIB MESSAGE FROM A FULL FIELD.
C   AT PRESENT, ONLY GLOBAL LATLON GRIDS AND GAUSSIAN GRIDS ARE ALLOWED.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL GRIBIT(F,LBM,IDRT,IM,JM,MXBIT,COLAT1,
C    &                  ILPDS,IPTV,ICEN,IGEN,IBMS,IPU,ITL,IL1,IL2,
C    &                  IYR,IMO,IDY,IHR,IFTU,IP1,IP2,ITR,
C    &                  INA,INM,ICEN2,IDS,
C    &                  GRIB,LGRIB,IERR)
C   INPUT ARGUMENT LIST:
C     F        - REAL (IM*JM) FIELD DATA TO PACK INTO GRIB MESSAGE
C     LBM      - LOGICAL (IM*JM) BITMAP TO USE IF IBMS=1
C     IDRT     - INTEGER DATA REPRESENTATION TYPE
C                (0 FOR LATLON OR 4 FOR GAUSSIAN)
C     IM       - INTEGER LONGITUDINAL DIMENSION
C     JM       - INTEGER LATITUDINAL DIMENSION
C     MXBIT    - INTEGER MAXIMUM NUMBER OF BITS TO USE (0 FOR NO LIMIT)
C     COLAT1   - REAL FIRST COLATITUDE OF GAUSSIAN GRID IF IDRT=4
C     ILPDS    - INTEGER LENGTH OF THE PDS (USUALLY 28)
C     IPTV     - INTEGER PARAMETER TABLE VERSION (USUALLY 1)
C     ICEN     - INTEGER FORECAST CENTER (USUALLY 7)
C     IGEN     - INTEGER MODEL GENERATING CODE
C     IBMS     - INTEGER BITMAP FLAG (0 FOR NO BITMAP)
C     IPU      - INTEGER PARAMETER AND UNIT INDICATOR
C     ITL      - INTEGER TYPE OF LEVEL INDICATOR
C     IL1      - INTEGER FIRST LEVEL VALUE (0 FOR SINGLE LEVEL)
C     IL2      - INTEGER SECOND LEVEL VALUE
C    &                  IYR,IMO,IDY,IHR,IFTU,IP1,IP2,ITR,INA,INM,IDS,
C    &                  GRIB,LGRIB,IERR)
C     IYYYY    - INTEGER YEAR(4digit)
C     IMO      - INTEGER MONTH
C     IDY      - INTEGER DAY
C     IHR      - INTEGER HOUR
C     IFTU     - INTEGER FORECAST TIME UNIT (1 FOR HOUR)
C     IP1      - INTEGER FIRST TIME PERIOD
C     IP2      - INTEGER SECOND TIME PERIOD (0 FOR SINGLE PERIOD)
C     ITR      - INTEGER TIME RANGE INDICATOR (10 FOR SINGLE PERIOD)
C     INA      - INTEGER NUMBER INCLUDED IN AVERAGE
C     INM      - INTEGER NUMBER MISSING FROM AVERAGE
C     ICEN2    - INTEGER FORECAST SUBCENTER (USUALLY 0 BUT 1 FOR REANAL)
C     IDS      - INTEGER DECIMAL SCALING
C
C   OUTPUT ARGUMENT LIST:
C     GRIB     - CHARACTER (LGRIB) GRIB MESSAGE
C     LGRIB    - INTEGER LENGTH OF GRIB MESSAGE
C                (NO MORE THAN 100+ILPDS+IM*JM*(MXBIT+1)/8)
C     IERR     - INTEGER ERROR CODE (0 FOR SUCCESS)
C
C SUBPROGRAMS CALLED:
C   GTBITS     - COMPUTE NUMBER OF BITS AND ROUND DATA APPROPRIATELY
C   W3FI72     - ENGRIB DATA INTO A GRIB1 MESSAGE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL F(IM*JM)
      LOGICAL LBM(IM*JM)
      CHARACTER GRIB(*)
      INTEGER IBM(IM*JM*IBMS+1-IBMS),IPDS(25),IGDS(18),IBDS(9)
      REAL FR(IM*JM)
      CHARACTER PDS(ILPDS)
      NF=IM*JM
      LONI=NINT(360.E3/IM)
      IF(IDRT.EQ.0) THEN
        LAT1=NINT(90.E3)
        LATI=NINT(180.E3/(JM-1))
        IF(IM.EQ.144.AND.JM.EQ.73) THEN
          IGRID=2
        ELSEIF(IM.EQ.360.AND.JM.EQ.181) THEN
          IGRID=3
        ELSE
          IGRID=255
        ENDIF
      ELSEIF(IDRT.EQ.4) THEN
        LAT1=NINT(90.E3-180.E3/ACOS(-1.)*COLAT1)
        LATI=JM/2
        IGRID=255
      ELSE
        IERR=40
        RETURN
      ENDIF
      IF(ITR.GE.2.AND.ITR.LE.5.AND.IP2.GE.256) THEN
        JP1=IP2
        JP2=0
        JTR=10
      ELSE
        JP1=IP1
        JP2=IP2
        JTR=ITR
      ENDIF
C     IYYYY    - INTEGER YEAR (4 digit)
	  iyr=mod(iyyyy-1,100)+1
	  icentury=(iyyyy-1)/100+1
      IPDS(01)=ILPDS    ! LENGTH OF PDS
      IPDS(02)=IPTV     ! PARAMETER TABLE VERSION ID
      IPDS(03)=ICEN     ! CENTER ID
      IPDS(04)=IGEN     ! GENERATING MODEL ID
      IPDS(05)=IGRID    ! GRID ID
      IPDS(06)=1        ! GDS FLAG
      IPDS(07)=IBMS     ! BMS FLAG
      IPDS(08)=IPU      ! PARAMETER UNIT ID
      IPDS(09)=ITL      ! TYPE OF LEVEL ID
      IPDS(10)=IL1      ! LEVEL 1 OR 0
      IPDS(11)=IL2      ! LEVEL 2
      IPDS(12)=IYR      ! YEAR
      IPDS(13)=IMO      ! MONTH
      IPDS(14)=IDY      ! DAY
      IPDS(15)=IHR      ! HOUR
      IPDS(16)=0        ! MINUTE
      IPDS(17)=IFTU     ! FORECAST TIME UNIT ID
      IPDS(18)=JP1      ! TIME PERIOD 1
      IPDS(19)=JP2      ! TIME PERIOD 2 OR 0
      IPDS(20)=JTR      ! TIME RANGE INDICATOR
      IPDS(21)=INA      ! NUMBER IN AVERAGE
      IPDS(22)=INM      ! NUMBER MISSING
c     IPDS(23)=20       ! CENTURY
      IPDS(23)=ICENTURY ! CENTURY
      IPDS(24)=ICEN2    ! FORECAST SUBCENTER
      IPDS(25)=IDS      ! DECIMAL SCALING
      IGDS(01)=0        ! NUMBER OF VERTICAL COORDS
      IGDS(02)=255      ! VERTICAL COORD FLAG
      IGDS(03)=IDRT     ! DATA REPRESENTATION TYPE
      IGDS(04)=IM       ! EAST-WEST POINTS
      IGDS(05)=JM       ! NORTH-SOUTH POINTS
      IGDS(06)=LAT1     ! LATITUDE OF ORIGIN
      IGDS(07)=0        ! LONGITUDE OF ORIGIN
      IGDS(08)=128      ! RESOLUTION FLAG
      IGDS(09)=-LAT1    ! LATITUDE OF END
      IGDS(10)=-LONI    ! LONGITUDE OF END
      IGDS(11)=LATI     ! LAT INCREMENT OR GAUSSIAN LATS
      IGDS(12)=LONI     ! LONGITUDE INCREMENT
      IGDS(13)=0        ! SCANNING MODE FLAGS
      IGDS(14:18)=0     ! NOT USED
      IBDS(1:9)=0       ! BDS FLAGS
      NBM=NF
      IF(IBMS.NE.0) THEN
        NBM=0
        DO I=1,NF
          IF(LBM(I)) THEN
            IBM(I)=1
            NBM=NBM+1
          ELSE
            IBM(I)=0
          ENDIF
        ENDDO
        IF(NBM.EQ.NF) IPDS(7)=0
      ENDIF
      IF(NBM.EQ.0) THEN
        DO I=1,NF
          FR(I)=0.
        ENDDO
        NBIT=0
      ELSE
        CALL GTBITS(IPDS(7),IDS,NF,IBM,F,FR,FMIN,FMAX,NBIT)
        IF(MXBIT.GT.0) NBIT=MIN(NBIT,MXBIT)
      ENDIF
      CALL W3FI72(0,FR,0,NBIT,0,IPDS,PDS,
     &            1,255,IGDS,0,0,IBM,NF,IBDS,
     &            NFO,GRIB,LGRIB,IERR)
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE GTBITS(IBM,IDS,LEN,MG,G,GROUND,GMIN,GMAX,NBIT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GTBITS      COMPUTE NUMBER OF BITS AND ROUND FIELD.
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: THE NUMBER OF BITS REQUIRED TO PACK A GIVEN FIELD
C   AT A PARTICULAR DECIMAL SCALING IS COMPUTED USING THE FIELD RANGE.
C   THE FIELD IS ROUNDED OFF TO THE DECIMAL SCALING FOR PACKING.
C   THE MINIMUM AND MAXIMUM ROUNDED FIELD VALUES ARE ALSO RETURNED.
C   GRIB BITMAP MASKING FOR VALID DATA IS OPTIONALLY USED.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL GTBITS(IBM,IDS,LEN,MG,G,GMIN,GMAX,NBIT)
C   INPUT ARGUMENT LIST:
C     IBM      - INTEGER BITMAP FLAG (=0 FOR NO BITMAP)
C     IDS      - INTEGER DECIMAL SCALING
C                (E.G. IDS=3 TO ROUND FIELD TO NEAREST MILLI-VALUE)
C     LEN      - INTEGER LENGTH OF THE FIELD AND BITMAP
C     MG       - INTEGER (LEN) BITMAP IF IBM=1 (0 TO SKIP, 1 TO KEEP)
C     G        - REAL (LEN) FIELD
C
C   OUTPUT ARGUMENT LIST:
C     GROUND   - REAL (LEN) FIELD ROUNDED TO DECIMAL SCALING
C                (SET TO ZERO WHERE BITMAP IS 0 IF IBM=1)
C     GMIN     - REAL MINIMUM VALID ROUNDED FIELD VALUE
C     GMAX     - REAL MAXIMUM VALID ROUNDED FIELD VALUE
C     NBIT     - INTEGER NUMBER OF BITS TO PACK
C
C SUBPROGRAMS CALLED:
C   ISRCHNE  - FIND FIRST VALUE IN AN ARRAY NOT EQUAL TO TARGET VALUE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION MG(LEN),G(LEN),GROUND(LEN)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  ROUND FIELD AND DETERMINE EXTREMES WHERE BITMAP IS ON
      DS=10.**IDS
      IF(IBM.EQ.0) THEN
        GROUND(1)=NINT(G(1)*DS)/DS
        GMAX=GROUND(1)
        GMIN=GROUND(1)
        DO I=2,LEN
          GROUND(I)=NINT(G(I)*DS)/DS
          GMAX=MAX(GMAX,GROUND(I))
          GMIN=MIN(GMIN,GROUND(I))
        ENDDO
      ELSE
        I1=ISRCHNE(LEN,MG,1,0)
        IF(I1.GT.0.AND.I1.LE.LEN) THEN
          DO I=1,I1-1
            GROUND(I)=0.
          ENDDO
          GROUND(I1)=NINT(G(I1)*DS)/DS
          GMAX=GROUND(I1)
          GMIN=GROUND(I1)
          DO I=I1+1,LEN
            IF(MG(I).NE.0) THEN
              GROUND(I)=NINT(G(I)*DS)/DS
              GMAX=MAX(GMAX,GROUND(I))
              GMIN=MIN(GMIN,GROUND(I))
            ELSE
              GROUND(I)=0.
            ENDIF
          ENDDO
        ELSE
          DO I=1,LEN
            GROUND(I)=0.
          ENDDO
          GMAX=0.
          GMIN=0.
        ENDIF
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE NUMBER OF BITS
      NBIT=LOG((GMAX-GMIN)*DS+0.9)/LOG(2.)+1.
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE WRYTE(LU,LC,C)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    WRYTE       WRITE DATA OUT BY BYTES
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: EFFICIENTLY WRITE UNFORMATTED A CHARACETER ARRAY.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL WRYTE(LU,LC,C)
C
C   INPUT ARGUMENT LIST:
C     LU       - INTEGER UNIT TO WHICH TO WRITE
C     LC       - INTEGER NUMBER OF CHARACTERS OR BYTES TO WRITE
C     C        - CHARACETER (LC) DATA TO WRITE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      CHARACTER C(LC)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      WRITE(LU) C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE MONINP(IDIMT,IDIMT2,KDIM,A,B,TAU,RTG,
     1           U1,V1,T1,Q1,TOV,
     2           CD,PSTAR,CDQ,QSS,DPHI,DLAM,
     3           SI,DEL,CL,SL,RCL,DELTIM,TSEA,LAT,KDT,THOUR,
     4           DUSFC,DVSFC,DTSFC,DQSFC)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    MONINP      COMPUTES VERTICAL DIFFUSION TERMS.
C   PRGMMRS: MRB PERSONNEL   ORG: W/NMC23    DATE: 88-04-29
C
C ABSTRACT: SR MONINP COMPUTES THE PARAMETERIZED EFFECTS
C           OF VERTICAL TURBULENT EDDY DIFFUSION OF MOMENTUM
C           WATER VAPOR AND SENSIBLE HEAT IN THE MRF MODEL.
C           USES STABILITY DEPENDENT MIXING COEFFICIENTS
C           SUGGESTED BY P. LONG AFTER ECMWF METHODS.
C           INCORPORATES LOWER BOUNDARY FLUXES USING DRAG
C           COEFFICIENTS BASED ON MONIN OBUKHOV FORMULAE WHICH
C           ARE CALCULATED IN SR PROGTN.  SPLIT IMPLICIT
C           INTEGRATION APPROXIMATIONS ARE USED FOLLOWING THE
C           GFDL TECHNIQUE.  THE SOLUTIONS OBTAINED ARE FOR THE
C           TIME TENDENCIES OF U V T AND Q, AND (BEFORE RETURN)
C           THESE ARE ADDED TO THE TENDENCIES PASSED.
C           ALSO RETURNED IS A QUANTITY
C           DLAM REQUIRED FOR SURFACE HYDROLOGY COMPUTATIONS.
C
C PROGRAM HISTORY LOG:
C   88-04-29  HUA-LU PAN
C   88-10-28  SELA
C   92-09-01  IREDELL
C
C USAGE:    CALL MONINP(IDIMT,IDIMT2,KDIM,A,B,TAU,RTG,
C    1           U1,V1,T1,Q1,TOV,
C    2           CD,PSTAR,CDQ,QSS,DPHI,DLAM,
C    3           SI,DEL,CL,SL,RCL,DELTIM,TSEA,LAT,KDT,THOUR,
C    4           DUSFC,DVSFC,DTSFC,DQSFC)
C   INPUT ARGUMENT LIST:
C     IDIMT    - NUMBER OF PROFILES TO COMPUTE
C     IDIMT2   - FIRST DIMENSION OF FIELD SLICES
C     KDIM     - NUMBER OF VERTICAL LEVELS
C     A        - (IDIMT,KDIM) NEGATIVE TENDENCY FOR V WIND IN M/S/S
C     B        - (IDIMT,KDIM) TENDENCY FOR U WIND IN M/S/S
C     TAU      - (IDIMT,KDIM) TENDENCY FOR TEMPERATURE IN K/S
C     RTG      - (IDIMT,KDIM) TENDENCY FOR SPECIFIC HUMIDITY IN KG/KG/S
C     U1       - (IDIMT2,KDIM) ZONAL WIND * COS(LAT) IN M/S
C     V1       - (IDIMT2,KDIM) MERID WIND * COS(LAT) IN M/S
C     T1       - (IDIMT2,KDIM) TEMPERATURE IN K
C     Q1       - (IDIMT2,KDIM) SPECIFIC HUMIDITY IN KG/KG
C     TOV      - (KDIM) BASE TEMPERATURE IN K
C     CD       - (IDIMT) 1/(FM*FM) MOMENTUM EXCHANGE COEFFICIENT
C     PSTAR    - (IDIMT) SURFACE PRESSURE IN KPA
C     CD       - (IDIMT) 1/(FM*FM) HEAT & MOISTURE EXCHANGE COEFFICIENT
C     QSS      - (IDIMT) SPECIFIC HUMIDITY AT SURFACE IN KG/KG
C     DPHI     - (IDIMT) COEFFICIENT MODULATING SFC EVAPORATION
C     SI       - (KDIM+1) P/PSFC AT BASE OF LAYER
C     DEL      - (KDIM) POSITIVE INCREMENT OF P/PSFC ACROSS LAYER
C     CL       - (KDIM) =1-SL
C     SL       - (KDIM) P/PSFC AT MIDDLE OF LAYER
C     RCL      - RECIPROCAL OF SQUARE OF COS(LAT)
C     DELTIM   - TIME STEP IN SECS
C     TSEA     - (IDIMT) SURFACE TEMPERATURE IN K
C     LAT      - LATITUDE NUMBER
C     KDT      - TIMESTEP NUMBER
C     THOUR    - FORECAST HOUR
C   OUTPUT ARGUMENT LIST:
C     A        - (IDIMT,KDIM) NEGATIVE TENDENCY FOR V WIND IN M/S/S
C     B        - (IDIMT,KDIM) TENDENCY FOR U WIND IN M/S/S
C     TAU      - (IDIMT,KDIM) TENDENCY FOR TEMPERATURE IN K/S
C     RTG      - (IDIMT,KDIM) TENDENCY FOR SPECIFIC HUMIDITY IN KG/KG/S
C     DUSFC    - (IDIMT) ZONAL STRESS ON SURFACE IN N/M**2
C     DVSFC    - (IDIMT) MERID STRESS ON SURFACE IN N/M**2
C     DTSFC    - (IDIMT) SENSIBLE HEAT FLUX ON SURFACE IN W/M**2
C     DQSFC    - (IDIMT) LATENT HEAT FLUX ON SURFACE IN W/M**2
C
C SUBPROGRAMS CALLED:
C     TRIDI2   - SOLVE TRIDIAGONAL MATRIX EQUATION
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+
     12 ,HVAP= 2.5000E+6 )
      PARAMETER(GOR=G/RD,GOCP=G/CP,ROCP=RD/CP,FV=RV/RD-1)
      PARAMETER(CONT=1000.*CP/G,CONQ=1000.*HVAP/G,CONW=1000./G)
      PARAMETER(RLAM=250.,VK=0.4)
      PARAMETER(DW2MIN=1.,DKMIN=0.1,DKMAX=300.,RIMIN=-100.)
      DIMENSION DUSFC(IDIMT),DVSFC(IDIMT),DTSFC(IDIMT),DQSFC(IDIMT)
      DIMENSION A(IDIMT,KDIM),  B(IDIMT,KDIM),
     1        TAU(IDIMT,KDIM),RTG(IDIMT,KDIM),
     2         U1(IDIMT2,KDIM), V1(IDIMT2,KDIM),
     3         T1(IDIMT2,KDIM), Q1(IDIMT2,KDIM),
     6   CD(IDIMT),CDQ(IDIMT),QSS(IDIMT),DPHI(IDIMT),DLAM(IDIMT),
     7   SI(KDIM+1),DEL(KDIM),CL(KDIM),SL(KDIM),
     8   TSEA(IDIMT),TOV(KDIM),PSTAR(IDIMT)
      DIMENSION DZOT(KDIM-1),RDZT(KDIM-1),
     1          BETAW(IDIMT),BETAQ(IDIMT),BETAT(IDIMT),ZI(IDIMT),
     2          DKU(IDIMT,KDIM-1),DKT(IDIMT,KDIM-1),
     3          AL(IDIMT,KDIM-1),AD(IDIMT,KDIM),AU(IDIMT,KDIM-1),
     4          A1(IDIMT,KDIM),A2(IDIMT,KDIM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE PRELIMINARY VARIABLES
      DT=4.*DELTIM
      RDT=1./DT
      SL1KAP=(1./SL(1))**ROCP
      RDZT1=GOR*SL(1)/DEL(1)
      DO K=1,KDIM-1
        RDZT(K)=GOR*SI(K+1)/(SL(K)-SL(K+1))
        DZOT(K)=LOG(SI(K+1)/SI(K))/GOR
      ENDDO
      DO J=1,IDIMT
        SPD1=MAX(SQRT(RCL*(U1(J,1)**2+V1(J,1)**2)),1.)
        BET1=DT*RDZT1*SPD1/T1(J,1)
        BETAW(J)=BET1*CD(J)
        BETAT(J)=BET1*CDQ(J)
        BETAQ(J)=DPHI(J)*BETAT(J)
        DLAM(J)=RDT*BETAT(J)
        ZI(J)=0.
        DUSFC(J)=0.
        DVSFC(J)=0.
        DTSFC(J)=0.
        DQSFC(J)=0.
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE DIFFUSION COEFFICIENTS
      DO K=1,KDIM-1
        DO J=1,IDIMT
C  COMPUTE RICHARDSON NUMBER
          TI=0.5*(T1(J,K)+T1(J,K+1))
          RDZ=RDZT(K)/TI
          DW2=RCL*((U1(J,K)-U1(J,K+1))**2+(V1(J,K)-V1(J,K+1))**2)
          SHR2=MAX(DW2,DW2MIN)*RDZ**2
          TVD=T1(J,K)*(1.+FV*Q1(J,K))
          TVU=T1(J,K+1)*(1.+FV*Q1(J,K+1))
          BVF2=G*(GOCP+RDZ*(TVU-TVD))/TI
          RI=MAX(BVF2/SHR2,RIMIN)
C  COMPUTE NEUTRAL COEFFICIENT AS A FUNCTION OF HEIGHT ABOVE THE SURFACE
          ZI(J)=ZI(J)-T1(J,K)*DZOT(K)
          ZK=VK*ZI(J)
          RL2=(ZK*RLAM/(RLAM+ZK))**2
          DK=RL2*SQRT(SHR2)
          IF(RI.LT.0.) THEN
C  COMPUTE COEFFICIENTS FOR AN UNSTABLE REGIME
            SRI=SQRT(-RI)
            DKU(J,K)=DK*(1+8.*(-RI)/(1+1.746*SRI))
            DKT(J,K)=DK*(1+8.*(-RI)/(1+1.286*SRI))
          ELSE
C  COMPUTE COEFFICIENTS FOR A STABLE REGIME
            DKU(J,K)=DK/(1+5.*RI)**2
            DKT(J,K)=DKU(J,K)
          ENDIF
C  KEEP COEFFICIENTS WITHIN BOUNDS
          IF(DKU(J,K).LT.DKMIN) THEN
            DKU(J,K)=DKMIN
            DKT(J,K)=DKMIN
          ENDIF
          IF(DKT(J,K).GT.DKMAX) THEN
            DKU(J,K)=DKMAX
            DKT(J,K)=DKMAX
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE TRIDIAGONAL MATRIX ELEMENTS FOR HEAT AND MOISTURE
      DO J=1,IDIMT
        AD(J,1)=1.
        A1(J,1)=T1(J,1)-BETAT(J)*(T1(J,1)*SL1KAP-TSEA(J))
        A2(J,1)=Q1(J,1)-BETAQ(J)*(Q1(J,1)-QSS(J))
      ENDDO
      DO K=1,KDIM-1
        DTODSD=DT/DEL(K)
        DTODSU=DT/DEL(K+1)
        DSIG=SL(K)-SL(K+1)
        DO J=1,IDIMT
          RDZ=RDZT(K)*2./(T1(J,K)+T1(J,K+1))
          DSDZ1=DSIG*DKT(J,K)*RDZ*GOCP
          DSDZ2=DSIG*DKT(J,K)*RDZ*RDZ
          AU(J,K)=-DTODSD*DSDZ2
          AL(J,K)=-DTODSU*DSDZ2
          AD(J,K)=AD(J,K)-AU(J,K)
          AD(J,K+1)=1.-AL(J,K)
          A1(J,K)=A1(J,K)+DTODSD*DSDZ1
          A1(J,K+1)=T1(J,K+1)-DTODSU*DSDZ1
          A2(J,K+1)=Q1(J,K+1)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SOLVE TRIDIAGONAL PROBLEM FOR HEAT AND MOISTURE
      CALL TRIDI2(IDIMT,KDIM,AL,AD,AU,A1,A2,AU,A1,A2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  RECOVER TENDENCIES OF HEAT AND MOISTURE
      DO K=1,KDIM
        DO J=1,IDIMT
          TTEND=(A1(J,K)-T1(J,K))*RDT
          QTEND=(A2(J,K)-Q1(J,K))*RDT
          TAU(J,K)=TAU(J,K)+TTEND
          RTG(J,K)=RTG(J,K)+QTEND
          DTSFC(J)=DTSFC(J)+CONT*DEL(K)*PSTAR(J)*TTEND
          DQSFC(J)=DQSFC(J)+CONQ*DEL(K)*PSTAR(J)*QTEND
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE TRIDIAGONAL MATRIX ELEMENTS FOR MOMENTUM
      DO J=1,IDIMT
        AD(J,1)=1.+BETAW(J)
        A1(J,1)=U1(J,1)
        A2(J,1)=V1(J,1)
      ENDDO
      DO K=1,KDIM-1
        DTODSD=DT/DEL(K)
        DTODSU=DT/DEL(K+1)
        DSIG=SL(K)-SL(K+1)
        DO J=1,IDIMT
          RDZ=RDZT(K)*2./(T1(J,K)+T1(J,K+1))
          DSDZ2=DSIG*DKU(J,K)*RDZ*RDZ
          AU(J,K)=-DTODSD*DSDZ2
          AL(J,K)=-DTODSU*DSDZ2
          AD(J,K)=AD(J,K)-AU(J,K)
          AD(J,K+1)=1.-AL(J,K)
          A1(J,K+1)=U1(J,K+1)
          A2(J,K+1)=V1(J,K+1)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SOLVE TRIDIAGONAL PROBLEM FOR MOMENTUM
      CALL TRIDI2(IDIMT,KDIM,AL,AD,AU,A1,A2,AU,A1,A2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  RECOVER TENDENCIES OF MOMENTUM
      CONWRC=CONW*SQRT(RCL)
      DO K=1,KDIM
        DO J=1,IDIMT
          UTEND=(A1(J,K)-U1(J,K))*RDT
          VTEND=(A2(J,K)-V1(J,K))*RDT
          B(J,K)=B(J,K)+UTEND
          A(J,K)=A(J,K)-VTEND
          DUSFC(J)=DUSFC(J)+CONWRC*DEL(K)*PSTAR(J)*UTEND
          DVSFC(J)=DVSFC(J)+CONWRC*DEL(K)*PSTAR(J)*VTEND
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPVS)
C-----------------------------------------------------------------------
      SUBROUTINE LRGSCL(IM,IX,KM,DT,DEL,SL,PS,Q,T,RN)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    LRGSCL      CALCULATE GRID-SCALE PRECIPITATION
C   PRGMMR: PETE CAPLAN      ORG: W/NMC23    DATE: 88-12-12
C
C ABSTRACT: CALCULATES GRID-SCALE CONDENSATION FOR ONE LEAP-FROG
C   TIMESTEP, PRODUCES RAIN, AND ADJUSTS TEMPERATURE AND SPECIFIC
C   HUMIDITY BY WET-BULB PROCESS.  EVAPORATION OF PART OR ALL OF THE
C   RAIN MAY OCCUR AS IT TRAVERSES UNSATURATED LAYERS ON THE WAY DOWN.
C   TIDY UP OF MOIST PROCESSES BY M. IREDELL.
C
C PROGRAM HISTORY LOG:
C   ??        NORM PHILLIPS
C   83-??-??  PETE CAPLAN         INSTALL KESSLER EVAPORATION.
C   91-05-07  IREDELL             ARGUMENTS CHANGED, UNIFIED SATURATION
C
C USAGE:    CALL LRGSCL(IM,KM,DT,DEL,SL,PS,Q,T,RN)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     KM       - INTEGER NUMBER OF LEVELS
C     DT       - REAL TIME STEP IN SECONDS
C     DEL      - REAL (KM) SIGMA LAYER THICKNESS
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KILOPASCALS (CB)
C     Q        - REAL (IM,KM) CURRENT SPECIFIC HUMIDITY IN KG/KG
C     T        - REAL (IM,KM) CURRENT TEMPERATURE IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     Q        - REAL (IM,KM) ADJUSTED SPECIFIC HUMIDITY IN KG/KG
C     T        - REAL (IM,KM) ADJUSTED TEMPERATURE IN KELVIN
C     RN       - REAL (IM) LARGE-SCALE RAIN IN METERS
C
C SUBPROGRAMS CALLED:
C   FPVS     - FUNCTION TO COMPUTE SATURATION VAPOR PRESSURE
C
C REMARKS: THE PRECIPITATION REACHING THE GROUND SHOULD BE HALVED
C   BEFORE IT IS USED TO INCREMENT GESHEM, THE RUNNING TOTAL.  THIS
C   PREVENTS DOUBLE-COUNTING OF GESHEM, WHICH IS INCREMENTED EVERY
C   HALF LEAP-FROG TIMESTEP.
C          THE EVAPORATION RATE FOR FALLING PRECIP IS CALCULATED
C   ACCORDING TO A METHOD DEVISED BY E.KESSLER, IN WHICH A MEAN DROP
C   SURFACE AREA IS OBTAINED FROM THE RAINWATER CONTENT.
C          ICE IS NOT CONSIDERED.
C          FUNCTION FPVS IS INLINED BY FPP.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77
C   MACHINE:  CRAY
C
C$$$
      DIMENSION DEL(KM),SL(KM),PS(IM),
     &          Q(IX,KM),T(IX,KM),RN(IM)
C  PHYSICAL PARAMETERS
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          CP= 1.0046E+3 ,HVAP= 2.5000E+6 )
      PARAMETER(ELOCP=HVAP/CP,EL2ORC=HVAP*HVAP/(RV*CP),
     &          EPS=RD/RV,EPSM1=RD/RV-1.)
C-----------------------------------------------------------------------
C  CONDENSE RAIN TO WETBULB TEMPERATURE IF SUPERSATURATED
C  OR EVAPORATE RAIN USING KESSLER PARAMETERIZATION.
      DO I=1,IM
        RN(I)=0.
      ENDDO
      DO K=KM,1,-1
        DO I=1,IM
          DPOVG=DEL(K)/G*PS(I)
          ES=FPVS(T(I,K))
          QS=EPS*ES/(SL(K)*PS(I)+EPSM1*ES)
          QCOND=(Q(I,K)-QS)/(1.+EL2ORC*QS/T(I,K)**2)
          IF(QCOND.GT.0.) THEN
            Q(I,K)=Q(I,K)-QCOND
            T(I,K)=T(I,K)+QCOND*ELOCP
            RN(I)=RN(I)+QCOND*DPOVG
          ELSEIF(RN(I).GT.0.) THEN
            QEVAP=-QCOND*(1.-EXP(-0.32*SQRT(2.*DT*RN(I))))
            RNEVAP=MIN(QEVAP*DPOVG,RN(I))
            Q(I,K)=Q(I,K)+RNEVAP/DPOVG
            T(I,K)=T(I,K)-RNEVAP/DPOVG*ELOCP
            RN(I)=RN(I)-RNEVAP
          ENDIF
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE DCYC2(LON2,LEVS,SOLHR,SLAG,SINLAB,COSLAB,SDEC,CDEC,
     &                 XLON,CZMN,SFCDLW,SFCNSW,TF,TSEA,TSFLW,SWH,HLW,
     &                 DSWSFC,DLWSFC,SLRAD,TAU)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    DCYC2       ALTERS RADIATION FOR APPROX DIURNAL CYCLE
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-05-06
C           KENNETH CAMPANA
C
C ABSTRACT: A DIURNAL CYCLE APPROXIMATION IS APPLIED TO PREVIOUSLY
C   COMPUTED RADIATIVE FLUXES AND HEATING RATES. FIRST,THE CURRENT
C   LOCAL-TIME VALUE (FOR THIS PARTICULAR MODEL TIME STEP) OF THE
C   COSINE SOLAR ZENITH ANGLE (COSZ) IS COMPUTED FOR ALL GAUSSIAN GRID
C   POINTS. SHORTWAVE (SW) HEATING RATES WHICH WERE COMPUTED WITH
C   LATITUDINAL MEAN COSZ IN THE SEPARATE RADIATION CALCULATION
C   ARE WEIGHTED BY THE RATIO OF ACTUAL TO MEAN COSZ (SEE MRF MODEL
C   DOCUMENTATION,1988,CHAPTER 3,'RADIATIVE PROCESSES',AUTHORED BY
C   K. CAMPANA,..). SURFACE SW FLUXES ARE ALSO COSZ WEIGHTED. SURFACE
C   LONGWAVE (LW) FLUX FROM THE ATMOSPHERE IS ALTERED EACH TIMESTEP
C   TO ACCOUNT FOR DIURNAL CHANGES OF MODEL TEMPERATURE IN THE LOWER
C   ATMOSPHERE. LW HEATING RATES FROM THE SEPARATE RADIATION
C   COMPUTATION ARE UNTOUCHED.
C
C PROGRAM HISTORY LOG:
C   88-05-06  JOSEPH SELA
C
C USAGE:    CALL DCYC2(LAT,SSDEC,SOLHR,COLRAD,CZMN,SFCDLW,SFCNSW,
C                      TF,TOV,SLRAD,SWH,HLW,TAU)
C   INPUT ARGUMENT LIST:
C     LAT      - ROW NUMBER OF GAUSSIAN LATITUDE(N.H.).
C     SSDEC    - SINE OF THE SOLAR DECLINATION FOR TODAY'S DATE-
C                         PART OF THE OUTPUT FROM RADIATION CODES.
C     SOLHR    - TIME IN HOURS AFTER 00 HR GREENWICH.
C     COLRAD   - CO-LATITUDES OF GAUSSIAN GRID IN RADIANS(N.H.).
C     CZMN     - MEAN COSINE SOLAR ZENITH ANGLE FOR ALL GAUSSIAN LATS-
C                         PART OF THE OUTPUT FROM RADIATION CODES.
C     SFCDLW   - DOWNWARD LW FLUX AT EARTH SFC(FROM RADIATION CODE)
C                IN CAL CM-2 MIN-1.
C     SFCNSW   - NET SW FLUX AT EARTH SFC(FROM RADIATION CODE USING
C                CZMN) IN CAL CM-2 MIN-1.
C     TF       - CURRENT VALUE OF MODEL TEMPERATURES(W/O BASIC STATE)
C                IN DEG K.
C     TOV      - BASIC STATE TEMPERATURE FOR ALL MODEL LAYERS(DEG K).
C     SWH      - MODEL LYR SW HEATING RATES(FROM RADIATION CODE,USING
C                CZMN) - DEG/SEC.
C     HLW      - MODEL LYR LW HEATING RATES(FROM RADIATION CODE),
C                IN DEG/SEC.
C
C   OUTPUT ARGUMENT LIST:
C     SLRAD    - SURFACE NET RADIATIVE FLUX (EXCEPT LW UPWARD FLUX
C                FROM SFC,WHICH IS ADDED IN PROGTN) -
C                UNITS ARE CAL CM-2 MIN-1 .
C     TAU      - LAYER VALUES OF TEMPERATURE TENDENCY AFTER ADDING
C                ALTERED RADIATIVE HEATING RATES-UNITS ARE DEG/SEC.
C
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      DIMENSION XLON(LON2/2),CZMN(LON2),SFCDLW(LON2),SFCNSW(LON2),
     &          TF(LON2),TSEA(LON2),TSFLW(LON2),
     &          SWH(LON2,LEVS),HLW(LON2,LEVS),
     &          DSWSFC(LON2),DLWSFC(LON2),SLRAD(LON2),TAU(LON2,LEVS)
      PARAMETER (HSIGMA= 5.6730E-8 ,CNWATT=- 4.1855E+0 *1.E4/60.)
      DIMENSION XMU(LON2)
C-----------------------------------------------------------------------
C  COMPUTE COSINE OF SOLAR ZENITH ANGLE FOR BOTH HEMISPHERES.
      LH=LON2/2
      CNS= 3.141593E+0 *(SOLHR-12.)/12.+SLAG
      SS=SINLAB*SDEC
      CC=COSLAB*CDEC
      DO I=1,LH
        CH=CC*COS(XLON(I)+CNS)
        XMU(   I)=CH+SS
        XMU(LH+I)=CH-SS
      ENDDO
      DO I=1,LON2
C  NORMALIZE BY AVERAGE VALUE OVER RADIATION PERIOD FOR DAYTIME.
        IF(XMU(I).GT.0.01.AND.CZMN(I).GT.0.01) THEN
          XMU(I)=XMU(I)/CZMN(I)
        ELSE
          XMU(I)=0.
        ENDIF
C  ADJUST LONGWAVE FLUX AT SURFACE TO ACCOUNT FOR T CHANGES IN LAYER 1.
        SDLW=SFCDLW(I)*(TF(I)/TSFLW(I))**4
C  RETURN NET SURFACE RADIATIVE FLUX.
        SLRAD(I)=SFCNSW(I)*XMU(I)+SDLW
C  RETURN DOWNWARD AND UPWARD LONGWAVE FLUX AT GROUND, RESPECTIVELY.
        DSWSFC(I)=SDLW*CNWATT
        DLWSFC(I)=HSIGMA*TSEA(I)**4
      ENDDO
C  ADD RADIATIVE HEATING TO TEMPERATURE TENDENCY
      DO K=1,LEVS
        DO I=1,LON2
          TAU(I,K)=TAU(I,K)+SWH(I,K)*XMU(I)+HLW(I,K)
        ENDDO
      ENDDO
      RETURN
      END
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPVS)
C-----------------------------------------------------------------------
      SUBROUTINE SASCNV(IM,IX,KM,JCAP,DELT,DEL,SL,SLK,PS,
     &                  Q1,T1,CLDWRK,RN,KBOT,KTOP,KUO,SPD,LAT,SLIMSK)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SASCNV      COMPUTES CONVECTIVE HEATING AND MOISNG
C   PRGMMR: HUA-LU PAN       ORG: W/NMC23    DATE: 92-03-01
C
C ABSTRACT: COMPUTES CONVECTIVE HEATING AND MOISTENING USING A ONE
C   CLOUD TYPE ARAKAWA-SCHUBERT CONVECTION SCHEME ORIGINALLY DEVELOPED
C   BY GEORG GRELL. THE SCHEME INCLUDES UPDRAFT AND DOWNDRAFT EFFECTS.
C   THE CLOSURE IS THE CLOUD WORK FUNCTION. BOTH UPDRAFT AND DOWNDRAFT
C   ARE ASSUMED TO BE SATURATED AND THE HEATING AND MOISTENING ARE
C   ACCOMPLISHED BY THE COMPENSATING ENVIRONMENT. THE NAME COMES FROM
C   "SIMPLIFIED ARAKAWA-SCHUBERT CONVECTION PARAMETERIZATION".
C
C PROGRAM HISTORY LOG:
C   92-03-01  HUA-LU PAN
C
C USAGE:    CALL SASCNV(IM,IX,KM,JCAP,DELT,DEL,SL,SLK,PS,QN,TN,
C    &                Q1,T1,RN,KBOT,KTOP,KUO,SPD,LAT,SLIMSK)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - LEADING DIMENSION OF QN,TN,Q1,T1,SPD
C     KM       - INTEGER NUMBER OF LEVELS
C     JCAP     - INTEGER SPECTRAL TRUNCATION
C     DT       - REAL TIME STEP IN SECONDS
C     DEL      - REAL (KM) SIGMA LAYER THICKNESS
C     SL       - REAL (KM) SIGMA VALUES
C     SLK      - REAL (KM) SIGMA VALUES TO THE KAPPA
C     PS       - REAL (IM) SURFACE PRESSURE IN KILOPASCALS (CB)
C     QN       - REAL (IX,KM) PREVIOUS SPECIFIC HUMIDITY IN KG/KG
C     TN       - REAL (IX,KM) PREVIOUS TEMPERATURE IN KELVIN
C     Q1       - REAL (IX,KM) CURRENT SPECIFIC HUMIDITY IN KG/KG
C     T1       - REAL (IX,KM) CURRENT TEMPERATURE IN KELVIN
C     SPD      - REAL (IX,KM) CURRENT WIND SPEED
C     LAT      - INTEGER  CURRENT LATITUDE INDEX
C     SLIMSK   - REAL (IM) LAND(1),SEA(0), ICE(2) FLAG
C
C   OUTPUT ARGUMENT LIST:
C     Q1       - REAL (IX,KM) ADJUSTED SPECIFIC HUMIDITY IN KG/KG
C     T1       - REAL (IX,KM) ADJUSTED TEMPERATURE IN KELVIN
C     RN       - REAL (IM) CONVECTIVE RAIN IN METERS
C     KBOT     - INTEGER (IM) CLOUD BOTTOM LEVEL
C     KTOP     - INTEGER (IM) CLOUD TOP LEVEL
C     KUO      - INTEGER (IM) BIT FLAG INDICATING DEEP CONVECTION
C
C SUBPROGRAMS CALLED:
C   FPVS     - FUNCTION TO COMPUTE SATURATION VAPOR PRESSURE
C
C REMARKS: FUNCTION FPVS IS INLINED BY FPP.
C          NONSTANDARD AUTOMATIC ARRAYS ARE USED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      DIMENSION DEL(KM),SL(KM),SLK(KM),PS(IM),
     &          Q1(IX,KM),T1(IX,KM),RN(IM),KBOT(IM),KTOP(IM),KUO(IM)
      DIMENSION SPD(IM,KM),SLIMSK(IM),CLDWRK(IM)
C  PHYSICAL PARAMETERS
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          CP= 1.0046E+3 ,HVAP= 2.5000E+6 ,T0C= 2.7315E+2 )
      PARAMETER(CPOEL=CP/HVAP,ELOCP=HVAP/CP,
     &          EL2ORC=HVAP*HVAP/(RV*CP),EPS=RD/RV,EPSM1=RD/RV-1.)
      PARAMETER(TERR=0.,C0=.002,DELTA= 0.6077338 )
C  LOCAL VARIABLES AND ARRAYS
      DIMENSION P(IM,KM),
     &  TO(IM,KM),QO(IM,KM)
      DIMENSION QESO(IM,KM)
      DIMENSION TVO(IM,KM),DBYO(IM,KM),
     &  ZO(IM,KM),
     &  HEO(IM,KM),HESO(IM,KM),
     &  XQ(IM,KM),XQES(IM,KM),XT(IM,KM),
     &  XTV(IM,KM),XZ(IM,KM),
     &  XHE(IM,KM),XHES(IM,KM),PW(IM,KM),
     &  PWD(IM,KM),
     &  QRCD(IM,KM),DELLAH(IM,KM),DELLAQ(IM,KM),
     &  DELLAT(IM,KM),
     &  HCKO(IM,KM),
     &  QCKO(IM,KM),ETA(IM,KM),
     &  ETAD(IM,KM),XHCK(IM,KM),XQCK(IM,KM),
     &  QRCDO(IM,KM),
     &  PWO(IM,KM),PWDO(IM,KM),DTCONV(IM),DELTV(IM),ACRT(IM)
      DIMENSION PSFC(IM),HMAX(IM),KB(IM),
     &  HKBO(IM),QKBO(IM),KBCON(IM),PBCDIF(IM),
     &  VMAX(IM),KDS(IM),
     &  HMIN(IM),LMIN(IM),JMIN(IM),PWAVO(IM),
     &  AA1(IM),VSHEAR(IM),SHRMAX(IM),
     &  KSHMAX(IM),EDT(IM),
     &  EDTO(IM),PWEVO(IM),
     &  QCOND(IM),
     &  HCDO(IM),QCDO(IM),DDP(IM),PP2(IM),ADET(IM),AATMP(IM),
     &  XHKB(IM),XQKB(IM),XPWAV(IM),XPWEV(IM),XHCD(IM),
     &  XAA0(IM),F(IM),XK(IM),XMB(IM),KTCON(IM),
     &  EDTX(IM),XQCD(IM),
     &  HSBAR(IM),XMBMAX(IM),XLAMB(IM),XLAMD(IM),KBDTR(IM)
      DIMENSION DELHBAR(IM),DELQBAR(IM),DELTBAR(IM)
      DIMENSION PCRIT(15), ACRITT(15), ACRIT(15)
      REAL MBDT
      SAVE PCRIT, ACRITT
      LOGICAL TOTFLG, CNVFLG(IM), FLG(IM)
      DATA PCRIT/850.,800.,750.,700.,650.,600.,550.,500.,450.,400.,
     &           350.,300.,250.,200.,150./
      DATA ACRITT/.0633,.0445,.0553,.0664,.075,.1082,.1521,.2216,
     &           .3151,.3677,.41,.5255,.7663,1.1686,1.6851/
C  GDAS DERIVED ACRIT
C     DATA ACRITT/.203,.515,.521,.566,.625,.665,.659,.688,
C    &            .743,.813,.886,.947,1.138,1.377,1.896/
C-----------------------------------------------------------------------
C  INITIALIZE ARRAYS
C
      DO I=1,IM
        RN(I)=0.
        KBOT(I)=KM+1
        KTOP(I)=0
        KUO(I)=0
        CNVFLG(I) = .TRUE.
        DTCONV(I) = 3600.
        CLDWRK(I) = 0.
      ENDDO
      DO K = 1, 15
        ACRIT(K) = ACRITT(K) * (975. - PCRIT(K))
      ENDDO
      DT2 = 2. * DELT
C     MBDT = DT2 * 5.E-3
      MBDT = 10.
      EDTMAX = .3
      ALPHA = .5
      BETA = .15
      EVEF = 0.07
      IF(IM.EQ.384) THEN
        LATD = 46
        LOND = 1
      ELSEIF(IM.EQ.768) THEN
        LATD = 80
        LOND = 81
      ELSE
        LATD = 0
        LOND = 0
      ENDIF
C
C  DEFINE TOP LAYER FOR SEARCH OF THE DOWNDRAFT ORIGINATING LAYER
C  AND THE MAXIMUM THETAE FOR UPDRAFT
C
      KBMAX = KM
      KBM = KM
      KMAX = KM
      DO K = 1, KM
        IF(SL(K).GT..45) KBMAX = K + 1
        IF(SL(K).GT..7) KBM = K + 1
        IF(SL(K).GT..06) KMAX = K + 1
      ENDDO
C
C   CONVERT SURFACE PRESSURE TO MB FROM CB
C
      DO I = 1, IM
        PSFC(I) = PS(I) * 10.
      ENDDO
      DO K = 1, KMAX
        DO I = 1, IM
          P(I,K) = PSFC(I) * SL(K)
          PWO(I,K) = 0.
          PWDO(I,K) = 0.
          TO(I,K) = T1(I,K)
          QO(I,K) = Q1(I,K)
          DBYO(I,K) = 0.
        ENDDO
      ENDDO
C
C  COLUMN VARIABLES
C  P IS PRESSURE OF THE LAYER (MB)
C  T IS TEMPERATURE AT T-DT (K)..TN
C  Q IS MIXING RATIO AT T-DT (KG/KG)..QN
C  TO IS TEMPERATURE AT T+DT (K)... THIS IS AFTER ADVECTION AND TURBULAN
C  QO IS MIXING RATIO AT T+DT (KG/KG)..Q1
C
      DO K = 1, KMAX
        DO I = 1, IM
          QESO(I,K) = 10. * FPVS(T1(I,K))
          QESO(I,K) = EPS * QESO(I,K) / (P(I,K) + EPSM1 * QESO(I,K))
          QESO(I,K) = MAX(QESO(I,K),1.E-8)
          QO(I,K) = MIN(QO(I,K),QESO(I,K))
          TVO(I,K) = TO(I,K) + DELTA * TO(I,K) * QO(I,K)
        ENDDO
      ENDDO
C
C  HYDROSTATIC HEIGHT ASSUME ZERO TERR
C
      DLNSIG = ALOG(SL(1))
      DO I = 1, IM
        ZO(I,1) = TERR - DLNSIG * RD / G * TVO(I,1)
      ENDDO
      DO K = 2, KMAX
        DLNSIG = ALOG(SL(K) / SL(K-1))
        DO I = 1, IM
          ZO(I,K) = ZO(I,K-1) - DLNSIG * RD / G
     &              * .5 * (TVO(I,K) + TVO(I,K-1))
        ENDDO
      ENDDO
C  COMPUTE MOIST STATIC ENERGY
      DO K = 1, KMAX
        DO I = 1, IM
          HEO(I,K) = G * ZO(I,K) + CP * TO(I,K) + HVAP * QO(I,K)
          HESO(I,K) = G * ZO(I,K) + CP * TO(I,K) + HVAP * QESO(I,K)
          HEO(I,K) = MIN(HEO(I,K),HESO(I,K))
        ENDDO
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       PRINT *, '   HEO ='
C       PRINT 6001, (HEO(LOND,K),K=1,KMAX)
C       PRINT *, '   HESO ='
C       PRINT 6001, (HESO(LOND,K),K=1,KMAX)
C       PRINT *, '   TO ='
C       PRINT 6002, (TO(LOND,K)-273.16,K=1,KMAX)
C       PRINT *, '   QO ='
C       PRINT 6003, (QO(LOND,K),K=1,KMAX)
C       PRINT *, '   QSO ='
C       PRINT 6003, (QESO(LOND,K),K=1,KMAX)
C     ENDIF
C
C  DETERMINE LEVEL WITH LARGEST MOIST STATIC ENERGY
C  THIS IS THE LEVEL WHERE UPDRAFT STARTS
C
      DO I = 1, IM
        HMAX(I) = HEO(I,1)
        KB(I) = 1
      ENDDO
      DO K = 2, KBM
        DO I = 1, IM
          IF(HEO(I,K).GT.HMAX(I).AND.CNVFLG(I)) THEN
            KB(I) = K
            HMAX(I) = HEO(I,K)
          ENDIF
        ENDDO
      ENDDO
C
C  LOOK FOR CONVECTIVE CLOUD BASE AS THE LEVEL OF FREE CONVECTION
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          INDX = KB(I)
          HKBO(I) = .5 * (HEO(I,INDX) + HEO(I,INDX+1))
          QKBO(I) = .5 * (QO(I,INDX) + QO(I,INDX+1))
        ENDIF
      ENDDO
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
        KBCON(I) = KMAX
      ENDDO
      DO K = 1, KBMAX
        DO I = 1, IM
          IF(FLG(I).AND.K.GT.KB(I)) THEN
            HSBAR(I) = .5 * (HESO(I,K) + HESO(I,K+1))
            IF(HKBO(I).GT.HSBAR(I)) THEN
              FLG(I) = .FALSE.
              KBCON(I) = K
            ENDIF
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          PBCDIF(I) = -P(I,KBCON(I)) + P(I,KB(I))
          IF(PBCDIF(I).GT.150.) CNVFLG(I) = .FALSE.
          IF(KBCON(I).EQ.KMAX) CNVFLG(I) = .FALSE.
        ENDIF
      ENDDO
      TOTFLG = .TRUE.
      DO I = 1, IM
        TOTFLG = TOTFLG .AND. (.NOT. CNVFLG(I))
      ENDDO
      IF(TOTFLG) RETURN
C  FOUND LFC, CAN DEFINE REST OF VARIABLES
 6001 FORMAT(2X,-2P10F12.2)
 6002 FORMAT(2X,10F12.2)
 6003 FORMAT(2X,3P10F12.2)
C
C  DETERMINE ENTRAINMENT RATE BETWEEN KB AND KBCON
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          IF(KB(I).EQ.1) THEN
            DZ = .5 * (ZO(I,KBCON(I)) + ZO(I,KBCON(I)-1)) - ZO(I,1)
          ELSE
            DZ = .5 * (ZO(I,KBCON(I)) + ZO(I,KBCON(I)-1))
     &         - .5 * (ZO(I,KB(I)) + ZO(I,KB(I)-1))
          ENDIF
          IF(KBCON(I).NE.KB(I)) THEN
            XLAMB(I) = -ALOG(ALPHA) / DZ
          ELSE
            XLAMB(I) = 0.
          ENDIF
        ENDIF
      ENDDO
C  DETERMINE UPDRAFT MASS FLUX
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            ETA(I,K) = 1.
          ENDIF
        ENDDO
      ENDDO
      DO K = KBMAX, 2, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.KBCON(I).AND.K.GE.KB(I)) THEN
            DZ = .5 * (ZO(I,K+1) - ZO(I,K-1))
            ETA(I,K) = ETA(I,K+1) * EXP(-XLAMB(I) * DZ)
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I).AND.KB(I).EQ.1.AND.KBCON(I).GT.1) THEN
          DZ = .5 * (ZO(I,2) - ZO(I,1))
          ETA(I,1) = ETA(I,2) * EXP(-XLAMB(I) * DZ)
        ENDIF
      ENDDO
C  DETERMINE CLOUD TOP
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
        KTCON(I) = 1
      ENDDO
C
C  WORK UP UPDRAFT CLOUD PROPERTIES
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          INDX = KB(I)
          HCKO(I,INDX) = HKBO(I)
          QCKO(I,INDX) = QKBO(I)
          PWAVO(I) = 0.
        ENDIF
      ENDDO
C
C  CLOUD PROPERTY BELOW CLOUD BASE IS MODIFIED BY THE ENTRAINMENT PROCES
C
      DO K = 2, KMAX - 1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.GT.KB(I).AND.K.LE.KBCON(I)) THEN
            FACTOR = ETA(I,K-1) / ETA(I,K)
            ONEMF = 1. - FACTOR
            HCKO(I,K) = FACTOR * HCKO(I,K-1) + ONEMF * HEO(I,K)
            DBYO(I,K) = HCKO(I,K) - .5 * (HESO(I,K) + HESO(I,K+1))
          ENDIF
          IF(CNVFLG(I).AND.K.GT.KBCON(I)) THEN
            HCKO(I,K) = HCKO(I,K-1)
            DBYO(I,K) = HCKO(I,K) - .5 * (HESO(I,K) + HESO(I,K+1))
          ENDIF
        ENDDO
      ENDDO
      DO K = 2, KMAX
        KK = KMAX - K + 1
        DO I = 1, IM
          IF(DBYO(I,KK).GE.0..AND.FLG(I).AND.KK.GT.KBCON(I)) THEN
            KTCON(I) = KK + 1
            FLG(I) = .FALSE.
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I).AND.(P(I,KBCON(I)) - P(I,KTCON(I))).LT.150.)
     &  CNVFLG(I) = .FALSE.
      ENDDO
      TOTFLG = .TRUE.
      DO I = 1, IM
        TOTFLG = TOTFLG .AND. (.NOT. CNVFLG(I))
      ENDDO
      IF(TOTFLG) RETURN
C  DOWNDRAFT ORIGINATING LEVEL IS ASSUMED TO BE AT PBCDIF ABOVE KBCON
      DO I = 1, IM
          HMIN(I) = HESO(I,1)
          LMIN(I) = KBMAX
          JMIN(I) = KBMAX
      ENDDO
      DO K = 2, KBMAX
        DO I = 1, IM
          IF(HESO(I,K).LT.HMIN(I).AND.CNVFLG(I)) THEN
            LMIN(I) = K + 1
            HMIN(I) = HESO(I,K)
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
C       IF(SLIMSK(I).NE.1.0.AND.CNVFLG(I)) THEN
C  OVER SEA
        IF(CNVFLG(I)) THEN
          JMIN(I) = MIN(LMIN(I),KTCON(I)-1)
          XMBMAX(I) = .1
          JMIN(I) = MAX(JMIN(I),KBCON(I)+1)
        ENDIF
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I).AND.JMIN(I).LE.KBCON(I)) CNVFLG(I) = .FALSE.
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, ' LMIN, KDS =', LMIN(I), KDS(I)
C       PRINT *, ' KBOT, KTOP, JMIN =', KBCON(I), KTCON(I), JMIN(I)
C     ENDIF
      TOTFLG = .TRUE.
      DO I = 1, IM
        TOTFLG = TOTFLG .AND. (.NOT. CNVFLG(I))
      ENDDO
      IF(TOTFLG) RETURN
C
C  COMPUTE CLOUD MOISTURE PROPERTY AND PRECIPITATION
C
      DO I = 1, IM
          AA1(I) = 0.
      ENDDO
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.GT.KB(I).AND.K.LT.KTCON(I)) THEN
            DZ = .5 * (ZO(I,K+1) - ZO(I,K-1))
            DZ1 = (ZO(I,K) - ZO(I,K-1))
            GAMMA = EL2ORC * QESO(I,K) / (TO(I,K)**2)
            QRCH = .5 * (QESO(I,K) + QESO(I,K+1))
     &           + GAMMA * DBYO(I,K) / (HVAP * (1. + GAMMA))
            FACTOR = ETA(I,K-1) / ETA(I,K)
            ONEMF = 1. - FACTOR
            QCKO(I,K) = FACTOR * QCKO(I,K-1) + ONEMF * QO(I,K)
            DQ = ETA(I,K) * QCKO(I,K) - ETA(I,K) * QRCH
C
C  BELOW LFC CHECK IF THERE IS EXCESS MOISTURE TO RELEASE LATENT HEAT
C
            IF(DQ.GT.0.) THEN
              ETAH = .5 * (ETA(I,K) + ETA(I,K-1))
              QLK = DQ / (ETA(I,K) + ETAH * C0 * DZ)
              AA1(I) = AA1(I) - DZ1 * G * QLK
              QC = QLK + QRCH
              PWO(I,K) = ETAH * C0 * DZ * QLK
              QCKO(I,K) = QC
              PWAVO(I) = PWAVO(I) + PWO(I,K)
            ENDIF
          ENDIF
        ENDDO
      ENDDO
C
C  CALCULATE CLOUD WORK FUNCTION AT T+DT
C
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.GT.KBCON(I).AND.K.LT.KTCON(I)) THEN
            DZ1 = ZO(I,K) - ZO(I,K-1)
            GAMMA = EL2ORC * QESO(I,K) / (TO(I,K)**2)
            GAMMAO = EL2ORC * QESO(I,K-1) / (TO(I,K-1)**2)
            RFACT =  1. + .25 * DELTA * CP * (GAMMA + GAMMAO)
     &               * (TO(I,K) + TO(I,K-1)) / HVAP
            AA1(I) = AA1(I) +
     &               DZ1 * (G / (.5 * CP * (TO(I,K)+TO(I,K-1))))
     &               * DBYO(I,K-1) / (1. + .5 * (GAMMA + GAMMAO))
     &               * RFACT
            AA1(I)=AA1(I)+
     &               DZ1 * G * DELTA * .5 *
     &               (QESO(I,K) + QESO(I,K-1) - QO(I,K) - QO(I,K-1))
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I).AND.AA1(I).LE.0.) CNVFLG(I) = .FALSE.
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, ' AA1 BEFORE DWNDRFT =', AA1(I)
C     ENDIF
C
C------- DOWNDRAFT CALCULATIONS
C
C  DETERMINE LEVEL WITH LARGEST WIND SPEED
      DO I = 1, IM
          VMAX(I) = SPD(I,KB(I))
          KDS(I) = KB(I)
      ENDDO
      DO K = 2, KMAX - 1
        DO I = 1, IM
          IF(K.GE.KB(I).AND.SPD(I,K).GT.VMAX(I).AND.CNVFLG(I)
     &       .AND.K.LE.KTCON(I)) THEN
            VMAX(I) = SPD(I,K)
            KDS(I) = K
          ENDIF
        ENDDO
      ENDDO
C
C--- DETERMINE DOWNDRAFT STRENGTH IN TERMS OF WINDSHEAR
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          VSHEAR(I) = 0.
          SHRMAX(I) = 0.
          KSHMAX(I) = 1
        ENDIF
      ENDDO
      DO K = 1, KMAX
        DO I = 1, IM
          IF(K.GE.KB(I).AND.K.LE.KDS(I).AND.CNVFLG(I)) THEN
            SHEAR = ABS((SPD(I,K+1)-SPD(I,K))/(ZO(I,K+1)-ZO(I,K)))
            VSHEAR(I) = VSHEAR(I) + SHEAR
            SHRMAX(I) = MAX(SHRMAX(I),SHEAR)
            IF(SHRMAX(I).EQ.SHEAR) KSHMAX(I) = K
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          KNUMB = KDS(I) - KB(I) + 1
          KNUMB = MAX(KNUMB,1)
          VSHEAR(I) = 1.E3 * VSHEAR(I) / FLOAT(KNUMB)
          E1=1.891-.639*VSHEAR(I)
     &       +.0953*(VSHEAR(I)**2)-.00496*(VSHEAR(I)**3)
          EDT(I)=1.-E1
          EDT(I) = MIN(EDT(I),.9)
          EDT(I) = MAX(EDT(I),.3)
          EDTO(I)=EDT(I)
          EDTX(I)=EDT(I)
        ENDIF
      ENDDO
C  DETERMINE DETRAINMENT RATE BETWEEN 1 AND KBDTR
      DO I = 1, IM
        KBDTR(I) = KBCON(I)
        IF(CNVFLG(I)) THEN
          KBDTR(I) = KBCON(I)
          KBDTR(I) = MAX(KBDTR(I),1)
          XLAMD(I) = 0.
          IF(KBDTR(I).GT.1) THEN
            DZ = .5 * ZO(I,KBDTR(I)) + .5 * ZO(I,KBDTR(I)-1)
     &         - ZO(I,1)
            XLAMD(I) = ALOG(BETA) / DZ
          ENDIF
        ENDIF
      ENDDO
C  DETERMINE DOWNDRAFT MASS FLUX
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            ETAD(I,K) = 1.
          ENDIF
          QRCDO(I,K) = 0.
        ENDDO
      ENDDO
      DO K = KBMAX, 2, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.KBDTR(I)) THEN
            DZ = .5 * (ZO(I,K+1) - ZO(I,K-1))
            ETAD(I,K) = ETAD(I,K+1) * EXP(XLAMD(I) * DZ)
          ENDIF
        ENDDO
      ENDDO
      K = 1
      DO I = 1, IM
        IF(CNVFLG(I).AND.KBDTR(I).GT.1) THEN
          DZ = .5 * (ZO(I,2) - ZO(I,1))
          ETAD(I,K) = ETAD(I,K+1) * EXP(XLAMD(I) * DZ)
        ENDIF
      ENDDO
C
C--- DOWNDRAFT MOISTURE PROPERTIES
C
      DO I = 1, IM
        PWEVO(I) = 0.
        FLG(I) = CNVFLG(I)
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          JMN = JMIN(I)
          HCDO(I) = .5 * (HEO(I,JMN) + HEO(I,JMN+1))
          QCDO(I) = .5 * (QO(I,JMN) + QO(I,JMN+1))
          QRCDO(I,JMN) = .5 * (QESO(I,JMN) + QESO(I,JMN+1))
        ENDIF
      ENDDO
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
      ENDDO
      DO K = KMAX-1, 1, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.JMIN(I)) THEN
            DQ = .5 * (QESO(I,K) + QESO(I,K+1))
            DT = .5 * (TO(I,K) + TO(I,K+1))
            GAMMA = EL2ORC * DQ / DT**2
            DH = HCDO(I) - .5*(HESO(I,K)+HESO(I,K+1))
            QRCDO(I,K)=DQ+(1./HVAP)*(GAMMA/(1.+GAMMA))*DH
            DETAD = ETAD(I,K+1) - ETAD(I,K)
            PWDO(I,K) = ETAD(I,K+1) * QCDO(I) -
     &                 ETAD(I,K) * QRCDO(I,K)
              PWDO(I,K) = PWDO(I,K) - DETAD *
     &                   .5 * (QRCDO(I,K) + QRCDO(I,K+1))
            QCDO(I) = QRCDO(I,K)
            PWEVO(I) = PWEVO(I) + PWDO(I,K)
          ENDIF
        ENDDO
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, ' PWAVO, PWEVO =', PWAVO(I), PWEVO(I)
C     ENDIF
C
C--- FINAL DOWNDRAFT STRENGTH DEPENDENT ON PRECIP
C--- EFFICIENCY (EDT), NORMALIZED CONDENSATE (PWAV), AND
C--- EVAPORATE (PWEV)
C
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
      ENDDO
      DO I = 1, IM
        IF(FLG(I)) THEN
          IF(PWEVO(I).GE.0.) THEN
            EDTO(I) = 0.
          ELSE
            EDTO(I) = -EDTO(I) * PWAVO(I) / PWEVO(I)
            EDTO(I) = MIN(EDTO(I),EDTMAX)
          ENDIF
        ENDIF
      ENDDO
C
C
C--- DOWNDRAFT CLOUDWORK FUNCTIONS
C
C
      DO K = KMAX-1, 1, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.JMIN(I)) THEN
            GAMMA1 = EL2ORC * QESO(I,K) / TO(I,K)**2
            GAMMA2 = EL2ORC * QESO(I,K+1) / TO(I,K+1)**2
            DHH=HCDO(I)
            DT=.5*(TO(I,K)+TO(I,K+1))
            DG=.5*(GAMMA1+GAMMA2)
            DH=.5*(HESO(I,K)+HESO(I,K+1))
            DZ=-1.*(ZO(I,K+1)-ZO(I,K))
            AA1(I)=AA1(I)+EDTO(I)*DZ*(G/(CP*DT))*((DHH-DH)/(1.+DG))
     &             *(1.+DELTA*CP*DG*DT/HVAP)
            AA1(I)=AA1(I)+EDTO(I)*
     &      DZ*G*DELTA*.5*(QESO(I,K)+QESO(I,K+1)-QO(I,K)-QO(I,K+1))
          ENDIF
        ENDDO
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, '  AA1 AFTER DWNDRFT =', AA1(I)
C     ENDIF
      DO I = 1, IM
        IF(AA1(I).LE.0.) CNVFLG(I) = .FALSE.
      ENDDO
C
C
C--- WHAT WOULD THE CHANGE BE, THAT A CLOUD WITH UNIT MASS
C--- WILL DO TO THE ENVIRONMENT?
C
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            DELLAH(I,K) = 0.
            DELLAQ(I,K) = 0.
            DELLAT(I,K) = 0.
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
C         DP = 100. * (PSFC(I) - .5 * (P(I,1) + P(I,2)))
          DP = 100. * PSFC(I) * DEL(1)
          DELLAH(I,1) = EDTO(I) * ETAD(I,1) * (HCDO(I)
     &                - .5 * (HEO(I,1) + HEO(I,2))) * G / DP
          DELLAQ(I,1) = EDTO(I) * ETAD(I,1) * (QCDO(I)
     &                - .5 * (QO(I,1) + QO(I,2))) * G / DP
        ENDIF
      ENDDO
C
C--- CHANGED DUE TO SUBSIDENCE AND ENTRAINMENT
C
      DO K = 2, KMAX-1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.KTCON(I)) THEN
            AUP = 1.
            IF(K.LE.KB(I)) AUP = 0.
            ADW = 1.
            IF(K.GT.JMIN(I)) ADW = 0.
            DV1=.5*(HEO(I,K)+HEO(I,K+1))
            DV2 = HEO(I,K)
            DV3=.5*(HEO(I,K)+HEO(I,K-1))
            DV1Q=.5*(QO(I,K)+QO(I,K+1))
            DV2Q = QO(I,K)
            DV3Q=.5*(QO(I,K)+QO(I,K-1))
C           DP=+50.*(P(I,K-1)-P(I,K+1))
            DP = 100. * PSFC(I) * DEL(K)
            DZ = .5 * (ZO(I,K+1) - ZO(I,K-1))
            DETA = ETA(I,K) - ETA(I,K-1)
            DETAD = ETAD(I,K) - ETAD(I,K-1)
            DELLAH(I,K) = DELLAH(I,K) +
     &          ((AUP * ETA(I,K) - ADW * EDTO(I) * ETAD(I,K)) * DV1
     &      - (AUP * ETA(I,K-1) - ADW * EDTO(I) * ETAD(I,K-1))* DV3
     &                   - AUP * DETA * DV2
     &                  + ADW * EDTO(I) * DETAD * HCDO(I)) * G / DP
            DELLAQ(I,K) = DELLAQ(I,K) +
     &          ((AUP * ETA(I,K) - ADW * EDTO(I) * ETAD(I,K)) * DV1Q
     &      - (AUP * ETA(I,K-1) - ADW * EDTO(I) * ETAD(I,K-1))* DV3Q
     &                  - AUP * DETA * DV2Q
     &     +ADW*EDTO(I)*DETAD*.5*(QRCDO(I,K)+QRCDO(I,K-1))) * G / DP
          ENDIF
        ENDDO
      ENDDO
C
C------- CLOUD TOP
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          INDX = KTCON(I)
C         IF(INDX.LT.KMAX) THEN
C           DP = 50. * (P(I,INDX-1) - P(I,INDX+1))
C         ELSE
C           DP = 100. * (P(I,INDX-1) - P(I,INDX))
C         ENDIF
          DP = 100. * PSFC(I) * DEL(INDX)
          DV1 = .5 * (HEO(I,INDX-1) + HEO(I,INDX))
          DELLAH(I,INDX) = (HCKO(I,INDX-1) - DV1) * G / DP
          DVQ1 = .5 * (QO(I,INDX) + QO(I,INDX-1))
          DELLAQ(I,INDX) = (QCKO(I,INDX-1) - DVQ1) * G / DP
        ENDIF
      ENDDO
C
C------- FINAL CHANGED VARIABLE PER UNIT MASS FLUX
C
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            XQ(I,K) = QO(I,K)
            XT(I,K) = TO(I,K)
          ENDIF
          IF(CNVFLG(I).AND.K.LE.KTCON(I)) THEN
            XQ(I,K) = DELLAQ(I,K) * MBDT + QO(I,K)
            DELLAT(I,K) = (DELLAH(I,K) - HVAP * DELLAQ(I,K)) / CP
            XT(I,K) = DELLAT(I,K) * MBDT + TO(I,K)
            XQ(I,K) = MAX(XQ(I,K),1.E-8)
          ENDIF
        ENDDO
      ENDDO
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C
C--- THE ABOVE CHANGED ENVIRONMENT IS NOW USED TO CALULATE THE
C--- EFFECT THE ARBITRARY CLOUD (WITH UNIT MASS FLUX)
C--- WOULD HAVE ON THE STABILITY,
C--- WHICH THEN IS USED TO CALCULATE THE REAL MASS FLUX,
C--- NECESSARY TO KEEP THIS CHANGE IN BALANCE WITH THE LARGE-SCALE
C--- DESTABILIZATION.
C
C--- ENVIRONMENTAL CONDITIONS AGAIN, FIRST HEIGHTS
C
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            XQES(I,K) = 10. * FPVS(XT(I,K))
            XQES(I,K) = EPS * XQES(I,K) / (P(I,K) + EPSM1 * XQES(I,K))
            XQES(I,K) = MAX(XQES(I,K),1.E-8)
            XQ(I,K) = MIN(XQ(I,K),XQES(I,K))
            XTV(I,K) = XT(I,K) + DELTA * XT(I,K) * XQ(I,K)
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          XAA0(I) = 0.
          XPWAV(I) = 0.
        ENDIF
      ENDDO
C
C  HYDROSTATIC HEIGHT ASSUME ZERO TERR
C
      DLNSIG = ALOG(SL(1))
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          XZ(I,1) = TERR - DLNSIG * RD / G * XTV(I,1)
        ENDIF
      ENDDO
      DO K = 2, KMAX
        DLNSIG = ALOG(SL(K) / SL(K-1))
        DO I = 1, IM
          IF(CNVFLG(I)) THEN
            XZ(I,K) = XZ(I,K-1) - DLNSIG * RD / G
     &             * .5 * (XTV(I,K) + XTV(I,K-1))
          ENDIF
        ENDDO
      ENDDO
C
C--- MOIST STATIC ENERGY
C
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LE.KTCON(I)) THEN
            XHE(I,K) = G * XZ(I,K) + CP * XT(I,K) + HVAP * XQ(I,K)
            XHES(I,K) = G * XZ(I,K) + CP * XT(I,K) + HVAP * XQES(I,K)
            XHE(I,K) = MIN(XHE(I,K),XHES(I,K))
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          INDX = KB(I)
          XHKB(I) = .5 * (XHE(I,INDX) + XHE(I,INDX+1))
          XQKB(I) = .5 * (XQ(I,INDX) + XQ(I,INDX+1))
          XHCK(I,INDX) = XHKB(I)
          XQCK(I,INDX) = XQKB(I)
        ENDIF
      ENDDO
C
C
C**************************** STATIC CONTROL
C
C
C------- MOISTURE AND CLOUD WORK FUNCTIONS
C
      DO K = 2, KMAX - 1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.GT.KB(I).AND.K.LE.KBCON(I)) THEN
            FACTOR = ETA(I,K-1) / ETA(I,K)
            ONEMF = 1. - FACTOR
            XHCK(I,K) = FACTOR * XHCK(I,K-1) + ONEMF * XHE(I,K)
          ENDIF
          IF(CNVFLG(I).AND.K.GT.KBCON(I)) THEN
            XHCK(I,K) = XHCK(I,K-1)
          ENDIF
        ENDDO
      ENDDO
      DO K = 2, KMAX - 1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.GT.KB(I).AND.K.LT.KTCON(I)) THEN
            DZ = .5 * (XZ(I,K+1) - XZ(I,K-1))
            GAMMA = EL2ORC * XQES(I,K) / (XT(I,K)**2)
            XDBY = XHCK(I,K) - .5 * (XHES(I,K) + XHES(I,K+1))
            XDBY = MAX(XDBY,0.)
            XQRCH = .5*(XQES(I,K)+XQES(I,K+1))
     &           + GAMMA * XDBY / (HVAP * (1. + GAMMA))
            FACTOR = ETA(I,K-1) / ETA(I,K)
            ONEMF = 1. - FACTOR
            XQCK(I,K) = FACTOR * XQCK(I,K-1) + ONEMF * XQ(I,K)
            DQ = ETA(I,K) * XQCK(I,K) - ETA(I,K) * XQRCH
            IF(DQ.GT.0.) THEN
              ETAH = .5 * (ETA(I,K) + ETA(I,K-1))
              QLK = DQ / (ETA(I,K) + ETAH * C0 * DZ)
              XAA0(I) = XAA0(I) - (XZ(I,K) - XZ(I,K-1)) * G * QLK
              XQC = QLK + XQRCH
              XPW = ETAH * C0 * DZ * QLK
              XQCK(I,K) = XQC
              XPWAV(I) = XPWAV(I) + XPW
            ENDIF
          ENDIF
          IF(CNVFLG(I).AND.K.GT.KBCON(I).AND.K.LT.KTCON(I)) THEN
            DZ1 = XZ(I,K) - XZ(I,K-1)
            GAMMA = EL2ORC * XQES(I,K) / (XT(I,K)**2)
            GAMMAO = EL2ORC *  XQES(I,K-1) / (XT(I,K-1)**2)
            RFACT =  1. + .25 * DELTA * CP * (GAMMA + GAMMAO)
     &               * (XT(I,K) + XT(I,K-1)) / HVAP
            XDBY = XHCK(I,K-1) - .5 * (XHES(I,K) + XHES(I,K-1))
            XAA0(I) = XAA0(I)
     &              + DZ1 * (G / (.5 * CP * (XT(I,K)+XT(I,K-1))))
     &              * XDBY / (1. + .5 * (GAMMA + GAMMAO))
     &              * RFACT
            XAA0(I)=XAA0(I)+
     &               DZ1 * G * DELTA * .5 *
     &               (XQES(I,K) + XQES(I,K-1) - XQ(I,K) - XQ(I,K-1))
          ENDIF
        ENDDO
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, ' XAA BEFORE DWNDRFT =', XAA0(I)
C     ENDIF
C
C------- DOWNDRAFT CALCULATIONS
C
C
C--- DOWNDRAFT MOISTURE PROPERTIES
C
      DO I = 1, IM
        XPWEV(I) = 0.
      ENDDO
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
          JMN = JMIN(I)
          XHCD(I) = .5 * (XHE(I,JMN) + XHE(I,JMN+1))
          XQCD(I) = .5 * (XQ(I,JMN) + XQ(I,JMN+1))
          QRCD(I,JMN) = .5 * (XQES(I,JMN) + XQES(I,JMN+1))
        ENDIF
      ENDDO
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
      ENDDO
      DO K = KMAX-1, 1, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.JMIN(I)) THEN
            DQ = .5 * (XQES(I,K) + XQES(I,K+1))
            DT = .5 * (XT(I,K) + XT(I,K+1))
            GAMMA = EL2ORC * DQ / DT**2
            DH = XHCD(I) - .5*(XHES(I,K)+XHES(I,K+1))
            QRCD(I,K)=DQ+(1./HVAP)*(GAMMA/(1.+GAMMA))*DH
            DETAD = ETAD(I,K+1) - ETAD(I,K)
            XPWD = ETAD(I,K+1) * QRCD(I,K+1) -
     &                 ETAD(I,K) * QRCD(I,K)
            XPWD = XPWD - DETAD *
     &             .5 * (QRCD(I,K) + QRCD(I,K+1))
            XPWEV(I) = XPWEV(I) + XPWD
          ENDIF
        ENDDO
      ENDDO
C
      DO I = 1, IM
        FLG(I) = CNVFLG(I)
      ENDDO
      DO I = 1, IM
        IF(FLG(I)) THEN
          IF(XPWEV(I).GE.0.) THEN
            EDTX(I) = 0.
          ELSE
            EDTX(I) = -EDTX(I) * XPWAV(I) / XPWEV(I)
            EDTX(I) = MIN(EDTX(I),EDTMAX)
          ENDIF
        ENDIF
      ENDDO
C
C
C
C--- DOWNDRAFT CLOUDWORK FUNCTIONS
C
C
      DO K = KMAX-1, 1, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LT.JMIN(I)) THEN
            GAMMA1 = EL2ORC * XQES(I,K) / XT(I,K)**2
            GAMMA2 = EL2ORC * XQES(I,K+1) / XT(I,K+1)**2
            DHH=XHCD(I)
            DT=.5*(XT(I,K)+XT(I,K+1))
            DG=.5*(GAMMA1+GAMMA2)
            DH=.5*(XHES(I,K)+XHES(I,K+1))
            DZ=-1.*(XZ(I,K+1)-XZ(I,K))
            XAA0(I)=XAA0(I)+EDTX(I)*DZ*(G/(CP*DT))*((DHH-DH)/(1.+DG))
     &              *(1.+DELTA*CP*DG*DT/HVAP)
            XAA0(I)=XAA0(I)+EDTX(I)*
     &      DZ*G*DELTA*.5*(XQES(I,K)+XQES(I,K+1)-XQ(I,K)-XQ(I,K+1))
          ENDIF
        ENDDO
      ENDDO
C     IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
C       I = LOND
C       PRINT *, '  XAA AFTER DWNDRFT =', XAA0(I)
C     ENDIF
C
C  CALCULATE CRITICAL CLOUD WORK FUNCTION
C
      DO I = 1, IM
        ACRT(I) = 0.
        IF(CNVFLG(I)) THEN
C       IF(CNVFLG(I).AND.SLIMSK(I).NE.1.) THEN
          IF(P(I,KTCON(I)).LT.PCRIT(15))THEN
            ACRT(I)=ACRIT(15)*(975.-P(I,KTCON(I)))
     &              /(975.-PCRIT(15))
          ELSE IF(P(I,KTCON(I)).GT.PCRIT(1))THEN
            ACRT(I)=ACRIT(1)
          ELSE
            K = IFIX((850. - P(I,KTCON(I)))/50.) + 2
            K = MIN(K,15)
            K = MAX(K,2)
            ACRT(I)=ACRIT(K)+(ACRIT(K-1)-ACRIT(K))*
     *           (P(I,KTCON(I))-PCRIT(K))/(PCRIT(K-1)-PCRIT(K))
           ENDIF
C        ELSE
C          ACRT(I) = .5 * (P(I,KBCON(I)) - P(I,KTCON(I)))
         ENDIF
       ENDDO
C
C--- LARGE SCALE FORCING
C
      DO I= 1, IM
        FLG(I) = CNVFLG(I)
        IF(CNVFLG(I)) THEN
C         AATMP(I) = MAX(AA0(I),ACRT(I))
C         AATMP(I) = AA0(I)
C         F(I) = (AA1(I) - AATMP(I)) / DT2
C         F(I) = (AA1(I) - AA0(I)) / DT2
C         IF(AA0(I).GT.ACRT(I))
C         IF(SLIMSK(I).EQ.1.)
C    &      F(I) = F(I) + (AATMP(I)-ACRT(I)) / MAX(DT2,DTCONV(I))
          F(I) = (AA1(I) - ACRT(I)) / DTCONV(I)
          IF(F(I).LE.0.) FLG(I) = .FALSE.
        ENDIF
        CNVFLG(I) = FLG(I)
        IF(CNVFLG(I)) THEN
C         XAA0(I) = MAX(XAA0(I),0.)
          XK(I) = (XAA0(I) - AA1(I)) / MBDT
          IF(XK(I).GE.0.) FLG(I) = .FALSE.
        ENDIF
C
C--- KERNEL, CLOUD BASE MASS FLUX
C
        CNVFLG(I) = FLG(I)
        IF(CNVFLG(I)) THEN
          XMB(I) = -F(I) / XK(I)
          XMB(I) = MIN(XMB(I),XMBMAX(I))
        ENDIF
      ENDDO
      IF(LAT.EQ.LATD.AND.CNVFLG(LOND)) THEN
        I = LOND
        PRINT *, '  A1, XA =', AA1(I), XAA0(I)
        PRINT *, ' XMB, ACRT =', XMB(I), ACRT(I)
      ENDIF
      TOTFLG = .TRUE.
      DO I = 1, IM
        TOTFLG = TOTFLG .AND. (.NOT. CNVFLG(I))
      ENDDO
      IF(TOTFLG) RETURN
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C
C--- FEEDBACK: SIMPLY THE CHANGES FROM THE CLOUD WITH UNIT MASS FLUX
C---           MULTIPLIED BY  THE MASS FLUX NECESSARY TO KEEP THE
C---           EQUILIBRIUM WITH THE LARGER-SCALE.
C
      DO I = 1, IM
        DELHBAR(I) = 0.
        DELQBAR(I) = 0.
        DELTBAR(I) = 0.
        QCOND(I) = 0.
      ENDDO
      DO K = 1, KMAX
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LE.KTCON(I)) THEN
            AUP = 1.
            IF(K.LE.KB(I)) AUP = 0.
            ADW = 1.
            IF(K.GT.JMIN(I)) ADW = 0.
            TO(I,K) = T1(I,K) + DELLAT(I,K) * XMB(I) * DT2
            QO(I,K) = Q1(I,K) + DELLAQ(I,K) * XMB(I) * DT2
C           IF(K.EQ.1) THEN
C             DP = 100. * (PSFC(I) - .5 * (P(I,1) + P(I,2)))
C           ELSEIF(K.LT.KMAX) THEN
C             DP = 50. * (P(I,K-1) - P(I,K+1))
C           ELSE
C             DP = 100. * (P(I,K-1) - P(I,K))
C           ENDIF
            DP = 100. * PSFC(I) * DEL(K)
            DELHBAR(I) = DELHBAR(I) + DELLAH(I,K)*XMB(I)*DP/G
            DELQBAR(I) = DELQBAR(I) + DELLAQ(I,K)*XMB(I)*DP/G
            DELTBAR(I) = DELTBAR(I) + DELLAT(I,K)*XMB(I)*DP/G
          ENDIF
        ENDDO
      ENDDO
      IF(LAT.EQ.LATD.AND.CNVFLG(LOND) ) THEN
        I = LOND
        PRINT *, ' DELHBAR, DELQBAR, DELTBAR ='
        PRINT *, DELHBAR(I), HVAP*DELQBAR(I), CP*DELTBAR(I)
      ENDIF
      DO I = 1, IM
        DELQBAR(I) = 0.
        DELTBAR(I) = 0.
      ENDDO
      DO K = KMAX, 1, -1
        DO I = 1, IM
          IF(CNVFLG(I).AND.K.LE.KTCON(I)) THEN
            AUP = 1.
            IF(K.LE.KB(I)) AUP = 0.
            ADW = 1.
            IF(K.GT.JMIN(I)) ADW = 0.
            RN(I) = RN(I)
     &            + (AUP * PWO(I,K) + ADW * EDTO(I) * PWDO(I,K))
     &            * XMB(I) * .001 * DT2
            QCOND(I) = EVEF * (QO(I,K) - QESO(I,K)) / (1. + EL2ORC *
     &               QESO(I,K) / TO(I,K)**2)
C           IF(K.EQ.1) THEN
C             DP = 100. * (PSFC(I) - .5 * (P(I,1) + P(I,2)))
C           ELSEIF(K.LT.KMAX) THEN
C             DP = 50. * (P(I,K-1) - P(I,K+1))
C           ELSE
C             DP = 100. * (P(I,K-1) - P(I,K))
C           ENDIF
            DP = 100. * PSFC(I) * DEL(K)
            IF(RN(I).GT.0..AND.QCOND(I).LE.0.) THEN
              QEVAP = -QCOND(I) * (1. - EXP(-.32 * SQRT(DT2 * RN(I))))
              QEVAP = MIN(QEVAP, RN(I)*1000.*G/DP)
              QO(I,K) = QO(I,K) + QEVAP
              TO(I,K) = TO(I,K) - ELOCP * QEVAP
              RN(I) = RN(I) - .001 * QEVAP * DP / G
              DELLAT(I,K) = DELLAT(I,K) - ELOCP*QEVAP/XMB(I)/DT2
              DELLAQ(I,K) = DELLAQ(I,K) + QEVAP/XMB(I)/DT2
            ENDIF
            DELQBAR(I) = DELQBAR(I) + DELLAQ(I,K)*XMB(I)*DP/G
            DELTBAR(I) = DELTBAR(I) + DELLAT(I,K)*XMB(I)*DP/G
          ENDIF
        ENDDO
      ENDDO
      IF(LAT.EQ.LATD.AND.CNVFLG(LOND) ) THEN
        I = LOND
        PRINT *, '   DELLAH ='
        PRINT 6003, (DELLAH(I,K)*XMB(I),K=1,KMAX)
        PRINT *, '   DELLAQ ='
        PRINT 6003, (HVAP*DELLAQ(I,K)*XMB(I),K=1,KMAX)
        PRINT *, '   DELLAT ='
        PRINT 6003, (CP*DELLAT(I,K)*XMB(I),K=1,KMAX)
        PRINT *, ' DELHBAR, DELQBAR, DELTBAR ='
        PRINT *, DELHBAR(I), HVAP*DELQBAR(I), CP*DELTBAR(I)
        PRINT *, ' PRECIP =', HVAP*RN(I)*1000./DT2
      ENDIF
C
C  PRECIPITATION RATE CONVERTED TO ACTUAL PRECIP
C  IN UNIT OF M INSTEAD OF KG
C
      DO I = 1, IM
        IF(CNVFLG(I)) THEN
C         RN(I) = RN(I) * .001 * DT2
          IF(RN(I).LE.0.) THEN
            RN(I) = 0.
          ELSE
            KTOP(I) = KTCON(I)
            KBOT(I) = KBCON(I)
            KUO(I) = 1
            CLDWRK(I) = AA1(I)
            DO K = 1, KTCON(I)
              T1(I,K) = TO(I,K)
              Q1(I,K) = QO(I,K)
            ENDDO
          ENDIF
        ENDIF
      ENDDO
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE CNVCLD(CLSTP,IM,RN,KBOT,KTOP,CV,CVB,CVT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    CNVCLD      COMPUTES CONVECTIVE CLOUD COVER
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 91-05-07
C
C ABSTRACT: COMPUTES CONVECTIVE CLOUD COVER AND CLOUD TOPS AND BOTTOMS
C   AFTER THE DEEP CONVECTION IS INVOKED. CLOUD COVER IS INTERPOLATED
C   FROM A TABLE RELATING CLOUD COVER TO PRECIPITATION RATE.
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C USAGE:    CALL CNVCLD(CMEAN,LAT,IISTP,DT,RN,KBOT,KTOP,CV,CVB,CVT)
C
C   INPUT ARGUMENT LIST:
C     CMEAN    - REAL FLAG (GE 0 TO ACCUMULATE, EQ 99 TO RETURN VALUES)
C     LAT      - INTEGER LATITUDE INDEX
C     IISTP    - INTEGER TIME STEP NUMBER
C     DT       - REAL TIME STEP IN SECONDS
C     RN       - REAL (NX) CONVECTIVE RAIN IN METERS
C     KBOT     - INTEGER (NX) CLOUD BOTTOM LEVEL
C     KTOP     - INTEGER (NX) CLOUD TOP LEVEL
C
C   OUTPUT ARGUMENT LIST:
C     CV       - REAL (NX,NY) CONVECTIVE CLOUD COVER
C     CVB      - REAL (NX,NY) CONVECTIVE CLOUD BASE LEVEL
C     CVT      - REAL (NX,NY) CONVECTIVE CLOUD TOP LEVEL
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      DIMENSION RN(IM),KBOT(IM),KTOP(IM),CV(IM),CVB(IM),CVT(IM)
C  LOCAL WORK VARIABLES AND ARRAYS
      DIMENSION NMD(IM),PMD(IM)
C  LOCAL SAVE VARIABLES AND ARRAYS
      PARAMETER(NCC=9)
      DIMENSION CC(NCC),P(NCC)
      DATA CC/0.,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8/
      DATA P/.14,.31,.70,1.6,3.4,7.7,17.,38.,85./
      DATA CVB0/100./
C-----------------------------------------------------------------------
C  INITIALIZE CONVECTIVE RAIN AND RANGE
      IF(CLSTP.LE.0..AND.CLSTP.GT.-10.) THEN
        DO I=1,IM
          CV(I)=0.
          CVB(I)=CVB0
          CVT(I)=0.
CWTAVG    CVB(I)=0.
CWTAVG    CVT(I)=0.
        ENDDO
      ENDIF
C-----------------------------------------------------------------------
C  ACCUMULATE CONVECTIVE RAIN AND RANGE
      IF(CLSTP.GT.-99.) THEN
        DO I=1,IM
          IF(RN(I).GT.0.) THEN
            CV(I)=CV(I)+RN(I)
            CVB(I)=MIN(CVB(I),FLOAT(KBOT(I)))
            CVT(I)=MAX(CVT(I),FLOAT(KTOP(I)+1))
CWTAVG      CVB(I)=CVB(I)+KBOT(I)*RN(I)
CWTAVG      CVT(I)=CVT(I)+(KTOP(I)+1)*RN(I)
          ENDIF
        ENDDO
      ENDIF
C-----------------------------------------------------------------------
C  CONVERT PRECIPITATION RATE INTO CLOUD FRACTION
      IF (CLSTP.GT.0..OR.(CLSTP.LT.0.AND.CLSTP.GT.-10.)) THEN
        DO I=1,IM
CWTAVG    IF(CV(I).GT.0.) THEN
CWTAVG      CVB(I)=NINT(CVB(I)/CV(I))
CWTAVG      CVT(I)=NINT(CVT(I)/CV(I))
CWTAVG    ELSE
CWTAVG      CVB(I)=CVB0
CWTAVG      CVT(I)=0.
CWTAVG    ENDIF
          PMD(I)=CV(I)*(24.E+3/ABS(CLSTP))
          NMD(I)=0
        ENDDO
        DO N=1,NCC
          DO I=1,IM
            IF(PMD(I).GT.P(N)) NMD(I)=N
          ENDDO
        ENDDO
        DO I=1,IM
          IF(NMD(I).EQ.0) THEN
            CV(I)=0.
            CVB(I)=CVB0
            CVT(I)=0.
          ELSEIF(NMD(I).EQ.NCC) THEN
            CV(I)=CC(NCC)
          ELSE
            CC1=CC(NMD(I))
            CC2=CC(NMD(I)+1)
            P1=P(NMD(I))
            P2=P(NMD(I)+1)
            CV(I)=CC1+(CC2-CC1)*(PMD(I)-P1)/(P2-P1)
          ENDIF
        ENDDO
      ENDIF
C-----------------------------------------------------------------------
      RETURN
      END
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPKAP)
C-----------------------------------------------------------------------
      SUBROUTINE SHALCV(IM,IX,KM,DT,DEL,SI,SL,SLK,KUO,PS,Q,T)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:   SHALCV       COMPUTES SHALLOW CONVECTIVE HEATING AND MOI
C   PRGMMR: PETER CAPLAN     ORG: W/NMC23    DATE: 91-03-19
C
C ABSTRACT: SUB-GRID-SCALE SHALLOW CONVECTIVE CLOUD PARAMETERIZATION.
C   THIS ROUTINE COMPUTES THE EFFECTS OF SHALLOW CONVECTION
C   BASED ON TIEDTKE (1984), ECMWF WORKSHOP ON CONVECTION IN
C   LARGE-SCALE NUMERICAL MODELS.
C   TAPERED K PROFILE IN CLOUD DEVELOPED BY CAPLAN AND LONG.
C   ORIGINALLY CODED BY R. KISTLER AND P. CAPLAN, CONVERTED TO STANDARD
C   FORTRAN FOR CRAY BY H.JUANG. H. PAN MODIFIED IT AND KUO91 TO
C   DO MSTADB AFTER COMPRESSION AND THE REST OF THE COMPUTATION
C   IN COMPRESSED ARRAYS. TIDY UP OF MOIST PROCESSES BY M. IREDELL.
C
C PROGRAM HISTORY LOG:
C   91-03-19  HUA-LU PAN
C   91-05-07  IREDELL             ARGUMENTS CHANGED, TRIDI2 SPLIT OFF
C
C USAGE:    CALL SHALCV(IM,KM,DT,DEL,SI,SL,SLK,KUO,PS,Q,T)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     KM       - INTEGER NUMBER OF LEVELS
C     DT       - REAL TIME STEP IN SECONDS
C     DEL      - REAL (KM) SIGMA LAYER THICKNESS
C     SL       - REAL (KM) SIGMA VALUES
C     SLK      - REAL (KM) SIGMA VALUES TO THE KAPPA
C     PS       - REAL (IM) SURFACE PRESSURE IN KILOPASCALS (CB)
C     Q        - REAL (IM,KM) CURRENT SPECIFIC HUMIDITY IN KG/KG
C     T        - REAL (IM,KM) CURRENT TEMPERATURE IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     Q        - REAL (IM,KM) ADJUSTED SPECIFIC HUMIDITY IN KG/KG
C     T        - REAL (IM,KM) ADJUSTED TEMPERATURE IN KELVIN
C
C SUBPROGRAMS CALLED:
C   MSTADB   - COMPUTES MOIST ADIABAT AND RETURNS CLOUD VALUES
C   TRIDI2   - SOLVES TRIDIAGONAL MATRIX PROBLEM
C
C REMARKS: NONSTANDARD AUTOMATIC ARRAYS ARE USED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      DIMENSION DEL(KM),SI(KM+1),SL(KM),SLK(KM),KUO(IM),PS(IM),
     &          Q(IX,KM),T(IX,KM)
C  PHYSICAL PARAMETERS
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,
     &          CP= 1.0046E+3 ,HVAP= 2.5000E+6 )
      PARAMETER(GOCP=G/CP)
C  BOUNDS OF PARCEL ORIGIN
      PARAMETER(KLIFTL=2,KLIFTU=2)
C  LOCAL VARIABLES AND ARRAYS
      LOGICAL LSHC
      DIMENSION LSHC(IM)
      DIMENSION INDEX2(IM),KLCL(IM),KBOT(IM),KTOP(IM)
      DIMENSION PS2(IM),
     &          Q2(IM*KM),T2(IM*KM),
     &          AL(IM*(KM-1)),AD(IM*KM),AU(IM*(KM-1))
C-----------------------------------------------------------------------
C  COMPRESS FIELDS TO POINTS WITH NO DEEP CONVECTION
C  AND MOIST STATIC INSTABILITY.
      DO I=1,IM
        LSHC(I)=.FALSE.
      ENDDO
      DO K=1,KM-1
        DO I=1,IM
          IF(KUO(I).EQ.0) THEN
            ELDQ=HVAP*(Q(I,K)-Q(I,K+1))
            CPDT=CP*(T(I,K)-T(I,K+1))
            RTDLS=(SL(K)-SL(K+1))/SI(K+1)*RD*0.5*(T(I,K)+T(I,K+1))
            DMSE=ELDQ+CPDT-RTDLS
            LSHC(I)=LSHC(I).OR.DMSE.GT.0.
          ENDIF
        ENDDO
      ENDDO
      N2=0
      DO I=1,IM
        IF(LSHC(I)) THEN
          N2=N2+1
          INDEX2(N2)=I
        ENDIF
      ENDDO
      IF(N2.EQ.0) RETURN
      DO I=1,N2
        PS2(I)=PS(INDEX2(I))
      ENDDO
      DO K=1,KM
CFPP$ SELECT(VECTOR)
        DO I=1,N2
          IK=(K-1)*N2+I
          Q2(IK)=Q(INDEX2(I),K)
          T2(IK)=T(INDEX2(I),K)
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
C  COMPUTE MOIST ADIABAT AND DETERMINE LIMITS OF SHALLOW CONVECTION.
C  CHECK FOR MOIST STATIC INSTABILITY AGAIN WITHIN CLOUD.
      CALL MSTADB(N2,KM-1,KLIFTL,KLIFTU,SL,SLK,PS2,T2,Q2,
     &            KLCL,KBOT,KTOP,AL,AU)
      DO I=1,N2
        KBOT(I)=KLCL(I)-1
        KTOP(I)=KTOP(I)+1
        LSHC(I)=.FALSE.
      ENDDO
      DO K=1,KM-1
        DO I=1,N2
          IF(K.GE.KBOT(I).AND.K.LT.KTOP(I)) THEN
            IK=(K-1)*N2+I
            IKU=K*N2+I
            ELDQ=HVAP*(Q2(IK)-Q2(IKU))
            CPDT=CP*(T2(IK)-T2(IKU))
            RTDLS=(SL(K)-SL(K+1))/SI(K+1)*RD*0.5*(T2(IK)+T2(IKU))
            DMSE=ELDQ+CPDT-RTDLS
            LSHC(I)=LSHC(I).OR.DMSE.GT.0.
            AU(IK)=G/RTDLS
          ENDIF
        ENDDO
      ENDDO
      K1=KM+1
      K2=0
      DO I=1,N2
        IF(.NOT.LSHC(I)) THEN
          KBOT(I)=KM+1
          KTOP(I)=0
        ENDIF
        K1=MIN(K1,KBOT(I))
        K2=MAX(K2,KTOP(I))
      ENDDO
      KT=K2-K1+1
      IF(KT.LT.2) RETURN
C-----------------------------------------------------------------------
C  SET EDDY VISCOSITY COEFFICIENT CKU AT SIGMA INTERFACES.
C  COMPUTE DIAGONALS AND RHS FOR TRIDIAGONAL MATRIX SOLVER.
C  EXPAND FINAL FIELDS.
      DO I=1,N2
        IK=(K1-1)*N2+I
        AD(IK)=1.
      ENDDO
      DTODSU=2.*DT/DEL(K1)
      DO K=K1,K2-1
        DTODSL=DTODSU
        DTODSU=2.*DT/DEL(K+1)
        DSIG=SL(K)-SL(K+1)
        DO I=1,N2
          IK=(K-1)*N2+I
          IKU=K*N2+I
          IF(K.EQ.KBOT(I)) THEN
            CK=1.5
          ELSEIF(K.EQ.KTOP(I)-1) THEN
            CK=1.
          ELSEIF(K.EQ.KTOP(I)-2) THEN
            CK=3.
          ELSEIF(K.GT.KBOT(I).AND.K.LT.KTOP(I)-2) THEN
            CK=5.
          ELSE
            CK=0.
          ENDIF
          DSDZ1=CK*DSIG*AU(IK)*GOCP
          DSDZ2=CK*DSIG*AU(IK)*AU(IK)
          AU(IK)=-DTODSL*DSDZ2
          AL(IK)=-DTODSU*DSDZ2
          AD(IK)=AD(IK)-AU(IK)
          AD(IKU)=1.-AL(IK)
          T2(IK)=T2(IK)+DTODSL*DSDZ1
          T2(IKU)=T2(IKU)-DTODSU*DSDZ1
        ENDDO
      ENDDO
      IK1=(K1-1)*N2+1
      CALL TRIDI2(N2,KT,AL(IK1),AD(IK1),AU(IK1),Q2(IK1),T2(IK1),
     &                                  AU(IK1),Q2(IK1),T2(IK1))
      DO K=K1,K2
CFPP$ SELECT(VECTOR)
        DO I=1,N2
          IK=(K-1)*N2+I
          Q(INDEX2(I),K)=Q2(IK)
          T(INDEX2(I),K)=T2(IK)
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
      RETURN
      END
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPKAP,FTDP,FTLCL,FTHE,FTMA)
C-----------------------------------------------------------------------
      SUBROUTINE MSTADB(IM,KM,K1,K2,SL,SLK,PS,TENV,QENV,
     &                  KLCL,KBOT,KTOP,TCLD,QCLD)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: MSTADB       COMPUTE MOIST ADIABATIC CLOUD SOUNDINGS
C
C   AUTHOR: N PHILLIPS    DATE: NOV 1983
C
C ABSTRACT: ATMOSPHERIC COLUMNS OF TEMPERATURE AND SPECIFIC HUMIDITY
C   ARE EXAMINED BY THIS ROUTINE FOR CONDITIONAL INSTABILITY.
C   THE TEST PARCEL IS CHOSEN FROM THE LAYER BETWEEN LAYERS K1 AND K2
C   THAT HAS THE WARMEST POTENTIAL WET-BULB TEMPERATURE.
C   EXCESS CLOUD TEMPERATURES AND SPECIFIC HUMIDITIES ARE RETURNED
C   WHERE THE LIFTED PARCEL IS FOUND TO BE BUOYANT.
C   FAST INLINABLE FUNCTIONS ARE INVOKED TO COMPUTE
C   DEWPOINT AND LIFTING CONDENSATION LEVEL TEMPERATURES,
C   EQUIVALENT POTENTIAL TEMPERATURE AT THE LCL, AND
C   TEMPERATURE AND SPECIFIC HUMIDITY OF THE ASCENDING PARCEL.
C
C PROGRAM HISTORY LOG:
C   83-11     PHILLIPS
C   91-05-07  IREDELL             ARGUMENTS CHANGED, CODE TIDIED
C
C USAGE:    CALL MSTADB(IM,KM,K1,K2,SL,SLK,PS,TENV,QENV,
C    &                  KLCL,KBOT,KTOP,TCLD,QCLD)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF ATMOSPHERIC COLUMNS
C     KM       - INTEGER NUMBER OF SIGMA LEVELS IN A COLUMN
C     K1       - INTEGER LOWEST LEVEL FROM WHICH A PARCEL CAN ORIGINATE
C     K2       - INTEGER HIGHEST LEVEL FROM WHICH A PARCEL CAN ORIGINATE
C     SL       - REAL (KM) SIGMA VALUES
C     SLK      - REAL (KM) SIGMA VALUES TO THE KAPPA
C     PS       - REAL (IM) SURFACE PRESSURE IN KILOPASCALS (CB)
C     TENV     - REAL (IM,KM) ENVIRONMENT TEMPERATURES
C     QENV     - REAL (IM,KM) ENVIRONMENT SPECIFIC HUMIDITIES
C
C   OUTPUT ARGUMENT LIST:
C     KLCL     - INTEGER (IM) LEVEL JUST ABOVE LCL (KM+1 IF NO LCL)
C     KBOT     - INTEGER (IM) LEVEL JUST ABOVE CLOUD BOTTOM
C     KTOP     - INTEGER (IM) LEVEL JUST BELOW CLOUD TOP
C              - NOTE THAT KBOT(I) GT KTOP(I) IF NO CLOUD.
C     TCLD     - REAL (IM,KM) OF EXCESS CLOUD TEMPERATURES.
C                (PARCEL T MINUS ENVIRON T, OR 0. WHERE NO CLOUD)
C     QCLD     - REAL (IM,KM) OF EXCESS CLOUD SPECIFIC HUMIDITIES.
C                (PARCEL Q MINUS ENVIRON Q, OR 0. WHERE NO CLOUD)
C
C SUBPROGRAMS CALLED:
C     FPKAP    - FUNCTION TO COMPUTE PRESSURE TO THE KAPPA POWER
C     FTDP     - FUNCTION TO COMPUTE DEWPOINT TEMPERATURE
C     FTLCL    - FUNCTION TO COMPUTE LCL TEMPERATURE
C     FTHE     - FUNCTION TO COMPUTE EQUIVALENT POTENTIAL TEMPERATURE
C     FTMA     - FUNCTION TO COMPUTE PARCEL TEMPERATURE AND HUMIDITY
C
C REMARKS: ALL FUNCTIONS ARE INLINED BY FPP.
C          NONSTANDARD AUTOMATIC ARRAYS ARE USED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      DIMENSION SL(KM),SLK(KM),PS(IM),TENV(IM,KM),QENV(IM,KM),
     &          KLCL(IM),KBOT(IM),KTOP(IM),TCLD(IM,KM),QCLD(IM,KM)
C  PHYSICAL PARAMETERS
      PARAMETER(RD= 2.8705E+2 ,RV= 4.6150E+2 )
      PARAMETER(EPS=RD/RV,EPSM1=RD/RV-1.,FTV=RV/RD-1.)
C  LOCAL ARRAYS
      DIMENSION PSK(IM),SLKMA(IM),THEMA(IM)
C-----------------------------------------------------------------------
C  DETERMINE WARMEST POTENTIAL WET-BULB TEMPERATURE BETWEEN K1 AND K2.
C  COMPUTE ITS LIFTING CONDENSATION LEVEL.
      DO I=1,IM
        PSK(I)=FPKAP(PS(I))
        SLKMA(I)=0.
        THEMA(I)=0.
      ENDDO
      DO K=K1,K2
        DO I=1,IM
          PV=SL(K)*PS(I)*QENV(I,K)/(EPS-EPSM1*QENV(I,K))
          TDPD=MAX(TENV(I,K)-FTDP(PV),0.)
          TLCL=FTLCL(TENV(I,K),TDPD)
          SLKLCL=SLK(K)*TLCL/TENV(I,K)
          THELCL=FTHE(TLCL,SLKLCL*PSK(I))
          IF(THELCL.GT.THEMA(I)) THEN
            SLKMA(I)=SLKLCL
            THEMA(I)=THELCL
          ENDIF
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
C  SET CLOUD TEMPERATURES AND HUMIDITIES WHEREVER THE PARCEL LIFTED UP
C  THE MOIST ADIABAT IS BUOYANT WITH RESPECT TO THE ENVIRONMENT.
      DO I=1,IM
        KLCL(I)=KM+1
        KBOT(I)=KM+1
        KTOP(I)=0
      ENDDO
      DO K=1,KM
        DO I=1,IM
          TCLD(I,K)=0.
          QCLD(I,K)=0.
        ENDDO
      ENDDO
      DO K=K1,KM
        DO I=1,IM
          IF(SLK(K).LE.SLKMA(I)) THEN
            KLCL(I)=MIN(KLCL(I),K)
            TMA=FTMA(THEMA(I),SLK(K)*PSK(I),QMA)
            TVCLD=TMA*(1.+FTV*QMA)
            TVENV=TENV(I,K)*(1.+FTV*QENV(I,K))
            IF(TVCLD.GT.TVENV) THEN
              KBOT(I)=MIN(KBOT(I),K)
              KTOP(I)=MAX(KTOP(I),K)
              TCLD(I,K)=TMA-TENV(I,K)
              QCLD(I,K)=QMA-QENV(I,K)
            ENDIF
          ENDIF
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
      RETURN
      END
CFPP$ NOCONCUR R
C-----------------------------------------------------------------------
      SUBROUTINE TRIDI2(L,N,CL,CM,CU,R1,R2,AU,A1,A2)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    TRIDI2      SOLVES TRIDIAGONAL MATRIX PROBLEMS.
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 91-05-07
C
C ABSTRACT: THIS ROUTINE SOLVES MULTIPLE TRIDIAGONAL MATRIX PROBLEMS
C   WITH 2 RIGHT-HAND-SIDE AND SOLUTION VECTORS FOR EVERY MATRIX.
C   THE SOLUTIONS ARE FOUND BY ELIMINATING OFF-DIAGONAL COEFFICIENTS,
C   MARCHING FIRST FOREWARD THEN BACKWARD ALONG THE MATRIX DIAGONAL.
C   THE COMPUTATIONS ARE VECTORIZED AROUND THE NUMBER OF MATRICES.
C   NO CHECKS ARE MADE FOR ZEROES ON THE DIAGONAL OR SINGULARITY.
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C USAGE:    CALL TRIDI2(L,N,CL,CM,CU,R1,R2,AU,A1,A2)
C
C   INPUT ARGUMENT LIST:
C     L        - INTEGER NUMBER OF TRIDIAGONAL MATRICES
C     N        - INTEGER ORDER OF THE MATRICES
C     CL       - REAL (L,2:N) LOWER DIAGONAL MATRIX ELEMENTS
C     CM       - REAL (L,N) MAIN DIAGONAL MATRIX ELEMENTS
C     CU       - REAL (L,N-1) UPPER DIAGONAL MATRIX ELEMENTS
C                (MAY BE EQUIVALENT TO AU IF NO LONGER NEEDED)
C     R1       - REAL (L,N) 1ST RIGHT-HAND-SIDE VECTOR ELEMENTS
C                (MAY BE EQUIVALENT TO A1 IF NO LONGER NEEDED)
C     R2       - REAL (L,N) 2ND RIGHT-HAND-SIDE VECTOR ELEMENTS
C                (MAY BE EQUIVALENT TO A2 IF NO LONGER NEEDED)
C
C   OUTPUT ARGUMENT LIST:
C     AU       - REAL (L,N-1) WORK ARRAY
C     A1       - REAL (L,N) 1ST SOLUTION VECTOR ELEMENTS
C     A2       - REAL (L,N) 2ND SOLUTION VECTOR ELEMENTS
C
C REMARKS: THIS ROUTINE CAN BE EASILY MODIFIED TO SOLVE A DIFFERENT
C   NUMBER OF RIGHT-HAND-SIDES AND SOLUTIONS PER MATRIX BESIDES 2.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      DIMENSION CL(L,2:N),CM(L,N),CU(L,N-1),R1(L,N),R2(L,N),
     &          AU(L,N-1),A1(L,N),A2(L,N)
C-----------------------------------------------------------------------
      DO I=1,L
        FK=1./CM(I,1)
        AU(I,1)=FK*CU(I,1)
        A1(I,1)=FK*R1(I,1)
        A2(I,1)=FK*R2(I,1)
      ENDDO
      DO K=2,N-1
        DO I=1,L
          FK=1./(CM(I,K)-CL(I,K)*AU(I,K-1))
          AU(I,K)=FK*CU(I,K)
          A1(I,K)=FK*(R1(I,K)-CL(I,K)*A1(I,K-1))
          A2(I,K)=FK*(R2(I,K)-CL(I,K)*A2(I,K-1))
        ENDDO
      ENDDO
      DO I=1,L
        FK=1./(CM(I,N)-CL(I,N)*AU(I,N-1))
        A1(I,N)=FK*(R1(I,N)-CL(I,N)*A1(I,N-1))
        A2(I,N)=FK*(R2(I,N)-CL(I,N)*A2(I,N-1))
      ENDDO
      DO K=N-1,1,-1
        DO I=1,L
          A1(I,K)=A1(I,K)-AU(I,K)*A1(I,K+1)
          A2(I,K)=A2(I,K)-AU(I,K)*A2(I,K+1)
        ENDDO
      ENDDO
C-----------------------------------------------------------------------
      RETURN
      END
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPVS,FUNCDF,FUNCKT,KTSOIL,TWILT,THSAT)
      SUBROUTINE PROGTM(IM,KM,PS,U1,V1,T1,Q1,SHELEG,TSKIN,QSURF,
     &                  SMC,STC,DM,SOILTYP,SIGMAF,CANOPY,
     &                  SLRAD,SNOWMT,SNOWEV,DELT,Z0RL,PLANTR,TG3,
     &                  GFLUX,F10M,U10M,V10M,T2M,Q2M,ZSOIL,
     &                  CM, CH, CQ,RHSCNPY,RHSMC,AIM,BIM,CIM,
     &                  RCL,SL1,SLK1,SLIMSK,INISTP,LAT,
     &                  DRAIN,EVAP,HFLX,RNET,EP,COWAVE)
C CA IS THE VON KARMAN CONSTANT
      PARAMETER (CHARNOCK=.014,CA=.4)
      PARAMETER (RD= 2.8705E+2 ,RV= 4.6150E+2 ,CP= 1.0046E+3 ,G= 9.8000E
     1+0 ,SIGMA= 5.6730E-8 )
      PARAMETER (EPS=RD/RV,HVAP= 2.5000E+6 ,HFUS= 3.3358E+5 )
      PARAMETER (RVRDM1= 0.6077338 ,T0C= 2.7315E+2 ,EPSM1=EPS-1.)
      PARAMETER (ALPHA=5.,A0=-3.975,A1=12.32,B1=-7.755,B2=6.041)
      PARAMETER (A0P=-7.941,A1P=24.75,B1P=-8.705,B2P=7.899,VIS=1.4E-5)
      PARAMETER (AA1=-1.076,BB1=.7045,CC1=-.05808)
      PARAMETER (BB2=-.1954,CC2=.009999)
      PARAMETER (ELOCP=HVAP/CP,DFSNOW=.31,CH2O=4.2E6,CSOIL=1.26E6)
      PARAMETER (SCANOP=2.,CFACTR=.5,ZBOT=-3.,TGICE=271.2)
      PARAMETER (CICE=1880.*917.)
      PARAMETER (RHOH2O=1000.,CONVRAD= 4.1855E+0 *1.E4/60.)
      PARAMETER (CTFIL1=.5,CTFIL2=1.-CTFIL1)
      PARAMETER (RNU=1.51E-5,ARNU=.135*RNU)
      INTEGER SOILTYP
      REAL KT1, KT2, KTSOIL
      LOGICAL FLAG, FLAGSNW
      DIMENSION PS(IM),U1(IM),V1(IM),T1(IM),Q1(IM),SHELEG(IM)
      DIMENSION TSKIN(IM),QSURF(IM),DM(IM),
     1          SLRAD(IM),SNOWMT(IM),SNOWEV(IM)
      DIMENSION SMC(IM,KM),STC(IM,KM),TG3(IM),CANOPY(IM)
      DIMENSION Z0RL(IM),PLANTR(IM),SOILTYP(IM),GFLUX(IM)
      DIMENSION U10M(IM),V10M(IM),T2M(IM),Q2M(IM),CM(IM),CH(IM),CQ(IM)
      DIMENSION SLIMSK(IM),RHSCNPY(IM),RHSMC(IM,KM)
      DIMENSION AIM(IM,KM),BIM(IM,KM),CIM(IM,KM),SIGMAF(IM)
      DIMENSION F10M(IM),DRAIN(IM),ZSOIL(IM,KM),DEW(IM)
      DIMENSION EVAP(IM),HFLX(IM),RNET(IM),EP(IM)
C
C     PARAMETER(LM= 384 ,MM= 2 )
      DIMENSION RS(IM),PSURF(IM),WIND(IM),THETA1(IM),TV1(IM),TVS(IM)
      DIMENSION RHO(IM),QS1(IM),QSS(IM),SNOWD(IM),Z1(IM),THV1(IM)
      DIMENSION ETPFAC(IM),USTAR(IM),TSURF(IM),Q0(IM)
      DIMENSION EDIR(IM),ET(IM,KM),EC(IM),STSOIL(IM,KM)
      DIMENSION Z0MAX(IM),ZTMAX(IM),DTV(IM),ADTV(IM),RB(IM)
      DIMENSION FM(IM),FH(IM),FM10(IM),FH2(IM),HLINF(IM)
      DIMENSION HL1(IM),PM(IM),PH(IM),HL110(IM),HL12(IM)
      DIMENSION PM10(IM),PH2(IM),OLINF(IM),RCH(IM)
      DIMENSION DFT0(IM),T12(IM),T14(IM),RCAP(IM),RSMALL(IM)
      DIMENSION DELTA(IM),FLAG(IM),TREF(IM),TWILT(IM),DF1(IM)
      DIMENSION KT1(IM),FX(IM),GX(IM),CANFAC(IM),ETP(IM)
      DIMENSION SMCZ(IM),DMDZ(IM),DDZ(IM),DMDZ2(IM)
      DIMENSION DDZ2(IM),DF2(IM),KT2(IM),XX(IM),YY(IM),ZZ(IM)
      DIMENSION DTDZ1(IM),DFT1(IM),HCPCT(IM),DTDZ2(IM),DFT2(IM)
      DIMENSION AI(IM,KM),BI(IM,KM),CI(IM,KM),RHSTC(IM,KM)
      DIMENSION FACTSNW(IM),Z0(IM),SLWD(IM),FLAGSNW(IM)
      DIMENSION TERM1(IM), TERM2(IM), PARTLND(IM)
      DIMENSION RESTAR(IM), RAT(IM)
      LATD = 42
      LOND = 11
      DELT2 = DELT * 2.
C
C     ESTIMATE SIGMA ** K AT 2 M
C
      SIG2K = 1. - 4. * G * 2. / (CP * 280.)
C
C  INITIALIZE VARIABLES. ALL UNITS ARE SUPPOSEDLY M.K.S. UNLESS SPECIFIE
C  PSURF IS IN PASCALS
C  WIND IS WIND SPEED, THETA1 IS ADIABATIC SURFACE TEMP FROM LEVEL 1
C  RHO IS DENSITY, QS1 IS SAT. HUM. AT LEVEL1 AND QSS IS SAT. HUM. AT
C  SURFACE
C  CONVERT SLRAD TO THE CIVILIZED UNIT FROM LANGLEY MINUTE-1 K-4
C  SURFACE ROUGHNESS LENGTH IS CONVERTED TO M FROM CM
C
      XRCL = SQRT(RCL)
      DO I = 1, IM
        PSURF(I) = 1000. * PS(I)
        SLWD(I) = SLRAD(I) * CONVRAD
        Q0(I) = MAX(Q1(I),1.E-9)
        TSURF(I) = TSKIN(I)
        THETA1(I) = T1(I) / SLK1
        TV1(I) = T1(I) * (1. + RVRDM1 * Q0(I))
        THV1(I) = THETA1(I) * (1. + RVRDM1 * Q0(I))
        TVS(I) = TSURF(I) * (1. + RVRDM1 * Q0(I))
        WIND(I) = XRCL * SQRT(U1(I) * U1(I) + V1(I) * V1(I))
C     SLIMSK   - REAL (IM) LAND(1),SEA(0), ICE(2) FLAG
        if(slimsk(i).eq.1..and.theta1(i).lt.tsurf(i)) then
        	WIND(I) = MAX(WIND(I),1.)
        endif
        RHO(I) = (SL1 * PSURF(I)) / (RD * TV1(I))
        QS1(I) = 1000. * FPVS(T1(I))
        QS1(I) = EPS * QS1(I) / (SL1 * PSURF(I) + EPSM1 * QS1(I))
        QS1(I) = MAX(QS1(I), 1.E-8)
        QSS(I) = 1000. * FPVS(TSURF(I))
        QSS(I) = EPS * QSS(I) / (PSURF(I) + EPSM1 * QSS(I))
        RS(I) = PLANTR(I)
        Z0(I) = .01 * Z0RL(I)
        CANOPY(I)= MAX(CANOPY(I),0.)
        DM(I) = 1.
        FACTSNW(I) = 10.
        IF(SLIMSK(I).EQ.2.) FACTSNW(I) = 3.
C
C  SNOW DEPTH IN WATER EQUIVALENT IS CONVERTED FROM MM TO M UNIT
C
        SNOWD(I) = SHELEG(I) / 1000.
        FLAGSNW(I) = .FALSE.
C
C  WHEN SNOW DEPTH IS LESS THAN 1 MM, A PATCHY SNOW IS ASSUMED AND
C  SOIL IS ALLOWED TO INTERACT WITH THE ATMOSPHERE.
C  WE SHOULD EVENTUALLY MOVE TO A LINEAR COMBINATION OF SOIL AND
C  SNOW UNDER THE CONDITION OF PATCHY SNOW.
C
        IF(SNOWD(I).GT..001.OR.SLIMSK(I).EQ.2) RS(I) = 0.
        IF(SNOWD(I).GT..001) FLAGSNW(I) = .TRUE.
      ENDDO
      IF(LAT.EQ.LATD) THEN
        I = LOND
        PRINT *, ' WIND,TV1,TVS,Q1,QS1,SNOW,SLIMSK=',
     &   WIND(I),TV1(I),TVS(I),Q1(I),QS1(I),SNOWD(I),SLIMSK(I)
        PRINT *, ' SLRAD =', SLRAD(I)
      ENDIF
      DO I = 1, IM
        IF(SLIMSK(I).EQ.0.) THEN
          ZSOIL(I,1) = 0.
        ELSEIF(SLIMSK(I).EQ.1.) THEN
          ZSOIL(I,1) = -.10
        ELSE
          ZSOIL(I,1) = -3. / KM
        ENDIF
      ENDDO
 100  CONTINUE
      DO K = 2, KM
        DO I = 1, IM
          IF(SLIMSK(I).EQ.0.) THEN
            ZSOIL(I,K) = 0.
          ELSEIF(SLIMSK(I).EQ.1.) THEN
            ZSOIL(I,K) = ZSOIL(I,K-1)
     &                   + (-2. - ZSOIL(I,1)) / (KM - 1)
          ELSE
            ZSOIL(I,K) = - 3. * FLOAT(K) / FLOAT(KM)
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        Z1(I) = -RD * TV1(I) * LOG(SL1) / G
        DRAIN(I) = 0.
      ENDDO
      DO K = 1, KM
        DO I = 1, IM
          ET(I,K) = 0.
          RHSMC(I,K) = 0.
          AIM(I,K) = 0.
          BIM(I,K) = 1.
          CIM(I,K) = 0.
          STSOIL(I,K) = STC(I,K)
        ENDDO
      ENDDO
      DO I = 1, IM
        EDIR(I) = 0.
        EC(I) = 0.
        EVAP(I) = 0.
        EP(I) = 0.
        SNOWMT(I) = 0.
        GFLUX(I) = 0.
        RHSCNPY(I) = 0.
        FX(I) = 0.
        ETPFAC(I) = 0.
        CANFAC(I) = 0.
      ENDDO
C
C  COMPUTE STABILITY DEPENDENT EXCHANGE COEFFICIENTS
C
C  THIS PORTION OF THE CODE IS PRESENTLY SUPPRESSED
C
      DO I = 1, IM
C       IF(INISTP.EQ.1.AND.SLIMSK(I).NE.0.) THEN
          USTAR(I) = .1 * WIND(I)
C       ENDIF
C       IF(INISTP.EQ.1.AND.SLIMSK(I).EQ.0.) THEN
        IF(SLIMSK(I).EQ.0.) THEN
          USTAR(I) = SQRT(G * Z0(I) / CHARNOCK)
        ENDIF
      ENDDO
C
C  COMPUTE STABILITY INDICES (RB AND HLINF)
C
      DO I = 1, IM
        Z0MAX(I) = MIN(Z0(I),1. * Z1(I))
        ZTMAX(I) = Z0MAX(I)
        IF(SLIMSK(I).EQ.0.) THEN
          RESTAR(I) = USTAR(I) * Z0MAX(I) / VIS
          RESTAR(I) = MAX(RESTAR(I),.000001)
          RESTAR(I) = ALOG(RESTAR(I))
          RESTAR(I) = MIN(RESTAR(I),5.)
          RESTAR(I) = MAX(RESTAR(I),-5.)
          RAT(I) = AA1 + BB1 * RESTAR(I) + CC1 * RESTAR(I) ** 2
          RAT(I) = RAT(I) / (1. + BB2 * RESTAR(I)
     &                       + CC2 * RESTAR(I) ** 2)
          ZTMAX(I) = Z0MAX(I) * EXP(-RAT(I))
        ENDIF
      ENDDO
      DO I = 1, IM
        DTV(I) = THV1(I) - TVS(I)
        ADTV(I) = ABS(DTV(I))
        ADTV(I) = MAX(ADTV(I),.001)
        DTV(I) = SIGN(1.,DTV(I)) * ADTV(I)
        RB(I) = G * DTV(I) * Z1(I) / (.5 * (THV1(I) + TVS(I))
     &          * WIND(I) * WIND(I))
		RB(I) = MAX(RB(I),-5000.)
        FM(I) = LOG((Z0MAX(I)+Z1(I)) / Z0MAX(I))
        FH(I) = LOG((ZTMAX(I)+Z1(I)) / ZTMAX(I))
        FM10(I) = LOG((Z0MAX(I)+10.) / Z0MAX(I))
        FH2(I) = LOG((ZTMAX(I)+2.) / ZTMAX(I))
        HLINF(I) = RB(I) * FM(I) * FM(I) / FH(I)
      ENDDO
C
C  STABLE CASE
C
      DO I = 1, IM
        IF(DTV(I).GE.0.) THEN
          HL1(I) = HLINF(I)
        ENDIF
        IF(DTV(I).GE.0..AND.HLINF(I).GT..25) THEN
          HL0INF = Z0MAX(I) * HLINF(I) / Z1(I)
          HLTINF = ZTMAX(I) * HLINF(I) / Z1(I)
          AA = SQRT(1. + 4. * ALPHA * HLINF(I))
          AA0 = SQRT(1. + 4. * ALPHA * HL0INF)
          BB = AA
          BB0 = SQRT(1. + 4. * ALPHA * HLTINF)
          PM(I) = AA0 - AA + LOG((AA + 1.) / (AA0 + 1.))
          PH(I) = BB0 - BB + LOG((BB + 1.) / (BB0 + 1.))
          FMS = FM(I) - PM(I)
          FHS = FH(I) - PH(I)
          HL1(I) = FMS * FMS * RB(I) / FHS
        ENDIF
      ENDDO
C
C  SECOND ITERATION
C
      DO I = 1, IM
        IF(DTV(I).GE.0.) THEN
          HL0 = Z0MAX(I) * HL1(I) / Z1(I)
          HLT = ZTMAX(I) * HL1(I) / Z1(I)
          AA = SQRT(1. + 4. * ALPHA * HL1(I))
          AA0 = SQRT(1. + 4. * ALPHA * HL0)
          BB = AA
          BB0 = SQRT(1. + 4. * ALPHA * HLT)
          PM(I) = AA0 - AA + LOG((AA + 1.) / (AA0 + 1.))
          PH(I) = BB0 - BB + LOG((BB + 1.) / (BB0 + 1.))
          HL110(I) = HL1(I) * 10. / Z1(I)
          AA = SQRT(1. + 4. * ALPHA * HL110(I))
          PM10(I) = AA0 - AA + LOG((AA + 1.) / (AA0 + 1.))
          HL12(I) = HL1(I) * 2. / Z1(I)
C         AA = SQRT(1. + 4. * ALPHA * HL12(I))
          BB = SQRT(1. + 4. * ALPHA * HL12(I))
          PH2(I) = BB0 - BB + LOG((BB + 1.) / (BB0 + 1.))
        ENDIF
      ENDDO
 200  CONTINUE
C
C  UNSTABLE CASE
C
C
C  CHECK FOR UNPHYSICAL OBUKHOV LENGTH
C
      DO I = 1, IM
        IF(DTV(I).LT.0.) THEN
          OLINF(I) = Z1(I) / HLINF(I)
          IF(ABS(OLINF(I)).LE.50. * Z0MAX(I)) THEN
            HLINF(I) = -Z1(I) / (50. * Z0MAX(I))
          ENDIF
        ENDIF
      ENDDO
C
C  GET PM AND PH
C
      DO I = 1, IM
        IF(DTV(I).LT.0..AND.HLINF(I).GE.-.5) THEN
          HL1(I) = HLINF(I)
          PM(I) = (A0 + A1 * HL1(I)) * HL1(I)
     &            / (1. + B1 * HL1(I) + B2 * HL1(I) * HL1(I))
          PH(I) = (A0P + A1P * HL1(I)) * HL1(I)
     &            / (1. + B1P * HL1(I) + B2P * HL1(I) * HL1(I))
          HL110(I) = HL1(I) * 10. / Z1(I)
          PM10(I) = (A0 + A1 * HL110(I)) * HL110(I)
     &            / (1. + B1 * HL110(I) + B2 * HL110(I) * HL110(I))
          HL12(I) = HL1(I) * 2. / Z1(I)
          PH2(I) = (A0P + A1P * HL12(I)) * HL12(I)
     &            / (1. + B1P * HL12(I) + B2P * HL12(I) * HL12(I))
        ENDIF
        IF(DTV(I).LT.0.AND.HLINF(I).LT.-.5) THEN
          HL1(I) = -HLINF(I)
          PM(I) = LOG(HL1(I)) + 2. * HL1(I) ** (-.25) - .8776
          PH(I) = LOG(HL1(I)) + .5 * HL1(I) ** (-.5) + 1.386
          HL110(I) = HL1(I) * 10. / Z1(I)
          PM10(I) = LOG(HL110(I)) + 2. * HL110(I) ** (-.25) - .8776
          HL12(I) = HL1(I) * 2. / Z1(I)
          PH2(I) = LOG(HL12(I)) + .5 * HL12(I) ** (-.5) + 1.386
        ENDIF
      ENDDO
C
C  FINISH THE EXCHANGE COEFFICIENT COMPUTATION TO PROVIDE FM AND FH
C
      DO I = 1, IM
        FM(I) = FM(I) - PM(I)
        FH(I) = FH(I) - PH(I)
        FM10(I) = FM10(I) - PM10(I)
        FH2(I) = FH2(I) - PH2(I)
        CM(I) = CA * CA / (FM(I) * FM(I))
        CH(I) = CA * CA / (FM(I) * FH(I))
        CQ(I) = CH(I)
        USTAR(I) = SQRT(CM(I) * WIND(I) * WIND(I))
      ENDDO
C
C  UPDATE Z0 OVER OCEAN
C
      IF(INISTP.LT.2.AND.COWAVE.LE.0.) THEN
        DO I = 1, IM
          IF(SLIMSK(I).EQ.0.) THEN
            Z0(I) = (CHARNOCK / G) * USTAR(I) ** 2
C  NEW IMPLEMENTATION OF Z0
C           CC = USTAR(I) * Z0(I) / RNU
C           PP = CC / (1. + CC)
C           FF = G * ARNU / (CHARNOCK * USTAR(I) ** 3)
C           Z0(I) = ARNU / (USTAR(I) * FF ** PP)
            Z0(I) = MIN(Z0(I),.1)
            Z0(I) = MAX(Z0(I),1.E-7)
            Z0RL(I) = 100. * Z0(I)
          ENDIF
        ENDDO
      ENDIF
C
C  RCP = RHO CP CH V
C
      DO I = 1, IM
        RCH(I) = RHO(I) * CP * CH(I) * WIND(I)
      ENDDO
C
C  SENSIBLE AND LATENT HEAT FLUX OVER OPEN WATER
C
      DO I = 1, IM
        IF(SLIMSK(I).EQ.0.) THEN
          EVAP(I) = ELOCP * RCH(I) * (QSS(I) - Q0(I))
          DM(I) = 1.
          QSURF(I) = QSS(I)
        ENDIF
      ENDDO
C
C  COMPUTE SOIL/SNOW/ICE HEAT FLUX IN PREPARATION FOR SURFACE ENERGY
C  BALANCE CALCULATION
C
      DO I = 1, IM
        GFLUX(I) = 0.
        IF(SLIMSK(I).EQ.1.) THEN
C         DFT0(I) = KTSOIL(SMC(I,1),SOILTYP(I))
          SMCZ(I) = .5 * (SMC(I,1) + .20)
          DFT0(I) = KTSOIL(SMCZ(I),SOILTYP(I))
        ELSEIF(SLIMSK(I).EQ.2.) THEN
C  DF FOR ICE IS TAKEN FROM MAYKUT AND UNTERSTEINER
C  DF IS IN SI UNIT OF W K-1 M-1
          DFT0(I) = 2.2
        ENDIF
      ENDDO
 300  CONTINUE
      DO I = 1, IM
        IF(SLIMSK(I).NE.0.) THEN
C         IF(SNOWD(I).GT..001) THEN
          IF(FLAGSNW(I)) THEN
C
C  WHEN SNOW COVERED, GROUND HEAT FLUX COMES FROM SNOW
C
            TFLX = MIN(T1(I), TSURF(I))
            GFLUX(I) = -DFSNOW * (TFLX - STSOIL(I,1))
     &                 / (FACTSNW(I) * MAX(SNOWD(I),.001))
          ELSE
            GFLUX(I) = DFT0(I) * (STSOIL(I,1) - TSURF(I))
     &                 / (-.5 * ZSOIL(I,1))
          ENDIF
          GFLUX(I) = MAX(GFLUX(I),-200.)
          GFLUX(I) = MIN(GFLUX(I),+200.)
        ENDIF
      ENDDO
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0.
        PARTLND(I) = 1.
        IF(SNOWD(I).GT.0..AND.SNOWD(I).LE..001) THEN
          PARTLND(I) = 1. - SNOWD(I) / .001
        ENDIF
      ENDDO
C
C  COMPUTE POTENTIAL EVAPORATION FOR LAND AND SEA ICE
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
          T12(I) = T1(I) * T1(I)
          T14(I) = T12(I) * T12(I)
C
C  RCAP = FNET - SIGMA T**4 + GFLX - RHO CP CH V (T1-THETA1)
C
          RCAP(I) = -SLWD(I) - SIGMA * T14(I) + GFLUX(I)
     &              - RCH(I) * (T1(I) - THETA1(I))
C
C  RSMALL = 4 SIGMA T**3 / RCH + 1
C
          RSMALL(I) = 4. * SIGMA * T1(I) * T12(I) / RCH(I) + 1.
C
C  DELTA = L / CP * DQS/DT
C
          DELTA(I) = ELOCP * EPS * HVAP * QS1(I) / (RD * T12(I))
C
C  POTENTIAL EVAPOTRANSPIRATION ( WATTS / M**2 ) AND
C  POTENTIAL EVAPORATION
C
          TERM1(I) = ELOCP * RSMALL(I) * RCH(I)*(QS1(I)-Q0(I))
          TERM2(I) = RCAP(I) * DELTA(I)
          EP(I) = (ELOCP * RSMALL(I) * RCH(I) * (QS1(I) - Q0(I))
     &              + RCAP(I) * DELTA(I))
          ETP(I) = EP(I) /
     &              (RSMALL(I) * (1. + RS(I) * WIND(I) * CH(I))
     &              + DELTA(I))
          EP(I) = EP(I) / (RSMALL(I) + DELTA(I))
        ENDIF
      ENDDO
C
C  ACTUAL EVAPORATION OVER LAND IN THREE PARTS : EDIR, ET, AND EC
C
C  DIRECT EVAPORATION FROM SOIL, THE UNIT GOES FROM M S-1 TO KG M-2 S-1
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).EQ.1..AND.EP(I).GT.0.
      ENDDO
      DO I = 1, IM
        IF(FLAG(I)) THEN
          TREF(I) = .75 * THSAT(SOILTYP(I))
          TWILT(I) = TWLT(SOILTYP(I))
          DF1(I) = FUNCDF(SMC(I,1),SOILTYP(I))
          KT1(I) = FUNCKT(SMC(I,1),SOILTYP(I))
          FX(I) = -2. * DF1(I) * (SMC(I,1) - .23) / ZSOIL(I,1)
     &            - KT1(I)
          FX(I) = FX(I)
          FX(I) = MIN(FX(I), EP(I)/HVAP)
          FX(I) = MAX(FX(I),0.)
C
C  SIGMAF IS THE FRACTION OF AREA COVERED BY VEGETATION
C
          EDIR(I) = FX(I) * (1. - SIGMAF(I)) * PARTLND(I)
        ENDIF
      ENDDO
C
C  TRANSPIRATION FROM ALL LEVELS OF THE SOIL
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CANFAC(I) = (CANOPY(I) / SCANOP) ** CFACTR
          ETPFAC(I) = SIGMAF(I) * ETP(I)
     &           * (1. - CANFAC(I)) / HVAP
          GX(I) = (SMC(I,1) - TWILT(I)) / (TREF(I) - TWILT(I))
          GX(I) = MAX(GX(I),0.)
          GX(I) = MIN(GX(I),1.)
          ET(I,1) = (ZSOIL(I,1) / ZSOIL(I,KM)) * GX(I) * ETPFAC(I)
     &            * PARTLND(I)
        ENDIF
      ENDDO
      DO K = 2, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            GX(I) = (SMC(I,K) - TWILT(I)) / (TREF(I) - TWILT(I))
            GX(I) = MAX(GX(I),0.)
            GX(I) = MIN(GX(I),1.)
            ET(I,K) =
     &                (ZSOIL(I,K) - ZSOIL(I,K-1)) / ZSOIL(I,KM)
     &              * GX(I) * ETPFAC(I) * PARTLND(I)
          ENDIF
        ENDDO
      ENDDO
 400  CONTINUE
C
C  CANOPY RE-EVAPORATION
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
          EC(I) = SIGMAF(I) * CANFAC(I) * EP(I) / HVAP
          EC(I) = EC(I) * PARTLND(I)
C         EC(I) = MIN(EC(I),CANOPY(I)/DELT2)
        ENDIF
      ENDDO
C
C  SUM UP TOTAL EVAPORATION
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
         EVAP(I) = EDIR(I) + EC(I)
        ENDIF
      ENDDO
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            EVAP(I) = EVAP(I) + ET(I,K)
          ENDIF
        ENDDO
      ENDDO
C
C  RETURN EVAP UNIT FROM KG M-2 S-1 TO WATTS M-2
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
          EVAP(I) = MIN(EVAP(I)*HVAP,EP(I))
        ENDIF
      ENDDO
      IF(LAT.EQ.LATD) THEN
        I = LOND
        PRINT *, 'FX, SIGMAF, EDIR, ETPFAC=', FX(I)*HVAP,SIGMAF(I),
     &          EDIR(I)*HVAP,ETPFAC(I)*HVAP
        PRINT *, ' ET =', (ET(I,K)*HVAP,K=1,KM)
        PRINT *, ' CANFAC, EC, EVAP', CANFAC(I),EC(I)*HVAP,EVAP(I)
      ENDIF
C
C  EVAPORATION OVER BARE SEA ICE
C
      DO I = 1, IM
C       IF(SLIMSK(I).EQ.2.AND.SNOWD(I).LE..001) THEN
        IF(SLIMSK(I).EQ.2.) THEN
          EVAP(I) = PARTLND(I) * EP(I)
        ENDIF
      ENDDO
C
C  TREAT DOWNWARD MOISTURE FLUX SITUATION
C  (EVAP WAS PRESET TO ZERO SO NO UPDATE NEEDED)
C  DEW IS CONVERTED FROM KG M-2 TO M TO CONFORM TO PRECIP UNIT
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0..AND.EP(I).LE.0.
        DEW(I) = 0.
      ENDDO
      DO I = 1, IM
        IF(FLAG(I)) THEN
          DEW(I) = -EP(I) * DELT2 / (HVAP * RHOH2O)
          EVAP(I) = EP(I)
          DM(I) = 1.
        ENDIF
      ENDDO
C
C  SNOW COVERED LAND AND SEA ICE
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0..AND.SNOWD(I).GT.0.
      ENDDO
C
C  CHANGE OF SNOW DEPTH DUE TO EVAPORATION OR SUBLIMATION
C
C  CONVERT EVAP FROM KG M-2 S-1 TO M S-1 TO DETERMINE THE REDUCTION OF S
C
      DO I = 1, IM
        SNOWEV(I) = 0.0
        IF(FLAG(I)) THEN
          BFACT = SNOWD(I) / (DELT2 * EP(I) / (HVAP * RHOH2O))
          BFACT = MIN(BFACT,1.)
C
C  THE EVAPORATION OF SNOW
C
          IF(EP(I).LE.0.) BFACT = 1.
          IF(SNOWD(I).LE..001) THEN
            EVAP(I) = (SNOWD(I)/.001)*BFACT*EP(I) + EVAP(I)
C 06/03/96 MK FOLLOWING LINE ADDED
            SNOWEV(I) = (SNOWD(I)/.001)*BFACT*EP(I)
          ELSE
            EVAP(I) = BFACT * EP(I)
C 06/03/96 MK FOLLOWING LINE ADDED
            SNOWEV(I) = BFACT * EP(I)
          ENDIF
          TSURF(I) = T1(I) +
     &          (RCAP(I) - GFLUX(I) - DFSNOW * (T1(I) - STSOIL(I,1))
     &           /(FACTSNW(I) * MAX(SNOWD(I),.001))
     &           + THETA1(I) - T1(I)
     &           - BFACT * EP(I)) / (RSMALL(I) * RCH(I)
     &           + DFSNOW / (FACTSNW(I)* MAX(SNOWD(I),.001)))
          SNOWD(I) = SNOWD(I) - EP(I) * DELT / (RHOH2O * HVAP)
          SNOWD(I) = MAX(SNOWD(I),0.)
        ENDIF
      ENDDO
C
C  SNOW MELT RATE (M S-1)
C
 500  CONTINUE
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0.
     &            .AND.SNOWD(I).GT..0
      ENDDO
      DO I = 1, IM
        IF(FLAG(I).AND.TSURF(I).GT.T0C) THEN
          SNOWMT(I) = RCH(I) * RSMALL(I)
     &              * (TSURF(I) - T0C) / (RHOH2O * HFUS)
          SNOWD(I) = SNOWD(I) - SNOWMT(I) * DELT
          SNOWD(I) = MAX(SNOWD(I),0.)
          SNOWMT(I) = MIN(SNOWMT(I),SNOWD(I) / DELT)
          TSURF(I) = MAX(T0C,TSURF(I)
     &             -HFUS*SNOWMT(I)*RHOH2O/(RCH(I)*RSMALL(I)))
        ENDIF
      ENDDO
C
C  PREPARE TENDENCY TERMS FOR THE SOIL MOISTURE FIELD WITHOUT PRECIPITAT
C  THE UNIT OF MOISTURE FLUX NEEDS TO BECOME M S-1 FOR SOIL MOISTURE
C   HENCE THE FACTOR OF RHOH2O
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).EQ.1.
      ENDDO
      DO I = 1, IM
        IF(FLAG(I)) THEN
          RHSCNPY(I) = -EC(I) + SIGMAF(I) * RHOH2O * DEW(I) / DELT2
          SMCZ(I) = MAX(SMC(I,1), SMC(I,2))
          DMDZ(I) = (SMC(I,1) - SMC(I,2)) / (-.5 * ZSOIL(I,2))
          DF1(I) = FUNCDF(SMCZ(I),SOILTYP(I))
          KT1(I) = FUNCKT(SMCZ(I),SOILTYP(I))
          RHSMC(I,1) = (DF1(I) * DMDZ(I) + KT1(I)
     &        + (EDIR(I) + ET(I,1))) / (ZSOIL(I,1) * RHOH2O)
          DDZ(I) = 1. / (-.5 * ZSOIL(I,2))
C
C  AIM, BIM, AND CIM ARE THE ELEMENTS OF THE TRIDIAGONAL MATRIX FOR THE
C  IMPLICIT UPDATE OF THE SOIL MOISTURE
C
          AIM(I,1) = 0.
          BIM(I,1) = DF1(I) * DDZ(I) / (-ZSOIL(I,1) * RHOH2O)
          CIM(I,1) = -BIM(I,1)
        ENDIF
      ENDDO
      DO K = 2, KM
        IF(K.LT.KM) THEN
          DO I = 1, IM
            IF(FLAG(I)) THEN
              DMDZ2(I) = (SMC(I,K) - SMC(I,K+1))
     &                   / (.5 * (ZSOIL(I,K-1) - ZSOIL(I,K+1)))
              SMCZ(I) = MAX(SMC(I,K), SMC(I,K+1))
              DF2(I) = FUNCDF(SMCZ(I),SOILTYP(I))
              KT2(I) = FUNCKT(SMCZ(I),SOILTYP(I))
              RHSMC(I,K) = (DF2(I) * DMDZ2(I) + KT2(I)
     &             - DF1(I) * DMDZ(I) - KT1(I) + ET(I,K))
     &                     / (RHOH2O*(ZSOIL(I,K) - ZSOIL(I,K-1)))
              DDZ2(I) = 2. / (ZSOIL(I,K-1) - ZSOIL(I,K+1))
              CIM(I,K) = -DF2(I) * DDZ2(I)
     &                / ((ZSOIL(I,K-1) - ZSOIL(I,K))*RHOH2O)
            ENDIF
          ENDDO
        ELSE
          DO I = 1, IM
            IF(FLAG(I)) THEN
              KT2(I) = FUNCKT(SMC(I,K),SOILTYP(I))
              RHSMC(I,K) = (KT2(I)
     &             - DF1(I) * DMDZ(I) - KT1(I) + ET(I,K))
     &                     / (RHOH2O*(ZSOIL(I,K) - ZSOIL(I,K-1)))
              DRAIN(I) = KT2(I)
              CIM(I,K) = 0.
            ENDIF
          ENDDO
        ENDIF
        DO I = 1, IM
          IF(FLAG(I)) THEN
            AIM(I,K) = -DF1(I) * DDZ(I)
     &                / ((ZSOIL(I,K-1) - ZSOIL(I,K))*RHOH2O)
            BIM(I,K) = -(AIM(I,K) + CIM(I,K))
            DF1(I) = DF2(I)
            KT1(I) = KT2(I)
            DMDZ(I) = DMDZ2(I)
            DDZ(I) = DDZ2(I)
          ENDIF
        ENDDO
      ENDDO
 600  CONTINUE
C
C  UPDATE SOIL TEMPERATURE AND SEA ICE TEMPERATURE
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0.
      ENDDO
C
C  SURFACE TEMPERATURE IS PART OF THE UPDATE WHEN SNOW IS ABSENT
C
      DO I = 1, IM
C       IF(FLAG(I).AND.SNOWD(I).LE..001) THEN
        IF(FLAG(I).AND..NOT.FLAGSNW(I)) THEN
          YY(I) = T1(I) +
     &          (RCAP(I)-GFLUX(I) + THETA1(I) - T1(I)
     &           - EVAP(I)) / (RSMALL(I) * RCH(I))
          ZZ(I) = 1. + DFT0(I) / (-.5 * ZSOIL(I,1) * RCH(I) * RSMALL(I))
          XX(I) = DFT0(I) * (STSOIL(I,1) - YY(I)) /
     &            (.5 * ZSOIL(I,1) * ZZ(I))
        ENDIF
C       IF(FLAG(I).AND.SNOWD(I).GT..001) THEN
        IF(FLAG(I).AND.FLAGSNW(I)) THEN
          YY(I) = STSOIL(I,1)
C
C  HEAT FLUX FROM SNOW IS EXPLICIT IN TIME
C
          ZZ(I) = 1.
          XX(I) = DFSNOW * (STSOIL(I,1) - TSURF(I))
     &            / (-FACTSNW(I) * MAX(SNOWD(I),.001))
        ENDIF
      ENDDO
C
C  COMPUTE THE FORCING AND THE IMPLICIT MATRIX ELEMENTS FOR UPDATE
C
C  CH2O IS THE HEAT CAPACITY OF WATER AND CSOIL IS THE HEAT CAPACITY OF
C
      DO I = 1, IM
        IF(FLAG(I)) THEN
          SMCZ(I) = MAX(SMC(I,1), SMC(I,2))
          DTDZ1(I) = (STSOIL(I,1) - STSOIL(I,2)) / (-.5 * ZSOIL(I,2))
          IF(SLIMSK(I).EQ.1.) THEN
            DFT1(I) = KTSOIL(SMCZ(I),SOILTYP(I))
            HCPCT(I) = SMC(I,1) * CH2O + (1. - SMC(I,1)) * CSOIL
          ELSE
            DFT1(I) = DFT0(I)
            HCPCT(I) = CICE
          ENDIF
          DFT2(I) = DFT1(I)
          DDZ(I) = 1. / (-.5 * ZSOIL(I,2))
C
C  AI, BI, AND CI ARE THE ELEMENTS OF THE TRIDIAGONAL MATRIX FOR THE
C  IMPLICIT UPDATE OF THE SOIL TEMPERATURE
C
          AI(I,1) = 0.
          BI(I,1) = DFT1(I) * DDZ(I) / (-ZSOIL(I,1) * HCPCT(I))
          CI(I,1) = -BI(I,1)
          BI(I,1) = BI(I,1)
     &            + DFT0(I) / (.5 * ZSOIL(I,1) **2 * HCPCT(I) * ZZ(I))
C         SS = DFT0(I) * (STSOIL(I,1) - YY(I))
C    &         / (.5 * ZSOIL(I,1) * ZZ(I))
C         RHSTC(I,1) = (DFT1(I) * DTDZ1(I) - SS)
          RHSTC(I,1) = (DFT1(I) * DTDZ1(I) - XX(I))
     &                 / (ZSOIL(I,1) * HCPCT(I))
        ENDIF
      ENDDO
      DO K = 2, KM
        DO I = 1, IM
          IF(SLIMSK(I).EQ.1.) THEN
            HCPCT(I) = SMC(I,K) * CH2O + (1. - SMC(I,K)) * CSOIL
          ELSEIF(SLIMSK(I).EQ.2.) THEN
            HCPCT(I) = CICE
          ENDIF
        ENDDO
        IF(K.LT.KM) THEN
          DO I = 1, IM
            IF(FLAG(I)) THEN
              DTDZ2(I) = (STSOIL(I,K) - STSOIL(I,K+1))
     &                   / (.5 * (ZSOIL(I,K-1) - ZSOIL(I,K+1)))
              SMCZ(I) = MAX(SMC(I,K), SMC(I,K+1))
              IF(SLIMSK(I).EQ.1.) THEN
                DFT2(I) = KTSOIL(SMCZ(I),SOILTYP(I))
              ENDIF
              DDZ2(I) = 2. / (ZSOIL(I,K-1) - ZSOIL(I,K+1))
              CI(I,K) = -DFT2(I) * DDZ2(I)
     &                / ((ZSOIL(I,K-1) - ZSOIL(I,K)) * HCPCT(I))
            ENDIF
          ENDDO
        ELSE
C
C  AT THE BOTTOM, CLIMATOLOGY IS ASSUMED AT 2M DEPTH FOR LAND AND
C  FREEZING TEMPERATURE IS ASSUMED FOR SEA ICE AT Z(I,KM)
          DO I = 1, IM
            IF(SLIMSK(I).EQ.1.) THEN
              DTDZ2(I) = (STSOIL(I,K) - TG3(I))
     &                   / (.5 * (ZSOIL(I,K-1) + ZSOIL(I,K)) - ZBOT)
              DFT2(I) = KTSOIL(SMC(I,K),SOILTYP(I))
              CI(I,K) = 0.
            ENDIF
            IF(SLIMSK(I).EQ.2.) THEN
              DTDZ2(I) = (STSOIL(I,K) - TGICE)
     &                   / (.5 * ZSOIL(I,K-1) - .5 * ZSOIL(I,K))
              DFT2(I) = DFT1(I)
              CI(I,K) = 0.
            ENDIF
          ENDDO
        ENDIF
        DO I = 1, IM
          IF(FLAG(I)) THEN
            RHSTC(I,K) = (DFT2(I) * DTDZ2(I) - DFT1(I) * DTDZ1(I))
     &                 / ((ZSOIL(I,K) - ZSOIL(I,K-1)) * HCPCT(I))
            AI(I,K) = -DFT1(I) * DDZ(I)
     &                / ((ZSOIL(I,K-1) - ZSOIL(I,K)) * HCPCT(I))
            BI(I,K) = -(AI(I,K) + CI(I,K))
            DFT1(I) = DFT2(I)
            DTDZ1(I) = DTDZ2(I)
            DDZ(I) = DDZ2(I)
          ENDIF
        ENDDO
      ENDDO
 700  CONTINUE
C
C  SOLVE THE TRI-DIAGONAL MATRIX
C
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I))  THEN
            RHSTC(I,K) = RHSTC(I,K) * DELT2
            AI(I,K) = AI(I,K) * DELT2
            BI(I,K) = 1. + BI(I,K) * DELT2
            CI(I,K) = CI(I,K) * DELT2
          ENDIF
        ENDDO
      ENDDO
C  FORWARD ELIMINATION
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CI(I,1) = -CI(I,1) / BI(I,1)
          RHSTC(I,1) = RHSTC(I,1) / BI(I,1)
        ENDIF
      ENDDO
      DO K = 2, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            CC = 1. / (BI(I,K) + AI(I,K) * CI(I,K-1))
            CI(I,K) = -CI(I,K) * CC
            RHSTC(I,K) = (RHSTC(I,K) - AI(I,K) * RHSTC(I,K-1)) * CC
          ENDIF
        ENDDO
      ENDDO
C  BACKWARD SUBSTITUTTION
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CI(I,KM) = RHSTC(I,KM)
        ENDIF
      ENDDO
      DO K = KM-1, 1
        DO I = 1, IM
          IF(FLAG(I)) THEN
            CI(I,K) = CI(I,K) * CI(I,K+1) + RHSTC(I,K)
          ENDIF
        ENDDO
      ENDDO
C
C  UPDATE SOIL AND ICE TEMPERATURE
C
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            STSOIL(I,K) = STSOIL(I,K) + CI(I,K)
          ENDIF
        ENDDO
      ENDDO
C
C  UPDATE SURFACE TEMPERATURE FOR SNOW FREE SURFACES
C
      DO I = 1, IM
C       IF(SLIMSK(I).NE.0..AND.SNOWD(I).LE..001) THEN
        IF(SLIMSK(I).NE.0..AND..NOT.FLAGSNW(I)) THEN
          TSURF(I) = (YY(I) + (ZZ(I) - 1.) * STSOIL(I,1)) / ZZ(I)
        ENDIF
C       IF(SLIMSK(I).EQ.2..AND.SNOWD(I).LE..001) THEN
        IF(SLIMSK(I).EQ.2..AND..NOT.FLAGSNW(I)) THEN
          TSURF(I) = MIN(TSURF(I),T0C)
        ENDIF
      ENDDO
      DO K = 1, KM
        DO I = 1, IM
          IF(SLIMSK(I).EQ.2) THEN
            STC(I,K) = MIN(STSOIL(I,K),T0C)
          ENDIF
        ENDDO
      ENDDO
C
C  TIME FILTER FOR SOIL AND SKIN TEMPERATURE
C
      IF(INISTP.EQ.0) THEN
        DO I = 1, IM
          IF(SLIMSK(I).NE.0.) THEN
            TSKIN(I) = CTFIL1 * TSURF(I) + CTFIL2 * TSKIN(I)
          ENDIF
        ENDDO
        DO K = 1, KM
          DO I = 1, IM
            IF(SLIMSK(I).NE.0.) THEN
              STC(I,K) = CTFIL1 * STSOIL(I,K) + CTFIL2 * STC(I,K)
            ENDIF
          ENDDO
        ENDDO
      ENDIF
C
C  GFLUX CALCULATION
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).NE.0.
C    &            .AND.SNOWD(I).GT..001
     &            .AND.FLAGSNW(I)
      ENDDO
      DO I = 1, IM
        IF(FLAG(I)) THEN
          GFLUX(I) = -DFSNOW * (TSKIN(I) - STC(I,1))
     &               / (FACTSNW(I) * MAX(SNOWD(I),.001))
        ENDIF
      ENDDO
      DO I = 1, IM
C       IF(SLIMSK(I).NE.0..AND.SNOWD(I).LE..001) THEN
        IF(SLIMSK(I).NE.0..AND..NOT.FLAGSNW(I)) THEN
          GFLUX(I) = DFT0(I) * (STC(I,1) - TSKIN(I))
     &               / (-.5 * ZSOIL(I,1))
        ENDIF
      ENDDO
C
C  CALCULATE SENSIBLE HEAT FLUX
C
      DO I = 1, IM
        HFLX(I) = RCH(I) * (TSKIN(I) - THETA1(I))
      ENDDO
C
C  THE REST OF THE OUTPUT
C
      DO I = 1, IM
        QSURF(I) = Q0(I) + EVAP(I) / (ELOCP * RCH(I))
        DM(I) = 1.
C
C  CONVERT SNOW DEPTH BACK TO MM OF WATER EQUIVALENT
C
        SHELEG(I) = SNOWD(I) * 1000.
      ENDDO
C     IF(INISTP.EQ.3) THEN
        DO I = 1, IM
          F10M(I) = FM10(I) / FM(I)
          U10M(I) = F10M(I) * XRCL * U1(I)
          V10M(I) = F10M(I) * XRCL * V1(I)
           T2M(I) = TSKIN(I) * (1. - FH2(I) / FH(I))
     &           + THETA1(I) * FH2(I) / FH(I)
           T2M(I) = T2M(I) * SIG2K
C          Q2M(I) = QSURF(I) * (1. - FH2(I) / FH(I))
C    &           + Q0(I) * FH2(I) / FH(I)
C         T2M(I) = T1(I)
C         Q2M(I) = Q0(I)
          IF(EVAP(I).GE.0.) THEN
C
C  IN CASE OF EVAPORATION, USE THE INFERRED QSURF TO DEDUCE Q2M
C
            Q2M(I) = QSURF(I) * (1. - FH2(I) / FH(I))
     &           + Q0(I) * FH2(I) / FH(I)
          ELSE
C
C  FOR DEW FORMATION SITUATION, USE SATURATED Q AT TSKIN
C
            QSS(I) = 1000. * FPVS(TSKIN(I))
            QSS(I) = EPS * QSS(I) / (PSURF(I) + EPSM1 * QSS(I))
            Q2M(I) = QSS(I) * (1. - FH2(I) / FH(I))
     &           + Q0(I) * FH2(I) / FH(I)
          ENDIF
          QSS(I) = 1000. * FPVS(T2M(I))
          QSS(I) = EPS * QSS(I) / (PSURF(I) + EPSM1 * QSS(I))
          Q2M(I) = MIN(Q2M(I),QSS(I))
        ENDDO
C     ENDIF
 800  CONTINUE
      DO I = 1, IM
        RNET(I) = -SLWD(I) - SIGMA * TSKIN(I) **4
      ENDDO
      IF(LAT.EQ.LATD) THEN
        I = LOND
C       RBAL = -SLWD(I)-SIGMA*TSKIN(I)**4+GFLUX(I)
C    &         -EVAP(I) - HFLX(I)
        PRINT *, ' HFLX,EVAP,GFLUX,STC,TS,RNET,SLWD'
        PRINT 6000,HFLX(I),EVAP(I),GFLUX(I),
     &             STC(I,1), STC(I,2),TSKIN(I),RNET(I),SLWD(I)
        PRINT *, ' T1 =', T1(I)
 6000 FORMAT(8(F8.2,','))
C     PRINT *, ' EP, ETP,T2M =', EP(I), ETP(I),T2M(I)
C     PRINT *, ' FH, FH2 =', FH(I), FH2(I)
C     PRINT *, ' PH, PH2 =', PH(I), PH2(I)
C     PRINT *, ' CH, RCH =', CH(I), RCH(I)
C     PRINT *, ' TERM1, TERM2 =', TERM1(I), TERM2(I)
C     PRINT *, ' RS, PLANTR =', RS(I), PLANTR(I)
      ENDIF
      RETURN
      END
C
C  PROGT2 IS THE SECOND PART OF THE SOIL MODEL THAT IS EXECUTED
C  AFTER PRECIPITATION FOR THE TIME STEP HAS BEEN CALCULATED
C
CFPP$ NOCONCUR R
CFPP$ EXPAND(FUNCDF,FUNCKT,THSAT)
      SUBROUTINE PROGT2(IM,KM,RHSCNPY,RHSMC,AI,BI,CI,SMC,SLIMSK,
     &       CANOPY,PRECIP,RUNOFF,SNOWMT,
     &       ZSOIL,SOILTYP,SIGMAF,DELT,LAT)
      PARAMETER (SCANOP=2.,RHOH2O=1000.)
      PARAMETER (CTFIL1=.5,CTFIL2=1.-CTFIL1)
      PARAMETER (RFFACT=.15)
      DIMENSION RHSCNPY(IM),RHSMC(IM,KM)
      DIMENSION AI(IM,KM),BI(IM,KM),CI(IM,KM)
      DIMENSION SMC(IM,KM),CANOPY(IM),PRECIP(IM),SOILTYP(IM)
      DIMENSION SIGMAF(IM),SLIMSK(IM),RUNOFF(IM)
      DIMENSION ZSOIL(IM,KM),DEW(IM),SNOWMT(IM)
      INTEGER SOILTYP
      REAL INF, INFMAX, KSAT
C     PARAMETER (LM= 384 ,MM= 2 )
      LOGICAL FLAG(IM)
C
      DIMENSION PRCP(IM),INF(IM),INFMAX(IM)
      DIMENSION TSAT(IM),DSAT(IM),KSAT(IM)
      DIMENSION SMSOIL(IM,KM),CNPY(IM)
      LATD = 44
      LOND = 353
      DELT2 = DELT * 2.
C
C  PRECIPITATION RATE IS NEEDED IN UNIT OF KG M-2 S-1
C
      DO I = 1, IM
        PRCP(I) = RHOH2O * (PRECIP(I)+SNOWMT(I)) / DELT
        RUNOFF(I) = 0.
        CNPY(I) = CANOPY(I)
      ENDDO
      IF(LAT.EQ.LATD) THEN
        I = LOND
        PRINT *, ' BEFORE RUNOFF CAL, RHSMC =', RHSMC(I,1)
      ENDIF
C
C  UPDATE CANOPY WATER CONTENT
C
      DO I = 1, IM
        IF(SLIMSK(I).EQ.1.) THEN
          RHSCNPY(I) = RHSCNPY(I) + SIGMAF(I) * PRCP(I)
          CANOPY(I) = CANOPY(I) + DELT2 * RHSCNPY(I)
          CANOPY(I) = MAX(CANOPY(I),0.)
          PRCP(I) = PRCP(I) * (1. - SIGMAF(I))
          IF(CANOPY(I).GT.SCANOP) THEN
            DRIP = CANOPY(I) - SCANOP
            CANOPY(I) = SCANOP
            PRCP(I) = PRCP(I) + DRIP / DELT2
          ENDIF
C
C  CALCULATE INFILTRATION RATE
C
          INF(I) = PRCP(I)
          TSAT(I) = THSAT(SOILTYP(I))
C         DSAT(I) = FUNCDF(TSAT(I),SOILTYP(I))
C         KSAT(I) = FUNCKT(TSAT(I),SOILTYP(I))
C         INFMAX(I) = -DSAT(I) * (TSAT(I) - SMC(I,1))
C    &                / (.5 * ZSOIL(I,1))
C    &                + KSAT(I)
          INFMAX(I) = (-ZSOIL(I,1)) *
     &                ((TSAT(I) - SMC(I,1)) / DELT2 - RHSMC(I,1))
     &                * RHOH2O
          INFMAX(I) = MAX(RFFACT*INFMAX(I),0.)
C         IF(SMC(I,1).GE.TSAT(I)) INFMAX(I) = KSAT(I)
C         IF(SMC(I,1).GE.TSAT(I)) INFMAX(I) = ZSOIL(I,1) * RHSMC(I,1)
          IF(INF(I).GT.INFMAX(I)) THEN
            RUNOFF(I) = INF(I) - INFMAX(I)
            INF(I) = INFMAX(I)
          ENDIF
          INF(I) = INF(I) / RHOH2O
          RHSMC(I,1) = RHSMC(I,1) - INF(I) / ZSOIL(I,1)
        ENDIF
      ENDDO
      IF(LAT.EQ.LATD) THEN
        I = LOND
        PRINT *, ' PRCP, INFMAX, RUNOFF =', PRCP(I),INFMAX(I),RUNOFF(I)
        PRINT *, ' SMSOIL =', SMC(I,1), SMC(I,2)
        PRINT *, ' RHSMC =', RHSMC(I,1)
      ENDIF
C
C  WE CURRENTLY IGNORE THE EFFECT OF RAIN ON SEA ICE
C
      DO I = 1, IM
        FLAG(I) = SLIMSK(I).EQ.1.
      ENDDO
C
C  SOLVE THE TRI-DIAGONAL MATRIX
C
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I))  THEN
            RHSMC(I,K) = RHSMC(I,K) * DELT2
            AI(I,K) = AI(I,K) * DELT2
            BI(I,K) = 1. + BI(I,K) * DELT2
            CI(I,K) = CI(I,K) * DELT2
          ENDIF
        ENDDO
      ENDDO
C  FORWARD ELIMINATION
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CI(I,1) = -CI(I,1) / BI(I,1)
          RHSMC(I,1) = RHSMC(I,1) / BI(I,1)
        ENDIF
      ENDDO
      DO K = 2, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            CC = 1. / (BI(I,K) + AI(I,K) * CI(I,K-1))
            CI(I,K) = -CI(I,K) * CC
            RHSMC(I,K) = (RHSMC(I,K) - AI(I,K) * RHSMC(I,K-1)) * CC
          ENDIF
        ENDDO
      ENDDO
C  BACKWARD SUBSTITUTTION
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CI(I,KM) = RHSMC(I,KM)
        ENDIF
      ENDDO
      DO K = KM-1, 1
        DO I = 1, IM
          IF(FLAG(I)) THEN
            CI(I,K) = CI(I,K) * CI(I,K+1) + RHSMC(I,K)
          ENDIF
        ENDDO
      ENDDO
 100  CONTINUE
C
C  UPDATE SOIL MOISTURE
C
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            SMSOIL(I,K) = SMC(I,K) + CI(I,K)
            SMSOIL(I,K) = MAX(SMSOIL(I,K),0.)
            TDIF = MAX(SMSOIL(I,K) - TSAT(I),0.)
            RUNOFF(I) = RUNOFF(I) -
     &                RHOH2O * TDIF * ZSOIL(I,K) / DELT2
            SMSOIL(I,K) = SMSOIL(I,K) - TDIF
          ENDIF
        ENDDO
      ENDDO
      DO K = 1, KM
        DO I = 1, IM
          IF(FLAG(I)) THEN
            SMC(I,K) = CTFIL1 * SMSOIL(I,K) + CTFIL2 * SMC(I,K)
          ENDIF
        ENDDO
      ENDDO
      DO I = 1, IM
        IF(FLAG(I)) THEN
          CANOPY(I) = CTFIL1 * CANOPY(I) + CTFIL2 * CNPY(I)
        ENDIF
      ENDDO
C     I = 1
C     PRINT *, ' SMC'
C     PRINT 6000, SMC(I,1), SMC(I,2)
 6000 FORMAT(2(F8.5,','))
      RETURN
      END
C
C  GRDDF SETS UP MOISTURE DIFFUSIVITY AND HYDROLIC CONDUCTIVITY
C  FOR ALL SOIL TYPES
C  GRDDFS SETS UP THERMAL DIFFUSIVITY FOR ALL SOIL TYPES
C
      BLOCK DATA DFKT
      PARAMETER (NTYPE=11)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      DATA B/4.05,4.38,4.9,5.3,5.39,7.12,7.75,8.52,
     &       10.4,10.4,11.4/
      DATA SATPSI/.121,.09,.218,.786,.478,.299,.356,.63,
     &            .153,.49,.405/
      DATA SATKT/1.76E-4,1.5633E-4,3.467E-5,7.2E-6,6.95E-6,
     &           6.3E-6,1.7E-6,2.45E-6,2.167E-6,1.033E-6,
     &           1.283E-6/
      DATA TSAT/.395,.41,.435,.485,.451,.42,.477,.476,
     &          .426,.492,.482/
      END
      SUBROUTINE GRDDF
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDF/ DFK(NGRID,NTYPE)
      COMMON /COMGKT/ KTK(NGRID,NTYPE)
      REAL KTK
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      DO K = 1, NTYPE
        DYNW = TSAT(K) * .05
        F1 = B(K) * SATKT(K) * SATPSI(K) / TSAT(K) ** (B(K) + 3.)
        F2 = SATKT(K) / TSAT(K) ** (B(K) * 2. + 3.)
C
C  CONVERT FROM M/S TO KG M-2 S-1 UNIT
C
        F1 = F1 * 1000.
        F2 = F2 * 1000.
        DO I = 1, NGRID
          THETA = FLOAT(I-1) * DYNW
          THETA = MIN(TSAT(K),THETA)
          DFK(I,K) = F1 * THETA ** (B(K) + 2.)
          KTK(I,K) = F2 * THETA ** (B(K) * 2. + 3.)
        ENDDO
      ENDDO
      RETURN
      END
      SUBROUTINE GRDKT
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDFT/ DFKT(NGRID,NTYPE)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      DO K = 1, NTYPE
        DYNW = TSAT(K) * .05
        F1 = LOG10(SATPSI(K)) + B(K) * LOG10(TSAT(K)) + 2.
        DO I = 1, NGRID
          THETA = FLOAT(I-1) * DYNW
          THETA = MIN(TSAT(K),THETA)
          IF(THETA.GT.0.) THEN
            PF = F1 - B(K) * LOG10(THETA)
          ELSE
            PF = 5.2
          ENDIF
          IF(PF.LE.5.1) THEN
            DFKT(I,K) = EXP(-(2.7+PF)) * 420.
          ELSE
            DFKT(I,K) = .1744
          ENDIF
        ENDDO
      ENDDO
      RETURN
      END
      REAL FUNCTION KTSOIL(THETA,KTYPE)
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDFT/ DFKT(NGRID,NTYPE)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      W = (THETA / TSAT(KTYPE)) * 20. + 1.
      KW = W
      KW = MIN(KW,21)
      KW = MAX(KW,1)
      KTSOIL = DFKT(KW,KTYPE)
     &         + (W - KW) * (DFKT(KW+1,KTYPE) - DFKT(KW,KTYPE))
      RETURN
      END
      FUNCTION FUNCDF(THETA,KTYPE)
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDF/ DFK(NGRID,NTYPE)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      W = (THETA / TSAT(KTYPE)) * 20. + 1.
      KW = W
      KW = MIN(KW,21)
      KW = MAX(KW,1)
      FUNCDF = DFK(KW,KTYPE)
     &         + (W - KW) * (DFK(KW+1,KTYPE) - DFK(KW,KTYPE))
      RETURN
      END
      FUNCTION FUNCKT(THETA,KTYPE)
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGKT/ KTK(NGRID,NTYPE)
      REAL KTK
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      W = (THETA / TSAT(KTYPE)) * 20. + 1.
      KW = W
      KW = MIN(KW,21)
      KW = MAX(KW,1)
      FUNCKT = KTK(KW,KTYPE)
     &         + (W - KW) * (KTK(KW+1,KTYPE) - KTK(KW,KTYPE))
      RETURN
      END
      FUNCTION THSAT(KTYPE)
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      THSAT = TSAT(KTYPE)
      RETURN
      END
      FUNCTION TWLT(KTYPE)
      PARAMETER(NTYPE=11,NGRID=22)
      COMMON /COMGDFKT/ B(NTYPE),SATPSI(NTYPE),SATKT(NTYPE),TSAT(NTYPE)
      TWLT = .1
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FPKAP(P)
C$$$   SUBPROGRAM  DOCUMENTATION  BLOCK
C
C SUBPROGRAM: FPKAP        RAISE SURFACE PRESSURE TO THE KAPPA POWER.
C   AUTHOR: PHILLIPS         ORG: W/NMC2X2   DATE: 29 DEC 82
C
C ABSTRACT: RAISE SURFACE PRESSURE OVER 100 KPA TO THE KAPPA POWER
C   USING THE RATIO OF TWO POLYNOMIALS IN PRESSURE. THE POLYNOMIAL
C   COEFFICIENTS WERE OBTAINED FROM THE IMSL PROGRAM IRATCU
C   WITH INPUT P/100 RANGE OF 0.5-1.1 AND KAPPA EQUAL TO 0.2856219.
C   THE ACCURACY IS ABOUT THE SAME AS 32-BIT ARITHMETIC.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:  PKAP=FPKAP(P)
C
C   INPUT ARGUMENT LIST:
C     P        - REAL SURFACE PRESSURE IN KILOPASCALS (CB)
C                P SHOULD BE IN THE RANGE 50. TO 110.
C
C   OUTPUT ARGUMENT LIST:
C     FPKAP    - REAL P/100 TO THE KAPPA POWER
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CN0=3.47575490E-1,CN1=4.36732956E-2,CN2= 3.91557032E-4,
     &   CD0=1.,CD1=5.44053037E-2,CD2=2.27693825E-4,CD3=-8.69930591E-8)
C-----------------------------------------------------------------------
      FPKAP=(CN0+P*(CN1+P*CN2))/(CD0+P*(CD1+P*(CD2+P*CD3)))
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FPVS(T)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FPVS         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE SATURATION VAPOR PRESSURE FROM THE TEMPERATURE.
C   A LINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GPVS. SEE DOCUMENTATION FOR GPVS FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   PVS=FPVS(T)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     T        - REAL TEMPERATURE IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     FPVS     - REAL SATURATION VAPOR PRESSURE IN KILOPASCALS (CB)
C
C COMMON BLOCKS:
C   COMPVS   - SCALING PARAMETERS AND TABLE COMPUTED IN GPVS.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=1501)
      DIMENSION TBPVS(NX)
      COMMON/COMPVS/ C1XPVS,C2XPVS,ANXPVS,TBPVS
C-----------------------------------------------------------------------
      XJ=MIN(MAX(C1XPVS+C2XPVS*T,1.),ANXPVS)
      JX=XJ
      FPVS=TBPVS(JX)+(XJ-JX)*(TBPVS(JX+1)-TBPVS(JX))
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTDP(PV)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTDP         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE DEWPOINT TEMPERATURE FROM VAPOR PRESSURE.
C   A LINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTDP. SEE DOCUMENTATION FOR GTDP FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   TDP=FTDP(PV)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     PV       - REAL VAPOR PRESSURE IN KILOPASCALS (CB)
C
C   OUTPUT ARGUMENT LIST:
C     FTDP     - REAL DEWPOINT TEMPERATURE IN KELVIN
C
C COMMON BLOCKS:
C   COMTDP   - SCALING PARAMETERS AND TABLE COMPUTED IN GTDP.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=1000)
      DIMENSION TBTDP(NX)
      COMMON/COMTDP/ C1XTDP,C2XTDP,ANXTDP,TBTDP
C-----------------------------------------------------------------------
      XJ=MIN(MAX(C1XTDP+C2XTDP*PV,1.),ANXTDP)
      JX=XJ
      FTDP=TBTDP(JX)+(XJ-JX)*(TBTDP(JX+1)-TBTDP(JX))
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTHE(T,PK)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTHE         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE EQUIVALENT POTENTIAL TEMPERATURE AT THE LCL
C   FROM TEMPERATURE AND PRESSURE OVER 100 KPA TO THE KAPPA POWER.
C   A BILINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTHE. SEE DOCUMENTATION FOR GTHE FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA,
C   EXCEPT ZERO IS RETURNED FOR TOO COLD OR HIGH LCLS.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   THE=FTHE(PV)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     T        - REAL LCL TEMPERATURE IN KELVIN
C     PK       - REAL LCL PRESSURE OVER 100 KPA TO THE KAPPA POWER
C
C   OUTPUT ARGUMENT LIST:
C     FTHE     - REAL EQUIVALENT POTENTIAL TEMPERATURE IN KELVIN
C
C COMMON BLOCKS:
C   COMTHE   - SCALING PARAMETERS AND TABLE COMPUTED IN GTHE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=41,NY=10)
      DIMENSION TBTHE(NX,NY)
      COMMON/COMTHE/ C1XTHE,C2XTHE,ANXTHE,C1YTHE,C2YTHE,ANYTHE,TBTHE
C-----------------------------------------------------------------------
      XJ=MIN(C1XTHE+C2XTHE*T,ANXTHE)
      YJ=MIN(C1YTHE+C2YTHE*PK,ANYTHE)
      IF(XJ.GE.1..AND.YJ.GE.1.) THEN
        JX=XJ
        JY=YJ
        F1=TBTHE(JX,JY)+(XJ-JX)*(TBTHE(JX+1,JY)-TBTHE(JX,JY))
        F2=TBTHE(JX,JY+1)+(XJ-JX)*(TBTHE(JX+1,JY+1)-TBTHE(JX,JY+1))
        FTHE=F1+(YJ-JY)*(F2-F1)
      ELSE
        FTHE=0.
      ENDIF
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTLCL(T,TDPD)
C$$$   SUBPROGRAM  DOCUMENTATION  BLOCK
C
C SUBPROGRAM: FTLCL        COMPUTE LCL TEMPERATURE.
C   AUTHOR: PHILLIPS         ORG: W/NMC2X2   DATE: 29 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AT THE LIFTING CONDENSATION LEVEL
C   FROM TEMPERATURE AND DEWPOINT DEPRESSION. THE FORMULA USED IS
C   A POLYNOMIAL TAKEN FROM PHILLIPS MSTADB ROUTINE. ITS ACCURAY IS
C   ON THE ORDER OF 0.03 KELVIN FOR A DEWPOINT DEPRESSION OF 30 KELVIN.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:  TLCL=FTLCL(T,TDPD)
C
C   INPUT ARGUMENT LIST:
C     T        - REAL TEMPERATURE IN KELVIN
C     TDPD     - REAL DEWPOINT DEPRESSION IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     FTLCL    - REAL TEMPERATURE AT THE LCL IN KELVIN
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CLCL1= 0.954442E+0,CLCL2= 0.967772E-3,
     &          CLCL3=-0.710321E-3,CLCL4=-0.270742E-5)
C-----------------------------------------------------------------------
      FTLCL=T-TDPD*(CLCL1+CLCL2*T+TDPD*(CLCL3+CLCL4*T))
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTMA(THE,PK,QMA)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTMA         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AND SPECIFIC HUMIDITY OF A PARCEL
C   LIFTED UP A MOIST ADIABAT FROM EQUIVALENT POTENTIAL TEMPERATURE
C   AT THE LCL AND PRESSURE OVER 100 KPA TO THE KAPPA POWER.
C   A BILINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTMA. SEE DOCUMENTATION FOR GTMA FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   TMA=FTMA(THE,PK,QMA)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     THE      - REAL EQUIVALENT POTENTIAL TEMPERATURE IN KELVIN
C     PK       - REAL PRESSURE OVER 100 KPA TO THE KAPPA POWER
C
C   OUTPUT ARGUMENT LIST:
C     FTMA     - REAL PARCEL TEMPERATURE IN KELVIN
C     QMA      - REAL PARCEL SPECIFIC HUMIDITY IN KG/KG
C
C COMMON BLOCKS:
C   COMTMA   - SCALING PARAMETERS AND TABLE COMPUTED IN GTMA.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=41,NY=41)
      DIMENSION TBTMA(NX,NY),TBQMA(NX,NY)
      COMMON/COMMA/ C1XMA,C2XMA,ANXMA,C1YMA,C2YMA,ANYMA,TBTMA,TBQMA
C-----------------------------------------------------------------------
      XJ=MIN(MAX(C1XMA+C2XMA*THE,1.),ANXMA)
      YJ=MIN(MAX(C1YMA+C2YMA*PK,1.),ANYMA)
      JX=XJ
      JY=YJ
      F1=TBTMA(JX,JY)+(XJ-JX)*(TBTMA(JX+1,JY)-TBTMA(JX,JY))
      F2=TBTMA(JX,JY+1)+(XJ-JX)*(TBTMA(JX+1,JY+1)-TBTMA(JX,JY+1))
      FTMA=F1+(YJ-JY)*(F2-F1)
      F1=TBQMA(JX,JY)+(XJ-JX)*(TBQMA(JX+1,JY)-TBQMA(JX,JY))
      F2=TBQMA(JX,JY+1)+(XJ-JX)*(TBQMA(JX+1,JY+1)-TBQMA(JX,JY+1))
      QMA=F1+(YJ-JY)*(F2-F1)
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GWDPS(IDIMT,IDIMT2,KDIM,A,B,
     1                  U1,V1,T1,Q1,
     2                  PSTAR,
     3                  SI,DEL,CL,SL,RCL,DELTIM,LAT,KDT,HPRIME,
     4                  DUSFC,DVSFC)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GWDPS       INCLUDES GRAVITY WAVE DRAG.
C   PRGMMR: JORDAN C. ALPERT ORG: W/NMC23    DATE: 91-03-12
C
C ABSTRACT: USING THE GWD PARAMETERIZATIONS OF PS-GLAS AND PH-
C   GFDL TECHNIQUE, THE TIME TENDENCIES OF U V
C   ARE ALTERED TO INCLUDE THE EFFECT OF MOUNTAIN INDUCED
C   GRAVITY WAVE DRAG FROM SUB-GRID SCALE OROGRAPHY INCLUDING
C   CONVECTIVE BREAKING, SHEAR BREAKING AND THE PRESENCE OF
C   CRITICAL LEVELS.
C
C PROGRAM HISTORY LOG:
C   87-06-03  JORDAN C. ALPERT  FR30(V3H-MX)
C
C USAGE:    CALL GWDPS(A,B,U1,V1,T1,Q1,PSTAR,
C                      SI,DEL,CL,SL,RCL,DELTIM,LAT,KDT,HPRIME)
C   INPUT ARGUMENT LIST:
C     A        - NEGATIVE NON-LIN TENDENCY FOR V WIND COMPONENT.
C     B        -          NON-LIN TENDENCY FOR U WIND COMPONENT.
C     U1       - ZONAL      WIND COMPONENT *COS(LAT)  M/SEC AT T0-DT.
C     V1       - MERIDIONAL WIND COMPONENT *COS(LAT)  M/SEC AT T0-DT.
C     T1       - TEMPERATURE DEG K AT T0-DT.
C     Q1       - SPECIFIC HUMIDITY AT T0-DT.
C     PSTAR    - SURFACE PRESSURE (CB).
C     SI(N)    - P/PSFC AT BASE OF LAYER N.
C     DEL(N)   - POSITIVE INCREMENT OF P/PSFC ACROSS LAYER N.
C     CL(N)    = 1 - SL(N).
C     SL(N)    - P/PSFC AT MIDDLE OF LAYER N.
C     RCL      - RECIPROCAL OF SQUARE OF COS(LAT).
C     DELTIM   - TIME STEP  SECS.
C     LAT      - LATITUDE  NUMBER.
C     KDT      - TIME STEP NUMBER.
C     HPRIME   - TOPOGRAPHIC STANDARD DEVIATION  (M).
C
C   OUTPUT ARGUMENT LIST:
C     A        - AS AUGMENTED BY TENDENCY DUE TO MIGWD.
C     B        - AS AUGMENTED BY TENDENCY DUE TO MIGWD.
C
C   OUTPUT FILES:
C     FT06F001 - PRINTOUT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN, CFT77.
C   MACHINE:  CRAY Y-MP.
C
C$$$
C ----->  I M P L E M E N T A T I O N    V E R S I O N   <----------
CRAY       SAVE
C
C  VERSION 3  MODIFIED FOR GRAVITY WAVES, LOCATION: .FR30(V3GWD)  *J*
C---       3.1 INCLUDES VARIABLE SATURATION FLUX PROFILE CF ISIGST
C---       3.G INCLUDES PS COMBINED W/ PH (GLAS AND GFDL)
C-----         ALSO INCLUDED IS RI  SMOOTH OVER THICK LOWER LAYER
C-----         ALSO INCLUDED IS DECREASE IN DE-ACC AT TOP BY 1/2
C-----     LOCATION:  FR30(V3GD)          -----
C-----     THE NMC GWD INCORPORATING BOTH GLAS(P&S) AND GFDL(MIGWD)
C-----             MOUNTAIN INDUCED GRAVITY WAVE DRAG
C-----    CODE FROM .FR30(V3MONNX) FOR MONIN3
C-----        THIS VERSION (06 MAR 1987)
C-----        THIS VERSION (26 APR 1987)    3.G
C-----        THIS VERSION (01 MAY 1987)    3.9
C-----   CHANGE TO FORTRAN 77 (FEB 1989)     --- HANN-MING HENRY JUANG
C -------
C    USE
C        ROUTINE IS CALLED FROM GLOOP  (AFTER CALL
C        TO MONNIN IN THE SMF PORTION OF THE MRF MODEL
C
C    PURPOSE
C        USING THE GWD PARAMETERIZATIONS OF PS-GLAS AND PH-
C        GFDL TECHNIQUE.  THE TIME TENDENCIES OF U V
C        ARE ALTERED TO INCLUDE THE EFFECT OF MOUNTAIN INDUCED
C        GRAVITY WAVE DRAG FROM SUB-GRID SCALE OROGRAPHY INCLUDING
C        CONVECTIVE BREAKING, SHEAR BREAKING AND THE PRESENCE OF
C        CRITICAL LEVELS
C
C  INPUT
C        A NEGATIVE NON-LIN TENDENCY FOR V WIND COMPONENT
C        B          NON-LIN TENDENCY FOR U WIND COMPONENT
C          FOR A B DEFS SEE EQ 14 15 OF SELA 1982 NMC SPECTRAL
C          MODEL TECHNICAL REPORT.
C        U1 ZONAL WIND COMPONENT * COS(LAT)   M/SEC  AT T0-DT
C        V1 MERIDIONAL WIND COMPONENT *COS(LAT)  M/SEC AT T0-DT
C        T1 TEMPERATURE DEG K AT T0-DT
C        Q1 SPECIFIC HUMIDITY AT T0-DT
C        NOTE U V T Q AT KDIM LAYERS
C        RCL RECIPROCAL OF SQUARE OF COS(LAT)
C        DELTIM TIME STEP    SECS
C        THE FOLLOWING PARAMETERS ARE SET UP IN SR
C        SETSIG.
C        SI(N) P/PSFC AT BASE OF LAYER N
C        SL(N) P/PSFC AT MIDDLE OF LAYER N
C        DEL(N) POSITIVE INCREMENT OF P/PSFC ACROSS LAYER N
C        CL(N) =1 - SL(N)
C
C  OUTPUT
C        A B         AS AUGMENTED BY TENDENCY DUE TO MIGWD
C        OTHER INPUT VARIABLES UNMODIFIED.
C
C  SRS CALLED    GWDRAG
C
      DIMENSION A(IDIMT,KDIM),  B(IDIMT,KDIM),
     2         U1(IDIMT2,KDIM), V1(IDIMT2,KDIM),
     3         T1(IDIMT2,KDIM), Q1(IDIMT2,KDIM),
     7   SI(KDIM+1),DEL(KDIM),CL(KDIM),SL(KDIM)
C
C     DIMENSION PS     (IDIMT)
      DIMENSION PSTAR  (IDIMT)
C
      PARAMETER(CP= 1.0046E+3 ,G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+
     12 )
      PARAMETER(GOR=G/RD,GOCP=G/CP,FV=RV/RD-1)
      PARAMETER(DW2MIN=1.,RIMIN=-100.)
      DIMENSION RDZT(KDIM-1)
      DIMENSION VELCO(IDIMT,KDIM-1)
C
      LOGICAL LDRAG(IDIMT)
C
C  DEBUG DIMENSION
C
      DIMENSION RI(KDIM-1)
C
C----         MOUNTAIN INDUCED GRAVITY WAVE DRAG
C----   UNIT14  - SUBGRID SCALE MOUNTAIN VARIANCE HEIGHT INPUT
C----   COMMON TO BE ADDED TO SMF,GLOO FOR MIGWD        *J*
C----   IDIMT = 256 AND KDIM = 18 FOR EXAMPLE...
C
            D I M E N S I O N
     .TAUB(IDIMT),XN(IDIMT),YN(IDIMT),DTAUX(IDIMT,KDIM),
     .UBAR(IDIMT),VBAR(IDIMT),TAUD(IDIMT,KDIM),FR(IDIMT),GF(IDIMT),
     .ULOW(IDIMT),BNV(IDIMT),VTJ(IDIMT,KDIM),DTAUY(IDIMT,KDIM),
     .HPRIME(IDIMT),BNV2(IDIMT,KDIM),SIGK(KDIM),
     .TAUP(IDIMT,KDIM+1),USQJ(IDIMT,KDIM),RO(IDIMT,KDIM),ROLL(IDIMT)
      DIMENSION DUSFC(IDIMT),DVSFC(IDIMT)
      DIMENSION DTFAC(IDIMT)
      DIMENSION VELKO(KDIM-1)
      REAL AKAPPA
      REAL SLREAL
C
C
C--------------------------------------------CONSTANTS FOR MIGWD *J*
C
C-----ONLY DO CONSTANTS FIRST TIME THROUGH MONNIN
C
      RLOWLV =0.7
      XL     =4.0 E 4
      CRITAC =5.0 E -4
      NCNT   =100
C
            AKAPPA = 2. / 7.
C
      DO 18 K=1,KDIM
      SLREAL = SL(K)
      SIGK(K)  = SLREAL**(-AKAPPA)
   18 CONTINUE
C
C------- MKDIMP   THE TOP SIGMA LEVEL OVER WHICH MIGWD WILL OPERATE
C
       MKDIMP = KDIM+1
C
C------- KBJ IS THE BOTTOM OF THE LOW 1/3 LEVEL USUALLY = 1
C
        KBJ = 1
         DO 15 K = KBJ, KDIM
         IF (SI(K) .LT. RLOWLV) THEN
         KSM = K
         GO TO 16
         ENDIF
   15    CONTINUE
   16   CONTINUE
C
C-----KSM -1 INTERVALS IN THE LOWER THIRD OF ATM (SIGMA < .667)
C
         KSMM1 = KSM - 1
         DELKS = SI(KBJ)-SI(KSM)
         DELKS1=SL(KBJ)-SL(KSM)
C
C----ABOVE, THE LOW LAYER DELTA SIGMA
C-----BELOW THE STARTING SIGMA LEVEL FOR PS STRESS CALC DEFAULTS TO 2
C
       KBPS = 2
       LCAP=KDIM
       LCAPP1 = LCAP + 1
       FACTOP=0.5
C
        GRAV = G
        GRAV2 = GRAV * GRAV
        RGAS = RD
        GR2 = 2.0 * GRAV2 / RGAS
        GMAX = 1.
        AJ   = 1.
        XLINV =  1.0 / XL
        VELEPS=1.0
      RCS=SQRT(RCL)
      CS = 1. / RCS
C
C----------SAVING RICHARDSON NUMBER IN USQJ FOR MIGWD        *J*
C
      DO K=1,KDIM-1
        RDZT(K)=GOR*SI(K+1)/(SL(K)-SL(K+1))
      ENDDO
      DO K=1,KDIM
        DO J=1,IDIMT
          VTJ(J,K)=T1(J,K)*(1.+FV*Q1(J,K))
        ENDDO
      ENDDO
      DO K=1,KDIM-1
        DO J=1,IDIMT
          TI=0.5*(T1(J,K)+T1(J,K+1))
          RDZ=RDZT(K)/TI
          DW2=RCL*((U1(J,K)-U1(J,K+1))**2+(V1(J,K)-V1(J,K+1))**2)
          SHR2=MAX(DW2,DW2MIN)*RDZ**2
          BVF2=G*(GOCP+RDZ*(VTJ(J,K+1)-VTJ(J,K)))/TI
          USQJ(J,K)=MAX(BVF2/SHR2,RIMIN)
        ENDDO
      ENDDO
C
C-----VERTICAL STRUCTURE OF RI IN RI(KDIM) FOR DIAGNOSTICS
C
C-----THE LINEAR MOUNTAIN INDUCED GRAVITY MODE P&S PRAMETERIZATION
C      EXPLITLY DONE
C-----THIS ROUTINE COMPUTES THE DECELERATION OF THE ZONAL WIND AND
C-----MERIDIONAL WIND DUE TO MOUNTAIN GRAVITY DRAG.
C
C-----    CODE VARIABLES          DESCRIPTION
C
C-----       XN,YN            PROJECTIONS OF "LOW-LEVEL" WIND
C-----                        IN ZONAL & MERIDIONAL DIRECTIONS
C
C-----       ULOW             "LOW-LEVEL" WIND MAGNITUDE -        (= U)
C-----                        AVERAGED UP TO 2KM ABOVE SURFACE
C
C-----       BNV2             BNV2 = N**2
C
C-----       HPRIME           SUB-GRID SCALE MOUNTAIN HEIGHT      (= H)
C-----                        FROM NAVY TAPE, AVERAGED,'ENVELOPE'STD. VA
C-----                        READ IN IN SMF,COMMON-ED TO GLOO
C
C-----       TAUB             BASE MOMENTUM FLUX
C-----                        = -(RO * U**3/(N*XL)*GF(FR) FOR N**2 > 0
C-----                        = 0.                        FOR N**2 < 0
C
C
C-----       FR               FROUDE    =   N*HPRIME / U
C-----       G                GMAX*FR**2/(FR**2+AJ**2)
C-----       GMAX             = 1.0
C-----       AJ               = 1.0
C
C-----KSM IS DEFINED AS THE NUMBER OF LEVELS UP 1/3 FROM THE LOWEST USED
C-----TO CALCULATE THE "LOW-LEVEL" AVERAGES.
C
C
C-----INITIALIZE ARRAYS     (ON CYBER)
C
       DO 200 I=1,IDIMT
         XN(I) = 0.0
         YN(I) = 0.0
       UBAR (I)=  0.0
       VBAR (I)=  0.0
       ROLL (I)=  0.0
       TAUB (I)=  0.0
       ULOW (I)=  0.0
       TAUP (I,KDIM+1) = 0.0
 200   CONTINUE
C
       DO 250 K=1,KDIM
       DO 250 I=1,IDIMT
        TAUP(I,K) = 0.0
        RO(I,K) = SL(K) * PSTAR(I)
     1                 / ( RGAS * VTJ(I,K) )
 250  CONTINUE
C
C----DENSITY   TONS/METER**3
C--------.---------.---------.---------.---------.---------.---------. .
C-----COMPUTE LOW LEVEL AVERAGES
C-----(U,V)*COS(LAT)  USE UV=(U1,V1) WHICH IS WIND AT T0-1
C----- USE RCS=1/COS(LAT) TO GET WIND FIELD
C----  KSM   THE TOP OF THE LOWEST 1/3 LAYER "THE LOW LEVEL" IS 6
C
        DO 300 K=KBJ,KSMM1
        RCSKS = RCS * DEL(K) / DELKS
        DO 300 I=1,IDIMT
        UBAR(I) = UBAR(I) + RCSKS * U1(I,K)
        VBAR(I) = VBAR(I) + RCSKS * V1(I,K)
 300    CONTINUE
C
C----COMPUTE THE "LOW LEVEL" OR 1/3 WIND MAGNITUDE (M/S)
C
      DO 400 I=1,IDIMT
        ULOW(I) = SQRT( UBAR(I) * UBAR(I) + VBAR(I) * VBAR(I) )
 400  CONTINUE
      DO 450 I=1,IDIMT
        VALUE = 1.0
        ULOW(I) = MAX( ULOW(I), VALUE )
 450  CONTINUE
C
C-----CALCULATE SQUARED LOW LEVEL BRUNT VAISALA FREQUENCY OVER THE
C-----FIRST KSM LEVELS THEN AVERAGE
C---- SIGKM IS RECIP( SIGMA** KAPPA) AT TOP OF LOWER LAYER
C---- SIGKIN IS RECIP( SIGMA** KAPPA) AT BOTTOM OF LOWER LAYER
C---- RDELKS (DEL(K)/DELKS) VERT AVE FACTOR SO WE CAN * INSTEAD OF /
C
        DO 500 I=1,IDIMT
           BNV2(I,1) = 0.
 500    CONTINUE
C
        DO 550 K=KBJ,KSMM1
        DO 550 I=1,IDIMT
            BNV2(I,K) = GR2 * (SL(K) + SL(K+1))
     1    * (VTJ(I,K+1) * SIGK(K+1) - VTJ(I,K) * SIGK(K))
     2    /  (  (VTJ(I,K) * SIGK(K)
     3                 + VTJ(I,K+1) * SIGK(K+1))
     4       * (SL(K) - SL(K+1))
     5                 * (T1(I,K) + T1(I,K+1)) )
 550    CONTINUE
C
        DO 600 K=1,KDIM-1
        DO 600 I=1,IDIMT
        VELCO(I,K) =
     1    (0.5*RCS)*( (U1(I,K) + U1(I,K+1)) *
     2                      UBAR(I) +
     3                       (V1(I,K) + V1(I,K+1)) *
     4                      VBAR(I))
        VELCO(I,K)=VELCO(I,K)/ULOW(I)
        IF ((VELCO(I,K).LT.VELEPS).AND.(VELCO(I,K).GE.0.)) THEN
          VELCO(I,K) = VELEPS
        ENDIF
 600    CONTINUE
C
C  NO DRAG WHEN CRITICAL LEVEL IN THE BASE LAYER
C
        DO 700 I=1,IDIMT
        LDRAG(I)=VELCO(I,1).LE.0.
 700    CONTINUE
        DO 750 K=2,KSMM1
        DO 750 I=1,IDIMT
        LDRAG(I)=LDRAG(I).OR. VELCO(I,K).LE.0.
 750    CONTINUE
C
C  NO DRAG WHEN BNV2.LT.0
C
        DO 800 K=1,KSMM1
        DO 800 I=1,IDIMT
        LDRAG(I)=LDRAG(I).OR. BNV2(I,K).LT.0.
 800    CONTINUE
C
C-----THE LOW LEVEL WEIGHTED AVERAGE RI IS STORED IN USQJ(1,1; IDIMT)
C-----THE LOW LEVEL WEIGHTED AVERAGE N**2 IS STORED IN BNV2(1,1; IDIMT)
C----- THIS IS CALLED BNVL2 IN GWDRAG NOT BNV2
C
        KBJP1 = KBJ + 1
        WTKBJ = (SL(KBJ)-SL(KBJP1))/DELKS1
        DO 900 I=1,IDIMT
        USQJ(I,1) = WTKBJ * USQJ(I,KBJ)
        BNV2(I,1) = WTKBJ * BNV2(I,KBJ)
 900    CONTINUE
C
        DO 1000 K = KBJP1,KSMM1
           RDELKS = (SL(K)-SL(K+1))/DELKS1
           DO 1000 I=1,IDIMT
           BNV2(I,1) =   BNV2(I,1) + BNV2(I,K)  * RDELKS
           USQJ(I,1) =   USQJ(I,1) + USQJ(I,K)   * RDELKS
 1000   CONTINUE
C
        DO 1010 I=1,IDIMT
        LDRAG(I)=LDRAG(I).OR. BNV2(I,1).LE.0.0
        LDRAG(I)=LDRAG(I).OR. ULOW(I).EQ.1.0
 1010   CONTINUE
C
C ----- SET ALL RI LOW LEVEL VALUES TO THE LOW LEVEL VALUE
C
        KBJBEG = KBJ
        IF(KBJ .EQ. 1) KBJBEG = 2
        DO 1020 K=KBJBEG,KSMM1
        DO 1020 I=1,IDIMT
           USQJ(I,K) = USQJ(I,1)
 1020   CONTINUE
C
C-----  LOW LEVEL DENSITY
C
        DO 1030 K=KBJ,KSMM1
           RDELKS =  DEL(K)/DELKS
           DO 1030 I=1,IDIMT
           ROLL(I) =   ROLL(I) + RO(I,K)   * RDELKS
 1030   CONTINUE
C
        DO 1050 I=1,IDIMT
         IF  (.NOT.LDRAG(I) )   THEN
C
C-----VECTOR SQUARE ROOT FUNCTION - VSQRT -  USED TO COMPUTE BNV
C
       BNV(I) = SQRT( BNV2(I,1) )
C
C-----CALCULATE FR  FROUDE    ---- N*HPRIME / U
C
       FR(I) = BNV(I) * HPRIME(I) / ULOW(I)
C
C----CONTINUE W/ WHERE BLOCK
C
C-----CALCULATE G   THE UNIVERSAL FLUX FUNCTION
C
       GF(I) = GMAX * FR(I) * FR(I) /
     1                 ( FR(I) * FR(I) + AJ * AJ )
C
C-----CALCULATE TAUB - (THE BASE FLUX)
C-----REMEMBER - THE LOW LEVEL N IS IN BNV2(1,1;IDIMT) = BNV = BNVL2
C
       TAUB(I) =  -XLINV * ROLL(I) *
     1     ULOW(I) * ULOW(I) * ULOW(I) * GF(I) / BNV(I)
C
C-----CALCULATE XN, YN
C
               XN(I) = UBAR(I) / ULOW(I)
C
               YN(I) = VBAR(I) / ULOW(I)
C
          ELSE
C
              TAUB(I) = 0.0
               XN(I)  = 0.0
               YN(I)  = 0.0
C
          ENDIF
 1050   CONTINUE
C
C------THE CALL TO GWDRAG:
C------      TAUP ARE RETURNED    OTHER PARAMETERS FROM MONN
C
      CALL GWDRAG(IDIMT,IDIMT2,KDIM,
     1            U1,V1,T1,PSTAR,VTJ,USQJ,KSM,KBJ,KBPS,
     1            VELCO,BNV2,ROLL,RO,TAUB,SI,DEL,SL,SIGK,RCL,
     2            LAT,KDT,HPRIME,XLINV,TAUP)
C
           IF(LCAP.LT.KDIM) THEN
C
           DO 1100 KLCAP =  LCAPP1, KDIM
C
            SIRA =          SI(KLCAP) / SI(LCAP)
C
           DO 1100 I=1,IDIMT
           TAUP(I,KLCAP) =  SIRA * TAUP(I,LCAP)
C
 1100      CONTINUE
C
           ENDIF
C
C-----FIX UP THE LEVEL 1 (OR MORE) STRESS TO BE LINEAR WITH LEVEL
C-----KBPS AND THE STRESS AT THE BOTTOM TAUB (IF KBPS IS .GT. 1)
C
        IF (KBPS .GT. KBJ) THEN
           KBPSM1 = KBPS - 1
           KBPSP1 = KBPS + 1
C
           DO 1200 IK1 = KBJ, KBPSM1
                   SAVEM   =  ( (SI(IK1+1) - SI(KBPSP1)) /
     1                         (SI(KBPSP1) - 1.0 ) )
           DO 1200 I=1,IDIMT
           TAUP(I,IK1+1) =  TAUP(I,KBPSP1)   -
     1        SAVEM * ( TAUP(I,KBJ) - TAUP(I,KBPSP1) )
 1200      CONTINUE
C
        ENDIF
C
C---KEEP IN MIND THAT TAUP IS ZERO-ED OUT BEFORE EACH CALL
C-----VERTICALLY DIFFERENCE STRESS FOR D TAU / D SIGMA  FROM SI TO SL
C
      DO 1300 K=1,KDIM
      DO 1300 I=1,IDIMT
C
C-----THE STRESS IN GWSDRAG HAS BEEN CALC USING -TAUB WHICH NOW MUST BE
C-----RETURNED TO -(AMPLITUDE) BELOW THE OLD WAY FOR TAU AS -(RO*U**3/NL
C-----INSTEAD OF RO*UAMP*K*N*H'**2
C
C
      TAUD(I,K) = (TAUP(I,K+1) - TAUP(I,K) ) / DEL(K)
C
C---WHERE DEL= SI(K)-SI(K+1)  (SIGN 'SWITCHED' IN SELA CODE)
C
 1300 CONTINUE
C
C-----CALCULATE DECELERATION TERMS - DTAUX,DTAUY
C
      DO 1400 K=1,KDIM
      DO 1400 I=1,IDIMT
      TAUD(I,K) = TAUD(I,K) / PSTAR(I)
 1400 CONTINUE
C
C------LIMIT DE-ACCELERATION (MOMENTUM DEPOSITION ) AT TOP TO 1/2 VALUE
C------THE IDEA IS SOME STUFF MUST GO OUT THE 'TOP'
C
C------LIMIT DE-ACCELERATION (MOMENTUM DEPOSITION ) AT TOP TO 1/2 VALUE
C------THE IDEA IS SOME STUFF MUST GO OUT THE 'TOP'
C
      DO 1500 KLCAP = LCAP, KDIM
      DO 1500 I=1,IDIMT
      TAUD(I,KLCAP) = TAUD(I,KLCAP) * FACTOP
 1500 CONTINUE
C
C----- *G AND * BY COS(LAT) FOR MRF TENDENCIES
C
      CSGRAV = CS * GRAV
      DO 1600 K=1,KDIM
      DO 1600 I=1,IDIMT
      TAUD(I,K) = TAUD(I,K) * CSGRAV
 1600 CONTINUE
C
C------IF THE GRAVITY WAVE DRAG WOULD FORCE A CRITICAL LINE
C------IN THE LOWER KSMM1 LAYERS DURING THE NEXT 2*DELTIM TIMESTEP,
C------THEN ONLY APPLY DRAG UNTIL THAT CRITICAL LINE IS REACHED.
C
      DO 1610 I=1,IDIMT
      DTFAC(I)=1.
1610  CONTINUE
      DO 1620 K=1,KSMM1
      DO 1620 I=1,IDIMT
      IF(TAUD(I,K).NE.0.)
     &DTFAC(I)=MIN(DTFAC(I),ABS(VELCO(I,K)/(2.*DELTIM*RCS*TAUD(I,K))))
1620  CONTINUE
C     DO 1625 I=1,IDIMT
C     IF(DTFAC(I).LT.0.20) THEN
C     PRINT 1624,KDT,LAT,I,DTFAC(I),VELCO(I,1),2.*DELTIM*RCS*TAUD(I,1),
C    &           TAUB(I),BNV(I),HPRIME(I)
1624  FORMAT(' GWD KDT,LAT,I,DTFAC,V1,DV1',3I4,2PF8.1,0P2F8.2,3E12.4)
C     ENDIF
1625  CONTINUE
      DO 1630 K=1,KDIM
      DO 1630 I=1,IDIMT
      TAUD(I,K)=TAUD(I,K)*DTFAC(I)
1630  CONTINUE
C
C-----FOR OPERATIONS DO THIS USING A BIT VECTOR TO SELECT IN THE ABOVE
C-----WHERE BLOCK AND THEN PRINT ONLY THOSE THAT ARE TRUE.
C
           DO 1660 K=1,KDIM
           DO 1660 I=1,IDIMT
C
            DTAUX(I,K) = XN(I) * TAUD(I,K)
            DTAUY(I,K) = YN(I) * TAUD(I,K)
C
 1660      CONTINUE
C
C    MONITOR FOR EXCESSIVE GRAVITY WAVE DRAG TENDENCIES
C
CP       IF(NCNT.GT.0) THEN
CP       IF(LAT.GE.38.AND.LAT.LE.42) THEN
CP CMIC$ GUARD 37
CP         DO 92 I=1,IDIMT
CP       IF(IKOUNT.GT.NCNT) GO TO 92
CP       IF(I.LT.319.OR.I.GT.320) GO TO 92
CP           DO 91 K=1,KDIM
CP             IF(ABS(RCS*TAUD(I,K)) .GT. CRITAC) THEN
CP             IF(I.LE.IDIM) THEN
CP               IKOUNT=IKOUNT+1
CP               PRINT 123,I,LAT,KDT
CP               PRINT 124,TAUB(I),BNV(I),ULOW(I),GF(I),FR(I),
CP      .                  ROLL(I),HPRIME(I),XN(I),YN(I)
CP               PRINT 124,(TAUD(I,KK),KK=1,KDIM)
CP               PRINT 124,(TAUP(I,KK),KK=1,KDIM+1)
CP               PRINT 124,(USQJ(I,KK),KK=1,KDIM)
CP               DO 93 KK=1,KDIM-1
CP               VELKO(KK)=0.5*RCS*((U1(I,KK)+U1(I,KK+1))*UBAR(I)+
CP      .                  (V1(I,KK)+V1(I,KK+1))*VBAR(I))/ULOW(I)
CP   93          CONTINUE
CP             PRINT 124,(VELKO(KK),KK=1,KDIM-1)
CP             PRINT 124,(A    (I,KK),KK=1,KDIM)
CP             PRINT 124,(DTAUY(I,KK),KK=1,KDIM)
CP             PRINT 124,(B    (I,KK),KK=1,KDIM)
CP             PRINT 124,(DTAUX(I,KK),KK=1,KDIM)
CP             GO TO 92
CP             ENDIF
CP             ENDIF
CP   91      CONTINUE
CP   92    CONTINUE
CP CMIC$ END GUARD 37
CP  123  FORMAT('  *** MIGWD PRINT *** I=',I3,' LAT=',I3,' KDT=',I3)
CP  124  FORMAT(2X,  10E13.6)
CP       ENDIF
CP       ENDIF
C
C-----DONE WITH CALCULATION - ADD IT TO OLD A AND OLD B
C-----A CORRESPONDS TO DTAUY TERM AND B TO DTAUX
C
      DO 2001 I=1,IDIMT
      DUSFC(I)=0.
      DVSFC(I)=0.
 2001 CONTINUE
      DO 2000 K=1,KDIM
      DO 2000 I=1,IDIMT
      A(I,K) =  -DTAUY(I,K) + A(I,K)
      B(I,K) =   DTAUX(I,K) + B(I,K)
      DUSFC(I)=DUSFC(I)+DTAUX(I,K)*DEL(K)
      DVSFC(I)=DVSFC(I)+DTAUY(I,K)*DEL(K)
 2000 CONTINUE
      DO 2002 I=1,IDIMT
      DUSFC(I)=-1.E3/G*RCS*PSTAR(I)*DUSFC(I)
      DVSFC(I)=-1.E3/G*RCS*PSTAR(I)*DVSFC(I)
 2002 CONTINUE
C
C-----DIAGNOSTIC FLAG .NE.0 ON, OTHERWISE OFF, NUM(715)=OUTPUT UNIT (=6)
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GWDRAG(IDIMT,IDIMT2,KDIM,
     .                  U1,V1,T1,PSTAR,VTJ,USQJ,KSM,KBJ,KBPS,
     .                  VELCO,BNVL2,ROLL,RO,TAUB,SI,DEL,SL,SIGK,RCL,
     .                  LAT,KDT,HPRIMX,AKWNMB,TENSIO)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GWDRAG      PERFORMS GRAVITY WAVE DRAG COMPUTATIONS.
C   PRGMMR: JORDAN C. ALPERT ORG: W/NMC23    DATE: 91-03-12
C
C ABSTRACT: PERFORMS GRAVITY WAVE DRAG COMPUTATIONS.
C
C PROGRAM HISTORY LOG:
C   87-06-03  JORDAN C. ALPERT  GWDRAG, GWDPS.
C   89-02-01  HANN-MING HENRY JUANG  CHANGE TO FORTRAN 77.
C   91-03-03  SELA-ROZWODOSKI  CRAY GUARD CODE AND CONSTANTS -
C                              GGWDRA, GGWDPS.
C
C USAGE:    CALL GWDRAG(U1,V1,T1,PSTAR,VTJ,USQJ,KSM,KBJ,KBPS,
C                       VELCO,BNVL2,ROLL,RO,TAUB,SI,DEL,SL,SIGK,RCL,
C                       LAT,KDT,HPRIMX,AKWNMB,TENSIO)
C   INPUT ARGUMENT LIST:
C     U1       - ZONAL      WIND COMPONENT *COS(LAT)  M/SEC AT T0-DT.
C     V1       - MERIDIONAL WIND COMPONENT *COS(LAT)  M/SEC AT T0-DT.
C     T1       - TEMPERATURE DEG K AT T0-DT.
C     PSTAR    - SURFACE PRESSURE (CB).
C     VTJ      - VIRTUAL TEMPERATURE.
C     USQJ     - RICHARDSON NUMBER.
C     KSM      - TOP    OF LOW LEVEL LAYER FOR GWDRAG SET TO 2.
C     KBJ      - BOTTOM OF LOW LEVEL LAYER FOR GWDRAG SET TO 1.
C     KBPS     - BOTTOM STARTING SIGMA LEVEL FOR P&S STRESS CALCULATION
C     SI(N)    - P/PSFC AT BASE OF LAYER N.
C     DEL(N)   - POSITIVE INCREMENT OF P/PSFC ACROSS LAYER N.
C     SL(N)    - P/PSFC AT MIDDLE OF LAYER N.
C     RCL      - RECIPROCAL OF SQUARE OF COS(LAT).
C     LAT      - LATITUDE  NUMBER.  USED ONLY AS DIAGNOSTIC.
C     KDT      - TIME STEP NUMBER.  USED ONLY AS DIAGNOSTIC.
C     HPRIMX   - TOPOGRAPHIC STANDARD DEVIATION  (M).
C
C   OUTPUT ARGUMENT LIST:
C     VELCO    - COMP OF WIND ALONG THE DIRECTION OF LOW LEVEL LAYER.
C     BNVL2    - BRUNT-VIASILA FREQ AS (N) AND ALSO (N**2).
C     ROLL     - LOW LEVEL RO.
C     RO       - DENSITY  MTS.
C     TAUB     - SURFACE STRESS.
C     SIGK     - SINGLE DIMENSION ARRAY OF LENGTH KDIM WHICH HOLDS
C              - THE CONSTANTS OF INVERSE SIGMA VALUES RAISED TO
C              - R/CP POWER FROM SUBROUTINE GGWDPS.
C     AKWNMB   - LENGTH SCALE.
C     TENSIO   - STRESS.
C
C REMARKS: LIST CAVEATS, OTHER HELPFUL HINTS OR INFORMATION
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN, CFT77.
C   MACHINE:  CRAY Y-MP.
C
C$$$
C-----GLAS MIGWD TO BE CALLED FROM MONNIN
C-----VERSION 5.0 (VERTICAL SMOOTHING IN LOW LEVEL)
C-----  THIS ROUTINE IS FROM J.C. JUSEM GLAS GRAVITY WAVE
C-----  PARAMETERIZATION.   IT RESIDES IN MONN3 EXTERNAL TO THE
C-----  VERTICAL DIFFUSION.  THE PRODCEDURE TO COMPUTE THE STRESS FROM
C-----  MOUNTAIN GRAVITY WAVES IS FROM PALMER, SHUTS AND SWINBANK:
C----- 'ALLEVIATION OF A SYSTEMATIC WESTERLY BIAS IN GENERAL
C-----  CIRCULATION AND NUMERICAL WEATHER PREDICTION MODELS THROUGH
C-----  AN OROGRAPHIC GRAVITY WAVE PARAMETERIZATION'.
C-----
C-----                <JORDAN C. ALPERT>                             *J*
C-----
C-----                      F R O M   M O N I N
C-----    U1,V1    THE WIND * COS(LAT)(M/S)
C-----    T1       THE TEMPERATURE (K)
C-----    HPRIME   TOPOGRAPHIC STANDARD DEVIATION  (M) AND VAR (M**2)(X)
C-----    PSTAR    SURFACE PRESSURE (CB)
C-----    VTJ      VIRTUAL TEMPERATURE
C-----    USQJ     RICHARDSON NUMBER
C-----    RCS      RECIPROCAL OF COSINE ( LATITUDE)
C-----    KBJ,KSM  BOTTOM & TOP OF LOW LEVEL LAYER FOR GWDRAG SET TO 1,2
C-----    KBPS     BOTTOM STARTING SIGMA LEVEL FOR P&S STRESS CALCULATIO
C-----    ULOW     THE SPEED IN THE LOW LEVEL LAYER
C-----
C-----                    F R O M    G W D R A G
C----- HCO,HSI   LOW LEVEL LAYER WIND ANGLE
C----- RO        DENSITY  MTS
C----- TENSIO    STRESS
C----- BNV2      BRUNT-VIASILA FREQ AS (N) AND ALSO (N**2)
C----- VELCO     COMP OF WIND ALONG THE DIRECTION OF LOW LEVEL LAYER
C----- ICRILV    BIT VECTOR CONTROL FOR STABLE, UNSTABE, OR CRIT LEVEL
C----- FRO2      LOCAL FROUDE   **2
C----- CRIF2     CRITICAL FROUDE   **2
C-----
C
CRAY       SAVE
C
C  G L A S   M I G W D  (GWDRAG)
C
                        D I M E N S I O N
     1  RO(IDIMT,KDIM),HPRIME(IDIMT)
     2, HPRIMX(IDIMT)
     3, TENSIO(IDIMT,KDIM)
     4, HCO(IDIMT),HSI(IDIMT),VELCO(IDIMT,KDIM-1)
     4, CRIF2(IDIMT),FRO2(IDIMT)
C
C  ABOVE IS STORAGE FOR GWDRAG AND BELOW IS STORAGE PASSED FROM MONN
C
       DIMENSION VTJ(IDIMT,KDIM),U1(IDIMT2,KDIM),V1(IDIMT2,KDIM)
       DIMENSION T1(IDIMT2,KDIM),USQJ(IDIMT,KDIM),BNVL2(IDIMT),
     7           SI(KDIM+1),DEL(KDIM),CL(KDIM),SL(KDIM),SIGK(KDIM),
     8           BNV2(IDIMT),ULOW(IDIMT),ROLL(IDIMT),TAUB(IDIMT)
      DIMENSION PSTAR(IDIMT),ZMEAN(KDIM,2)
C
      LOGICAL ICRILV(IDIMT)
      REAL AKAPPA
C
C-----ONLY DO CONSTANTS FIRST TIME THROUGH MONNIN
C
C
C-----GSFC TO NMC BRIDGE CONSTANTS
C
      NTOPM1=KDIM-1
C
        GRAV =  9.8000E+0
        GRAV2 = GRAV * GRAV
        AGRAV = 1./GRAV
        RGAS =  2.8705E+2
        GR2 = 2. * GRAV2 / RGAS
        AKAPPA = 2. / 7.
        FROCUT=0.85 * 0.85
C
        RCS=SQRT(RCL)
C
C-----THE VARIANCE OF TOPOGRAPHY (COMES IN AS STD DEV) ON A LAT PAIR
C
      DO 100 I= 1, IDIMT
      HPRIME(I) = HPRIMX(I) * HPRIMX(I)
 100  CONTINUE
C
C-----CONSTRAIN VARIANCE TO BE NOT GREATER THAN 160000 M**2
C     ONLY IF P&S LOW LEVEL STRESS IS USED - COMMENT FOR GFCL LOW LEV
C
      DO 200 I=1, IDIMT
      VALUE = 1.6 E 5
      HPRIME(I) = MIN( HPRIME(I), VALUE )
 200  CONTINUE
C
C-----INITIALIZE CRITICAL LEVEL CONTROL VECTOR BITS ALL TO ZERO
C
       DO 300 I=1, IDIMT
          ICRILV(I) = .FALSE.
 300   CONTINUE
C
C----BNVL2, THE LOW LEVEL BRUNT-VIASLA FREQUENCY IS NOT A FCT OF K
C----SQRT (N**2) NB: I USE BNVL2 FOR N**2 AND NOW N ITSELF
C
        DO 400 I=1,IDIMT
        VALUE = 0.0
        BNVL2(I) = MAX( BNVL2(I) , VALUE )
        BNVL2(I) = SQRT ( BNVL2(I) )
 400    CONTINUE
C
C-----SET INITIAL VALUES FOR STRESS
C
        DO 500 K=1,KDIM
        DO 500 I=1,IDIMT
          TENSIO(I,K) = 0.0
 500    CONTINUE
C
C------ LEVEL LOOP
C
C-----SET UP BOTTOM VALUES OF STRESS IF WE ARE NOT STARTING FROM
C-----FROM LEVEL 1 - NB (-) HERE BY CONVENTION
C
       DO 600 KLOW = 1, KBPS
       DO 600 I=1,IDIMT
          TENSIO(I,KLOW) = -1. * TAUB(I)
 600   CONTINUE
C
          DO 1100 K = KBPS, NTOPM1
C
          DO 1110 I=1, IDIMT
          FRO2(I) = 0.0
CRAY 1110     CONTINUE
C
C-----CALCULATE SQUARED BRUNT VAISALA FREQUENCY AT LEVEL K
C---- SIGKM IS RECIP( SIGMA** KAPPA) AT TOP OF LAYER
C---- SIGKIN IS RECIP( SIGMA** KAPPA) AT BOTTOM OF LAYER
C
          SIGKM = SIGK(K+1)
          SIGKIN = SIGK(K)
C
C--- N**2 AS FUNCTION OF K - BRANCH ON LOW LEVEL <KSM - TV IS USED (VTJ)
C OR JUST ALLOW THIS TYPE OF OPERATION ON USQJ  (RI)
C
CRAY         DO 1120 I=1,IDIMT
            BNV2(I) = GR2 * (SL(K+1) + SL(K))
     .    * (VTJ(I,K+1) * SIGKM - VTJ(I,K) * SIGKIN)
     .    /  (  (VTJ(I,K+1) * SIGKM
     .                 + VTJ(I,K) * SIGKIN)
     .       * (SL(K) - SL(K+1))
     .                 * (T1(I,K+1) + T1(I,K)) )
C
C-----UNSTABLE LAYER IF RI < 0 - - USING RI IN PLACE OF N**2
C
        ICRILV(I) = ICRILV(I) .OR. ( USQJ(I,K)
     1                    .LE. 0.0 )
C
       ICRILV(I) = ICRILV(I) .OR. ( USQJ(I,K)
     1                                  .LT. 0.25 )
CRAY 1120   CONTINUE
C
C-----COMPUTE CRITICAL FROUDE    ---> MEANS STABLE (ICRILV=0)
C
CRAY         DO 1150 I=1, IDIMT
          IF    ( .NOT. ICRILV(I) )  THEN
                CRIF2(I) = 1 - .25 / USQJ(I,K)
                CRIF2(I) = CRIF2(I) * CRIF2(I)
          ELSE
          CRIF2(I)=0.0
          ENDIF
CRAY 1150    CONTINUE
C
C-----UNSTABLE LAYER IF UPPER AIR VEL COMP ALONG SURF VEL <=0 (CRIT LAY)
C---- AT (U-C)=0. CRIT LAYER EXISTS AND BIT VECTOR SHOULD BE SET (.LE.)
C
CRAY        DO 1160 I=1,IDIMT
       ICRILV(I) = ICRILV(I) .OR. VELCO(I,K)
     1                                  .LE. 0.0
CRAY 1160  CONTINUE
C
C-----SQRT (N**2)  NB: I USE BNV2 FOR N**2 AND NOW N  ITSELF
C
CRAY        DO 1170 I=1, IDIMT
         VALUE = 0.
         BNV2(I) = MAX( BNV2(I) , VALUE )
         BNV2(I) = SQRT ( BNV2(I) )
CRAY 1170   CONTINUE
 1110   CONTINUE
C
C-----COMPUTING STRESS AT SURFACE  AND 1 LEVEL UP & LIMIT MAX VALUE
C
C----USING TAUB AT KBJ LEVEL
C
       IF(K .EQ. KBJ)  THEN
C
        DO 1180 I=1, IDIMT
         CRIF2(I) = MIN( CRIF2(I) , FROCUT )
CRAY 1180   CONTINUE
CRAY        DO 1190 I=1, IDIMT
               IF    ( .NOT. ICRILV(I) )  THEN
C
C-----GFDL LOW LEVEL SURFACE STRESS IS NEGITIVE WITH RESPECT TO GLAS
C-----BECASUE GLAS SUBTRACTS TENDENCY WHILE MONIN ADDS  WE CHANGE TAUB
C-----TO -TAUB (NB BUT CHANGE BACK FOR MONIN TENDENCY
C
                 TENSIO(I,K) = -1. * TAUB(I)
C
C---FR**2 AT SURFACE ONLY
C
               FRO2(I) = BNVL2(I) * BNVL2(I) *
     1        HPRIME(I) / (VELCO(I,K) * VELCO(I,K))
C
               ENDIF
CRAY 1190   CONTINUE
 1180   CONTINUE
C
       ELSE
C
C-----IN GLAS VERSION THERE IS A CALCULATION AT THE BOUNDARY LAYER
C-----WHICH IS NOT A "PART" OF THE MODEL STD LEVELS AND A CALC AT THE
C-----FIRST MODEL LAYER.  THE VALUE FOR TENSIO AT THE BNDY LAYER IS SET
C-----TO THE VALUE AT THE FIRST MODEL LAYER.  IN NMC THE BNDY LAYER CAN
C-----BE IGNORED ALL TOGETHER BECAUSE THE STRESS (TENSIO) IS ON SI'S,
C-----INTERFACES WHILE THE DEACCERATION IS ON LAYERS SL'S.
C
C-----COMPUTE THE LOCAL FROUDE   FOR THE STABLE CASE - MAKE SURE
C-----THAT BY CHANCE THE PROJECTION OF THE LOCAL WIND (U1,V1)
C-----SHOULD NOT BE SMALLER THEN 1.M/S, SINCE IT IS CUBED IN THE
C-----DENOMINATOR
C-----
C
          DO 1195 I=1,IDIMT
            IF   ( .NOT.  ICRILV(I) ) THEN
                 FRO2(I) = BNV2(I) / ( (AKWNMB * 0.5) *
     1          ( RO(I,K) + RO(I,K+1) ) *
     2      VELCO(I,K) * VELCO(I,K) * VELCO(I,K) ) *
     3          TENSIO(I,K)
            ENDIF
 1195     CONTINUE
C
       ENDIF
C
C-----COMPUTE STRESS AT LEVEL IN QUESTION FOR STABLE CASE
C
         DO 1210 I=1,IDIMT
            IF( .NOT.ICRILV(I) .AND. FRO2(I) .GT. CRIF2(I) ) THEN
C
C------FRO2 CHANGED TO > FROM .GE.
C
                  TENSIO(I,K+1) = TENSIO(I,K) * CRIF2(I) / FRO2(I)
            ENDIF
C
C----- CONSTANT STRESS IF CRIT FROUDE   NOT MET (.LE. 6/1)
C
            IF( .NOT. ICRILV(I) .AND. FRO2(I) .LE. CRIF2(I) )  THEN
                  TENSIO(I,K+1) = TENSIO(I,K)
             ENDIF
 1210    CONTINUE
C
C-----ALL DONE - PASS BACK STRESS PROFILE AND VERTICALLY DIFF
C
 1100 CONTINUE
C
      RETURN
      END
      SUBROUTINE LONLAT(XLON,LON,XLAT,COLRAD,LAT2)
      PARAMETER (TPI=2. E 0* 3.141593E+0 ,HPI=0.5 E 0* 3.141593E+0 )
      DIMENSION XLON(LON),XLAT(2*LAT2+2),COLRAD(LAT2)
C....    GET LON,LAT IN RADIANS
C....  GET LONGITUDINAL INCREMENT
      BPHI = TPI / LON
      DO 3 I=1,LON
        XLON(I) = (I-1) * BPHI
  3   CONTINUE
C...
      LATP2 = 2 * LAT2 + 2
      XLAT(1)=HPI
      DO 5 I=1,LAT2
        XLAT(I+1) = HPI - COLRAD(I)
        XLAT(LATP2-I) = -XLAT(I+1)
  5   CONTINUE
      XLAT(LATP2)=-HPI
      RETURN
      END
      SUBROUTINE BILWGT(COLIN,LATIN2,LONIN2,COLOUT,LATUT2,LONUT2,
     1                  INSLAT,WGTLAT,ILEFT,IRGHT,WGTLON)
      PARAMETER (HALFPI=0.5 E 0* 3.141593E+0 )
      DIMENSION COLIN(LATIN2)
      DIMENSION COLOUT(LATUT2),INSLAT(LATUT2),WGTLAT(LATUT2)
      DIMENSION ILEFT(LONUT2),IRGHT(LONUT2),WGTLON(LONUT2)
C===>    PREPARE THREE SFC FIELDS AS INPUT TO RADIATION CALCULATIONS
C         ALSO PREPARE 3 CONVECTIVE ARRAYS FOR INPUT TO CLD SCHEME..
      JB = 1
      DO 19 LAT=1,LATUT2
CCC     PRINT 100,LAT,XLAT
C===>    IF OUTPUT LAT IS POLEWARD OF INPUT LAT=1 ,THEN EXTRAPOLATE..
        IF (COLOUT(LAT).LT.COLIN(1)) GO TO 16
C----    GET UPPER LEFT POINT ON BASE GRDBOX SURROUNDING THE GAUSIAN
C          POINT   --   NEEDED FOR THE INTERPOLATION
        JST = JB + 1
        DO 11 JAK=JST,LATIN2
          JB = JAK - 1
          IF(COLOUT(LAT).LT.COLIN(JAK)) GO TO 14
  11    CONTINUE
        INSLAT(LAT) = LATIN2
        WGTLAT(LAT) = 0.5 E 0 * (COLIN(LATIN2) - COLOUT(LAT)) /
     1                (COLIN(LATIN2) - HALFPI)
        GO TO 19
  14    INSLAT(LAT) = JB
C----   NORMALIZED DISTANCE FROM POLEWARD LAT TO GAUSSIAN LAT
        WGTLAT(LAT) = (COLIN(JB) - COLOUT(LAT)) /
     1                (COLIN(JB) - COLIN(JB+1))
        GO TO 19
  16    INSLAT(LAT) = -1
        WGTLAT(LAT) = (COLOUT(LAT) - COLIN(1)) /
     1                (COLIN(1) - COLIN(2))
  19  CONTINUE
C----    GET LEFT POINT ON BASE GRDBOX
      LONIN = LONIN2 / 2
      LONOUT = LONUT2 / 2
      RATLON = FLOAT(LONIN) / FLOAT(LONOUT)
C     RATLON = (360. E 0 / LONOUT) / (360. E 0 / LONIN)
      DO 21 I=1,LONOUT
        WGTLON(I) = FLOAT(I-1) * RATLON + 1. E 0
        ILEFT(I)  = WGTLON(I)
        IRGHT(I) = ILEFT(I) + 1
        IF (IRGHT(I).GT.LONIN) IRGHT(I) = 1
        WGTLON(I) = WGTLON(I) - ILEFT(I)
        ILEFT(I+LONOUT) = ILEFT(I) + LONIN
        IRGHT(I+LONOUT) = IRGHT(I) + LONIN
        WGTLON(I+LONOUT) = WGTLON(I)
  21  CONTINUE
      RETURN
      END
      SUBROUTINE INSURF(NFLIP,SHOUR,INISTP,CV,CVB,CVT,SLMSK,
     1 ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,ALBEDR,SLMSKR)
      DIMENSION CV( 384 , 47 ),CVB( 384 , 47 ),CVT( 384 , 47 )
      DIMENSION SLMSK( 384 , 47 )
      DIMENSION ILEFTR( 256 ),IRGHTR( 256 ),WGRLON( 256 )
      DIMENSION INRLAT( 31 ),WGRLAT( 31 )
      DIMENSION ALBEDR( 256 , 31 ),SLMSKR( 256 , 31 )
      DIMENSION      FSLMSK( 384 , 47 ),FICMSK( 384 , 47 ),
     1               WORK1( 384 , 47 ),WORK2( 384 ),
     2               RSLMSK( 256 , 31 ),RICMSK( 256 , 31 )
      REWIND NFLIP
      READ(NFLIP)
      READ(NFLIP)
      READ(NFLIP)
C  SKIP SOILM
      READ(NFLIP)
      READ(NFLIP)
C  SKIP TG1, TG2, TG3, Z0
C     READ(NFLIP)
      READ(NFLIP)
      READ(NFLIP)
      READ(NFLIP)
      IF(SHOUR.EQ.0. E  0 .OR. INISTP.EQ.2) THEN
        READ(NFLIP) CV
        READ(NFLIP) CVB
        READ(NFLIP) CVT
        CALL ROW1NS(CV)
        CALL ROW1NS(CVB)
        CALL ROW1NS(CVT)
      ELSE
        READ(NFLIP)
        READ(NFLIP)
        READ(NFLIP)
      ENDIF
C....
C....  READ AND INTEROLATE ALBEDO TO RADIATION GRID
C....
      READ(NFLIP) WORK1
      CALL ROW1NS(WORK1)
      CALL GGINTF(WORK1, 384 , 47 , 47 ,
     1            ALBEDR, 256 , 31 , 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORK2,1,1,1)
C....
C....  CREATE LAND(1)SEA(0) MASK ON MODEL GRID IN FSLMSK
C....  CREATE ICE(1)NO-ICE(0) MASK ON MODEL GRID IN FICMSK
C....
      DO 110 J=1, 47
        DO 110 I=1, 384
          FSLMSK(I,J) = 1. E 0
          FICMSK(I,J) = 0. E 0
  110 CONTINUE
      DO 120 J=1, 47
        DO 120 I=1, 384
          IF(SLMSK(I,J).EQ.0.0 E 0.OR.SLMSK(I,J).EQ.2.0 E 0)
     1    FSLMSK(I,J) = 0.0 E 0
          IF(SLMSK(I,J).EQ.2.0 E 0) FICMSK(I,J) = 1.0 E 0
  120 CONTINUE
      CALL GGINTF(FSLMSK, 384 , 47 , 47 ,
     1            RSLMSK, 256 , 31 , 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORK2,1,1,1)
      CALL GGINTF(FICMSK, 384 , 47 , 47 ,
     1            RICMSK, 256 , 31 , 31 ,1,
     2            ILEFTR,IRGHTR,WGRLON,INRLAT,WGRLAT,WORK2,1,1,1)
C.....    ADJUST INTERPOLATED TSEAR FOR PROPER LAND/SEA/SEAICE
C             DISTRIBUTION,WHICH HAS BEEN INTERPOLATED ABOVE.....
C.....    ALSO CREATE SEA(0),LAND(1),ICE(2) MASK FOR RAD GRID(SLMSKR)
C....
C....  CREATE ICE(2) LAND(1)SEA(0) MASK ON RADIATION GRID IN SLMSKR
C....
      DO 130 J=1, 31
        DO 130 I=1, 256
          SLMSKR(I,J) = 1
          IF (RSLMSK(I,J).LT.0.5 E 0) SLMSKR(I,J) = 0
          IF (RSLMSK(I,J).LT.0.5 E 0.AND.RICMSK(I,J).GT.0.5 E 0)
     1      SLMSKR(I,J) = 2
  130 CONTINUE
      RETURN
      END
      SUBROUTINE GGINTF(XIN,IIN,JTWIDL,JIN,XOUT,IOUT,JPOUT,JOUT,LEVS,
     1                  ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK,
     2                  LTWIDL,LATRD1,LATINB)
C----    CODE BILINEARLY INTERPOLATES BETWEEN GAUSSIAN GRIDS---
C          J = 1 IS JUST BELO N.POLE, I = 1 IS GREENWICH (THEN GO EAST).
C===>   IIN,JIN ARE I,J DIMENSIONS OF INPUT GRID
C===>   IOUT,JOUT ARE I,J DIMENSIONS OF OUTPUT GRID
C===>   JIN2,JOUT2=JIN/2,JOUT/2
      DIMENSION XIN(IIN,LEVS,JTWIDL)
      DIMENSION XOUT(IOUT,LEVS,JPOUT)
      DIMENSION WORK(IIN,LEVS)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION INSLAT(JOUT),WGTLAT(JOUT)
      DO 95 LATOUT=1,JPOUT
        LAT=LATOUT+LATINB-1
CCC     PRINT 100,LAT,XLAT
C.....   IF OUTPUT LAT IS POLEWARD OF INPUT LAT=1 ,THEN EXTRAPOLATE..
      IF (INSLAT(LAT).LT.0) GO TO 70
      INTH = MOD(LTWIDL + INSLAT(LAT) - LATRD1 - 1,JTWIDL) + 1
      IF (INSLAT(LAT).EQ.JIN) GO TO 20
      INTH1 = MOD(INTH,JTWIDL) + 1
      DO 10 K=1,LEVS
       DO 10 I=1,IIN
        WORK(I,K) = XIN(I,K,INTH1)*WGTLAT(LAT) +
     1                     XIN(I,K,INTH) * (1. E  0 - WGTLAT(LAT))
   10 CONTINUE
      GO TO 40
   20 IINHF = IIN / 2
      DO 30  K=1,LEVS
      DO 30  I=1,IINHF
        WORK(I,K) = XIN(I+IINHF,K,INTH) * WGTLAT(LAT)+
     1              XIN(I,K,INTH) * (1. E  0 - WGTLAT(LAT))
        WORK(I+IINHF,K) = XIN(I,K,INTH) * WGTLAT(LAT) +
     1                    XIN(I+IINHF,K,INTH) * (1. E  0 - WGTLAT(LAT))
   30 CONTINUE
   40 continue
      DO 50  K=1,LEVS
      DO 50  I=1,IOUT
        XOUT(I,K,LATOUT) = (1. E  0 - WGTLON(I)) * WORK(ILEFT(I),K) +
     1                     WGTLON(I) * WORK(IRGHT(I),K)
   50 CONTINUE
      GO TO 95
   70 CONTINUE
C....    POLEWARD EXTRAPOLATION
      INLAT = IABS(INSLAT(LAT))
      DO 80 K=1,LEVS
       DO 80 I=1,IIN
        WORK(I,K) = XIN(I,K,INLAT)+WGTLAT(LAT) *
     1                    (XIN(I,K,INLAT) - XIN(I,K,INLAT+1))
   80 CONTINUE
      DO 90  K=1,LEVS
      DO 90  I=1,IOUT
        XOUT(I,K,LATOUT) = (1. E  0 - WGTLON(I)) * WORK(ILEFT(I),K) +
     1                     WGTLON(I) * WORK(IRGHT(I),K)
   90 CONTINUE
   95 CONTINUE
CK100 FORMAT(1H ,' ROW =',I5,'  LAT =',E15.5)
      RETURN
      END
      SUBROUTINE CDATE(JD,FJD,MUNTH,IM,ID,IYEAR,IHR,XMIN)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    CDATE       COMPUTES DAY,MONTH,YR FROM JULIAN DAY
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS CODE WRITTEN AT GFDL ....
C   COMPUTES MONTH,DAY,YEAR FROM JULIAN DAY.
C   ACCURATE ONLY BETWEEN MARCH 1, 1900 AND FEBRUARY 28, 2100....
C   BASED ON JULIAN CALENDER CORRECTED TO CORRESPOND TO GREGORIAN
C   CALENDER DURING THIS PERIOD.
C
C PROGRAM HISTORY LOG:
C   77-06-07  ROBERT WHITE,GFDL
C
C USAGE:    CALL CDATE(JD,FJD,MUNTH,IM,ID,IYEAR,IHR,XMIN)
C   INPUT ARGUMENT LIST:
C     JD       - JULIAN DAY FOR CURRENT FCST HOUR.
C     FJD      - FRACTION OF THE JULIAN DAY.
C   OUTPUT ARGUMENT LIST:
C     MUNTH    - MONTH (CHARACTER).
C     IM       - MONTH (INTEGER).
C     ID       - DAY OF THE MONTH.
C     IYEAR    - YEAR.
C     IHR      - HOUR OF THE DAY.
C     XMIN     - MINUTE OF THE HOUR.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C
C    *******************************************************************
C    *                                                                 *
C    *                            C D A T E                            *
C    *                                                                 *
C    *******************************************************************
C
C         STATEMENTS BLOCKED BY ROBERT K. WHITE.......7 JUNE 1977
C
C..... CDATE COMPUTES MONTH, DAY, AND YEAR FROM JULIAN DAY.
C.....ACCURATE ONLY BETWEEN MARCH 1, 1900 AND FEBRUARY 28, 2100
C.....BASED ON JULIAN CALENDER CORRECTED TO CORRESPOND TO GREGORIAN
C.....CALENDER DURING THIS PERIOD
C
                              D I M E N S I O N
     1   DY(13),             MONTH(12)
C
C
                                   D A T A
     1   DY                  /
     2   0.,                 31.,                59.,
     3   90.,                120.,               151.,
     4   181.,               212.,               243.,
     5   273.,               304.,               334.,
     6   365.                /
C
                                   D A T A
     1   MONTH               /
     2   4HJAN.,             4HFEB.,             4HMAR.,
     3   4HAPR.,             4HMAY ,             4HJUNE,
     4   4HJULY,             4HAUG.,             4HSEP.,
     5   4HOCT.,             4HNOV.,             4HDEC.
     6   /
C
C.....JDOR = JD OF DECEMBER 30, 1899 AT 12 HOURS UT
C
                                   D A T A
     1   JDOR                /         2415019             /,
     2   IYR                 /         1900                /
C
C    *******************************************************************
C
      IYEAR=IYR
      NDAY=JD-JDOR
      IF(FJD.GE..5 E 0) NDAY=NDAY+1
 61   IF(NDAY.LT.1462) GO TO 62
      NDAY=NDAY-1461
      IYEAR=IYEAR+4
      GO TO 61
 62   NDIY=365
      IF(MOD(IYEAR,4).EQ.0) NDIY=366
      IF(NDAY.LE.NDIY) GO TO 65
      IYEAR=IYEAR+1
      NDAY=NDAY-NDIY
      GO TO 62
 65   IF(NDAY.GT.INT(DY(2))) GO TO 66
      IM=1
      ID=NDAY
      GO TO 67
 66   IF(NDAY.NE.60) GO TO 68
      IF(NDIY.EQ.365) GO TO 68
      IM=2
      ID=29
      GO TO 67
 68   IF(NDAY.GT.(INT(DY(3))+NDIY-365)) GO TO 69
      IM=2
      ID=NDAY-31
      GO TO 67
 69   continue
      DO 70 I=3,12
      IF(NDAY.GT.(INT(DY(I+1))+NDIY-365)) GO TO 70
      IM=I
      ID=NDAY-INT(DY(I))-NDIY+365
      GO TO 67
 70   CONTINUE
 67   MUNTH=MONTH(IM)
      HR=24. E 0*FJD
      IHR=HR
      XMIN=60. E 0*(HR-FLOAT(IHR))
      IHR=IHR+12
      IF(IHR.GE.24) IHR=IHR-24
      RETURN
      END
      SUBROUTINE COMPJD(JYR,JMNTH,JDAY,JHR,JMN,JD,FJD)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    COMPJD      COMPUTES JULIAN DAY AND FRACTION
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS CODE WRITTEN AT GFDL ....
C   COMPUTES JULIAN DAY AND FRACTION
C   FROM YEAR, MONTH, DAY AND TIME UT...ACCURATE ONLY BETWEEN
C   MARCH 1, 1900 AND FEBRUARY 28, 2100.. BASED ON JULIAN CALENDAR
C   CORRECTED TO CORRESPOND TO GREGORIAN CALENDAR DURING THIS PERIOD.
C
C PROGRAM HISTORY LOG:
C   77-05-06  RAY ORZOL,GFDL
C
C USAGE:    CALL COMPJD(JYR,JMNTH,JDAY,JHR,JMN,JD,FJD)
C   INPUT ARGUMENT LIST:
C     JYR      - YEAR (4 DIGITS)-INTIAL FCST TIME.
C     JMNTH    - MONTH-INITIAL FCST TIME.
C     JDAY     - DAY-INITIAL FCST TIME.
C     JHR      - Z-TIME OF INITIAL FCST TIME.
C     JMN      - MINUTES (ZERO PASSED FROM CALLING PROGRAM).
C   OUTPUT ARGUMENT LIST:
C     JD       - JULIAN DAY.
C     FJD      - FRACTION OF THE JULIAN DAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C    *******************************************************************
C    *                           C O M P J D                           *
C    *    STATEMENT BLOCKED BY RAY ORZOL                               *
C    *******************************************************************
C
                               D I M E N S I O N
     1   NDM(12)
C
                                   D A T A
     1   JDOR/2415019/,
     2   JYR19/1900/
C
                                   D A T A
     1   NDM/0,31,59,90,120,151,181,212,243,273,304,334/
C    *******************************************************************
C     COMPUTES JULIAN DAY AND FRACTION FROM YEAR, MONTH, DAY AND TIME UT
C     ACCURATE ONLY BETWEEN MARCH 1, 1900 AND FEBRUARY 28, 2100
C     BASED ON JULIAN CALENDAR CORRECTED TO CORRESPOND TO GREGORIAN
C        CALENDAR DURING THIS PERIOD
C    JDOR=JD OF DECEMBER 30, 1899 AT 12 HOURS UT
C    *******************************************************************
      JD=JDOR
      JYRM9=JYR-JYR19
      LP=JYRM9/4
      IF(LP.LE.0) GO TO 4
      JD=JD+1461*LP
  4   NY=JYRM9-4*LP
      IC=0
      IF(NY.GT.0) GO TO 5
      IF(JMNTH.GT.2) IC=1
      GO TO 6
  5   JD=JD+365*NY+1
  6   JD=JD+NDM(JMNTH)+JDAY+IC
      IF(JHR.GE.12) GO TO 7
      JD=JD-1
      FJD=.5 E 0+.041666667 E 0*FLOAT(JHR)+.00069444444 E 0*FLOAT(JMN)
      RETURN
  7   FJD=.041666667 E 0*FLOAT(JHR-12)+.00069444444 E 0*FLOAT(JMN)
      RETURN
      END
      SUBROUTINE FCSTIM(FHOUR,IMON,IDAY,IZTIM,JDNMC,FJDNMC,RLAG,YEAR,
     1                  RSIN1,RCOS1,RCOS2,JD,FJD)
      PARAMETER (TPI=2. E 0* 3.141593E+0 )
      DIMENSION JMON(12)
      DATA JMON/31,28,31,30,31,30,31,31,30,31,30,31/
      DATA TWO/2. E 0/
      SAVE JMON,TWO
C....    FIRST GET NUMBER OF DAYS SINCE BEGINNING OF YEAR (NO LEAP YRS)
      NNDAY =0
      IMO = IMON - 1
      IF (IMO.GT.0) THEN
        DO 150 I=1,IMO
          NNDAY = NNDAY + JMON(I)
  150   CONTINUE
      ENDIF
      NNDAY = NNDAY + IDAY
      PRINT 1002,NNDAY
 1002 FORMAT(1H ,'*************** NNDAY OF YEAR = ',I4,'******')
C....    GET NUMBER OF DAYS INTO FCST (DYFCST)
C....   FOLLOWING TWO CARDS CHANGED ON 10 APR 86 TO FIX SLIGHT ERROR
C         IN SOLAR DECLINATION CALC IF INITIAL HR NOT 00Z OR 12Z.....
      DAYINI = NNDAY + FLOAT(IZTIM)/24. E 0
      SOLTIM = FHOUR + IZTIM
C...     RESET TO 24 HOUR CLOCK
      FDAY = SOLTIM / 24. E 0
C>YH  SOLTIM = SOLTIM - INT(FDAY) * 24. E 0
      DYFCST = NNDAY + FDAY
      PRINT 1003,JDNMC,FJDNMC,FHOUR,DAYINI,DYFCST
 1003 FORMAT(1H0,'FROM HEATL3 JDNMC ETC',I9,2X,4(2X,F6.2))
      RANG=TPI*(DYFCST-RLAG)/YEAR
      RSIN1=SIN(RANG)
      RCOS1=COS(RANG)
      RCOS2=COS(TWO*RANG)
C....    UPDATE THE JULIAN DATE (INITIAL IN JDNMC,FJDNMC)
      DYINC = DYFCST - DAYINI
      IDYIN = DYINC
      FDYIN = DYINC - IDYIN
      JD = JDNMC + IDYIN
      FJD = FJDNMC + FDYIN
C.......NEED TO RESET IF FRACTION (FJD) GT 1.
      IFJD = FJD
      IF (IFJD.GT.0) THEN
        JD = JD + IFJD
        FJD = FJD - IFJD
      ENDIF
      RETURN
      END
      SUBROUTINE SOLMRF(JD,FJD,R,DLT,ALP,SLAG,N,ALAT,HANG,TAUDA,COSZ)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SOLMRF      ASTRONOMICAL(SOLAR) DATA - SW RADIATION
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS IS A GFDL CODE ....
C   COMPUTES RADIUS VECTOR,DECLINATION AND RIGHT ASCENSION OF SUN,
C   EQUATION OF TIME, AND HOUR ANGLE OF SUN AT SUNSET FOR N EQUALLY
C   SPACED LATITUDES FOR GIVEN JULIAN DAY AND FRACTION..ALSO COMPUTES
C   DAYLIGHT LATITUDE MEAN COSINE SOLAR ZENITH ANGLE AND LATITUDINAL
C   AVERAGED FRACTIONAL DAYLIGHT.
C
C PROGRAM HISTORY LOG:
C   77-07-21  ROBERT WHITE,GFDL.
C   89-07-07  KENNETH CAMPANA-UPDATED-TO PASS ALAT THRU SUBROUTINE
C                             CALL RATHER THAN LABELED COMMON.
C
C USAGE:    CALL SOLMRF(JD,FJD,R,DLT,ALP,SLAG,N,ALAT,HANG,TAUDA,COSZ)
C   INPUT ARGUMENT LIST:
C     JD       - JULIAN DAY FOR CURRENT FCST HOUR.
C     FJD      - FRACTION OF THE JULIAN DAY.
C     N        - NUMBER OF GAUSSIAN LATIUTUDES + 2 (FOR THE POLES).
C     ALAT     - GAUSSIAN LATITUDES + 2 (POLES) IN RADIANS.
C   OUTPUT ARGUMENT LIST:
C     R        - RADIUS VECTOR OF THE SUN.
C     DLT      - DECLINATION OF THE SUN (RADIANS).
C     ALP      - RIGHT ASCENSION OF THE SUN.
C     SLAG     - EQUATION OF TIME (RADIANS).
C     HANG     - HOUR ANGLE OF SUN AT SUNSET (FOR N LATS).
C     TAUDA    - LATITUDINAL AVER. FRACTIONAL DAYLIGHT (FOR N LATS).
C     COSZ     - LATITUDINAL DAYLIGHT-MEAN COSINE SOLAR ZENITH ANGLE.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      PARAMETER (PI= 3.141593E+0 ,TPI=2.0*PI,HPI=0.5*PI,RAD=180.0/PI)
C
C
C    *******************************************************************
C    *                            S O L M R F                          *
C... *  ORIGINAL GFDL CODE (EXCEPT FOR PASSING ALAT IN CALL LIST)--    *
C    *    I.E. COMPUTES GAUSSIAN LATITUDE MEAN COSINE SOLAR ZEN ANGLE  *
C    *  UPDATES BY HUALU PAN TO LIMIT ITERATIONS IN NEWTON METHOD AND  *
C    *  ALSO CCR REDUCED FROM(1.3E-7)--BOTH TO AVOID NONCONVERGENCE IN *
C    *  NMC S HALF PRECISION VERSION OF GFDL S CODE   ----  FALL 1988  *
C    *******************************************************************
C
C         STATEMENTS BLOCKED BY ROBERT K. WHITE.......21 JULY 1977
C
C
C.....SOLMRF COMPUTES RADIUS VECTOR, DECLINATION AND RIGHT ASCENSION OF
C.....SUN, EQUATION OF TIME, AND HOUR ANGLE OF SUN AT SUNSET FOR N
C.....EQUALLY SPACED LATITUDES GIVEN JULIAN DAY AND FRACTION.
C
                              D I M E N S I O N
     1   ALAT(N),  HANG(N),    COSZ(N),    TAUDA(N)
C
                                   D A T A
     1   CYEAR/365.25/,      CCR/1.3 E -6/
C
C.....TPP = DAYS BETWEEN EPOCH AND PERIHELION PASSAGE OF 1900
C.....SVT6 = DAYS BETWEEN PERIHELION PASSAGE AND MARCH EQUINOX OF 1900
C.....JDOR = JD OF EPOCH WHICH IS JANUARY 0, 1900 AT 12 HOURS UT
C
                                   D A T A
     1   TPP/1.55/,          SVT6/78.035/,       JDOR/2415020/
C
C    *******************************************************************
C
      DAT=FLOAT(JD-JDOR)-TPP+FJD
C    COMPUTES TIME IN JULIAN CENTURIES AFTER EPOCH
      T=FLOAT(JD-JDOR)/36525. E 0
C    COMPUTES LENGTH OF ANOMALISTIC AND TROPICAL YEARS (MINUS 365 DAYS)
      YEAR=.25964134 E 0+.304 E -5*T
      TYEAR=.24219879 E 0-.614 E -5*T
C    COMPUTES ORBIT ECCENTRICITY AND ANGLE OF EARTH'S INCLINATION FROM T
      EC=.01675104 E 0-(.418 E -4+.126 E -6*T)*T
      ANGIN=23.452294 E 0-(.0130125 E 0+.164 E -5*T)*T
      ADOR=JDOR
      JDOE=ADOR+(SVT6*CYEAR)/(YEAR-TYEAR)
C    DELEQN=UPDATED SVT6 FOR CURRENT DATE
      DELEQN=FLOAT(JDOE-JD)*(YEAR-TYEAR)/CYEAR
      YEAR=YEAR+365. E 0
      SNI=SIN(ANGIN/RAD)
      TINI=1. E 0/TAN(ANGIN/RAD)
      ER=SQRT((1. E 0+EC)/(1. E 0-EC))
      QQ=DELEQN*TPI/YEAR
C    DETERMINE TRUE ANOMALY AT EQUINOX
      E=1. E 0
      ITER = 0
 32   EP=E-(E-EC*SIN(E)-QQ)/(1. E 0-EC*COS(E))
      CD=ABS(E-EP)
      E=EP
      ITER = ITER + 1
      IF(ITER.GT.10) THEN
        WRITE(6,*) ' ITERATION COUNT FOR LOOP 32 =', ITER
        WRITE(6,*) ' E, EP, CD =', E, EP, CD
      ENDIF
      IF(ITER.GT.10) GOTO 1032
      IF(CD.GT.CCR) GO TO 32
 1032 CONTINUE
      HE=.5 E 0*E
      EQ=2. E 0*ATAN(ER*TAN(HE))
C    DATE=DAYS SINCE LAST PERIHELION PASSAGE
      DATE = MOD(DAT,YEAR)
C    SOLVE ORBIT EQUATIONS BY NEWTON'S METHOD
      EM=TPI*DATE/YEAR
      E=1. E 0
      ITER = 0
 31   EP=E-(E-EC*SIN(E)-EM)/(1. E 0-EC*COS(E))
      CR=ABS(E-EP)
      E=EP
      ITER = ITER + 1
      IF(ITER.GT.10) THEN
        WRITE(6,*) ' ITERATION COUNT FOR LOOP 31 =', ITER
      ENDIF
      IF(ITER.GT.10) GOTO 1031
      IF(CR.GT.CCR) GO TO 31
 1031 CONTINUE
      R=1. E 0-EC*COS(E)
      HE=.5 E 0*E
      W=2. E 0*ATAN(ER*TAN(HE))
      SIND=SNI*SIN(W-EQ)
      DLT=ASIN(SIND)
      ALP=ASIN(TAN(DLT)*TINI)
      TST=COS(W-EQ)
      IF(TST.LT.0. E 0) ALP=PI-ALP
      IF(ALP.LT.0. E 0) ALP=ALP+TPI
      SUN=TPI*(DATE-DELEQN)/YEAR
      IF(SUN.LT.0. E 0) SUN=SUN+TPI
      SLAG=SUN-ALP-.03255 E 0
C    COMPUTE HOUR ANGLE OF SUNSET AT ALL LATITUDES
      IF(DLT.EQ.0. E 0) THEN
        DO 10 I=1,N
        HANG(I)=HPI
        TAUDA(I)=0.5 E 0
        COSZ(I)= MAX (COS(ALAT(I)/HPI),0. E 0)
   10   CONTINUE
      ELSE
      DO 1 I=1,N
      SS=SIN(ALAT(I))*SIN(DLT)
      CC=COS(ALAT(I))*COS(DLT)
      AP=ABS(ALAT(I))
      EPS=ABS(AP-HPI)
      IF(EPS.GT.CCR) GO TO 14
      HANG(I)=HPI*ABS(AP/ALAT(I)+ABS(DLT)/DLT)
      GO TO 5
   14 AR=-SS/CC
      AC=ABS(AR)
      IF(AC+CCR.GT.1. E 0) GO TO 3
      IF(AC+CCR.LT.1. E 0) GO TO 4
  2   HANG(I)=(AC-AR)*HPI
      GO TO 5
  3   IF(AR.LT.0. E 0) GO TO 25
      HANG(I)=0.
      GO TO 5
 25   HANG(I)=PI
      GO TO 5
  4   HANG(I)=ACOS(AR)
  5   TAUDA(I)= MAX (HANG(I)/PI,0. E 0)
      IF(HANG(I).EQ.0. E 0) GO TO 100
      COSZ(I)= MAX ((SS+CC*SIN(HANG(I))/HANG(I)),0. E 0)
      GO TO 1
  100 COSZ(I)=0. E 0
    1 CONTINUE
      ENDIF
      RETURN
      END
      SUBROUTINE SOLAR(JD,FJD,R,DLT,ALP,SLAG,SDEC,CDEC)
C>YH  SUBROUTINE SOLAR(JD,FJD,R,DLT,ALP,SLAG)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SOLAR       ASTRONOMICAL(SOLAR) DATA - SW RADIATION
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS CODE WRITTEN AT GFDL ....
C   COMPUTES RADIUS VECTOR,DECLINATION AND RIGHT ASCENSION OF SUN,
C   AND EQUATION OF TIME. SAME AS SUBROUTINE -SOLMRF-, BUT
C   WITH HOUR ANGLE,FRACTIONAL DAYLIGHT,AND
C   MEAN ZENITH ANGLE CALCULATIONS REMOVED (SUBROUTINE -ZENITH-
C   CALCULATES THESE FOR EACH POINT RATHER THAN EACH LATITUDE).
C   --THIS CODE IS TO BE USED FOR OTHER FCST MODELS OR FOR THE MRF
C   --MODEL IF 'INSTANTANEOUS' SW CALCULATIONS DESIRED.
C
C PROGRAM HISTORY LOG:
C   77-07-21  ROBERT WHITE,GFDL.
C   89-07-07  KENNETH CAMPANA-MOVED THE HOUR ANGLE CALCULATIONS TO
C                              SUBROUTINE -ZENITH-
C
C USAGE:    CALL SOLMRF(JD,FJD,R,DLT,ALP,SLAG)
C   INPUT ARGUMENT LIST:
C     JD       - JULIAN DAY FOR CURRENT FCST HOUR.
C     FJD      - FRACTION OF THE JULIAN DAY.
C   OUTPUT ARGUMENT LIST:
C     R        - RADIUS VECTOR OF THE SUN.
C     DLT      - DECLINATION OF THE SUN (RADIANS).
C     ALP      - RIGHT ASCENSION OF THE SUN.
C     SLAG     - EQUATION OF TIME (RADIANS).
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      PARAMETER (PI= 3.141593E+0 ,TPI=2.0*PI,HPI=0.5*PI,RAD=180.0/PI)
C
C
C    *******************************************************************
C    *                            S O L A R                            *
C... *  PATTERNED AFTER ORIGINAL GFDL CODE---                          *
C... *     BUT NO CALCULATION OF LATITUDE MEAN COS SOLAR ZENITH ANGLE..*
C... *     ZENITH ANGLE CALCULATIONS DONE IN SUBR ZENITH IN THIS CASE..*
C... *  HR ANGLE,MEAN COSZ,AND MEAN TAUDA CALC REMOVED--K.A.C. MAR 89  *
C    *  UPDATES BY HUALU PAN TO LIMIT ITERATIONS IN NEWTON METHOD AND  *
C    *  ALSO CCR REDUCED FROM(1.3E-7)--BOTH TO AVOID NONCONVERGENCE IN *
C    *  NMC S HALF PRECISION VERSION OF GFDL S CODE   ----  FALL 1988  *
C    *******************************************************************
C
C.....SOLAR COMPUTES RADIUS VECTOR, DECLINATION AND RIGHT ASCENSION OF
C.....SUN, EQUATION OF TIME
C
                                   D A T A
     1   CYEAR/365.25/,      CCR/1.3 E -6/
C
C.....TPP = DAYS BETWEEN EPOCH AND PERIHELION PASSAGE OF 1900
C.....SVT6 = DAYS BETWEEN PERIHELION PASSAGE AND MARCH EQUINOX OF 1900
C.....JDOR = JD OF EPOCH WHICH IS JANUARY 0, 1900 AT 12 HOURS UT
C
                                   D A T A
     1   TPP/1.55/,          SVT6/78.035/,       JDOR/2415020/
C
C    *******************************************************************
C
      DAT=FLOAT(JD-JDOR)-TPP+FJD
C    COMPUTES TIME IN JULIAN CENTURIES AFTER EPOCH
      T=FLOAT(JD-JDOR)/36525. E 0
C    COMPUTES LENGTH OF ANOMALISTIC AND TROPICAL YEARS (MINUS 365 DAYS)
      YEAR=.25964134 E 0+.304 E -5*T
      TYEAR=.24219879 E 0-.614 E -5*T
C    COMPUTES ORBIT ECCENTRICITY AND ANGLE OF EARTH'S INCLINATION FROM T
      EC=.01675104 E 0-(.418 E -4+.126 E -6*T)*T
      ANGIN=23.452294 E 0-(.0130125 E 0+.164 E -5*T)*T
      ADOR=JDOR
      JDOE=ADOR+(SVT6*CYEAR)/(YEAR-TYEAR)
C    DELEQN=UPDATED SVT6 FOR CURRENT DATE
      DELEQN=FLOAT(JDOE-JD)*(YEAR-TYEAR)/CYEAR
      YEAR=YEAR+365. E 0
      SNI=SIN(ANGIN/RAD)
      TINI=1. E 0/TAN(ANGIN/RAD)
      ER=SQRT((1. E 0+EC)/(1. E 0-EC))
      QQ=DELEQN*TPI/YEAR
C    DETERMINE TRUE ANOMALY AT EQUINOX
      E=1. E 0
      ITER = 0
 32   EP=E-(E-EC*SIN(E)-QQ)/(1. E 0-EC*COS(E))
      CD=ABS(E-EP)
      E=EP
      ITER = ITER + 1
      IF(ITER.GT.10) THEN
        WRITE(6,*) ' ITERATION COUNT FOR LOOP 32 =', ITER
        WRITE(6,*) ' E, EP, CD =', E, EP, CD
      ENDIF
      IF(ITER.GT.10) GOTO 1032
      IF(CD.GT.CCR) GO TO 32
 1032 CONTINUE
      HE=.5 E 0*E
      EQ=2. E 0*ATAN(ER*TAN(HE))
C    DATE=DAYS SINCE LAST PERIHELION PASSAGE
      DATE = MOD(DAT,YEAR)
C    SOLVE ORBIT EQUATIONS BY NEWTON'S METHOD
      EM=TPI*DATE/YEAR
      E=1. E 0
      ITER = 0
 31   EP=E-(E-EC*SIN(E)-EM)/(1. E 0-EC*COS(E))
      CR=ABS(E-EP)
      E=EP
      ITER = ITER + 1
      IF(ITER.GT.10) THEN
        WRITE(6,*) ' ITERATION COUNT FOR LOOP 31 =', ITER
      ENDIF
      IF(ITER.GT.10) GOTO 1031
      IF(CR.GT.CCR) GO TO 31
 1031 CONTINUE
      R=1. E 0-EC*COS(E)
      HE=.5 E 0*E
      W=2. E 0*ATAN(ER*TAN(HE))
C>YH  SIND=SNI*SIN(W-EQ)
C>YH  DLT=ASIN(SIND)
      SDEC=SNI*SIN(W-EQ)
      CDEC=SQRT(1. E 0 - SDEC*SDEC)
      DLT=ASIN(SDEC)
      ALP=ASIN(TAN(DLT)*TINI)
      TST=COS(W-EQ)
      IF(TST.LT.0. E 0) ALP=PI-ALP
      IF(ALP.LT.0. E 0) ALP=ALP+TPI
      SUN=TPI*(DATE-DELEQN)/YEAR
      IF(SUN.LT.0. E 0) SUN=SUN+TPI
      SLAG=SUN-ALP-.03255 E 0
      RETURN
      END
      SUBROUTINE PRTIME(ID,MUNTH,IYEAR,IHR,XMIN,JD,FJD,
     1                  DLT,ALF,R1,SLAG,SOLC)
      PARAMETER (DEGRAD=180. E 0/ 3.141593E+0 ,HPI=0.5 E 0* 3.141593E+0
     1)
      DATA       SIGN/1H-/,      SIGB/1H /
      DATA ZERO,SIX,SIXTY,Q22855/0.0,6.0,60.0,228.55735/
      SAVE SIGN,ZERO,SIX,SIXTY,Q22855
      DLTD=DEGRAD*DLT
      LTD=DLTD
      DLTM=SIXTY*(ABS(DLTD)-ABS(FLOAT(LTD)))
      LTM=DLTM
      DLTS=SIXTY*(DLTM-FLOAT(LTM))
      DSIG=SIGB
      IF((DLTD.LT.ZERO).AND.(LTD.EQ.0)) DSIG=SIGN
      HALP=SIX*ALF/HPI
      IHALP=HALP
      YMIN=ABS(HALP-FLOAT(IHALP))*SIXTY
      IYY=YMIN
      ASEC=(YMIN-FLOAT(IYY))*SIXTY
      EQT=Q22855*SLAG
      EQSEC=SIXTY*EQT
      PRINT 1004,    ID,MUNTH,IYEAR,IHR,XMIN,JD,FJD,R1,HALP,IHALP,
     1       IYY,ASEC,DLTD,DSIG,LTD,LTM,DLTS,EQT,EQSEC,SLAG,SOLC
 1004 FORMAT('0 FORECAST DATE',9X,I3,A5,I6,' AT',I3,' HRS',F6.2,' MINS'/
     1       '  JULIAN DAY',12X,I8,2X,'PLUS',F11.6/
     2       '  RADIUS VECTOR',9X,F10.7/
     3       '  RIGHT ASCENSION OF SUN',F12.7,' HRS, OR',I4,' HRS',I4,
     4                                 ' MINS',F6.1,' SECS'/
     5       '  DECLINATION OF THE SUN',F12.7,' DEGS, OR',A2,I3,
     6                                 ' DEGS',I4,' MINS',F6.1,' SECS'/
     7       '  EQUATION OF TIME',6X,F12.7,' MINS, OR',F10.2,' SECS, OR'
     8                           ,F9.6,' RADIANS'/
     9       '  SOLAR CONSTANT',8X,F12.7//)
      RETURN
      END
      SUBROUTINE ZENITH(FJD,DLT,SLAG,RLAT,RLON,HANG,DHR,NLNG,COSZ,FRAC)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZENITH      COMPUTE COSINE SOLAR ZENITH ANGLE
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS CODE WRITTEN AT GFDL .....
C   COMPUTES EFFECTIVE MEAN (OVER SPECIFIED INTERVAL,DHR)
C   COSINE OF ZENITH ANGLE AND DAYLIGHT FRACTION
C   FROM LATITUDE,LONGITUDE,AND COMPUTED HOUR ANGLE OF SUNSET.
C   INPUT ARGUMENTS TO CIRCULAR FUNCTIONS ARE IN RADIANS.
C
C PROGRAM HISTORY LOG:
C   77-10-19  ROBERT WHITE,GFDL.
C   89-07-07  KENNETH CAMPANA-UPDATED-TO CALCULATE SUNSET HOUR ANGLE
C                                     HERE RATHER THAN IN SUBR-SOLAR-
C
C USAGE:    CALL ZENITH(FJD,DLT,SLAG,XLAT,XLON,HANG,DHR,NLNG,
C                       COSZ,FRAC)
C   INPUT ARGUMENT LIST:
C     FJD      - FRACTION OF THE JULIAN DAY.
C     DLT      - DECLINATION OF THE SUN (RADIANS).
C     SLAG     - EQUATION OF TIME (RADIANS).
C     XLAT     - LATITUDE (DEGREES) FOR EACH OF THE NLNG PTS.
C     XLON     - LONGITUDE (DEGREES) FOR EACH OF THE NLNG PTS.
C     DHR      - INTERVAL (HOURS) OVER WHICH TO AVERAGE COSZ,FRAC.
C     NLNG     - NUMBER OF POINTS IN LONGITUDINAL DIRECTION.
C   OUTPUT ARGUMENT LIST:
C     HANG     - HOUR ANGLE OF SUN AT SUNSET.
C     COSZ     - TEMPORAL MEAN COSINE SOLAR ZENITH ANGLE.
C     FRAC     - TEMPORAL AVERAGE FRACTIONAL DAYLIGHT.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
      PARAMETER (PI= 3.141593E+0 ,TPI=2.0*PI,PID24=PI/24.0,HPI=0.5*PI)
                              P A R A M E T E R(
     1  IX= 256 )
C
C    *******************************************************************
C    *                           Z E N I T H                           *
C    *    STATEMENTS BLOCKED BY ROBERT K. WHITE.......19 OCT. 1977     *
C    *    INPUT LAT/LON DEG(XLAT,XLON),COMPUTE SUNSET HR ANGL KAC MAR89*
C    *******************************************************************
C
                               D I M E N S I O N
     1   COSZ(NLNG),           FRAC(NLNG)
      DIMENSION RLAT(NLNG),RLON(NLNG/2),HANG(NLNG),RLNLOC(IX)
C
                                 L O G I C A L
     1   RISE,               SET
C
                                 D A T A
     1   CCR/1.3 E -6/
C
C    *******************************************************************
C
C     ZENITH COMPUTES EFFECTIVE MEAN COSINE OF ZENITH ANGLE AND DAYLIGHT
C       FRACTION FROM LATITUDE AND COMPUTED HOUR ANGLE OF SUNSET(THE
C       LATTER IS OBTAINED FROM SUBROUTINE SOLAR)..
C---   INPUT ARGUMENTS TO CIRCULAR FUNCTIONS ARE IN RADIANS.
C
      DO 50 I=1,NLNG/2
       RLNLOC(I)=RLON(I)
       RLNLOC(I+NLNG/2)=RLON(I)
   50 CONTINUE
      CVPR=TPI/FLOAT( 128 )
      GHA=FJD*TPI+SLAG
      ARG=DHR*PID24
      SINFAC=SIN(ARG)/ARG
      IF(DLT.EQ.0. E 0) THEN
      DO 60 I=1,NLNG
      CC=COS(RLAT(I))
      HANG(I) = HPI
      CONS=CC/HPI
CKAC  XLNG = CVPR * (FLOAT(I) - 1. E 0)
C     XLNG = RLNLOC(I)
C     HLOC=GHA+RLNLOC(I)
      HLOC=GHA+RLNLOC(I)+ARG
C     LOCAL HOUR ANGLE SHIFTED BY HALF OF THE AVERAGING PERIOD
      HLOC = MOD(HLOC,TPI)
      IF(HLOC.GT.PI) HLOC=HLOC-TPI
      HLPAR=HLOC+ARG
      ARMHL=ARG-HLOC
      SET=HLPAR.GT.HPI
      RISE=ARMHL.GT.HPI
      IF(RISE.AND.SET) GO TO 57
      IF(HLPAR.GT.PI) GO TO 58
      IF(ARMHL.GT.PI) GO TO 59
      IF(SET) GO TO 53
      IF(RISE) GO TO 54
      FRAC(I)=1. E 0
      COSZ(I)=CC*COS(HLOC)*SINFAC
      GO TO 52
 53   DELSH=.5 E 0*(HPI+ARMHL)
      GO TO 55
 54   DELSH=.5 E 0*(HPI+HLPAR)
 55   IF(DELSH.LE.0. E 0) GO TO 56
      FRAC(I)=DELSH/ARG
      COSZ(I)=CC*COS(HPI-DELSH)*SIN(DELSH)/DELSH
      GO TO 52
 57   FRAC(I)=HPI/ARG
      COSZ(I)=CONS
      GO TO 52
 58   DELE=.5 E 0 * MAX (HLPAR+HPI-TPI,0. E 0)
      DELW=.5 E 0 * MAX (HPI+ARMHL,0. E 0)
      GO TO 70
 59   DELE=.5 E 0 * MAX (HPI+HLPAR,0. E 0)
      DELW=.5 E 0 * MAX (ARMHL+HPI-TPI,0. E 0)
 70   FRAC(I)=(DELE+DELW)/ARG
      IF(FRAC(I).EQ.0. E 0) GO TO 71
      COSZ(I)=CC*(COS(HPI-DELE)*SIN(DELE)+
     1            COS(HPI-DELW)*SIN(DELW))/(DELE+DELW)
      GO TO 52
 56   FRAC(I)=0. E 0
 71   COSZ(I)=0. E 0
 52   CONTINUE
      COSZ(I) =  MIN (1. E 0,COSZ(I))
      COSZ(I) =  MAX (0. E 0,COSZ(I))
      FRAC(I) =  MIN (1. E 0,FRAC(I))
 60   CONTINUE
      ELSE
      DO 20 I=1,NLNG
C...   COMPUTE HOUR ANGLE OF SUNSET FOR EACH POINT
      SS=SIN(RLAT(I))*SIN(DLT)
      CC=COS(RLAT(I))*COS(DLT)
      IF(DLT.EQ.0. E 0) GO TO 16
      AP=ABS(RLAT(I))
      EPS=ABS(AP-HPI)
      IF(EPS.GT.CCR) GO TO 14
      HANG(I)=HPI*ABS(AP/RLAT(I)+ABS(DLT)/DLT)
      GO TO 35
   14 AR=-SS/CC
      AC=ABS(AR)
      IF(AC+CCR.GT.1. E 0) GO TO 33
      IF(AC+CCR.LT.1. E 0) GO TO 34
   32 HANG(I)=(AC-AR)*HPI
      GO TO 35
   33 IF(AR.LT.0. E 0) GO TO 25
      HANG(I)=0.
      GO TO 35
 25   HANG(I)=PI
      GO TO 35
 16   HANG(I)=HPI
      GO TO 35
   34 HANG(I)=ACOS(AR)
   35 HA=HANG(I)
      IF(HA.GT.0. E 0) CONS=SS+CC*SIN(HA)/HA
CKAC  XLNG = CVPR * (FLOAT(I) - 1. E 0)
C     XLNG = RLNLOC(I)
C     HLOC=GHA+RLNLOC(I)
      HLOC=GHA+RLNLOC(I)+ARG
C     LOCAL HOUR ANGLE SHIFTED BY HALF OF THE AVERAGING PERIOD
      HLOC = MOD(HLOC,TPI)
      IF(HLOC.GT.PI) HLOC=HLOC-TPI
      HLPAR=HLOC+ARG
      ARMHL=ARG-HLOC
      SET=HLPAR.GT.HA
      RISE=ARMHL.GT.HA
      IF(RISE.AND.SET) GO TO 7
      IF(HLPAR.GT.PI) GO TO 8
      IF(ARMHL.GT.PI) GO TO 9
      IF(SET) GO TO 3
      IF(RISE) GO TO 4
      FRAC(I)=1. E 0
      COSZ(I)=SS+CC*COS(HLOC)*SINFAC
      GO TO 2
  3   DELSH=.5 E 0*(HA+ARMHL)
      GO TO 5
  4   DELSH=.5 E 0*(HA+HLPAR)
  5   IF(DELSH.LE.0. E 0) GO TO 6
      FRAC(I)=DELSH/ARG
      COSZ(I)=SS+CC*COS(HA-DELSH)*SIN(DELSH)/DELSH
      GO TO 2
  7   IF(HA.LE.0. E 0) GO TO 6
      FRAC(I)=HA/ARG
      COSZ(I)=CONS
      GO TO 2
  8   DELE=.5 E 0 * MAX (HLPAR+HA-TPI,0. E 0)
      DELW=.5 E 0 * MAX (HA+ARMHL,0. E 0)
      GO TO 10
  9   DELE=.5 E 0 * MAX (HA+HLPAR,0. E 0)
      DELW=.5 E 0 * MAX (ARMHL+HA-TPI,0. E 0)
 10   FRAC(I)=(DELE+DELW)/ARG
      IF(FRAC(I).EQ.0. E 0) GO TO 11
      COSZ(I)=SS+CC*(COS(HA-DELE)*SIN(DELE)+
     1               COS(HA-DELW)*SIN(DELW))/(DELE+DELW)
      GO TO 2
  6   FRAC(I)=0. E 0
 11   COSZ(I)=0. E 0
  2   CONTINUE
      COSZ(I) =  MIN (1. E 0,COSZ(I))
      COSZ(I) =  MAX (0. E 0,COSZ(I))
      FRAC(I) =  MIN (1. E 0,FRAC(I))
   20 CONTINUE
      ENDIF
      RETURN
      END
      SUBROUTINE ALBSNO(ALBDOA,LAT,JSNO,ALBEDR,SLMSKR,SSNOW,TGR,TAR)
CFPP$ NOCONCUR R
      DIMENSION ALBDOA( 256 ),ALBEDR( 256 ),SLMSKR( 256 )
      DIMENSION SSNOW( 256 )
C     ADDED BY BOB GRUMBINE FOR SEA ICE ALBEDO ALGORITHM
      REAL TGR( 256 ), TAR( 256 )

C....
C   THE FOLLOWING DETERMINES SURFACE ALBEDO (ALBDOA),WHERE SNOW EXISTS.
C....
      IF(LAT.LT.JSNO) THEN
        DO 350 I=1,  256
C....    LIMIT BACKGROUND ALBEDO (IN CASE SNOW LEAVES GREENLAND)
          ALBDOA(I)=MIN(ALBEDR(I),0.6 E 0)
CKAC.....            IF(TSEAR(I).LE.0. E 0) GO TO 34
          IF(SLMSKR(I).EQ.1.0 E 0) THEN
            IF(SSNOW(I).GT.0. E 0) ALBDOA(I)=0.75 E 0
CKAC.......34   IF (TSEAR(I).LE.-271.21 E 0) GO TO 35
          ELSE IF(SLMSKR(I).EQ.2.0 E 0) THEN
CKAC            ALBDOA(I)=0.5 E 0
CKAC            IF(SSNOW(I).GT.0. E 0) ALBDOA(I)=0.75 E 0
            IF (SSNOW(I) .GT. 0.0) THEN
              IF (TGR(I) .LT. 273.16 - 5.) THEN
                ALBDOA(I) = 0.8
              ELSE IF (TGR(I) .LE. 273.16) THEN
                ALBDOA(I) = 0.65 - 0.03*(273.16 - TGR(I))
              ELSE
                ALBDOA(I) = 0.65
              ENDIF
             ELSE
              IF (TGR(I) .LT. 271.2) THEN
                ALBDOA(I) = 0.65
              ELSE IF (TAR(I) .LT. 273.16+5.) THEN
                ALBDOA(I) = 0.45 + 0.04*(TAR(I) -273.16)
              ELSE
                ALBDOA(I) = 0.45
              ENDIF
            ENDIF
          ENDIF
          ALBDOA(I) = MAX(ALBDOA(I),.06 E 0)
350     CONTINUE
      ELSE
        DO 360 I=1,  256
C....    LIMIT BACKGROUND ALBEDO (IN CASE SNOW LEAVES GREENLAND)
          ALBDOA(I)=MIN(ALBEDR(I),0.6 E 0)
CKAC.....            IF(TSEAR(I).LE.0. E 0) GO TO 39
          IF(SLMSKR(I).EQ.1.0 E 0) THEN
            IF(SSNOW(I).GE.1. E 0) THEN
              ALBDOA(I)=0.6 E 0
            ELSE IF(SSNOW(I).GT.0.0 E 0) THEN
              ALBDOA(I)=ALBDOA(I)+SQRT(SSNOW(I))*(0.6 E 0-ALBDOA(I))
            ENDIF
CKAC.......39   IF (TSEAR(I).LE.-271.21 E 0) GO TO 45
          ELSE IF (SLMSKR(I).EQ.2.0 E 0) THEN
            IF (SSNOW(I) .GT. 0.0) THEN
              IF (TGR(I) .LT. 273.16 - 5.) THEN
                ALBDOA(I) = 0.8
              ELSE IF (TGR(I) .LE. 273.16) THEN
                ALBDOA(I) = 0.65 - 0.03*(273.16 - TGR(I))
              ELSE
                ALBDOA(I) = 0.65
              ENDIF
             ELSE
              IF (TGR(I) .LT. 271.2) THEN
                ALBDOA(I) = 0.65
              ELSE IF (TAR(I) .LT. 273.16+5.) THEN
                ALBDOA(I) = 0.45 + 0.04*(TAR(I) -273.16)
              ELSE
                ALBDOA(I) = 0.45
              ENDIF
            ENDIF
CKAC            ALBDOA(I)=0.5 E 0
CKAC            IF (SSNOW(I).GE.1. E 0) THEN
CKAC              ALBDOA(I)=0.6 E 0
CKAC            ELSE IF(SSNOW(I).GT.0.0 E 0) THEN
CKAC              ALBDOA(I)=ALBDOA(I)+SQRT(SSNOW(I))*(0.6 E 0-ALBDOA(I))
CKAC            ENDIF
          ENDIF
          ALBDOA(I) = MAX(ALBDOA(I),.06 E 0)
360     CONTINUE
      ENDIF
      RETURN
      END
      SUBROUTINE ZONGRD(A,ZONA,ZONB)
CFPP$ NOCONCUR R
      DIMENSION A( 256 , 28 ),ZONA( 28 ),ZONB( 28 )
      DO 3 K=1, 28
      ZONA(K)=0. E 0
      ZONB(K)=0. E 0
      DO 2 I=1, 128
      ZONA(K)=ZONA(K)+A(I,K)
      ZONB(K)=ZONB(K)+A(I+ 128 ,K)
2     CONTINUE
      ZONA(K)=ZONA(K)/ 128
      ZONB(K)=ZONB(K)/ 128
3     CONTINUE
C     PRINT 100,J,ZON
C100  FORMAT(1H ,I3, 28 (1X,F5.2))
      RETURN
      END
      SUBROUTINE EXTRM1(A,LGTH,IND)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    EXTREM      PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL EXTREM (A, B, LGTH, IND)
C   INPUT ARGUMENT LIST:
C     A        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY A.
C     B        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY B.
C     LGTH     - LENGTH OF ARRAY A AND ARRAY B.
C     IND      - INDICATOR PRINTED WITH MINIMUMS AND MAXIMUMS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C REMARKS: LGTH SHOULD BE GREATER THAN 1.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200
C   MACHINE:  CYBER 205
C
C$$$
      DIMENSION A(LGTH)
      AMIN = A(1)
      AMAX = A(1)
      DO 25 I=2,LGTH
      IF (A(I).GT.AMAX)  AMAX = A(I)
      IF (A(I).LT.AMIN)  AMIN = A(I)
25    CONTINUE
C
      PRINT 100,IND,AMIN,AMAX
100   FORMAT(1H ,'IND AMIN AMAX ',I4,2X,2(E12.4,2X))
      RETURN
      END
      SUBROUTINE EXTRM2(NGG,NGGS,A,AMIN,AMAX,B,BMIN,BMAX,LGTH,IND)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    EXTREM      PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C   PRGMMR: JOSEPH SELA      ORG: W/NMC23    DATE: 88-04-01
C
C ABSTRACT: PRINTS MINIMUMS AND MAXIMUMS OF 2 ARRAYS.
C
C PROGRAM HISTORY LOG:
C   88-04-01  JOSEPH SELA
C
C USAGE:    CALL EXTREM (A, B, LGTH, IND)
C   INPUT ARGUMENT LIST:
C     A        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY A.
C     B        - FINDS AND PRINTS MINIMUM AND MAXIMUM OF ARRAY B.
C     LGTH     - LENGTH OF ARRAY A AND ARRAY B.
C     IND      - INDICATOR PRINTED WITH MINIMUMS AND MAXIMUMS.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINTOUT FILE.
C
C REMARKS: LGTH SHOULD BE GREATER THAN 1.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200
C   MACHINE:  CYBER 205
C
C$$$
      DIMENSION A(LGTH), B(LGTH)
      DO 25 I=1,LGTH
      IF (A(I).GT.AMAX)  AMAX = A(I)
      IF (A(I).LT.AMIN)  AMIN = A(I)
25    CONTINUE
C
      DO 50 I=1,LGTH
      IF (B(I).GT.BMAX)  BMAX = B(I)
      IF (B(I).LT.BMIN)  BMIN = B(I)
50    CONTINUE
      IF(NGG.EQ.NGGS) PRINT 100,IND,AMIN,AMAX,BMIN,BMAX
100   FORMAT(1H ,'IND AMIN AMAX BMIN BMAX ',I4,2X,4(E12.4,2X))
      RETURN
      END
CFPP$ EXPAND(FPVS)
      SUBROUTINE CLDJMS(PS,Q,T,VVEL,CV,CVT,CVB,SI,SL,
     1           SLMSK,CLD,MTOP,MBOT,CLDARY,IVVA,INVR,RHMAX,
     2           XLATRD,RHCLD,ISTRAT)
CTUNE
CFPP$ NOCONCUR R
C....    FROM YH.RAD.MDL93(CLDNEW28).......
C....     LATER UPDATED FROM YH.RAD.MDL94(CLDMUL28)...22JAN94
C....     LATER UPDATED FROM YH.RAD.MDL94(CLDML28A)... 1FEB94
C....     LATER UPDATED FROM YH.RAD.MDL94(CLDML28B)... 5FEB94
C.               SUBR CLDPRP REPLACED
C.               ADDED VERTICAL INTERP OF CLD-RH RELATIONS(ISTRAT GT 1)
C....     LATER UPDATED FROM YH.RAD.MDL94(CLDML28E)... 11MAR94
C.               SUBR CLDPRP REPLACED,GCL ADJUSTED
C....     LATER UPDATED FROM CLOUD6................... 24MAR94
C.               SUBR CLDPRP , LOW ENHANCED TO OLD VALUE..0.14..
C.               SUBR GCLNEW , LLYR CALCULATION ADJ TO OLD VALU(KL-1)
C.                             LLYRL WAS OK.. IVE REMOVED IT AND
C.                             REPLACED IT BY ITS EQUIVALENT, KLOWB
C....     LATER UPDATED FROM CLOUD6................... 30MAR94
C.               SUBR CLDPRP , LOW AND MIDDLE (NOT CV) ENHANCED=0.10
C---------------------------------------------------------------------
C     NOV., 1992 - Y.H., K.A.C., AND A.K.
C        CLOUD PARAMETERIZATION PATTERNED AFTER SLINGO AND SLINGO'S
C        WORK (JGR, 1991).
C     STRATIFORM CLOUDS ARE ALLOWED IN ANY LAYER EXCEPT THE SURFACE
C        AND UPPER STRATOSPHERE.  THE RELATIVE HUMIDITY CRITERION MAY
C        VARY IN DIFFERENT MODEL LAYERS.
CYH94
C     OUTPUT CLOUD AMOUNTS ARE IN CLDARY(I,K), K=1 IS THE LOWEST
C        MODEL LAYER, STRATIFORM (STR) AND CONVECTIVE (CNV) TYPES OF
C        CLOUD ARE COMPRESSED INTO ONE WORD: CAMT = STR + 1.0E4*CNV
C        LOW MARINE STRATUS AMT'S ARE FLAGED BY ADDING 2.
CYH94
CTUNE
C..   FOR ISTRAT = 0, THERE IS RH-CLD RELATION FOR EACH LAYER..
C                      CRIT RH COMPUTED WITHIN..
C..   FOR ISTRAT = 1, RH-CLD RELATION FROM TABLES CREATED USING
C                     MITCHELL-HAHN TUNING TECHNIQUE (A.F. RTNEPH OBS)
C                  ...STRATUS COMPUTED SIMILAR TO OLD OPNL CLDJMS.....
C                      EXCEPT NO CLOUD BELOW LAYER=KLOWB..APPROX 955MB
CVINT                TABLES INTERPOLATED VERTICALLY BETWEEN CLOUD TYPES
CVINT                WHEN WITHIN 1 LYR OF H/M AND M/L BOUNDING SURFACE.
CTUNE
C     CONVECTIVE CLOUDS ARE FROM MODEL CONVECTIVE SCHEME AND ARE
C        NO LONGER BROKEN INTO .75,.25,.25..RATHER CC ITSELF IS USED..
C        CONVECTIVE STILL TAKES PRECEDENCE OVER STRATIFORM IN RADFS
C         BUT HERE CV+ST MERGE EXITS IN CLDARY...(IN RADIATION USE OF
C        CC GIVES IMPROVEMENT TO TROPICAL MIDDLE CLD (AS DID ST+CV))
C
C     CLOUDS ARE ALSO DIVIDED INTO 3 ATMOSPHERIC DOMAINS (L,M,H) FOR
C        DIAGNOSTIC ANALYSIS PURPOSE.  THE EQUIVALENCED CLOUD AMOUNTS
C        ARE COMPUTED IN EACH OF THE 3 DOMAINS BASED ON RANDOM OVERLAP
C        ASSUMPTION FOR SEPARATED CLOUD LAYERS AND MAXIMUM OVERLAP
C        FOR ADJACENT CLOUD LAYERS.
C
C     H,M,L DOMAIN PRESSURE TOPS 'PTOP1(K)' VARY LINEARLY FROM
C        'PTOPC(K,1)' AT 45DEG TO 'PTOPC(K,2)' AT THE POLE
C
C--------------------------------------------------------------------
C     INPUT VARIABLES:
C        PS (CB)       - SURFACE PRESSURE
C        Q  (KG/KG)    - SPECIFIC HUMIDITY
C        T  (DEG K)    - ABSOLUTE TEMPERATURE
C        VVEL(CB/SEC)  - VERTICAL VELOCITY
C        CV,CVT,CVB    - CONV CLD FRACTION, TOP, BOTTOM LAYER FROM
C                        KUO SCHEME
C        SI,SL         - MDL SIGMA INTERFACE AND LAYER MEAN
C        SLMSK         - SEA/LAND MASK ARRAY(SEA:0.,LAND:1.,SNOW:2.)
C        IVVA          - FLAG TO CONTROL VERTICAL VELOCITY ADJ.
C                        =1: WITH, =0: WITHOUT
C        INVR          - FLAG TO CONTROL LAPSE RATE INVERSION CLD
C                        =1: WITH, =0: WITHOUT
C        RHMAX         - UPPER LIMIT OF RELATIVE HUMIDITY TO
C                        FORM OVERCAST CLOUD (CLD FRACTN = 1.)
CTUNE
C********XLATRD        - CURRENT LATITUDE IN RADIANS (1ST DATA PT)
C********                 FOR MODELS WITH DIFF LAT AT EACH PT, NEED TO
C********                 USE THE LAT OF ALL POINTS....CAREFUL.....
C        RHCLD         - CLOUD-RH RELATIONS FROM MITCHELL+HAHN,
C                        USING A.F. RTNEPH ANALYSES
C        ISTRAT        - 0 OR 1:FOR DEFAULT OR 'RHCLD' TABLES
C                        IN THE STRATIFORM CLOUD CALCULATION
CTUNE
C    OUTPUT VARIABLES:
C       CLDARY         - VERTICAL COLUMN ARRAY OF CLOUD FRACTION
C                        PROFILE
C       CLD            - CLD FRACTION IN 3 TYPES OF DOMAINS (L,M,H)
c                        added 3 cv types (l,m,h) and 3 rh types (l,m,h)
c                        for subsequent reanlyses...more correct
c                        l,m,h than the original (which are retained)
C       MTOP,MBOT      - TOP, BOTTOM LAYERS OF CLOUDS (L,M,H)
c                        not for the 6 new types noted above...
C
C--------------------------------------------------------------------
C
                      P A R A M E T E R
     1 ( IDIMT= 256 ,  KDIM= 28 ,
     2   KDIMP=KDIM+1,  LEVM1=KDIM-1,  LEVM2=KDIM-2,
     3   RD= 2.8705E+2 , RV= 4.6150E+2 , EPS=RD/RV, EPSM1=RD/RV-1.0, PI=
     1 3.141593E+0  )
CTUNE
      PARAMETER (MCLD=3,NBIN=100)
CVINT
      PARAMETER (MCLD1=MCLD-1)
CVINT
CTUNE
                      D I M E N S I O N
     1  PS( 258 ), CV(IDIMT),  CVT(IDIMT),  CVB(IDIMT)
     2, SLMSK(IDIMT),SI(KDIMP),  SL (KDIM)
     3, T( 258 ,KDIM), VVEL(IDIMT,KDIM),   Q( 258 ,KDIM)
creanl2     4, CLD(IDIMT,3),    MTOP(IDIMT,3),      MBOT(IDIMT,3)
     4, CLD(IDIMT,9),    MTOP(IDIMT,3),      MBOT(IDIMT,3)
CYH945, CLDARY(IDIMT,KDIM), CLSTR(IDIMT)
     5, CLDARY(IDIMT,KDIM)
CTUNE
C...    RH-CLD RELATIONSHIPS FOR EACH POINT
      DIMENSION RHCLD(IDIMT,NBIN,MCLD)
CVINT
      DIMENSION CLDTBL(NBIN),LCBDRY(IDIMT,MCLD1)
CVINT
CTUNE
C
C --- PTOPC(K,L): TOP PRESURE OF EACH CLD DOMAIN (K=1-4 ARE SFC,L,M,H;
C       L=1,2 ARE LOW-LAT (<45 DEGREE) AND POLE REGIONS)
c     COMMON /COMCD1/ ROCP,PTOPC(4,2),CVTOP,VVCLD(2),CLAPSE
c    1,               CRHRH,KLOWT,KLOWB,PSTRT
c    2,               CLAPKC,DCLPS,CLPSE,llyr
      common /COMCD1/ ROCP,PTOPC(4,2),CVTOP,VVCLD(2),CLAPSE,
     1                CRHRH, PSTRT, CLAPKC, DCLPS, CLPSE,
     2                KLOWT, KLOWB, llyr

C ---  WORKSPACE ---
                        L O G I C A L
CYH941  BITX(IDIMT), BITY(IDIMT), BITZ(IDIMT), BITW(IDIMT), BIT1, BIT2
     1  BITX(IDIMT), BITY(IDIMT), BITZ(IDIMT),              BIT1, BIT2
     2, BITM(IDIMT)
                      D I M E N S I O N
     1  RHRH (IDIMT,KDIM), PRSLY(IDIMT,KDIM),  DTHDP(IDIMT,KDIM)
     2, THETA(IDIMT,KDIM), KCUT (IDIMT),       KBASE(IDIMT)
     3, KBT1 (IDIMT),      KTH1 (IDIMT),       CL1  (IDIMT)
     4, KBT2 (IDIMT),      KTH2 (IDIMT),       CL2  (IDIMT)
     5, KCVB (IDIMT),      KCVT (IDIMT),       OMEG (IDIMT)
     6, FACV (IDIMT,3),    CR1  (IDIMT),       CR2  (IDIMT)
     7, CR3  (IDIMT),      XCRH1(IDIMT),       XCRH2(IDIMT)
     8, PTOP1(4)
                      E Q U I V A L E N C E
     1  (KBT1, KCVB, THETA(1,1)),   (KBT2, KCUT, THETA(1,2))
     2, (KTH1, KCVT, THETA(1,3)),   (KTH2,       THETA(1,4))
     3, (CL1 ,       THETA(1,5)),   (CL2 ,       THETA(1,6))
     4, (CR1 ,       THETA(1,7)),   (CR2 ,       THETA(1,8))
     5, (OMEG,       THETA(1,9)),   (KBASE,      THETA(1,10))
     6, (XCRH1,      THETA(1,11)),  (XCRH2,FACV, THETA(1,12))
C===>    BEGIN HERE ................................................
C...  FIND TOP PRESSURE FOR EACH CLOUD DOMAIN
      FAC = AMAX1(0.0 E 0, 4.0 E 0*XLATRD/PI-1.0 E 0)
      DO 4 K=1,4
       PTOP1(K) = PTOPC(K,1) + (PTOPC(K,2)-PTOPC(K,1)) * FAC
    4 CONTINUE
C --- LOW CLOUD TOP SIGMA LEVEL, COMPUTED FOR EACH LAT CAUSE
C       DOMAIN DEFINITION CHANGES WITH LATITUDE...
      SILOW = PTOP1(2) * 1.0 E -3
      DO 6 K=1,KDIM
        KK=K
        IF (SI(KK) .LT. SILOW) GO TO 8
   6  CONTINUE
   8  KLOW = KK
      DO 20 K=1,KDIM
      DO 20 I=1,IDIMT
        CLDARY(I,K) = 0.0 E 0
        PRSLY(I,K) = PS(I) * SL(K) * 10.0 E 0
  20  CONTINUE
C --- POTENTIAL TEMP AND LAYER RELATIVE HUMIDITY
      DO 40 K=1,KDIM
      DO 40 I=1,IDIMT
        EXNR = (PRSLY(I,K)*0.001 E 0) ** (-ROCP)
        THETA(I,K) = EXNR * T(I,K)
        ES = FPVS(T(I,K))
        QS = EPS * ES / (SL(K)*PS(I) + EPSM1*ES)
        RHRH(I,K) = AMAX1(0.0 E 0, AMIN1(1.0 E 0, Q(I,K)/QS))
  40  CONTINUE
C --- POTENTIAL TEMP LAPSE RATE
      DO 50 K=1,LEVM1
      DO 50 I=1,IDIMT
        DTHDP(I,K) = (THETA(I,K+1) - THETA(I,K)) /
     1               (PRSLY(I,K+1) - PRSLY(I,K))
  50  CONTINUE
C ------------------------------------------------------------------
C     FIND THE STRATOSPHERE CUT OFF LAYER FOR HIGH CLOUD. IT
C      IS ASSUMED TO BE ABOVE THE LAYER WITH DTHDP LESS THAN
C      -0.25 IN THE HIGH CLOUD DOMAIN (FROM LOOKING AT 1 CASE).
C ------------------------------------------------------------------
      DO 60 I=1,IDIMT
        KCUT(I) = LEVM2
        BITX(I) = .TRUE.
  60  CONTINUE
      DO 80 K=KLOW+1,LEVM2
        BIT1 = .FALSE.
        DO 70 I=1,IDIMT
          IF (BITX(I) .AND. PRSLY(I,K).LE.PTOP1(3)
     1                .AND. DTHDP(I,K).LT.-0.25 E 0) THEN
            KCUT(I) = K
            BITX(I) = .FALSE.
          END IF
          BIT1    = BIT1 .OR. BITX(I)
  70    CONTINUE
        IF (.NOT. BIT1) GO TO 85
  80  CONTINUE
  85  CONTINUE
C ------------------------------------------------------------------
      IF (ISTRAT.LE.0) THEN
C ------------------------------------------------------------------
C       ....DEFAULT SCHEME ....TUNED FOR 28 LYRS BY Y-T HOU.
CYH   CALCULATE STRATIFORM CLOUD AND PUT INTO ARRAY 'CLDARY'
CYH     THE RELATIVE HUMIDITY CRITERIA ARE PRESET FOR EACH MODEL
CYH     SIGMA LEVEL, (1) FOR OCEAN POINTS, AND (2) FOR LAND POINTS.
C ------------------------------------------------------------------
CKAC  DO 130 K=3,LEVM2
      DO 130 K=KLOWB,LEVM2
        BIT1 = .FALSE.
        DO 90 I=1,IDIMT
CYH..     BITX(I) = PRSLY(I,K).LE.PLOW .AND. K.LE.KCUT(I)
          BITX(I) = K.LE.KCUT(I)
          BIT1 = BIT1 .OR. BITX(I)
  90    CONTINUE
        IF (.NOT. BIT1) GO TO 130
        SPNT = AMAX1(0.6 E 0, AMIN1(0.85 E 0, 0.96 E 0-0.6 E 0*SL(K)))
        DO 100 I=1,IDIMT
CYH..     CR1(I) = CRH(K,1)
CYH..     IF (SLMSK(I).EQ.1.0 E 0) CR1(I) = CRH(K,2)
CYH       XCRH1(I) = 0.67 * (RHMAX - CR1(I))
          IF (SLMSK(I).EQ.1.0 E 0) THEN
            CR1(I) = (0.41 E 0*SL(K) - 0.71 E 0)**2 + 0.52 E 0
          ELSE
            CR1(I) = 0.8 E 0 - 0.167 E 0*SL(K)
          END IF
          XCRH1(I) = SPNT * (RHMAX - CR1(I))
          CR2(I) = CR1(I) + XCRH1(I)
          XCRH2(I) = RHMAX - CR2(I)
 100    CONTINUE
        DO 110 I=1,IDIMT
          CL1(I) = AMAX1(0. E 0, (RHRH(I,K)-CR1(I))/XCRH1(I))
CYH       CL1(I) = CL1(I)**4
          CL1(I) = CL1(I)*CL1(I)*CL1(I)
          IF (CL1(I).GT.1.0 E 0)
     1      CL1(I) = 1. E 0 + SQRT((RHRH(I,K)-CR2(I))/XCRH2(I))
 110    CONTINUE
        DO 120 I=1,IDIMT
          IF (BITX(I)) THEN
            CLDARY(I,K) = AMIN1(1.0 E 0, 0.5 E 0*CL1(I))
          END IF
 120    CONTINUE
 130  CONTINUE
C ------------------------------------------------------------------
C     SPECIAL TREATMENT ON LOW CLOUDS
C ------------------------------------------------------------------
      DVVCLD = VVCLD(1) - VVCLD(2)
      RCLAP = 1.0 E 0 / (0.8 E 0 - CRHRH)
      DO 180 I=1,IDIMT
        KBASE(I) = 0
 180  CONTINUE
C
      DO 350 K=KLOWB,KLOWT
C
        DO 190 I=1,IDIMT
          OMEG(I) = 10.0 E 0 * VVEL(I,K)
          CL1 (I) = 0.0 E 0
 190    CONTINUE
        IF (IVVA .LE. 0) GO TO 250
C --- VERTICAL VELOCITY ADJUSTMENT ON LOW CLOUDS
        BIT1 = .FALSE.
        DO 210 I=1,IDIMT
          BITX(I) = PRSLY(I,K).GE.PTOP1(2) .AND. CLDARY(I,K).GT.0.0 E 0
          BIT1 = BIT1 .OR. BITX(I)
 210    CONTINUE
        IF (.NOT. BIT1) GO TO 250
        DO 220 I=1,IDIMT
          BITY(I) = BITX(I) .AND. (OMEG(I).GE.VVCLD(1))
          BITZ(I) = BITX(I) .AND. (OMEG(I).LT.VVCLD(1))
     1                      .AND. (OMEG(I).GT.VVCLD(2))
          CL2 (I) = (VVCLD(1) - OMEG(I)) / DVVCLD
 220    CONTINUE
        DO 230 I=1,IDIMT
          IF (BITY(I)) CLDARY(I,K) = 0.0 E 0
C         IF (BITZ(I)) CLDARY(I,K) = CLDARY(I,K) * CL2(I)
          IF (BITZ(I)) CLDARY(I,K) = CLDARY(I,K) * SQRT(CL2(I))
 230    CONTINUE
C --- T INVERSION RELATED STRATUS CLOUDS
 250    IF (INVR .LT. 1) GO TO 350
        BIT1 = .FALSE.
        DO 260 I=1,IDIMT
          BITX(I) = PRSLY(I,K).GE.PSTRT .AND. SLMSK(I).LE.0.0
     1              .AND. DTHDP(I,K).LE.CLAPSE
CYH  2              .AND. OMEG (I).GT.0.0
          BIT1 = BIT1 .OR. BITX(I)
 260    CONTINUE
        IF (.NOT. BIT1) GO TO 350
        DO 270 I=1,IDIMT
          IF ( KBASE(I).EQ.0  .AND. RHRH(I,K).GT.CRHRH .AND. BITX(I) )
     1      KBASE(I) = K
 270    CONTINUE
        DO 280 I=1,IDIMT
          BITY(I) = KBASE(I).GT.0 .AND. BITX(I) .AND.
     1        CLDARY(I,K+1).LE.0.1 E -1 .AND. CLDARY(I,K+2).LE.0.1 E -1
          BITZ(I) = BITY(I) .AND. RHRH(I,KBASE(I)).LT.0.8 E 0
 280    CONTINUE
        DO 290 I=1,IDIMT
          IF (BITY(I)) CL1(I) = AMIN1(1.0 E 0,
     1      AMAX1(0.0 E 0,  16.67 E 0*(CLAPSE-DTHDP(I,K)) ))
          IF (BITZ(I))
     1      CL1(I) = CL1(I) * (RHRH(I,KBASE(I))-CRHRH) * RCLAP
 290    CONTINUE
C --- FOR T INVERSION TYPE CLOUD, ADD FLAG VALUE OF 2.0
        DO 300 I=1,IDIMT
          IF (BITY(I)) THEN
            CLDARY(I,K) = AMAX1(CLDARY(I,K), CL1(I)) + 2.0 E 0
          END IF
 300    CONTINUE
 350  CONTINUE
C ------------------------------------------------------------------
      END IF
C ------------------------------------------------------------------
      IF (ISTRAT.GT.0) THEN
CTUNE
C ------------------------------------------------------------------
C     CALCULATE STRATIFORM CLOUD AND PUT INTO ARRAY 'CLDARY' USING
C       THE CLOUD-REL.HUMIDITY RELATIONSHIP FROM TABLE LOOK-UP..WHERE
C       TABLES OBTAINED USING K.MITCHELL FREQUENCY DISTRIBUTION TUNING
C        (OBSERVATIONS ARE DAILY MEANS FROM US AF RTNEPH).....K.A.C.
C       TABLES CREATED WITHOUT LOWEST 10 PERCENT OF ATMOS.....K.A.C.
CVINT   TABLES INTERPOLATED VERTICALLY BETWEEN CLOUD TYPES
CVINT    WHEN WITHIN 1 LAYER OF H/M AND M/L BOUNDING SURFACE..K.A.C.
C ------------------------------------------------------------------
CVINT
C.    FIND MODEL LAYER JUST ABOVE EACH CLD DOMAIN BOUNDARY
      DO 817 I=1,IDIMT
       DO 816 KEN=1,MCLD1
        DO 815 KLEV=1,KDIM
          IF (PRSLY(I,KLEV).LE.PTOP1(KEN+1)) THEN
           LCBDRY(I,KEN) = KLEV
           GO TO 816
          END IF
  815   CONTINUE
  816  CONTINUE
  817 CONTINUE
CVINT
CKAC  DO 830 KLEV=3,LEVM2
      DO 830 KLEV=KLOWB,LEVM2
C....     WHICH CLOUD TYPE...L,M,H ?
        DO 825 I=1,IDIMT
         CL1(I) = 0. E 0
         K=0
         DO 820 KC=1,MCLD
          IF(PRSLY(I,KLEV).GE.PTOP1(KC+1)) THEN
            K = KC
            GO TO 821
          END IF
 820     CONTINUE
CKC      PRINT 92,I,KLEV
CK92     FORMAT(1H ,'..CANNOT PLACE SIGLYR INTO HML FOR I,KLEV=',2I5)
         GO TO 825
 821     CONTINUE
CVINT
         DO 826 IT=1,NBIN
          CLDTBL(IT) = RHCLD(I,IT,K)
  826    CONTINUE
         DO 827 NBDY=1,MCLD1
          LLDOM = LCBDRY(I,NBDY)
          LOBDY = LLDOM - 1
          IF (KLEV.LE.LLDOM.AND.KLEV.GE.LOBDY) THEN
C...  VERTICALLY INTERPOLATE THE CH/RH RELATIONS, LINEAR IN PRESSURE
           DO 838 IT=1,NBIN
            CLDTBL(IT) = RHCLD(I,IT,NBDY+1) +
     1            (RHCLD(I,IT,NBDY)-RHCLD(I,IT,NBDY+1)) *
     2            (PRSLY(I,KLEV)-PRSLY(I,LLDOM+1)) /
     3                (PRSLY(I,LLDOM-2)-PRSLY(I,LLDOM+1))
  838      CONTINUE
          END IF
  827    CONTINUE
CVINT
C.....  TABLE LOOKUP FOR CLOUD FRACTION
C....     IF MODEL STRATOSPHERE THEN SKIP
         IF (KLEV.GT.KCUT(I)) GO TO 825
C......IS RH GT RHCRIT?......
CVINT    IF (RHRH(I,KLEV).GT.RHCLD(I,1,K)) THEN
         IF (RHRH(I,KLEV).GT.CLDTBL(1)) THEN
          DO 1941 IT=2,NBIN
           ITBL = IT - 1
CVINT      IF (RHRH(I,KLEV).LT.RHCLD(I,IT,K)) THEN
           IF (RHRH(I,KLEV).LT.CLDTBL(IT)) THEN
            GO TO 1942
           END IF
 1941     CONTINUE
          CL1(I) = 1. E 0
          GO TO 825
 1942     CONTINUE
C....  LINEAR INTERPOLATE FROM TABLE VALUES
          CL1(I) = ITBL*.01 E 0 +
CVINT1            .01 E 0 * (RHRH(I,KLEV)-RHCLD(I,ITBL,K)) /
CVINT2             (RHCLD(I,ITBL+1,K) - RHCLD(I,ITBL,K))
     1            .01 E 0 * (RHRH(I,KLEV)-CLDTBL(ITBL)) /
     2             (CLDTBL(ITBL+1) - CLDTBL(ITBL))
          IF (CL1(I).GT.1. E 0) THEN
           PRINT 1944,K,I,CL1(I)
           CL1(I) = 1. E 0
          END IF
 1944    FORMAT(1H ,'..BAD CLD LYR,I=',I4,I6,'..CLD=',E12.3)
         END IF
  825   CONTINUE
        DO 828 I=1,IDIMT
         CLDARY(I,KLEV) = AMIN1(1.0 E 0, CL1(I))
  828   CONTINUE
  830 CONTINUE
C.... CLEAN OUT NOT-SUSPECTED MARINE STRATUS REGIONS...
C      CAUSE TUNING PROCEDURE NOT CARRIED OUT DOWN TO LYR3 AND WE
C      GET TOO MUCH LO CLOUD IF WE DON T CLEAN IT OUT..
      DO 831 I=1,IDIMT
       BITM(I) = .FALSE.
       KBASE(I) = 0
  831 CONTINUE
CKAC  DO 833 K=3,LLYR
      DO 833 K=KLOWB,LLYR
       DO 832 I=1,IDIMT
        IF (BITM(I)) GO TO 832
        BITM(I) = PRSLY(I,K).GE.PSTRT
     1         .AND. SLMSK(I).LE.0.0 .AND. DTHDP(I,K).LE.CLAPKC.AND.
CKC  2        CLDARY(I,K+1).LE.0.005 E 0.AND.CLDARY(I,K+2).LE.0.005 E 0
CKAC 2        RHRH (I,K+1).LE.0.80 E 0.AND.RHRH (I,K+2).LE.0.80 E 0
     2        RHRH (I,K+1).LE.0.60 E 0.AND.RHRH (I,K+2).LE.0.60 E 0
        KBASE(I) = K
  832   CONTINUE
  833 CONTINUE
      DO 835 K=1,LLYR
       DO 834 I=1,IDIMT
        IF(BITM(I)) GO TO 834
        CLDARY(I,K) = 0.0 E 0
  834  CONTINUE
  835 CONTINUE
C ------------------------------------------------------------------
C     SPECIAL TREATMENT ON LOW CLOUDS
C ------------------------------------------------------------------
      DVVCLD = VVCLD(1) - VVCLD(2)
C
CKAC  DO 950 K=3,KLOW
      DO 950 K=KLOWB,KLOW
C
        DO 904 I=1,IDIMT
          OMEG(I) = 10.0 E 0 * VVEL(I,K)
          CL1 (I) = 0.0 E 0
 904    CONTINUE
CYH94   IF (IVVA .LT. 1) GO TO 920
        IF (IVVA .LE. 0) GO TO 920
C --- VERTICAL VELOCITY ADJUSTMENT ON LOW CLOUDS
        BIT1 = .FALSE.
        DO 906 I=1,IDIMT
          BITX(I) = PRSLY(I,K).GE.PTOP1(2) .AND. CLDARY(I,K).GT.0.0 E 0
          BIT1 = BIT1 .OR. BITX(I)
 906    CONTINUE
        IF (.NOT. BIT1) GO TO 920
        DO 908 I=1,IDIMT
          BITY(I) = BITX(I) .AND. (OMEG(I).GE.VVCLD(1))
          BITZ(I) = BITX(I) .AND. (OMEG(I).LT.VVCLD(1))
     1                      .AND. (OMEG(I).GT.VVCLD(2))
          CL2 (I) = (VVCLD(1) - OMEG(I)) / DVVCLD
 908    CONTINUE
        DO 910 I=1,IDIMT
C....    NO VVEL FILTER FOR MARINE STRATUS REGION
          IF (BITM(I)) THEN
           IF(K.LE.LLYR) GO TO 910
          END IF
          IF (BITY(I)) CLDARY(I,K) = 0.0 E 0
C         IF (BITZ(I)) CLDARY(I,K) = CLDARY(I,K) * CL2(I)
          IF (BITZ(I)) CLDARY(I,K) = CLDARY(I,K) * SQRT(CL2(I))
 910    CONTINUE
C --- T INVERSION RELATED STRATUS CLOUDS
 920    IF (INVR .LT. 1) GO TO 950
        IF (K.GT.LLYR) GO TO 950
        BIT1 = .FALSE.
        DO 930 I=1,IDIMT
          BIT1 = BIT1 .OR. BITM(I)
 930    CONTINUE
        IF (.NOT. BIT1) GO TO 950
        DO 940 I=1,IDIMT
         IF (BITM(I)) THEN
          IF (DTHDP(I,KBASE(I)).GT.CLPSE) THEN
C---   SMOOTH TRANSITION FOR CLOUD WHEN DTHDP BETWEEN
C           CLAPSE AND CLAPSE+DCLPS  (-0.05 AND -0.06)
           CFILTR = 1.0 E 0 - ((CLPSE - DTHDP(I,KBASE(I))) / DCLPS)
           CLDARY(I,K) = CLDARY(I,K)*CFILTR
          END IF
C --- FOR T INVERSION TYPE CLOUD, ADD FLAG VALUE OF 2.0
          CLDARY(I,K) = CLDARY(I,K)+2.0 E 0
         END IF
 940    CONTINUE
 950  CONTINUE
C ------------------------------------------------------------------
      END IF
CTUNE
C ------------------------------------------------------------------
C     ADD CONVECTIVE CLOUD INTO 'CLDARY', NO MERGE AT THIS POINT..
C     TWO TYPES OF CLOUDS ARE SEPARATED BY A FACTOR OF 1.0E+4
C ------------------------------------------------------------------
 360  BIT1 = .FALSE.
      DO 370 I=1,IDIMT*3
        FACV(I,1) = 1.0 E 0
 370  CONTINUE
      DO 380 I=1,IDIMT
        KCVB(I) = 1
        KCVT(I) = 1
        BITX(I) = CV(I).GT.0.0 E 0 .AND. CVT(I).GE.CVB(I)
        BIT1 = BIT1 .OR. BITX(I)
 380  CONTINUE
      IF (.NOT. BIT1) GO TO 550
      DO 390 I=1,IDIMT
        IF (BITX(I)) THEN
          KCVB(I) = NINT(CVB(I))
          KCVT(I) = MIN(LEVM2, NINT(CVT(I)))
        END IF
 390  CONTINUE
CKAC  DO 450 K=KLOWB,LEVM2
      DO 450 K=KLOWB,LEVM2
        BIT2 = .FALSE.
        DO 400 I=1,IDIMT
          BITY(I) = BITX(I) .AND. KCVB(I).LE.K .AND. KCVT(I).GE.K
          BIT2 = BIT2 .OR. BITY(I)
 400    CONTINUE
        IF (.NOT. BIT2) GO TO 450
        DO 420 I=1,IDIMT
          IF (BITY(I)) CLDARY(I,K) = CLDARY(I,K)
     1               + 10.0 E 0 * AINT(1.0 E 3 * CV(I))
 420    CONTINUE
 450  CONTINUE
C     IF MEAN CVT LAYER HIGHER THAN 400MB ADD ANVIL CIRRUS
      BIT2 = .FALSE.
      DO 460 I=1,IDIMT
        BITZ(I) = BITX(I) .AND. PRSLY(I,KCVT(I)).LE.CVTOP
        BIT2 = BIT2 .OR. BITZ(I)
 460  CONTINUE
      IF (.NOT. BIT2) GO TO 500
      DO 480 I=1,IDIMT
        IF (BITZ(I)) THEN
CKAC      KK = KCVT(I) + 1
          KK = KCVT(I)
          CL1(I) = AMAX1(0.0 E 0, AMIN1(1.0 E 0, 2.0 E 0*(CV(I)-0.3 E 0)
     1))
C....    GET STRATUS BACK BEFORE DOING ANVIL CALCULATION
          CL2(I) = AMOD(CLDARY(I,KK),10. E 0)
          CLDARY(I,KK) = CL2(I) + 10.0 E 0*AINT(1.0 E 3*CL1(I))
CKAC      CLDARY(I,KK) = CLDARY(I,KK) + 10.0 E 0*AINT(1.0 E 3*CL1(I))
        END IF
 480  CONTINUE
C -------------------------------------------------------------------
C     SEPARATE CLOUDS INTO 3 PRESSURE DOMAINS (L,M,H).  WITHIN EACH
C     OF THE DOMAINS, ASSUME SEPARATED CLOUD LAYERS ARE RADOMLY
C     OVERLAPPED AND ADJACENT CLOUD LAYERS ARE MAXIMUM OVERLAPPED.
C     VERTICAL LOCATION OF EACH TYPE OF CLOUD IS DETERMINED BY
C     THE THICKEST CONTINUING CLOUD LAYERS IN THE DOMAIN.
C     DEEP CONVECTIVE CLOUD SPAN MORE THAN 1 DOMAIN WILL BE MULTIPLIED
C     BY A FACTOR FOR EACH OF THE DOMAINS.
C -------------------------------------------------------------------
 500  CONTINUE
      DO 520 L=1,2
      DO 520 I=1,IDIMT
        IF (BITX(I) .AND. PRSLY(I,KCVB(I)).GE.PTOP1(L+1)
     1              .AND. PRSLY(I,KCVT(I)).LT.PTOP1(L+1)) THEN
CYH94     FACV(I,L)   = AMAX1(0.30 E 0, 0.80 E 0*FACV(I,L))
          FACV(I,L)   = AMAX1(0.35 E 0, 0.80 E 0*FACV(I,L))
CYH94     FACV(I,L+1) = 0.30 E 0
          FACV(I,L+1) = 0.35 E 0
        END IF
 520  CONTINUE
 550  CONTINUE
C     DO 552 I=1,64,10
C     WRITE(6,551) I,(CLDARY(I,K),K=1,KDIM)
C551  FORMAT(' IN CLDNEW: I=',I3,' CLDARY(I,K)=',8E10.2/10X,10E10.2)
C552  CONTINUE
CYH94 FOVP = 1.0 E 0 / ANINT(FLOAT(KDIM) / 9.0 E 0)
C --- LOOP OVER 3 CLOUD DOMAINS (L,M,H)
      DO 750 L=1,3
C
        DO 580 I=1,IDIMT
          CLD (I,L) = 0.0 E 0
          MTOP(I,L) = 1
          MBOT(I,L) = 1
          CL1 (I) = 0.0 E 0
          CL2 (I) = 0.0 E 0
          KBT1(I) = 1
          KBT2(I) = 1
          KTH1(I) = 0
          KTH2(I) = 0
 580    CONTINUE
C
        DO 700 K=2,LEVM2
          BIT1 = .FALSE.
          DO 600 I=1,IDIMT
            CR1 (I) = AMOD(CLDARY(I,K),10.0 E 0)
            CR2 (I) = (CLDARY(I,K)-CR1(I)) * 1.0 E -4
            BITX(I) = (PRSLY(I,K).GE.PTOP1(L+1)) .AND.
     1        (PRSLY(I,K).LT.PTOP1(L)) .AND. (CLDARY(I,K).GT.0.0 E 0)
            BIT1 = BIT1 .OR. BITX(I)
 600      CONTINUE
          IF (.NOT. BIT1) GO TO 700
          DO 610 I=1,IDIMT
            CR1(I)  = AMOD(CR1(I), 2.0 E 0)
            CR3(I)  = (CR1(I) + CR2(I) - CR1(I)*CR2(I)) * FACV(I,L)
 610      CONTINUE
C --- BITY=T: 1ST CLD LAYER, BITZ=T: CONSECUTIVE CLD LAYER.
          DO 620 I=1,IDIMT
            BITY(I) = BITX(I) .AND. (KTH2(I).LE.0)
            BITZ(I) = BITX(I) .AND. (KTH2(I).GT.0)
 620      CONTINUE
          DO 630 I=1,IDIMT
            IF (BITY(I)) THEN
              KBT2(I) = K
              KTH2(I) = 1
            END IF
            IF (BITZ(I)) KTH2(I) = KTH2(I) + 1
 630      CONTINUE
          DO 635 I=1,IDIMT
            IF (BITX(I)) CL2 (I) = AMAX1(CL2(I), CR3(I))
 635      CONTINUE
C --- AT THE DOMAIN BOUNDARY OR SEPARATED CLD LYRS, RANDOM OVERLAP.
C     CHOOSE THE THICKEST OR THE LARGEST FRACTION AMT AS THE CLD
C     LAYER IN THAT DOMAIN
          BIT2 = .FALSE.
          DO 640 I=1,IDIMT
            BITY(I) = BITX(I) .AND. (CLDARY(I,K+1).LE.0.0 E 0
     1                         .OR.  PRSLY(I,K+1).LT.PTOP1(L+1) )
            BITZ(I) = BITY(I) .AND. CL1(I).GT.0.0 E 0
            BITX(I) = BITY(I) .AND. CL1(I).LE.0.0 E 0
            BIT2 = BIT2 .OR. BITY(I)
 640      CONTINUE
          IF (.NOT. BIT2) GO TO 700
          DO 660 I=1,IDIMT
            IF (BITZ(I)) THEN
              KBT1(I) = INT( (CL1(I)*KBT1(I) + CL2(I)*KBT2(I))
     1                     / (CL1(I) + CL2(I)) )
              KTH1(I) = NINT( (CL1(I)*KTH1(I) + CL2(I)*KTH2(I))
     1                      / (CL1(I) + CL2(I)) ) + 1
              CL1 (I) = CL1(I) + CL2(I) - CL1(I)*CL2(I)
            END IF
 660      CONTINUE
          DO 670 I=1,IDIMT
            IF (BITX(I)) THEN
              KBT1(I) = KBT2(I)
              KTH1(I) = KTH2(I)
              CL1 (I) = CL2 (I)
            END IF
 670      CONTINUE
          DO 680 I=1,IDIMT
            IF (BITY(I)) THEN
              KBT2(I) = 1
              KTH2(I) = 0
              CL2 (I) = 0.0 E 0
            END IF
 680      CONTINUE
 700    CONTINUE
C --- FINISH ONE DOMAIN, SAVE EFFECTIVE CLOUDS
        DO 720 I=1,IDIMT
          CLD(I,L) =  CL1(I)
          MTOP(I,L) = MAX(KBT1(I), KBT1(I)+KTH1(I)-1)
          MBOT(I,L) = KBT1(I)
 720    CONTINUE
 750  CONTINUE
C --- LOOP OVER 3 CLOUD DOMAINS (L,M,H)...get convective clouds
      DO 1750 L=4,6
C
        DO 1580 I=1,IDIMT
          CLD (I,L) = 0.0
creanl          MTOP(I,L) = 1
creanl          MBOT(I,L) = 1
          CL1 (I) = 0.0
          CL2 (I) = 0.0
          KBT1(I) = 1
          KBT2(I) = 1
          KTH1(I) = 0
          KTH2(I) = 0
 1580   CONTINUE
C
        DO 1700 K=2,LEVM2
          BIT1 = .FALSE.
          DO 1600 I=1,IDIMT
            BITX(I) = (PRSLY(I,K).GE.PTOP1(L-2)) .AND.
     1        (PRSLY(I,K).LT.PTOP1(L-3)) .AND. (CLDARY(I,K).GT.0.0)
            BIT1 = BIT1 .OR. BITX(I)
 1600     CONTINUE
          IF (.NOT. BIT1) GO TO 1700
          DO 1630 I=1,IDIMT
            CR2(I)  = FLOAT(INT(CLDARY(I,K)) / 10) * 1.0E-3
            IF (BITX(I)) THEN
              IF(KTH2(I).LE.0) THEN
C --- KTH2 LE 0 : 1ST CLD LAYER.
                KBT2(I) = K
                KTH2(I) = 1
              ELSE
C --- KTH2 GT 0 : CONSECUTIVE CLD LAYER.
                KTH2(I) = KTH2(I) + 1
              ENDIF
C ---     ANVIL CIRRUS NOT RANDOM OVERLAPPED WITH CV TOWER AS
C ...      IN RADIATION CODE(SO HI MAY BE SLIGHT UNDERESTIMATE)....
              IF (CR2(I).GT.0.0) THEN
               CL2 (I) = AMAX1(CL2(I), CR2(I))
              END IF
            ENDIF
 1630     CONTINUE
          BIT2 = .FALSE.
C....  BITY=TRUE IF NEXT LYR=CLEAR OR WE CHANGE CLOUD DOMAINS..
          DO 1640 I=1,IDIMT
            CR2(I)  = FLOAT(INT(CLDARY(I,K+1)) / 10) * 1.0E-3
creanl       BITY(I) = BITX(I) .AND. (CLDARY(I,K+1).LE.0.0E0
            BITY(I) = BITX(I) .AND. (CR2(I).LE.0.0E0
     1                         .OR.  PRSLY(I,K+1).LT.PTOP1(L-2) )
            BIT2 = BIT2 .OR. BITY(I)
 1640     CONTINUE
          IF (.NOT. BIT2) GO TO 1700
C --- AT THE DOMAIN BOUNDARY OR SEPARATED CLD LYRS, RANDOM OVERLAP.
C     CHOOSE THE THICKEST OR THE LARGEST FRACTION AMT AS THE CLD
C     LAYER IN THAT DOMAIN
          DO 1650 I=1,IDIMT
            IF (BITY(I)) THEN
              IF (CL1(I).GT.0.0E0) THEN
                KBT1(I) = INT( (CL1(I)*KBT1(I) + CL2(I)*KBT2(I))
     1                       / (CL1(I) + CL2(I)) )
                KTH1(I) = NINT( (CL1(I)*KTH1(I) + CL2(I)*KTH2(I))
     1                        / (CL1(I) + CL2(I)) ) + 1
                CL1 (I) = CL1(I) + CL2(I) - CL1(I)*CL2(I)
              ELSE
                KBT1(I) = KBT2(I)
                KTH1(I) = KTH2(I)
                CL1 (I) = CL2 (I)
              ENDIF
              KBT2(I) = 1
              KTH2(I) = 0
              CL2 (I) = 0.0E0
            ENDIF
 1650     CONTINUE
 1700   CONTINUE
C --- FINISH ONE DOMAIN, SAVE EFFECTIVE CLOUDS
        DO 1720 I=1,IDIMT
          CLD(I,L) =  CL1(I)
creanl          MTOP(I,L) = MAX(KBT1(I), KBT1(I)+KTH1(I)-1)
creanl          MBOT(I,L) = KBT1(I)
 1720   CONTINUE
 1750 CONTINUE
C --- LOOP OVER 3 CLOUD DOMAINS (L,M,H)...get rel humidity clouds
      DO 2750 L=7,9
C
        DO 2580 I=1,IDIMT
          CLD (I,L) = 0.0E0
          CL1 (I) = 0.0E0
          CL2 (I) = 0.0E0
          KBT1(I) = 1
          KBT2(I) = 1
          KTH1(I) = 0
          KTH2(I) = 0
 2580   CONTINUE
C
        DO 2700 K=2,LEVM2
          BIT1 = .FALSE.
          DO 2600 I=1,IDIMT
            BITX(I) = (PRSLY(I,K).GE.PTOP1(L-5)) .AND.
     1        (PRSLY(I,K).LT.PTOP1(L-6)) .AND. (CLDARY(I,K).GT.0.0E0)
            BIT1 = BIT1 .OR. BITX(I)
 2600     CONTINUE
          IF (.NOT. BIT1) GO TO 2700
          DO 2630 I=1,IDIMT
            CR1(I)  = AMOD(CLDARY(I,K), 2.0E0)
            IF (BITX(I)) THEN
              IF(KTH2(I).LE.0) THEN
C --- KTH2 LE 0 : 1ST CLD LAYER.
                KBT2(I) = K
                KTH2(I) = 1
              ELSE
C --- KTH2 GT 0 : CONSECUTIVE CLD LAYER.
                KTH2(I) = KTH2(I) + 1
              ENDIF
C ---  PHYSICAL CLOUD AS SEEN BY RADIATION..relative humidity type
              IF (CR1(I).GT.0.0E0) THEN
               CL2 (I) = AMAX1(CL2(I), CR1(I))
              END IF
            ENDIF
 2630     CONTINUE
          BIT2 = .FALSE.
C....  BITY=TRUE IF NEXT LYR=CLEAR OR WE CHANGE CLOUD DOMAINS..
          DO 2640 I=1,IDIMT
            CR1(I)  = AMOD(CLDARY(I,K+1), 2.0E0)
creanl       BITY(I) = BITX(I) .AND. (CLDARY(I,K+1).LE.0.0E0
            BITY(I) = BITX(I) .AND. (CR1(I).LE.0.0
     1                         .OR.  PRSLY(I,K+1).LT.PTOP1(L-5) )
            BIT2 = BIT2 .OR. BITY(I)
 2640     CONTINUE
          IF (.NOT. BIT2) GO TO 2700
C --- AT THE DOMAIN BOUNDARY OR SEPARATED CLD LYRS, RANDOM OVERLAP.
C     CHOOSE THE THICKEST OR THE LARGEST FRACTION AMT AS THE CLD
C     LAYER IN THAT DOMAIN
          DO 2650 I=1,IDIMT
            IF (BITY(I)) THEN
              IF (CL1(I).GT.0.0E0) THEN
                KBT1(I) = INT( (CL1(I)*KBT1(I) + CL2(I)*KBT2(I))
     1                       / (CL1(I) + CL2(I)) )
                KTH1(I) = NINT( (CL1(I)*KTH1(I) + CL2(I)*KTH2(I))
     1                        / (CL1(I) + CL2(I)) ) + 1
                CL1 (I) = CL1(I) + CL2(I) - CL1(I)*CL2(I)
              ELSE
                KBT1(I) = KBT2(I)
                KTH1(I) = KTH2(I)
                CL1 (I) = CL2 (I)
              ENDIF
              KBT2(I) = 1
              KTH2(I) = 0
              CL2 (I) = 0.0
            ENDIF
 2650     CONTINUE
 2700   CONTINUE
C --- FINISH ONE DOMAIN, SAVE EFFECTIVE CLOUDS
        DO 2720 I=1,IDIMT
          CLD(I,L) =  CL1(I)
 2720   CONTINUE
 2750 CONTINUE

      RETURN
      END
      SUBROUTINE OMEGAS(NX,NXS,NZ,
     1      DPHI,DLAM,CG,UG,VG,DG,DEL,RCL,VVEL,PS,SL)
CFPP$ NOCONCUR R
C....   CODE LIFTED FROM POST (MCP1840) JUN 88--COMPUTES VVEL (CB/SEC)
C....    INPUT PS IN CB,OUTPUT VVEL IN CB/SEC
C....   DO LOOPS ALTERED FOR BETTER VECTORIZATION POSSIBILITIES..K.A.C.
      DIMENSION DPHI(NXS),DLAM(NXS),
     1 CG(NX,NZ),UG(NXS,NZ),VG(NXS,NZ),
     2 DG(NXS,NZ),DEL(NZ),PS(NXS),SL(NZ)
C...   VVEL CONTAINS OMEGA IN LAYERS ON RETURN FROM SUBROUTINE...
      DIMENSION VVEL(NX,NZ)
      DIMENSION DB(NX,NZ),CB(NX,NZ),DOT(NX,NZ+1)
      DO 1 K=1,NZ+1
        DO 1 LO=1,NX
          DOT(LO,K) = 0. E 0
    1 CONTINUE
C...  COMPUTE C=V(TRUE)*DEL(LN(PS)).DIVIDE BY COS FOR DEL COS FOR V
      DO 3 LO=1,NX
        DPHI(LO)=DPHI(LO)*RCL
        DLAM(LO)=DLAM(LO)*RCL
    3 CONTINUE
      DO 5 LE=1,NZ
        DO 4 LO=1,NX
          CG(LO,LE)=UG(LO,LE)*DLAM(LO)+VG(LO,LE)*DPHI(LO)
    4   CONTINUE
    5 CONTINUE
      DO 10 LO=1,NX
        DB(LO,1)=DEL(1)*DG(LO,1)
        CB(LO,1)=DEL(1)*CG(LO,1)
   10 CONTINUE
      DO 6 LE=1,NZ-1
        DO 6 LO=1,NX
          DB(LO,LE+1)=DB(LO,LE)+DEL(LE+1)*DG(LO,LE+1)
          CB(LO,LE+1)=CB(LO,LE)+DEL(LE+1)*CG(LO,LE+1)
    6 CONTINUE
C...    SIGMA DOT COMPUTED ONLY AT INTERIOR INTERFACES
      DO 7 K=1,NZ-1
        DO 7 LO=1,NX
          DOT(LO,K+1)=DOT(LO,K)+DEL(K)
     1               *(DB(LO,NZ)+CB(LO,NZ)-DG(LO,K)-CG(LO,K))
    7 CONTINUE
      DO 8 K=1,NZ
        DO 8 LO=1,NX
          VVEL(LO,K)=  SL(K)*(CG(LO,K)-CB(LO,NZ)-DB(LO,NZ))-
     1                0.5*(DOT(LO,K+1)+DOT(LO,K))
          VVEL(LO,K)=VVEL(LO,K)*PS(LO)
CCC       VVEL(LO,K)=VVEL(LO,K)*PS(LO)*10.
    8 CONTINUE
      RETURN
      END
      SUBROUTINE CLDIAG(AVECLA,CLDLA,AVECLB,CLDLB,CLO,MTL,MBL,
creanl2     1                  CMID,MTM,MBM,CHI,MTH,MBH)
     1                  CMID,MTM,MBM,CHI,MTH,MBH,
     2                  cvlo,cvmi,cvhi,rhlo,rhmi,rhhi)
CFPP$ NOCONCUR R
      PARAMETER (IDIM= 256 ,JDIM= 62 ,KDIM= 28 ,LEVP1=KDIM+1)
      PARAMETER (IDIMH=IDIM/2)
creanl2    compute totcv from max overlap of cv and
creanl2            totcrh from random overlap of rh clouds
creanl2    zonal average clds change from 4 to 12 numbers
creanl2      DIMENSION AVECLA(KDIM),CLDLA(4)
creanl2      DIMENSION AVECLB(KDIM),CLDLB(4)
      DIMENSION AVECLA(KDIM),CLDLA(12)
      DIMENSION AVECLB(KDIM),CLDLB(12)
      DIMENSION CLDSUM(IDIM,KDIM)
      DIMENSION CHI(IDIM),MTH(IDIM),MBH(IDIM)
      DIMENSION CMID(IDIM),MTM(IDIM),MBM(IDIM)
      DIMENSION CLO(IDIM),MTL(IDIM),MBL(IDIM)
      DIMENSION CHIH(IDIM),CTHH(IDIM),CBHH(IDIM)
      DIMENSION CMIDH(IDIM),CTMH(IDIM),CBMH(IDIM)
      DIMENSION CLOH(IDIM),CTLH(IDIM),CBLH(IDIM)
      DIMENSION CTOT(IDIM),CLD(IDIM,4),CTOP(IDIM,3),
     1          CBOT(IDIM,3)
      DIMENSION cvhi(IDIM),cvmi(IDIM),cvlo(IDIM)
      DIMENSION rhhi(IDIM),rhmi(IDIM),rhlo(IDIM)
      EQUIVALENCE (CLOH(1),CLD(1,1)),(CMIDH(1),CLD(1,2)),
     1            (CHIH(1),CLD(1,3)),(CTOT(1),CLD(1,4))
      EQUIVALENCE (CTLH(1),CTOP(1,1)),(CTMH(1),CTOP(1,2)),
     1            (CTHH(1),CTOP(1,3))
      EQUIVALENCE (CBLH(1),CBOT(1,1)),(CBMH(1),CBOT(1,2)),
     1            (CBHH(1),CBOT(1,3))
      DATA NUMPTS / IDIMH /
      DO 11 I=1,IDIM
        CHIH(I) = CHI(I)
        CTHH(I) = MTH(I)
        CBHH(I) = MBH(I)
        CMIDH(I) = CMID(I)
        CTMH(I) = MTM(I)
        CBMH(I) = MBM(I)
        CLOH(I) = CLO(I)
        CTLH(I) = MTL(I)
        CBLH(I) = MBL(I)
   11 CONTINUE
      DO 12 K=1,KDIM
        DO 12 I=1,IDIM
          CLDSUM(I,K) = 0. E 0
   12 CONTINUE
      DO 1 K=1,KDIM
        AVECLA(K) = 0. E 0
        AVECLB(K) = 0. E 0
    1 CONTINUE
creanl2      DO 2 K=1,4
      do 2 k=1,12
        CLDLA(K) = 0. E 0
        CLDLB(K) = 0. E 0
    2 CONTINUE
C...   GET TOP AND BOT SIG LYR OF CLD IN MODEL COORDINATES
      DO 4 K=1,3
      DO 3 L=1,KDIM
        DO 3 I=1,IDIM
CCC       ITOP = LEVP1 - CTOP(I,K)/2 + 1
CCC       IBOT = LEVP1 - CBOT(I,K)/2 + 1
          ITOP = CTOP(I,K)
          IBOT = CBOT(I,K)
          IF (L.GE.IBOT .AND. L.LE.ITOP .AND.
     1        IBOT.LE.KDIM .AND. ITOP.GT.0)
     2      CLDSUM(I,L) = CLDSUM(I,L) + CLD(I,K)
    3 CONTINUE
    4 CONTINUE
      DO 7 K=1,KDIM
        DO 7 I=1,IDIMH
          AVECLA(K) = AVECLA(K) + CLDSUM(I,K)
          AVECLB(K) = AVECLB(K) + CLDSUM(I+IDIMH,K)
    7 CONTINUE
C...   COMPUTE TOTAL CLOUD FROM H,M,L USING RANDOM OVERLAP..
      DO 5 I=1,IDIM
        CH = CHI(I)
        CM = (1. E 0-CH) * CMID(I)
        CL = (1. E 0-CH-CM) * CLO(I)
        CTOT(I) = CH + CM + CL
    5 CONTINUE
      DO 6 K=1,4
        DO 6 I=1,IDIMH
          CLDLA(K) = CLDLA(K) + CLD(I,K)
          CLDLB(K) = CLDLB(K) + CLD(I+IDIMH,K)
    6 CONTINUE
      DO 17 K=1,KDIM
        AVECLA(K) = AVECLA(K) / NUMPTS
        AVECLB(K) = AVECLB(K) / NUMPTS
   17 CONTINUE
      DO 8 K=1,4
        CLDLA(K) = CLDLA(K) / NUMPTS
        CLDLB(K) = CLDLB(K) / NUMPTS
    8 CONTINUE
C...   COMPUTE TOTAL cv CLOUD FROM H,M,L USING max OVERLAP..
      DO 25 I=1,IDIM
        CH = cvhi(i)
        CM = amax1(ch,cvmi(i))
        CL = amax1(cm,cvlo(i))
        CTOT(I) =  CL
   25 CONTINUE
      DO 26 I=1,IDIMH
        CLDLA(5) = CLDLA(5) + cvlo(I)
        CLDLB(5) = CLDLB(5) + cvlo(I+IDIMH)
        CLDLA(6) = CLDLA(6) + cvmi(I)
        CLDLB(6) = CLDLB(6) + cvmi(I+IDIMH)
        CLDLA(7) = CLDLA(7) + cvhi(I)
        CLDLB(7) = CLDLB(7) + cvhi(I+IDIMH)
        CLDLA(8) = CLDLA(8) + ctot(I)
        CLDLB(8) = CLDLB(8) + ctot(I+IDIMH)
   26 CONTINUE
      DO 28 K=5,8
        CLDLA(K) = CLDLA(K) / NUMPTS
        CLDLB(K) = CLDLB(K) / NUMPTS
   28 CONTINUE
C...   COMPUTE TOTAL rh CLOUD FROM H,M,L USING RANDOM OVERLAP..
      DO 35 I=1,IDIM
        CH = rhhi(I)
        CM = (1. E 0-CH) * rhmi(I)
        CL = (1. E 0-CH-CM) * rhlo(I)
        CTOT(I) = CH + CM + CL
   35 CONTINUE
      DO 36 I=1,IDIMH
        CLDLA(9) = CLDLA(9) + rhlo(I)
        CLDLB(9) = CLDLB(9) + rhlo(I+IDIMH)
        CLDLA(10) = CLDLA(10) + rhmi(I)
        CLDLB(10) = CLDLB(10) + rhmi(I+IDIMH)
        CLDLA(11) = CLDLA(11) + rhhi(I)
        CLDLB(11) = CLDLB(11) + rhhi(I+IDIMH)
        CLDLA(12) = CLDLA(12) + ctot(I)
        CLDLB(12) = CLDLB(12) + ctot(I+IDIMH)
   36 CONTINUE
      DO 38 K=9,12
        CLDLA(K) = CLDLA(K) / NUMPTS
        CLDLB(K) = CLDLB(K) / NUMPTS
   38 CONTINUE
      RETURN
      END
      SUBROUTINE CVDIAG(AVEN,AVES,CV,CVT,CVB)
      DIMENSION CV( 256 ),CVT( 256 ),CVB( 256 )
      DIMENSION AVEN(3),AVES(3)
      NPTNOR=0
      NPTSOU=0
      DO 10 K=1,3
        AVEN(K)=0. E 0
        AVES(K)=0. E 0
   10 CONTINUE
      DO 2 I=1, 128
        AVEN(1)=AVEN(1)+CV(I)
        AVES(1)=AVES(1)+CV(I+ 128 )
        IF(CV(I).LE.0. E 0) GO TO 1
        AVEN(2)=AVEN(2)+CVT(I)
        AVEN(3)=AVEN(3)+CVB(I)
        NPTNOR = NPTNOR + 1
    1   IF(CV(I+ 128 ).LE.0. E 0) GO TO 2
        AVES(2)=AVES(2)+CVT(I+ 128 )
        AVES(3)=AVES(3)+CVB(I+ 128 )
        NPTSOU = NPTSOU + 1
    2 CONTINUE
      AVEN(1)=AVEN(1)/ 128
      AVES(1)=AVES(1)/ 128
      IF(NPTNOR.GT.0) THEN
        AVEN(2)=AVEN(2)/NPTNOR
        AVEN(3)=AVEN(3)/NPTNOR
      ENDIF
      IF(NPTSOU.GT.0) THEN
        AVES(2)=AVES(2)/NPTSOU
        AVES(3)=AVES(3)/NPTSOU
      ENDIF
      RETURN
      END
      SUBROUTINE PROFZL(Y,YAV,COLRAD,FHOUR,LEV,LPRT)
      PARAMETER (IDIM= 128 ,JDIM= 62 ,KDIM= 28 ,JDIM2=JDIM/2)
C...   PROGRAM TO TAKE A HEIGHT-LATITUDE ARRAY, Y(K,LA),
C         AND PRODUCE 18 APPROX EQUI-DISTANCE LAT BELT AVE OVER GLOBE
C...   ALSO COMPUTE WEIGHTED GLOBAL MEANS OF CLOUDS (IPRT=3)
      DIMENSION Y(LEV,JDIM),YAV(LEV,18),COLRAD(JDIM2)
      DIMENSION GLOBL(9,KDIM)
      CHARACTER*44 LTITLE(5)
      CHARACTER*20 KTITLE
      dimension rlat(jdim), wgt(jdim), ib(18), ie(18)

      DATA NLAT/18/, JJ/JDIM2/ , LATLON/ 0 /
      DATA LTITLE/' LAT MEAN LYR RADI8IVE HEAT(SW HAS TAUDA=1) ',
     1            ' LATITUDE MEAN CLD FRACTION IN MODEL LAYERS ',
     2            ' LAT MEAN L,M,H,T..CV L,M,H,T..RH L,M,H,T   ',
     3            ' LATITUDE MEAN R.H.FRACTION IN MODEL LAYERS ',
     4            ' LATITUDE MEAN CONVEC CLD FRAC,TOP,BOT      '/
      DATA KTITLE/'REAN-T62-MODEL CLD  '/
c     COMMON /PRFSAV/ LATLON,RLAT(JDIM),WGT(JDIM),IB(18),IE(18)
      save latlon, rlat, wgt, ib, ie
      KK = LEV
      IF (LATLON.GT.0) GO TO 5
C...   COMPUTE BEGIN AND END LATITUDES FOR EACH OF THE 18 BELTS
      LATLON = 10
      IB(1) = 1
      JDF = JDIM/18
      LFTOVR = JDIM - JDF*18
      IADD = -1
      IF (LFTOVR.GT.0) IADD = 18./LFTOVR
      IE(1) = IB(1) + JDF - 1
      LD = 1
      IL = 0
      IF (IADD.NE.1) GO TO 1
      IE(1) = IE(1) + 1
      LD = 0
      IL = IL + 1
    1 continue
      DO 2 L=2,18
        IB(L) = IE(L-1) + 1
        IE(L) = IB(L) + JDF - 1
        LD = LD + 1
        IF (LD.NE.IADD) GO TO 2
        IF (IL.GE.LFTOVR) GO TO 2
        IE(L) = IE(L) + 1
        LD = 0
        IL = IL + 1
    2 CONTINUE
    5 CONTINUE
      DO 10 K = 1,KK
        DO 20 LL = 1,NLAT
          YAV(K,LL)=0. E 0
          JB = IB(LL)
          JE = IE(LL)
          DO 30 LA = JB,JE
            YAV(K,LL) =YAV(K,LL)+Y(K,LA)
   30     CONTINUE
        YPTS = JE - JB + 1
        YAV(K,LL) = YAV(K,LL) / YPTS
   20   CONTINUE
   10 CONTINUE
      CALL PRNTLL(YAV,FHOUR,LTITLE(LPRT),KK)
C...     COMPUTE AREA WGTD GLOBAL MEANS..
      IF(LPRT.EQ.3)
     1         CALL GLOBLM(Y,GLOBL,RLAT,WGT,KK,JDIM,COLRAD,KTITLE,FHOUR)
      RETURN
      END
      SUBROUTINE GLOBLM(Y,GLOBL,RLAT,WGT,KD,LD,COLRAD,LTITL,FHOUR)
C...   COMPUTE AREA WEIGHTED MEANS - GLOBAL,HEMISPHERIC,ETCCCC
C..   INPUT:
C          Y      = LATITUDINAL MEANS - LD LATITUDES,KD LAYERS..
C          COLRAD = CO-LATIUDES IN RADIANS (N.H.)
C          LTITL  = PRINTING LABEL (CHARACTER*20)
C          FHOUR  = FORECAST HOUR
C..   OUTPUT:   PRINTED VALUES (FT06F001)
C            GLOBL(1,KD)=GLOBAL MEAN
C            GLOBL(2,KD)=NORTHERN HEMISPHERE MEAN
C            GLOBL(3,KD)=NORTHERN HEMISPHERE POLAR (90-60DEG) MEAN
C            GLOBL(4,KD)=NORTHERN HEMISPHERE MIDLAT(60-30DEG) MEAN
C            GLOBL(5,KD)=NORTHERN HEMISPHERE TROPIC(30-0 DEG) MEAN
C            GLOBL(6,KD)=SOUTHERN HEMISPHERE MEAN
C            GLOBL(7,KD)=SOUTHERN HEMISPHERE POLAR (90-60DEG) MEAN
C            GLOBL(8,KD)=SOUTHERN HEMISPHERE MIDLAT(60-30DEG) MEAN
C            GLOBL(9,KD)=SOUTHERN HEMISPHERE TROPIC(30-0 DEG) MEAN
      DIMENSION Y(KD,LD),COLRAD(LD)
      CHARACTER*20 LTITL
      DIMENSION GLOBL(9,KD),RLAT(LD),WGT(LD)
      DIMENSION GLOBX(9,100)
      dimension wtsum(5)
c     COMMON /GLBSAV/ LATLON,WTSUM(5),J30,J60
      DATA LATLON/ 0 /
      save latlon, wtsum, j30, j60
      JJ = LD / 2
      KK = KD
      IF (LATLON.GT.0) GO TO 30
C...   COMPUTE AREA WGTS AND LATITUDES JUST POLEWARD OF 60DEG (J60)
C         AND JUST POLEWARD OF 30DEG (J30)
      LATLON = 10
      RAD60 =  3.141593E+0  / 3. E 0
      RAD30 =  3.141593E+0  / 6. E 0
C...   LATITUDE IN RADIANS
      DO 5 J=1,JJ
        RLAT(J) =   3.141593E+0  / 2. E 0 - COLRAD(J)
    5 CONTINUE
      DO 10 J=1,JJ
        IF(RLAT(J).LT.RAD60) GO TO 15
        J60 = J
   10 CONTINUE
      GO TO 200
   15 continue
      DO 20 J=1,JJ
        IF(RLAT(J).LT.RAD30) GO TO 25
        J30 = J
   20 CONTINUE
      GO TO 205
   25 continue
      DO 26 N=1,5
        WTSUM(N) = 0.
   26 CONTINUE
      RLATS = 0.5 E 0 * (RLAT(1)+RLAT(2))
      WGT(1) = 1. - SIN(RLATS)
      RLATN = 0.5 E 0 * (RLAT(JJ)+RLAT(JJ-1))
      WGT(JJ) = SIN(RLATN)
      DO 27 LA=2,JJ-1
        RLATN = 0.5 E 0 * (RLAT(LA)+RLAT(LA-1))
        RLATS = 0.5 E 0 * (RLAT(LA)+RLAT(LA+1))
        WGT(LA) = SIN(RLATN) - SIN(RLATS)
   27 CONTINUE
      PRINT 9,JJ,J60,J30
    9 FORMAT(1H ,' JJ=',I4,'  J60=',I4,'  J30=',I4)
      DO 28 LA=1,JJ
C..    GLOBAL AREA
        WTSUM(1) = WTSUM(1) + 2. E 0 * WGT(LA)
C..    HEMISPHERIC AREA
        WTSUM(2) = WTSUM(2) + WGT(LA)
C..    LATITUDE STRIP AREAS
        IF (LA.GT.J60) GO TO 31
        WTSUM(3) = WTSUM(3) + WGT(LA)
        GO TO 28
   31   IF (LA.GT.J30) GO TO 32
        WTSUM(4) = WTSUM(4) + WGT(LA)
        GO TO 28
   32   WTSUM(5) = WTSUM(5) + WGT(LA)
   28 CONTINUE
C...
   30 CONTINUE
C...
      DO 35 K = 1,KK
        DO 35 J = 1,9
          GLOBL(J,K) = 0. E 0
   35 CONTINUE
      DO 75 LA=1,JJ
       DO 45 K=1,KK
        GLOBL(2,K) = GLOBL(2,K) + WGT(LA)*Y(K,LA)
        GLOBL(6,K) = GLOBL(6,K) + WGT(LA)*Y(K,LD+1-LA)
        GLOBL(1,K) = GLOBL(2,K) + GLOBL(6,K)
   45  CONTINUE
       IF (LA.GT.J60) GO TO 55
       DO 50 K=1,KK
        GLOBL(3,K) = GLOBL(3,K) + WGT(LA)*Y(K,LA)
        GLOBL(7,K) = GLOBL(7,K) + WGT(LA)*Y(K,LD+1-LA)
   50  CONTINUE
       GO TO 75
   55  IF (LA.GT.J30) GO TO 65
       DO 60 K=1,KK
        GLOBL(4,K) = GLOBL(4,K) + WGT(LA)*Y(K,LA)
        GLOBL(8,K) = GLOBL(8,K) + WGT(LA)*Y(K,LD+1-LA)
   60  CONTINUE
       GO TO 75
   65  continue
       DO 70 K=1,KK
        GLOBL(5,K) = GLOBL(5,K) + WGT(LA)*Y(K,LA)
        GLOBL(9,K) = GLOBL(9,K) + WGT(LA)*Y(K,LD+1-LA)
   70  CONTINUE
   75 CONTINUE
      DO 85 K=1,KK
        GLOBX(1,K) = GLOBL(1,K) / WTSUM(1)
        GLOBL(1,K) = GLOBL(1,K) / WTSUM(1)
        DO 80 I=2,5
          GLOBX(I,K) = GLOBL(I,K) / WTSUM(1)
          GLOBX(I+4,K) = GLOBL(I+4,K) / WTSUM(1)
          GLOBL(I,K) = GLOBL(I,K) / WTSUM(I)
          GLOBL(I+4,K) = GLOBL(I+4,K) / WTSUM(I)
   80   CONTINUE
   85 CONTINUE
      PRINT 92,LTITL,FHOUR
      PRINT 93
      PRINT 97
      PRINT 95
      DO 90 KEN=1,KK
        K = KK+1-KEN
        PRINT 100,K,(GLOBL(I,K),I=1,9)
   90 CONTINUE
      PRINT 98
      PRINT 95
      DO 11 KEN=1,KK
        K = KK+1-KEN
        PRINT 100,K,(GLOBX(I,K),I=1,9)
   11 CONTINUE
      RETURN
   92 FORMAT (1H ,10X,' AREA WEIGHTED MEANS',2X,A20,' FCSTHR=',F6.1)
   93 FORMAT (1H ,11X,' -------------------------------------')
   95 FORMAT (1H ,4X,'K',5X,'GLOBAL',4X,'N HEMI',4X,'NHPOLR',4X,
     1        'NHMIDL',4X,'NHTRPC',4X,'S HEMI',4X,
     2        'SHPOLR',4X,'SHMIDL',4X,'SHTRPC')
   97 FORMAT (1H ,15X,'====>  WEIGHTED RELATIVE TO SPECIFIED REGION')
   98 FORMAT (1H ,15X,'====>  WEIGHTED RELATIVE TO ENTIRE GLOBE')
  100 FORMAT (1H ,I5,9F10.3)
  200 PRINT 201
      STOP
  205 PRINT 206
      STOP
  201 FORMAT (1H ,' STOP -- CAN T FIND J60')
  206 FORMAT (1H ,' STOP -- CAN T FIND J30')
      END
      SUBROUTINE PRNTLL(Y,THOUR,ITITL,KMAX)
      DIMENSION Y(KMAX,18)
      CHARACTER*44 ITITL
      PRINT 930
      PRINT 910,THOUR,ITITL
      DO 10 K=1,KMAX
        KK = KMAX +1 -K
        PRINT 920,KK,(Y(KK,LAT), LAT = 1,18)
  10  CONTINUE
      PRINT 930
 910  FORMAT(/,' FCST HOUR=',F4.0,' EQUI-DIST LAT BELT AVE=N.POLE TO',
     1 ' S.POLE ',A44)
 920  FORMAT(I3,2X,18F7.3)
 930  FORMAT(1H ,128(1H- ) )
      RETURN
      END
      SUBROUTINE CVINTF(CVIN,CVTIN,CVBIN,IIN,JTWIDL,JIN,
     1                  CVOUT,CVTOUT,CVBOUT,IOUT,JPOUT,JOUT,
     2                  ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     3                  XX,WGT,TT,BB,SUM,NN,
     4                  LTWIDL,LATRD1,LATINB)
C--   *****************************************************************
C     *  CODE BILINEARLY INTERPOLATES CLD AMT BETWEEN GAUSSIAN GRIDS--*
C     *  CLONE OF GGINTP FOR INTERPOLATION OF CONVECTIVE CLD AMT (CV).*
C     *    SPECIAL INTERP PROCEDURE FOR TOPS(CVT) AND BOTS(CVB)...    *
C-    *  J = 1 IS JUST BELO N.POLE, I = 1 IS GREENWICH (THEN GO EAST).*
C     * IIN,JIN ARE I,J DIMENSIONS OF INPUT GRID--IOUT,JOUT FOR OUTPUT*
C     * JIN2,JOUT2=JIN/2,JOUT/2                                       *
C     *                                     --K.CAMPANA - JUNE 1988   *
C--   *****************************************************************
      DIMENSION CVIN(IIN,JTWIDL),CVTIN(IIN,JTWIDL),CVBIN(IIN,JTWIDL)
      DIMENSION CVOUT(IOUT,JPOUT)
      DIMENSION CVTOUT(IOUT,JPOUT),CVBOUT(IOUT,JPOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION INSLAT(JOUT),WGTLAT(JOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4),TT(IOUT,4),BB(IOUT,4),SUM(IOUT,4)
      DIMENSION NN(IOUT)
      III = IIN
      JJJ = JIN
      IIIOUT = IOUT
      DO 50 LATOUT=1,JPOUT
      LAT=LATOUT+LATINB-1
CCC     PRINT 100,LAT,XLAT
C===>    IF OUTPUT LAT IS POLEWARD OF INPUT LAT=1 ,THEN SIMPL AVERAGE
C          (SMALL REGION AND CLD AMT WOULDN T EXTRAPOLATE WELL)
      IF(INSLAT(LAT).LT.0) GO TO 70
      INTH = MOD(LTWIDL + INSLAT(LAT) - LATRD1 - 1,JTWIDL) + 1
      CALL CINTP(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,WGTLON,INTH,WGTLAT(LAT),
     2           CVIN,CVTIN,CVBIN,CVOUT(1,LATOUT),
     3           CVTOUT(1,LATOUT),CVBOUT(1,LATOUT),
     4           XX,WGT,TT,BB,SUM,NN)
      GO TO 50
C---   POLAR REGIONS,NO EXTRAP
   70 CONTINUE
      INTH = IABS(INSLAT(LAT))
      CALL CINTP(III,JJJ,IIIOUT,
     1           ILEFT,IRGHT,WGTLON,INTH,WGTLAT(LAT),
     2           CVIN,CVTIN,CVBIN,CVOUT(1,LATOUT),
     3           CVTOUT(1,LATOUT),CVBOUT(1,LATOUT),
     4           XX,WGT,TT,BB,SUM,NN)
   50 CONTINUE
CK100 FORMAT(1H ,' ROW =',I5,'  LAT =',E15.5)
      RETURN
      END
      SUBROUTINE CINTP(IIN,JIN,IOUT,
     1                 ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     2                 CV,CVT,CVB,CAMT,CTOP,CBOT,
     3                 XX,WGT,TT,BB,SUM,NN)
      DIMENSION CV(IIN,JIN),CVT(IIN,JIN),CVB(IIN,JIN)
      DIMENSION CAMT(IOUT),CTOP(IOUT),CBOT(IOUT)
      DIMENSION ILEFT(IOUT),IRGHT(IOUT),WGTLON(IOUT)
      DIMENSION XX(IOUT,4),WGT(IOUT,4),TT(IOUT,4),BB(IOUT,4),SUM(IOUT,4)
      DIMENSION NN(IOUT)
C        SIMPL LINEAR INTERPOLATION OF CLDAMT, UNLESS ONLY 1,2 OF THE
C         SURROUNDING PTS HAS CV. THEN,IF OUTPUT GRIDPT NOT CLOSE ENUF
C         DO NOT INTERPOLATE TO IT(PREVENTS SPREADING OF CV CLDS)..
C           FOR 1 PT CONVECTION-INTRP WGT GE (.7)**2 ...
C           FOR 2 PT CONVECTION-SUM OF INTRP WGT GE .45...
C              .45 USED RATHER THAN .5 TO GIVE BETTER RESULT FOR
C              DIAGONALLY OPPOSED PTS...
C===>    FOR TOPS(CVT) AND BOTS(CVB) JUST TAKE AVERAGE OF SURROUNDING
C         NON-ZERO CV POINTS.....
C         NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
C---     NHSH = 1,-1 FOR NORTHERN,SOUTHERN HEMISPHERE
C         HERE INSTEAD OF AN EXTRAPOLATION,JUST DO A SIMPLE MEAN....
C
      IF (INSLAT.LT.0) GO TO 600
      IF (INSLAT.EQ.JIN) GO TO 105
      DO 100 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INSLAT)
        XX(I,2) = CV(ILEFT(I),INSLAT+1)
        XX(I,3) = CV(IRGHT(I),INSLAT)
        XX(I,4) = CV(IRGHT(I),INSLAT+1)
        WGT(I,1) = (1. E  0-WGTLON(I))*(1. E  0-WGTLAT)
        WGT(I,2) = (1. E  0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1. E  0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
        TT(I,1) = CVT(ILEFT(I),INSLAT)
        TT(I,2) = CVT(ILEFT(I),INSLAT+1)
        TT(I,3) = CVT(IRGHT(I),INSLAT)
        TT(I,4) = CVT(IRGHT(I),INSLAT+1)
        BB(I,1) = CVB(ILEFT(I),INSLAT)
        BB(I,2) = CVB(ILEFT(I),INSLAT+1)
        BB(I,3) = CVB(IRGHT(I),INSLAT)
        BB(I,4) = CVB(IRGHT(I),INSLAT+1)
  100 CONTINUE
      GO TO 130
  105 continue
      DO 110 I=1,IOUT
C----   NORMALIZED DISTANCE FROM UPPER LAT TO GAUSSIAN LAT
        XX(I,1) = CV(ILEFT(I),INSLAT)
        XX(I,3) = CV(IRGHT(I),INSLAT)
        WGT(I,1) = (1. E  0-WGTLON(I))*(1. E  0-WGTLAT)
        WGT(I,2) = (1. E  0-WGTLON(I))*WGTLAT
        WGT(I,3) = WGTLON(I)*(1. E  0-WGTLAT)
        WGT(I,4) = WGTLON(I)*WGTLAT
        TT(I,1) = CVT(ILEFT(I),INSLAT)
        TT(I,3) = CVT(IRGHT(I),INSLAT)
        BB(I,1) = CVB(ILEFT(I),INSLAT)
        BB(I,3) = CVB(IRGHT(I),INSLAT)
  110 CONTINUE
      IOUT2 = IOUT / 2
      DO 120 I=1,IOUT2
        XX(I,2) = CV(ILEFT(I+IOUT2),INSLAT)
        XX(I+IOUT2,2) = CV(ILEFT(I),INSLAT)
        XX(I,4) = CV(IRGHT(I+IOUT2),INSLAT)
        XX(I+IOUT2,4) = CV(IRGHT(I),INSLAT)
        BB(I,2) = CVB(ILEFT(I+IOUT2),INSLAT)
        BB(I+IOUT2,2) = CVB(ILEFT(I),INSLAT)
        BB(I,4) = CVB(IRGHT(I+IOUT2),INSLAT)
        BB(I+IOUT2,4) = CVB(IRGHT(I),INSLAT)
        TT(I,2) = CVT(ILEFT(I+IOUT2),INSLAT)
        TT(I+IOUT2,2) = CVT(ILEFT(I),INSLAT)
        TT(I,4) = CVT(IRGHT(I+IOUT2),INSLAT)
        TT(I+IOUT2,4) = CVT(IRGHT(I),INSLAT)
  120 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
CKAC    NN(1;IOUT) = 0
CKAC    SUM(1,1;IOUT*4) = 0. E  0
  130 continue
      DO 10 I=1,IOUT
        NN(I) = 0
   10 CONTINUE
      DO 12 J=1,4
       DO 12 I=1,IOUT
        SUM(I,J) = 0. E 0
   12 CONTINUE
        DO 150 KPT=1,4
CKAC      WHERE (XX(1,KPT;IOUT).GT.0. E  0)
CKAC        NN(1;IOUT) = NN(1;IOUT) + 1
CKAC        SUM(1,1;IOUT) = SUM(1,1;IOUT) + WGT(1,KPT;IOUT)
CKAC        SUM(1,2;IOUT) = SUM(1,2;IOUT) + TT(1,KPT;IOUT)
CKAC        SUM(1,3;IOUT) = SUM(1,3;IOUT) + BB(1,KPT;IOUT)
CKAC      ENDWHERE
CKAC      SUM(1,4;IOUT) = SUM(1,4;IOUT) + WGT(1,KPT;IOUT) *
CKAC 1                    XX(1,KPT;IOUT)
          DO 14 I=1,IOUT
            IF (XX(I,KPT).GT.0. E 0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
              SUM(I,2) = SUM(I,2) + TT(I,KPT)
              SUM(I,3) = SUM(I,3) + BB(I,KPT)
            ENDIF
   14     CONTINUE
          DO 15 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   15     CONTINUE
  150   CONTINUE
CKAC    WHERE((NN(1;IOUT).EQ.1 .AND. SUM(1,1;IOUT).GT.0.49 E  0) .OR.
CKAC 1        (NN(1;IOUT).EQ.2 .AND. SUM(1,1;IOUT).GE.0.45 E  0) .OR.
CKAC 2         NN(1;IOUT).GE.3)
CKAC      CTOP(1;IOUT) = VAINT(SUM(1,2;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CTOP(1;IOUT))
CKAC      CBOT(1;IOUT) = VAINT(SUM(1,3;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CBOT(1;IOUT))
CKAC      CAMT(1;IOUT) = SUM(1,4;IOUT)
CKAC    OTHERWISE
CKAC      CTOP(1;IOUT) = 0. E  0
CKAC      CBOT(1;IOUT) = 100. E  0
CKAC      CAMT(1;IOUT) = 0. E  0
CKAC    ENDWHERE
        DO 16 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.49 E 0) GO TO 17
          IF (NN(I).EQ.2.AND.SUM(I,1).GE.0.45 E 0) GO TO 17
          IF (NN(I).GE.3) GO TO 17
            CTOP(I) = 0. E 0
            CBOT(I) = 100. E 0
            CAMT(I) = 0. E 0
            GO TO 18
   17     CONTINUE
            LTOP = SUM(I,2)/NN(I) + 0.5 E 0
            LBOT = SUM(I,3)/NN(I) + 0.5 E 0
            CTOP(I) = LTOP
            CBOT(I) = LBOT
            CAMT(I) = SUM(I,4)
   18     CONTINUE
   16   CONTINUE
      RETURN
C--- POLAR REGION-NO EXTRAPOLATION
  600 CONTINUE
      JA = IABS(INSLAT)
      DO 200 I=1,IOUT
C----    GET LEFT POINT ON NEAREST LATITUDE
        XX(I,1) = CV(ILEFT(I),JA)
        XX(I,2) = CV(IRGHT(I),JA)
        WGT(I,1) = 1. E  0-WGTLON(I)
        WGT(I,2) = WGTLON(I)
        TT(I,1) = CVT(ILEFT(I),JA)
        TT(I,2) = CVT(IRGHT(I),JA)
        BB(I,1) = CVB(ILEFT(I),JA)
        BB(I,2) = CVB(IRGHT(I),JA)
  200 CONTINUE
C---      NN WILL BE NUMBER OF SURROUNDING PTS WITH CLD (GT ZERO)
CKAC    NN(1;IOUT) = 0
CKAC    SUM(1,1;IOUT*4) = 0. E  0
      DO 20 I=1,IOUT
        NN(I) = 0
   20 CONTINUE
      DO 22 J=1,4
       DO 22 I=1,IOUT
        SUM(I,J) = 0. E 0
   22 CONTINUE
        DO 202 KPT=1,2
CKAC      WHERE (XX(1,KPT;IOUT).GT.0. E  0)
CKAC        NN(1;IOUT) = NN(1;IOUT) + 1
CKAC        SUM(1,1;IOUT) = SUM(1,1;IOUT) + WGT(1,KPT;IOUT)
CKAC        SUM(1,2;IOUT) = SUM(1,2;IOUT) + TT(1,KPT;IOUT)
CKAC        SUM(1,3;IOUT) = SUM(1,3;IOUT) + BB(1,KPT;IOUT)
CKAC      ENDWHERE
CKAC      SUM(1,4;IOUT) = SUM(1,4;IOUT) + WGT(1,KPT;IOUT) *
CKAC 1                    XX(1,KPT;IOUT)
          DO 24 I=1,IOUT
            IF (XX(I,KPT).GT.0. E 0) THEN
              NN(I) = NN(I) + 1
              SUM(I,1) = SUM(I,1) + WGT(I,KPT)
              SUM(I,2) = SUM(I,2) + TT(I,KPT)
              SUM(I,3) = SUM(I,3) + BB(I,KPT)
            ENDIF
   24     CONTINUE
          DO 25 I=1,IOUT
            SUM(I,4) = SUM(I,4) + WGT(I,KPT) * XX(I,KPT)
   25     CONTINUE
  202   CONTINUE
CKAC    WHERE((NN(1;IOUT).EQ.1 .AND. SUM(1,1;IOUT).GT.0.7 E  0) .OR.
CKAC 1         NN(1;IOUT).EQ.2)
CKAC      CTOP(1;IOUT) = VAINT(SUM(1,2;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CTOP(1;IOUT))
CKAC      CBOT(1;IOUT) = VAINT(SUM(1,3;IOUT)/NN(1;IOUT)+0.5 E  0;
CKAC 1                         CBOT(1;IOUT))
CKAC      CAMT(1;IOUT) = SUM(1,4;IOUT)
CKAC    OTHERWISE
CKAC      CTOP(1;IOUT) = 0. E  0
CKAC      CBOT(1;IOUT) = 100. E  0
CKAC      CAMT(1;IOUT) = 0. E  0
CKAC    ENDWHERE
        DO 26 I=1,IOUT
          IF (NN(I).EQ.1.AND.SUM(I,1).GT.0.7 E 0) GO TO 27
          IF (NN(I).EQ.2) GO TO 27
            CTOP(I) = 0. E 0
            CBOT(I) = 100. E 0
            CAMT(I) = 0. E 0
            GO TO 28
   27     CONTINUE
            LTOP = SUM(I,2)/NN(I) + 0.5 E 0
            LBOT = SUM(I,3)/NN(I) + 0.5 E 0
            CTOP(I) = LTOP
            CBOT(I) = LBOT
            CAMT(I) = SUM(I,4)
   28     CONTINUE
   26   CONTINUE
      RETURN
      END
      SUBROUTINE COSZMN(SOLHR,SINLAT,COSLAT,SDEC,CDEC,SLAG,
     1                  XLON,NLON,NLON2,NLAT2,COSZEN,LDG,COSZDG)
CFPP$ NOCONCUR R
C
C===>  COMPUTE MEAN COS SOLAR ZEN ANGL OVER DTSWAV HRS
C....   COSINE OF SOLAR ZEN ANGL FOR BOTH N. AND S. HEMISPHERES.
C        SOLHR=TIME(HRS) AFTER 00Z (GREENWICH TIME)..
C        XLON IS EAST LONG(RADIANS)..
C        SINLAT, COSLAT ARE SIN AND COS OF LATITUDE (N. HEMISPHERE)
C        SDEC, CDEC = THE SINE AND COSINE OF THE SOLAR DECLINATION.
C        SLAG = EQUATION OF TIME
      DIMENSION XLON(NLON),COSZEN(NLON2,NLAT2)
      LOGICAL LDG
      DIMENSION COSZDG(NLON2,NLAT2)
      DIMENSION SINLAT(NLAT2),COSLAT(NLAT2)
      DIMENSION COSZN(NLON2),ISTSUN(NLON2)
      COMMON /CSZSAV/ ISTP,NSTP,PID12
C----
      DO 2000 J=1,NLAT2
       SS = SINLAT(J)*SDEC
       CC = COSLAT(J)*CDEC
        DO 20 I=1,NLON2
          COSZEN(I,J) = 0. E 0
          ISTSUN(I) = 0
   20   CONTINUE
      DO 1000 IT=1,ISTP
       CNS = PID12 * (SOLHR-12. E 0+(IT-1)*1. E 0/NSTP) +SLAG
       DO 40 I=1,NLON
         COSZN(I) = SS + CC * COS(CNS + XLON(I))
         COSZN(I+NLON) =-SS + CC * COS(CNS + XLON(I))
   40  CONTINUE
       DO 60 I=1,NLON2
         COSZEN(I,J) = COSZEN(I,J) + AMAX1(0. E 0, COSZN(I))
         IF(COSZN(I).GT.0. E 0) ISTSUN(I) = ISTSUN(I) + 1
   60  CONTINUE
 1000 CONTINUE
       DO 1500 I=1,NLON2
        IF(LDG) COSZDG(I,J) = COSZEN(I,J) / ISTP
        IF(ISTSUN(I).GT.0) COSZEN(I,J) = COSZEN(I,J) / ISTSUN(I)
 1500  CONTINUE
 2000 CONTINUE
      RETURN
      END
      SUBROUTINE GCLJMS (SI)
      PARAMETER (KDIM= 28 , KDIMP=KDIM+1)
      common /COMCD1/ ROCP,PTOPC(4,2),CVTOP,VVCLD(2),CLAPSE,
     1                CRHRH, PSTRT, CLAPKC, DCLPS, CLPSE,
     2                KLOWT, KLOWB, llyr
      DIMENSION SI(KDIMP), PPPTOP(4,2)
C --- PRESSURE LIMITS FOR SFC AND TOP OF EACH CLOUD DOMAIN (L,M,H)
C     IN MB, MODEL LAYERS FOR CLD TOPS ARE L=7,M=11,H=15 AT LOW
C     LATITUDES AND L= ,M= ,H=  , AT POLE REGION.
C....     PTOP ABOVE H CHANGED FROM 150 TO 100, CAUSE
CC    DATA PPPTOP /1050.,642.,350.,150., 1050.,750.,500.,150./
C          CODE WAS TRUNCATING TOPS OF CONVECTIVE CLOUDS
      DATA PPPTOP /1050.,642.,350.,100., 1050.,750.,500.,100./
C
      ROCP =  2.8705E+2  /  1.0046E+3
C --- INVERSON TYPE CLD CRITICAL VALUE-ISTRAT=0
CYH94 CLAPSE = -0.055 E 0
      CLAPSE = -0.06 E 0
C --- INVERSON TYPE CLD CRITICAL VALUE-ISTRAT=1
      CLAPKC = -0.05 E 0
C....CRITICAL DTHETA/DP FOR OCEAN STRATUS(WGT VARIES 0 TO 1
C                LINEARLY FROM CLAPSE TO CLPSE)
      DCLPS = -0.01 E 0
      CLPSE = CLAPKC + DCLPS
      CVTOP = 400.0 E 0
      PSTRT = 800.0 E 0
C --- LOW CLD BOTTOM (AT SIGMA=0.95) AND TOP SIGMA LEVEL
      DO 5 K=1,KDIM
        KK=K
        IF (SI(KK) .LE. 0.95 E 0) GO TO 10
   5  CONTINUE
  10  KLOWB = KK - 1
      SILOW = PPPTOP(2,1) * 1.0 E -3
      DO 20 K=1,KDIM
        KK=K
        IF (SI(KK) .LT. SILOW) GO TO 30
  20  CONTINUE
  30  KLOWT = KK
C --- PRESURE LIMIT AT SFC AND AT TOP OF CLOUD DOMAINS (L,M,H) IN MB
      DO 40 I = 1 , 4*2
       PTOPC(I,1) = PPPTOP(I,1)
  40  CONTINUE
C --- L CLD VERTICAL VEL ADJ BOUNDARIES
      VVCLD(1) =  0.0003 E 0
      VVCLD(2) = -0.0005 E 0
      CRHRH = 0.60 E 0
C--- COMPUTE LLYR--WHICH IS TOPMOST NON CLD(LOW) LAYER, FOR STRATIFORM
      XTHK = 0. E 0
C....   DEFAULT LLYR
      KL = KDIMP
C....   TOPMOST NONCLOUD LAYER WILL BE THE ONE AT OR ABOVE LOWEST
C         0.1 OF THE ATMOSPHERE..
      DO 202 K=1,KDIM
C       XTHK = XTHK + SI(K) - SI(K+1)
C       IF (XTHK.LT.0.1 E 0) GO TO 202
        KL = K
C       GO TO 204
        IF (SI(K).LT.0.9 E 0) GO TO 204
  202 CONTINUE
  204 LLYR = KL-1
      PRINT 205,LLYR,KLOWB
  205 FORMAT(1H ,'-------LLYR,KLOWB =',2I5)
      RETURN
      END
      SUBROUTINE CLDPRP(PS,Q,T,SI,CLDARY,IBEG,IPTS,XLATRD,
     1                  CAMT,KTOP,KBTM,NCLDS,EMIS,RRCL,TTCL)
CFPP$ NOCONCUR R
C---------------------------------------------------------------------
C     FEB., 1993 - Y.H.
C        CLOUD RADIATIVE PROPERTIES CALCULATIONS AFTER DAVIS (1982)
C        AND HARSHVARDHAN ET AL. (1987).
C--------------------------------------------------------------------
C     INPUT VARIABLES:
C        PS(I)         - SURFACE PRESSURE (CB)
C        Q (I,K)       - SPECIFIC HUMIDITY, K=1 IS TOP LAYER (KG/KG)
C        T (I,K)       - ABSOLUTE TEMPERATURE, K=1 IS TOP LAYER (K)
C        SI(K)         - MDL SIGMA INTERFACES, K=1 IS THE SURFACE
C        CLDARY(I,K)   - CLOUD ARRAY CONTAINS COMPRESSED CLOUD
C                        FRACTIONS OF 3 TYPES (STRATIFORM, CONV
C                        AND STRATUS), K=1 IS THE MDL SFC LAYER
C        IBEG,IPTS     - INDICES FOR THE BEGINNIG NO. AND THE
C                        TOTAL NO. OF ARRAY ELEMENTS TO BE PROCESSED
C********XLATRD        - CURRENT LATITUDE IN RADIANS (1ST DATA PT)
C********                 FOR MODELS WITH DIFF LAT AT EACH PT, NEED TO
C********                 USE THE LAT OF ALL POINTS....CAREFUL.....
C    OUTPUT VARIABLES:
C        CAMT(I,K)     - CLOUD FRACTIONS, K=1 IS THE SFC, K=2 IS THE
C                        LOWEST CLOUD LAYER, AND SO ON
C        KTOP,KBTM(I,K)- CLOUD TOP AND BOTTOM INDECES, KTOP AND
C                        KBTM VALUES FROM 1 TO L MODEL LAYERS,
C                        WITH VALUE OF 1 BEING THE TOP MDL LAYER
C        NCLDS(I)      - NO. OF SEPARATED CLOUD LAYERS IN A COLUMN
C        EMIS(I,K)     - CLOUD EMISSIVITY
C  ***   ITYP(I,K)     - TYPE OF CLOUDS, ITYP=1, 2 AND 3 ARE FOR
C                        THE RH, STRATUS, AND CONV TYPES
C        RRCL,TTCL(I,NB,K)
C                      - CLOUD REFLECTTANCES, AND TRANSMITANCES FOR
C                        SW SPECTRAL BANDS
C
C--------------------------------------------------------------------
C
                      P A R A M E T E R
     1 ( IDIMT= 256 ,  KDIM= 28 ,    KDIMP=KDIM+1,   PI= 3.141593E+0 )
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
                      D I M E N S I O N
     1  PS  ( 258 ),     SI  (KDIMP),       CLDARY(IDIMT,KDIM)
     2, Q   (IMAX,L),      T   (IMAX,LP1),    CAMT(IMAX,LP1)
     3, KTOP(IMAX,LP1),    KBTM(IMAX,LP1),    EMIS(IMAX,LP1)
     4, ITYP(IMAX,LP1),    RRCL(IMAX,NB,LP1), TTCL(IMAX,NB,LP1)
     5, NCLDS(IMAX)
C
      common /COMCD1/ ROCP,PTOPC(4,2),CVTOP,VVCLD(2),CLAPSE,
     1                CRHRH, PSTRT, CLAPKC, DCLPS, CLPSE,
     2                KLOWT, KLOWB, llyr
C
C --- ABCFF(NB) : NB BANDS ABSORPTION COEFF FOR WATER VAPOR
C
      COMMON /SWRSAV/ ABCFF(NB),PWTS(NB),CFCO2,CFO3,REFLO3,RRAYAV
C
C ---  WORKSPACE ---
                      D I M E N S I O N
     1  PRSLV(IMAX,LP1),MTYP (IMAX),      XAMT (IMAX)
     2, KCLD (IMAX),    MBTM (IMAX),      CL1  (IMAX)
     3, CL2  (IMAX),    CL3  (IMAX),      QSUM (IMAX)
     4, MIDK (IMAX),    DELP (IMAX),      TCLD (IMAX)
     5, TAUC (IMAX),    AA   (IMAX),      BB   (IMAX)
     6, CC   (IMAX),  DD   (IMAX),   EE   (IMAX),  FF  (IMAX)
                    E Q U I V A L E N C E
     1  (AA, TCLD, CL1), (BB, DELP, CL2), (CC, MIDK, CL3)
     2, (DD, MTYP), (EE, KCLD), (FF, XAMT), (TAUC, MBTM)
                        L O G I C A L
     1  BITX(IMAX),   BITY(IMAX),   BITZ(IMAX),   BIT1,   BIT2
C===>    BEGIN HERE ................................................
      DO 10 K=2,LP1
      DO 10 I=1,IPTS
        IR = I + IBEG - 1
        PRSLV(I,K) = PS(IR) * SI(LP1-K+1) * 10.0 E 0
  10  CONTINUE
      DO 20 I=1,IMAX
        PRSLV(I,1) = 0.001 E 0
        KCLD(I) = 2
        MBTM(I) = 1
        MTYP(I) = 0
        XAMT(I) = 0.0 E 0
        ITYP(I,1) = 0
        CAMT(I,1) = 1.0 E 0
        KTOP(I,1) = LP1
        KBTM(I,1) = LP1
        EMIS(I,1) = 1.0 E 0
  20  CONTINUE
	do k = 1, l
      DO 30 I=1,IMAX
        ITYP(I,k+1) = 0
        CAMT(I,k+1) = 0.0 E 0
        KTOP(I,k+1) = 1
        KBTM(I,k+1) = 1
        EMIS(I,k+1) = 0.0 E 0
  30  CONTINUE
	enddo
	do i9=1, lp1
	do k = 1, nb
      DO 40 I=1,IMAX
        RRCL(I,k,i9) = 0.0 E 0
        TTCL(I,k,i9) = 1.0 E 0
  40  CONTINUE
	enddo
	enddo
C
C --- LOOP OVER MDL LAYERS
C
      DO 200 K=2,L
C
        BIT1 = .FALSE.
        DO 60 I=1,IPTS
          IR = I + IBEG - 1
          BITX(I) = CLDARY(IR,K).GT.0.0 E 0
          BIT1 = BIT1 .OR. BITX(I)
  60    CONTINUE
        IF (.NOT. BIT1) GO TO 200
C --- DECOMPRESS CLOUD ARRAY
        DO 70 I=1,IPTS
          CL1(I) = 0.0 E 0
          CL2(I) = 0.0 E 0
          BITY(I) = BITX(I) .AND. ITYP(I,KCLD(I)).EQ.0
          BITZ(I) = BITX(I) .AND. ITYP(I,KCLD(I)).NE.0
  70    CONTINUE
        DO 80 I=1,IPTS
          IF (BITX(I)) THEN
            IR = I + IBEG - 1
            CL1(I) = AMOD(CLDARY(IR,K), 10.0 E 0)
            CL2(I) = 1.0 E -4 * (CLDARY(IR,K) - CL1(I))
            CL3(I) = CLDARY(IR,K+1)
          END IF
  80    CONTINUE
C --- MTYP=1,2 FOR RH+STRATUS, AND CONV CLOUD TYPES
        DO 100 I=1,IPTS
          IF (BITX(I)) MTYP(I) = 1
          IF (CL1(I) .GE. 2.0 E 0) CL1(I) = CL1(I) - 2.0 E 0
          IF (CL2(I) .GT. 0.0 E 0) MTYP(I) = 2
 100    CONTINUE
        BIT2 = .FALSE.
        DO 110 I=1,IPTS
          BITX(I) = BITX(I) .AND. (CL3(I).LE.0.0 E 0 .OR. K.EQ.L)
          BIT2 = BIT2 .OR. BITX(I)
          IF (BITY(I)) THEN
            ITYP(I,KCLD(I)) = MTYP(I)
            XAMT(I) = CL1(I)
            IF (MTYP(I) .EQ. 2) XAMT(I) = CL2(I)
            MBTM(I) = K
          END IF
 110    CONTINUE
        DO 120 I=1,IPTS
          BITY(I) = BITZ(I) .AND. ITYP(I,KCLD(I)).NE.MTYP(I)
          BITZ(I) = BITZ(I) .AND. ITYP(I,KCLD(I)).EQ.MTYP(I)
 120    CONTINUE
        DO 140 I=1,IPTS
          IF (BITY(I)) THEN
            CAMT(I,KCLD(I)) = XAMT(I)
            KTOP(I,KCLD(I)) = LP1 - (K - 1)
            KBTM(I,KCLD(I)) = LP1 - MBTM(I)
            ITYP(I,KCLD(I)+1) = MTYP(I)
            MBTM(I) = K
            XAMT(I) = CL1(I)
            IF (MTYP(I).EQ.2) XAMT(I) = CL2(I)
            KCLD(I) = KCLD(I) + 1
          END IF
 140    CONTINUE
        DO 150 I=1,IPTS
          IF (BITZ(I) .AND. MTYP(I).EQ.1)
     1      XAMT(I) = AMAX1(XAMT(I), CL1(I))
          IF (BITZ(I) .AND. MTYP(I).EQ.2)
     1      XAMT(I) = AMAX1(XAMT(I), CL2(I))
 150    CONTINUE
        IF (.NOT. BIT2) GO TO 200
        DO 160 I=1,IPTS
          IF (BITX(I)) THEN
            CAMT(I,KCLD(I)) = XAMT(I)
            KTOP(I,KCLD(I)) = LP1 - K
            KBTM(I,KCLD(I)) = LP1 - MBTM(I)
          END IF
 160    CONTINUE
        DO 180 I=1,IPTS
          IF (BITX(I)) THEN
            KCLD(I) = KCLD(I) + 1
            MTYP(I) = 0
            MBTM(I) = 1
            XAMT(I) = 0.0 E 0
          END IF
 180    CONTINUE
C
 200  CONTINUE
C --- RECORD NUM OF CLD LYRS AND FIND MAX NUM OF CLD LYRS
      MCLDS = 0
      DO 220 I=1,IPTS
        NCLDS(I) = KCLD(I) - 2
        MCLDS = MAX(MCLDS, NCLDS(I))
 220  CONTINUE
C     WRITE(6,231) MCLDS
C231  FORMAT(' IN CLDPRP: MAXCLDS =',I4)
      IF (MCLDS .EQ. 0) RETURN
C
C --- ESTIMATE CLOUD OPTICAL PROPERTIES FROM T AND Q
C ---  THE 240-LOOP FLAGS MID/HI CLD USING PRESSURE DOMAIN BDRY, PTOP
C
      FAC = AMAX1(0.0 E 0, 4.0 E 0*XLATRD/PI-1.0 E 0)
C
      DO 500 NC=2,MCLDS+1
C
        DO 230 I=1,IPTS
          TAUC(I) = 0.0 E 0
          QSUM(I) = 0.0 E 0
          BITX(I) = CAMT(I,NC) .GT. 0.0 E 0
 230    CONTINUE
        BIT1 = .FALSE.
        BIT2 = .FALSE.
C...  FIND TOP PRESSURE FOR MID CLOUD (3) DOMAIN=FUNCTION OF LATITUDE
        PTOPD = PTOPC(3,1) + (PTOPC(3,2)-PTOPC(3,1)) * FAC
        DO 240 I=1,IPTS
C7XX      BITY(I) = BITX(I) .AND. PRSLV(I,KTOP(I,NC)+1).LE.PTOPC(2,1)
C7XX      BITZ(I) = BITX(I) .AND. PRSLV(I,KTOP(I,NC)+1).GT.PTOPC(2,1)
C7X4      BITZ(I) = BITX(I) .AND. PRSLV(I,KTOP(I,NC)+1).GT.PTOPC(3,1)
          BITZ(I) = BITX(I) .AND. PRSLV(I,KTOP(I,NC)+1).GT.PTOPD
     1               .AND. ITYP (I,KTOP(I,NC)+1).NE.2
          BITY(I) = BITX(I) .AND.(.NOT. BITZ(I))
          BIT1 = BIT1 .OR. BITY(I)
          BIT2 = BIT2 .OR. BITZ(I)
 240    CONTINUE
C --- CALC CLD THICKNESS DELP, TOTAL H2O PASS, AND MEAN TEMP (CELSIUS)
        IF (.NOT. BIT1) GO TO 280
C....     TOPS ARE HIGH OR CONVEC CLOUDS
        DO 260 I=1,IPTS
          IF (BITY(I)) THEN
            DO 250 KK=KTOP(I,NC),KBTM(I,NC)
              DELP(I) = PRSLV(I,KK+1) - PRSLV(I,KK)
              TCLD(I) = T(I,KK) - 273.16 E 0
              QSUM(I) = QSUM(I) + Q(I,KK) * DELP(I)
     1                * (PRSLV(I,KK+1) + PRSLV(I,KK))
     2                / (120.1612 E 0 * SQRT(T(I,KK)))
              IF (TCLD(I) .LE. -10.0 E 0) THEN
                TAUC(I) = TAUC(I) + DELP(I)
     1                  * AMAX1(0.1 E -3, 2.00 E -6*(TCLD(I)+82.5 E 0)**
     12)
              ELSE
                TAUC(I) = TAUC(I) + DELP(I)
     1                  * AMIN1(0.08 E 0, 6.949 E -3*TCLD(I)+0.10 E 0)
              END IF
 250        CONTINUE
          END IF
 260    CONTINUE
 280    IF (.NOT. BIT2) GO TO 310
C....     TOPS ARE MID AND LOW NON-CONVEC CLOUDS
        DO 300 I=1,IPTS
          IF (BITZ(I)) THEN
            DO 290 KK=KTOP(I,NC),KBTM(I,NC)
              DELP(I) = PRSLV(I,KK+1) - PRSLV(I,KK)
              TCLD(I) = T(I,KK) - 273.16 E 0
              QSUM(I) = QSUM(I) + Q(I,KK) * DELP(I)
     1                * (PRSLV(I,KK+1) + PRSLV(I,KK))
     2                / (120.1612 E 0 * SQRT(T(I,KK)))
              IF (TCLD(I) .LE. -20.0 E 0) THEN
                TAUC(I) = TAUC(I) + DELP(I)
     1                  * AMAX1(0.1 E -3,2.56 E -5*(TCLD(I)+82.5 E 0)**2
     1)
              ELSE
                TAUC(I) = TAUC(I) + DELP(I) * 0.10 E 0
              END IF
 290        CONTINUE
          END IF
 300    CONTINUE
C --- CALC CLD EMIS
 310    continue
        DO 320 I=1,IPTS
          IF (BITX(I))
     1      EMIS(I,NC) = 1.0 E 0 - EXP(-0.75 E 0*TAUC(I))
CYH       IF (BITX(I) .AND. ITYP(I,NC).EQ.2) EMIS(I,NC) = 1.0 E 0
 320    CONTINUE
        DO 420 NBAND=1,NB
          DO 340 I=1,IPTS
            DD(I) = 0.0 E 0
            IF (BITX(I))
     1        DD(I) = TAUC(I) / (TAUC(I)+ABCFF(NBAND)*QSUM(I))
            EE(I) = 1.0 E 0 - DD(I)
            FF(I) = 1.0 E 0 - DD(I)*0.85 E 0
 340      CONTINUE
          DO 360 I=1,IPTS
            IF (BITX(I)) THEN
              AA(I) = AMIN1( 50.0 E 0,
     1                SQRT(3.0 E 0*EE(I)*FF(I))*TAUC(I) )
              AA(I) = EXP(-AA(I))
            END IF
            BB(I) = FF(I) / EE(I)
 360      CONTINUE
          DO 380 I=1,IPTS
            CC(I) = SQRT(BB(I))
            DD(I) = (CC(I) + 1.0 E 0)*(CC(I) + 1.0 E 0) -
     1              (CC(I) - 1.0 E 0)*(CC(I) - 1.0 E 0) * AA(I)*AA(I)
 380      CONTINUE
          DO 400 I=1,IPTS
            IF (BITX(I)) THEN
              RRCL(I,NBAND,NC) = AMAX1(0.1 E -5,
     1          (BB(I)-1.0 E 0)*(1.0 E 0-AA(I)*AA(I)) / DD(I) )
              TTCL(I,NBAND,NC) = AMAX1(0.1 E -5,
     1          4.0 E 0 * CC(I) * AA(I) / DD(I) )
            END IF
 400      CONTINUE
 420    CONTINUE
C
 500  CONTINUE
      IF (IPTS .EQ. IMAX) GO TO 565
      IPTS1 = IPTS + 1
      DO 520 I=IPTS1,IMAX
        NCLDS(I) = NCLDS(IPTS)
 520  CONTINUE
      DO 540 K=1,LP1
      DO 540 I=IPTS1,IMAX
        CAMT(I,K) = CAMT(IPTS,K)
        KTOP(I,K) = KTOP(IPTS,K)
        KBTM(I,K) = KBTM(IPTS,K)
        EMIS(I,K) = EMIS(IPTS,K)
 540  CONTINUE
      DO 560 K=1,LP1
      DO 560 N=1,NB
      DO 560 I=IPTS1,IMAX
        RRCL(I,N,K) = RRCL(IPTS,N,K)
        TTCL(I,N,K) = TTCL(IPTS,N,K)
 560  CONTINUE
 565  CONTINUE
C     DO 586 K=2,MCLDS+1
C       WRITE(6,581) K-1
C581    FORMAT(' IN CLDPRP: K=',I3,' CLD,EMIS,TOP,BOT:')
C       WRITE(6,582) (CAMT(I,K),EMIS(I,K),KTOP(I,K),KBTM(I,K),I=1,IMAX)
C582    FORMAT(6(2F6.3,2I4))
C       DO 585 N=1,NB
C         WRITE(6,583) N
C583      FORMAT(' NBAND =',I3,' TTCL,RRCL:')
C         WRITE(6,584) (TTCL(I,N,K),RRCL(I,N,K),I=1,IMAX)
C584      FORMAT(6(2E10.3))
C585    CONTINUE
C586  CONTINUE
C
      RETURN
      END
      SUBROUTINE GCOSZM(DTSWAV)
C>YH  SUBROUTINE GCOSZM(SSDEC,DTSWAV)
C>YH  COMMON /CSZSAV/ IFOIST,ISTP,XP,CDEC
      COMMON /CSZSAV/ ISTP,NSTP,PID12
CCCCCCMIC$ GUARD 0005
CCCCC IF (IFOIST.GT.0) GO TO 4
C>YH   NSTP IS THE NO. OF TIMES FOR CALC. COSZ FOR EACH HOUR PERIOD
        NSTP = 6
C>YH    ISTP = 6. E 0*DTSWAV
        ISTP = NSTP*DTSWAV
C>YH    XP = 2. E 0 * ASIN(1. E 0)
        PID12 = (2. E 0 * ASIN(1. E 0)) / 12. E 0
C>YH    CDEC = SQRT(1. E 0-SSDEC*SSDEC)
CCCCC   IFOIST = 10
CCCC4 CONTINUE
CCCCCCMIC$ END GUARD 0005
      RETURN
      END
      SUBROUTINE CRHTAB(RHCL,IER)
C---------------------------------------------------------------------
C..  CLD-RH RELATIONS OBTAINED FROM MITCHELL-HAHN PROCEDURE, HERE READ
C     CLD/RH TUNING TABLES FOR DAY 0,1,...,5 AND MERGE INTO 1 FILE..
C                         .............K.A.C.   MAR 93
C     USE ONLY ONE TABLE (DAY 1) FOR ALL FCST HRS....K.A.C. FEB 94
C    OUTPUT:
C        RHCL - TUNING TABLES FOR ALL FORECAST DAYS
C        IER  - =1 IF TABLES AVAILABLE.. =-1 IF NO TABLES
C--------------------------------------------------------------------
CRH1T PARAMETER (MCLD=3,NSEAL=2,IDA=6,
      PARAMETER (MCLD=3,NSEAL=2,IDA=1,
     2           NBIN=100,NLON=2,NLAT=4)
      DIMENSION RHFD(NBIN,NLON,NLAT,MCLD,NSEAL)
      DIMENSION RRHFD(NBIN,NLON,NLAT,MCLD,NSEAL)
      DIMENSION RTNFFD(NBIN,NLON,NLAT,MCLD,NSEAL)
      DIMENSION RRNFFD(NBIN,NLON,NLAT,MCLD,NSEAL)
      DIMENSION RHCF(NBIN,NLON,NLAT,MCLD,NSEAL)
      DIMENSION RTNFCF(NBIN,NLON,NLAT,MCLD,NSEAL)
c     DIMENSION KPTS(NLON,NLAT,MCLD,NSEAL)
c     DIMENSION KKPTS(NLON,NLAT,MCLD,NSEAL)
      integer*4 KPTS(NLON,NLAT,MCLD,NSEAL)
      integer*4 KKPTS(NLON,NLAT,MCLD,NSEAL)
      DIMENSION RHC(NLON,NLAT,MCLD,NSEAL)
      DIMENSION RHCL (NBIN,NLON,NLAT,MCLD,NSEAL,IDA)
c     DIMENSION ICDAYS(15), IDATE(4)
      integer*4 idate(4)
      integer*4 nbdayi, icdays(15)
      integer*4 i,j,k,l,m,icfq,ld,kd,nsl,kcl,ken
C...........................  BEGIN HERE  ..............
      IER = 1
      DO 8000 ITIM=1,IDA
      ICFQ = 43 + ITIM-1
      REWIND ICFQ
C       NCLDS=1,2,3 (L,M,H)..JSL=1,2 (LAND,SEA)
      BINSCL = 1./NBIN
      DO 1000 M=1,NSEAL
       DO 1000 L=1,MCLD
        DO 1000 K=1,NLAT
         DO 1000 J=1,NLON
          DO 1000 I=1,NBIN
           RRHFD(I,J,K,L,M) = 0.
           RRNFFD(I,J,K,L,M) = 0.
 1000 CONTINUE
      DO 1001 M=1,NSEAL
       DO 1001 L=1,MCLD
        DO 1001 K=1,NLAT
         DO 1001 J=1,NLON
          KKPTS(J,K,L,M) = 0
 1001 CONTINUE
C....  READ THE DATA OFF THE ROTATING FILE
      READ (ICFQ,ERR=998,END=999) NBDAYI,ICDAYS
      PRINT 11,NBDAYI
      DO 53 LD=1,NBDAYI
       ID = ICDAYS(LD) / 10000
       IM = (ICDAYS(LD)-ID*10000) / 100
       IY = ICDAYS(LD)-ID*10000-IM*100
       PRINT 51,ID,IM,IY
   53 CONTINUE
      READ (ICFQ,ERR=998,END=999) FHOUR,IDATE
      PRINT 3003,IDATE,FHOUR,ITIM
      DO 1300 KD=1,NBDAYI
       READ (ICFQ) RHFD
       READ (ICFQ) RTNFFD
       READ (ICFQ) KPTS
       DO 1002 M=1,NSEAL
        DO 1002 L=1,MCLD
         DO 1002 K=1,NLAT
          DO 1002 J=1,NLON
           DO 1002 I=1,NBIN
            RRHFD(I,J,K,L,M) = RRHFD(I,J,K,L,M) + RHFD(I,J,K,L,M)
            RRNFFD(I,J,K,L,M) = RRNFFD(I,J,K,L,M)+RTNFFD(I,J,K,L,M)
 1002  CONTINUE
       DO 1003 M=1,NSEAL
        DO 1003 L=1,MCLD
         DO 1003 K=1,NLAT
          DO 1003 J=1,NLON
           KKPTS(J,K,L,M) = KKPTS(J,K,L,M) + KPTS(J,K,L,M)
 1003  CONTINUE
 1300 CONTINUE
C
      DO 1004 M=1,NSEAL
       DO 1004 L=1,MCLD
        DO 1004 K=1,NLAT
         DO 1004 J=1,NLON
          DO 1004 I=1,NBIN
           RHCF(I,J,K,L,M) = RRHFD(I,J,K,L,M)
           RTNFCF(I,J,K,L,M) = RRNFFD(I,J,K,L,M)
 1004 CONTINUE
      DO 1005 M=1,NSEAL
       DO 1005 L=1,MCLD
        DO 1005 K=1,NLAT
         DO 1005 J=1,NLON
          KPTS(J,K,L,M) = KKPTS(J,K,L,M)
 1005 CONTINUE
C.....  COMPUTE THE CUMULATIVE FREQUENCY DISTRIBUTION..
      DO 200 N=1,NSEAL
       DO 200 K=1,MCLD
        DO 200 L=1,NLAT
         DO 200 J=1,NLON
          DO 190 I=2,NBIN
           RHCF(I,J,L,K,N) = RHCF(I-1,J,L,K,N) + RHCF(I,J,L,K,N)
           RTNFCF(I,J,L,K,N)=RTNFCF(I-1,J,L,K,N) + RTNFCF(I,J,L,K,N)
  190     CONTINUE
  200 CONTINUE
      DO 300 N=1,NSEAL
       DO 300 L=1,NLAT
        DO 300 J=1,NLON
         DO 300 K=1,MCLD
          DO 300 I=1,NBIN
           IF (KPTS(J,L,K,N).GT.0) THEN
            RHCF(I,J,L,K,N) = RHCF(I,J,L,K,N) / KPTS(J,L,K,N)
            RTNFCF(I,J,L,K,N) = RTNFCF(I,J,L,K,N) / KPTS(J,L,K,N)
           ELSE
            RHCF(I,J,L,K,N) = -0.1
            RTNFCF(I,J,L,K,N) = -0.1
           END IF
  300 CONTINUE
      DO 255 NSL=1,NSEAL
       DO 255 KCL=1,MCLD
        PRINT 264,KCL,NSL
        PRINT 265,((KPTS(I,L,KCL,NSL),I=1,NLON),L=1,NLAT)
  255 CONTINUE
      DO 360 NSL=1,NSEAL
       DO 360 K=1,MCLD
        DO 360 L=1,NLAT
         DO 360 J=1,NLON
          IF (KPTS(J,L,K,NSL).LE.0) GO TO 317
          DO 320 I=1,NBIN
           ICRIT = I
           IF (RHCF(I,J,L,K,NSL).GE.RTNFCF(1,J,L,K,NSL)) GO TO 350
  320     CONTINUE
C... NO CRITICAL RH
  317     ICRIT=-1
          PRINT 210,L,J,NSL
          PRINT 202
          DO 135 I=1,NBIN
           PRINT 203,RHCF(I,J,L,K,NSL),RTNFCF(I,J,L,K,NSL)
  135     CONTINUE
  350     RHC(J,L,K,NSL) = ICRIT * BINSCL
  360 CONTINUE
      DO 1210 NSL=1,NSEAL
       DO 1210 K=1,MCLD
        PRINT 1221,K,NSL
        DO 1210 L=1,NLAT
         PRINT 211,(RHC(J,L,K,NSL),J=1,NLON)
 1210 CONTINUE
      DO 450 NSL=1,NSEAL
       DO 450 KEN=1,MCLD
        DO 450 L=1,NLAT
         DO 450 JL=1,NLON
          DO 400 I=1,NBIN
           RHCL(I,JL,L,KEN,NSL,ITIM) = -0.1
  400     CONTINUE
  450 CONTINUE
      DO 751 NSL=1,NSEAL
       DO 751 KEN=1,MCLD
        DO 751 L=1,NLAT
         DO 751 JL=1,NLON
          IF (KPTS(JL,L,KEN,NSL).LE.0) GO TO 751
          DO 753 I=1,NBIN
           DO 755 J=1,NBIN
            IF (RHCF(J,JL,L,KEN,NSL).GE.RTNFCF(I,JL,L,KEN,NSL)) THEN
             RHCL(I,JL,L,KEN,NSL,ITIM) = J*BINSCL
             GO TO 753
            END IF
  755      CONTINUE
  753     CONTINUE
  751 CONTINUE
      DO 3000 LON=1,NLON
       DO 3000 LAT=1,NLAT
        DO 3000 NC=1,MCLD
         DO 3000 NSL=1,NSEAL
         ISAT = 0
         DO 67 IT=1,NBIN
          CFRAC = BINSCL * (IT-1)
          IF (RHCL(IT,LON,LAT,NC,NSL,ITIM).LT.0.) THEN
           PRINT 1941,IT,NSL,NC,LAT,LON
           STOP
          END IF
          IF (IT.LT.NBIN.AND.RTNFCF(IT,LON,LAT,NC,NSL).GE.1.) THEN
           IF (ISAT.LE.0) THEN
            ISAT = IT
            RHSAT = RHCL(IT,LON,LAT,NC,NSL,ITIM)
            CLSAT = CFRAC
           END IF
           RHCL(IT,LON,LAT,NC,NSL,ITIM) =
     1               RHSAT + (1.-RHSAT)*(CFRAC-CLSAT)/(1.-CLSAT)
          END IF
          IF (IT.EQ.NBIN) RHCL(IT,LON,LAT,NC,NSL,ITIM) = 1.
   67    CONTINUE
 3000 CONTINUE
 8000 CONTINUE
      DO 8001 KEN=1,IDA
       ICFQ = 42 + KEN
       REWIND ICFQ
 8001 CONTINUE
      RETURN
  998 PRINT 988,ITIM
      IER = -1
      RETURN
  999 PRINT 989,ITIM
      IER = -1
      RETURN
   11 FORMAT(1H ,' DAYS ON FILE =',I5)
   51 FORMAT(1H ,' ARCHV DATA FROM DA,MO,YR=',3I4)
  202 FORMAT(1H0,' MODEL RH ',' OBS RTCLD')
  203 FORMAT(2F10.2)
  210 FORMAT(1H ,' NO CRIT RH FOR LAT=',I3,' AND LON BAND=',I3,
     1           ' LAND(=1) SEA=',I3)
  211 FORMAT(1H ,15F6.2)
  264 FORMAT(1H ,' NUMBER OF GG POINTS USED IN EACH AREA..BY LATITUDE',
     1           '..FOR CLOUD TYPE=',I4,'SEALAND=',I2)
  265 FORMAT(1H ,15I8)
  988 FORMAT(1H ,'....ERROR READING TABLES FOR TIME=',I4)
  989 FORMAT(1H ,'....E.O.F READING TABLES FOR TIME=',I4)
 1221 FORMAT(1H0,' CRITICAL RH FOR LON,LAT ARRAYS FOR CLD TYPE=',I3,
     1           ' LAND(=1) SEA=',I3)
 1941 FORMAT(1H ,' NEG RHCL FOR IT,NSL,NC,LAT,LON=',5I4,'...STOPPP..')
 3003 FORMAT(5X,'...LAST DATE/TIME AND CURRENT ITIM',/,10X,
     1       4I15,F7.1,I6)
      END
      SUBROUTINE RADFS (IX,IX2,
     1                  QS,PP,QQH2O,TT,O3QO3,TSFC,SLMSK,ALBEDO,XLAT,
CYH931                  CLDS,CEMIS,MTOP,MBOT,COSZRO,TAUDAR,IBEG,IPTS,
CYH941                  CLDS,CEMIS,MTOP,MBOT,CLDARY,IEMIS,EMIS0,TAUC0,
     1                                        CLDARY,
     1                  COSZRO,TAUDAR,IBEG,IPTS,
CYH93...
CYH942                  LAT,KO3,KEMIS,KALB,IPT,JPOINT,
     2                  LAT,KO3,      KALB,IPT,JPOINT,
     3                  SLMRF,SLYMRF,ITIMSW,ITIMLW,SWH,HLW,
CSIB 4                  FLWUP,FSWUP,FSWDN,FSWDNS,FSWUPS,FLWDNS,FLWUPS)
     4                  FLWUP,FSWUP,FSWDN,FSWDNS,FSWUPS,FLWDNS,FLWUPS,
     5                  FLWUP0,FSWUP0,SSWDN0,SSWUP0,SLWDN0,
     5                  ALVBR,ALNBR,ALVDR,ALNDR,
     6                  GDFVBR,GDFNBR,GDFVDR,GDFNDR)
CSIB
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    RADFS       INTERFACE BETWIXT GLOOPR AND GFDL RADI8
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C           BERT B. KATZ     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: PREPARES DATA FOR -SW- AND -LW- RADIATION CALCULATIONS.
C   E.G. FLIP VERTICAL COORDINATE (NMC K=1 IS LOWEST LAYER,WHILE FOR
C   GFDL K=1 IS TOPMOST LAYER),COMPUTE SFC ALBEDO OVER OPEN WATER,
C   PUT CLOUD DATA IN PROPER LOCATIONS,ETC..
C   RADFS THEN CALLS
C   SWR89  (-SW- CALCULATIONS) AND LWR88  (-LW- COMPUTATIONS).
C   FINALLY,RADIATIVE HEATING RATES AND BOUNDARY FLUXES ARE RETURNED
C   TO SUBROUTINE GLOOPR, ITSELF CALLED FROM THE MRF.
C
C PROGRAM HISTORY LOG:
C   84-01-01  GFDL
C   89-07-07  KENNETH CAMPANA - EXTENSIVE REVISIONS FOR
C                               PLUG COMPATIBILITY....
C   89-07-07  BERT KATZ (CENTEL CORP) - REVISION OF SEVERAL
C                               SECTIONS WITH VECTOR CODING.
C   89-10-19  KENNETH CAMPANA - USE-SLI-MASK IN PLACE OF TSEA TO
C                               DETERMINE OPEN WATER(SFC ALBEDO CALC)
C   89-11-29  KENNETH CAMPANA - INTERFACE WITH NEWEST VERSION OF GFDL
C                               LW RADIATION AND DEVECTORIZE FOR
C                               BENCHMARK.
C   91-03-15  BERT KATZ (CENTEL CORP) - MODIFIED FOR USE WITHIN
C                               THE MRF. MOST ASTRONOMICAL
C                               CALCULATIONS REMOVED AND ARE NOW
C                               IN THE NEW RADIATION DRIVER,
C                               SUBROUTINE GLOOPR. OTHER
C                               ONE-TIME CALCULATIONS MOVED
C                               TO SUBROUTINE GRADFS.
C                               ALL CODES AGAIN VECTORIZED,
C                               THIS TIME FOR THE CRAY Y-MP.
C
C USAGE:    CALL RADFS (QS,PP,QQH2O,TT,O3QO3,TSFC,SLMSK,ALBEDO,
C                       XLAT,XLON,COSZN,CLDS,CEMIS,MTOP,MBOT,CZMN,
C                       IBEG,IPTS,DTRAD,LAT,
C                       KDAPRX,KO3,KCZ,KEMIS,KALB,
C                       KCIRC,KMSK,ICHECK,IPT,JPOINT,
C                       SLMRF,SLYMRF,ITIMLW,ITIMSW,SWH,HLW,
C                       FLWUP,FSWUP,FSWDN,FSWDNS,FSWUPS,FLWDNS,FLWUPS)
C
C   INPUT ARGUMENT LIST:
C     QS      - SFC PRESSURE (CB)
C     PP      - LAYER PRESSURE (CB)-LYR 1 IS BOTTOMMOST LYR
C     QQH2O   - LAYER MOISTURE (G/G)
C     TT      - LAYER TEMPERATURE (DEG K)
C     TSFC    - SURFACE TEMPERATURE(DEG K)
C     SLMSK   - SEA(0),LAND(1),SEAICE(2) MASK
C     ALBEDO  - SFC ALBEDO(FRACTION) - ITS ASSUMED THAT SNOW
C               EFFECTS ON ALBEDO ARE ALREADY INCLUDED.
C     XLAT    - LATITUDE (DEG) FOR EACH POINT (S.HEMIS.=NEG)
C     XLON    - LONGITUDE(DEG) FOR EACH POINT
C     CLDS    - CLD FRACTION H,M,L (3 CLD TYPES)
C     MTOP    - CLD TOP(MODEL LYR)=H,M,L
C     MBOT    - CLD BOT(MODEL LYR)=H,M,L
C     IBEG    - STARTING POINT IN DOMAIN DEPENDENT INPUT, OUTPUT ARRAYS.
C     IPTS    - NUMBER OF POINTS FOR WHICH RADIATON IS TO BE PERFORMED.
C     LAT     - GRID ROW NUMBER
C     KDAPRX  - SW DIURNAL APPROX(=1),,=0 MEANS INSTANTANEOUS SW.
C     KO3     - O3 SWITCH(=1,USE INPUT QO3-=0,USE CLIMO INTERP)
C     KCZ     - COSZRO SWITCH (1,USE INPUT-=0,COMPUTE HEREIN-MRF)
C     KEMIS   - HI CLD EMISS SWTCH(=1,USE INPUT-=0,USE DEFAULT)
C     KALB    - OPEN WATER SFCALB(=1,USE INPUT-=0,USE PAYNE DATA)
C     KCIRC   - VALUE OF 1-5 REFERS TO MCCLATCHEY PROFILE OF O3
C               (1=TROPICAL)
C     KMSK    - 0=OPEN WATER, 1=LAND, 2=SEA ICE
C     IPT     - LONGITUDINAL INDEX OF DEBUG POINT. 0=NO DEBUG OUTPUT
C     JPOINT  - LATITUDINAL INDEX OF DEBUG POINT. 0=NO DEBUG OUTPUT
C     SLMRF   - SIGMA VALES AT INTERFACES
C     SLYMRF  - SIGMA VALES AT LAYERS
C     ITIMLW  - 1=PERFORM LONG WAVE CALCULATIONS, 0=DON'T DO LONG WAVE
C     ITIMSW  - 1=PERFORM SHORT WAVE CALCULATIONS, 0=DON'T DO SHORT WAVE
C    POSSIBLE INPUT:
C     O3QO3   - LAYER OZONE (G/G) - USED IF KO3=1
C     COSZN   - COSINE ZENITH ANGLE - USED IF KCZ=1
C     CEMIS   - HI CLD EMISSIVITY - USED IF KEMIS=1
C     CZMN    - LATITUDINAL DAYLIGHT MEAN OF COSINE ZENITH ANGLE-
C               USED IF KDAPRX=1.
C     DTRAD   - RADIATIVE TIMESTEP=NUM HRS BETWEEN CALLS TO SWR89.
C               NEEDED FOR CALL TO ZENITH - IF KCZ=0
C
C   OUTPUT ARGUMENT LIST:
C     SWH     - LAYER SW HEATING RATES (DEG/SEC)
C     HLW     - LAYER LW HEATING RATES (DEG/SEC)
C     FLWUP   - T.O.A. UPWARD LW FLUX (W/M2)
C     FSWUP   - T.O.A. UPWARD SW FLUX (W/M2)
C     FSWDN   - T.O.A. DNWARD SW FLUX (W/M2)
C     FSWDNS  - SFC    DNWARD SW FLUX (W/M2)
C     FSWUPS  - SFC    UPWARD SW FLUX (W/M2)
C     FLWDNS  - SFC    DNWARD LW FLUX (W/M2)
C     FLWUPS  - SFC    UPWARD LW FLUX (W/M2)
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C      ****************************************************************
C      *  GENERALIZED FOR PLUG-COMPATIBILITY -                        *
C      *    ORIGINAL CODE WAS CLEANED-UP GFDL CODE...K.CAMPANA MAR89..*
C......*  EXAMPLE FOR MRF:                                            *
C      *    KO3  =0  AND O3QO3=DUMMY ARRAY.   (GFDL CLIMO O3 USED)    *
CYH94       NO KEMIS
C      *    KALB =0  AND SFC ALBEDO OVER OPEN WATER COMPUTED BELOW... *
C      *    KCCO2=0,CO2 OBTAINED FROM BLOCK DATA                      *
C      *         =1,CO2 COMPUTED IN HERE --- NOT AVAILABLE YET...     *
C      *    SLMRF = INTERFACE (LEVELS) SIGMA                          *
C      *    SLYMRF= LAYER SIGMA                                       *
C      *  UPDATED FOR YUTAI HOU SIB SW RADIATION....KAC 6 MAR 92      *
C      *    OCEAN ALBEDO FOR BEAM SET TO BULK SFCALB, SINCE           *
C      *       COSINE ZENITH ANGLE EFFECTS ALREADY THERE(REF:PAYNE)   *
C      *       SLMSK = 0.                                             *
C      *    SNOW ICE ALBEDO FOR BEAM NOT ENHANCED VIA COSINE ZENITH   *
C      *       ANGLE EITHER CAUSE VALU ALREADY HIGH (WE SEE POLAR     *
C      *       COOLING IF WE DO BEAM CALCULATION)....KAC 17MAR92      *
C      *       ALBEDO GE .5                                           *
C      *   UPDATED TO OBTAIN CLEAR SKY FLUXES "ON THE FLY" FOR        *
C      *       CLOUD FORCING DIAGNOSTICS ELSEWHERE...KAC 7AUG92       *
C      *       SEE       LINES...RADFS,LWR88,FST88,SPA88 .......      *
CYH93...
C      *  UPDATED FOR USE NEW CLD SCHEME      ......YH  DEC 92        *
CYH94 NOT   INPUT CLD MAY BE AS ORIGINAL IN 3 DOMAIN (CLD,MTOP,MBOT)  *
C      *       OR IN A VERTICAL ARRAY OF 28 MDL LAYERS (CLDARY)       *
CYH94 NOT   IEMIS=0  USE THE ORG. CLD EMIS SCHEME                     *
CYH94 NOT        =1  USE TEMP DEP. CLD EMIS SCHEME                    *
C      *  UPDATED TO COMPUTE CLD LAYER REFLECTANCE AND TRANSMITANCE   *
C      *    INPUT CLD EMISSIVITY AND OPTICAL THICKNESS 'EMIS0,TAUC0'  *
C      *                                      ......YH FEB 93         *
CYH93...
CYH94...
C      *  UPDATED FOR USE NEW CLD SCHEME      ......YH  DEC 93        *
C      *    INPUT            CLOUD FRACTIONS IN CLDARY, THE           *
C      *       STRATIFORM (STR) AND THE CONVECTIVE (CNV) TYPES OF     *
C      *       CLOUD ARE CONBINED AS CLDARY = STR + 1.E4 * CNV        *
C      *       THE MARINE STRATUS CLD IN STR TYPE IS FLAGGED BY       *
C      *       ADDING A VALUE OF 2.                                   *
C      *    CLOUD RADIATIVE PROPERTIES ARE HANDLED BY SUBROUTINE      *
C      *       CLDPRP, IN WHICH SW REFLECTANCE, TRANSMITANCE, AND     *
C      *       LW EMISSIVITY ARE CALCULATED AND ARE PUT INTO PROPER   *
C      *       ARRAYS FOR RADIATION COMPUTATIONS.                     *
CYH94...
C      ****************************************************************
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
      PARAMETER (LNGTH=37*L)
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C   THE FOLLOWING COMMON BLOCKS CONTAIN PRETABULATED CO2 TRANSMISSION
C       FUNCTIONS, EVALUATED USING THE METHODS OF FELS AND
C       SCHWARZKOPF (1981) AND SCHWARZKOPF AND FELS (1985),
C***COMMON CO2BD3 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-800 CM-1 BAND. ALSO INCLUDED
C   ARE THE STANDARD TEMPERATURES AND THE WEIGHTING FUNCTION. THESE
C   DATA ARE IN BLOCK DATA BD3:
C         CO251    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO258    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT51    =  FIRST TEMPERATURE DERIVATIVE OF CO251
C         CDT58    =  FIRST TEMPERATURE DERIVATIVE OF CO258
C         C2D51    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         C2D58    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         CO2M51   =  TRANSMISSION FCTNS FOR T0 FOR ADJACENT PRESSURE
C                        LEVELS, WITH NO PRESSURE QUADRATURE. USED FOR
C                        NEARBY LAYER COMPUTATIONS. P(SFC)=1013.25 MB
C         CO2M58   =  SAME AS CO2M51,WITH P(SFC)= ^810 MB
C         CDTM51   =  FIRST TEMPERATURE DERIVATIVE OF CO2M51
C         CDTM58   =  FIRST TEMPERATURE DERIVATIVE OF CO2M58
C         C2DM51   =  SECOND TEMPERATURE DERIVATIVE OF CO2M51
C         C2DM58   =  SECOND TEMPERATURE DERIVATIVE OF CO2M58
C         STEMP    =  STANDARD TEMPERATURES FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB
C         GTEMP    =  WEIGHTING FUNCTION FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB.
C         B0       =  TEMP. COEFFICIENT USED FOR CO2 TRANS. FCTN.
C                        CORRECTION FOR T(K). (SEE REF. 4 AND BD3)
C         B1       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B2       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B3       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C
      COMMON/CO2BD3/CO251(LP1,LP1),CO258(LP1,LP1),CDT51(LP1,LP1),
     1 CDT58(LP1,LP1),C2D51(LP1,LP1),C2D58(LP1,LP1),CO2M51(L),
     2 CO2M58(L),CDTM51(L),CDTM58(L),C2DM51(L),C2DM58(L),
     3 STEMP(LP1),GTEMP(LP1),B0,B1,B2,B3
C
C***COMMON CO2BD2 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-670 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD2.
C         CO231    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO238    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT31    =  FIRST TEMPERATURE DERIVATIVE OF CO231
C         CDT38    =  FIRST TEMPERATURE DERIVATIVE OF CO238
C         C2D31    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C         C2D38    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C
      COMMON / CO2BD2 / CO231(LP1),CO238(LP1),CDT31(LP1),
     1 CDT38(LP1),C2D31(LP1),C2D38(LP1)
C
C***COMMON CO2BD4 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 670-800 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD4.
C         CO271    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO278    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT71    =  FIRST TEMPERATURE DERIVATIVE OF CO271
C         CDT78    =  FIRST TEMPERATURE DERIVATIVE OF CO278
C         C2D71    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C         C2D78    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C
      COMMON / CO2BD4 / CO271(LP1),CO278(LP1),CDT71(LP1),
     1 CDT78(LP1),C2D71(LP1),C2D78(LP1)
C
C***COMMON CO2BD5 CONTAINS CO2 TRANSMISSION FUNCTIONS FOR THE 2270-
C   2380 PART OF THE 4.3 UM CO2 BAND. THESE DATA ARE IN BLOCK DATA BD5.
C         CO211    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO218    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C
      COMMON / CO2BD5 / CO211(LP1),CO218(LP1)
C
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
C        *********************************************
C====>   *   INPUT FROM FROM CALLING PROGRAM         *
C        *********************************************
      DIMENSION
     1  QS(IX2),PP(IX,L),QQH2O(IX2,L),TT(IX2,L),TSFC(IX),SLMSK(IX),
CYH942  ALBEDO(IX),XLAT(IX),CLDS(IX,3),MTOP(IX,3),MBOT(IX,3),
     2  ALBEDO(IX),XLAT(IX),
     3  COSZRO(IX),TAUDAR(IX)
CYH93  ADD CLD EMISSIVITY, OPTICAL DEPTH
CYH94 DIMENSION CLDARY(IX,L),EMIS0(IX,3),TAUC0(IX,3)
      DIMENSION CLDARY(IX,L)
CYH93...
      DIMENSION SLMRF(LP1),SLYMRF(L)
C        *********************************************
C====>   *   POSSIBLE INPUT FROM CALLING PROGRAM     *
C        *********************************************
      DIMENSION
CYH941  O3QO3(IX,L),CEMIS(IX)
     1  O3QO3(IX,L)
CSIB... ALBEDOES FROM SIB PARAMETERIZATION
      DIMENSION
     2  ALVBR(IX),     ALNBR(IX),     ALVDR(IX),    ALNDR(IX)
CSIB...
C        *********************************************
C====>   *   OUTPUT TO CALLING PROGRAM               *
C        *********************************************
      DIMENSION  SWH(IX,L),HLW(IX,L)
      DIMENSION  FLWUP(IX),FSWUP(IX),FSWDN(IX),
     1           FSWDNS(IX),FLWDNS(IX),FLWUPS(IX),FSWUPS(IX)
      DIMENSION  FLWUP0(IX),FSWUP0(IX),
     1           SSWDN0(IX),SLWDN0(IX),SSWUP0(IX)
CSIB...
C        *********************************************
C====>   *   POSSIBLE OUTPUT TO CALLING PROGRAM      *
C        *********************************************
C...... DOWNWARD SW FLUXES FOR THE SIB PARAMETERIZATION
      DIMENSION
     1  GDFVBR(IX),    GDFNBR(IX),    GDFVDR(IX),   GDFNDR(IX)
C        ************************************************************
C====>   *   ARRAYS NEEDED BY SWR93SIB..FOR CLEAR SKY DATA(EG.FSWL) *
C        ************************************************************
      DIMENSION
     1  FSWL(IMAX,LP1),  HSWL(IMAX,LP1),  UFL(IMAX,LP1),  DFL(IMAX,LP1)
CSIB...
C        ******************************************************
C====>   *   ARRAYS NEEDED BY CLO88, LWR88, SWR89 OR SWR91SIB *
C        ******************************************************
      DIMENSION NCLDS(IMAX),KTOP(IMAX,LP1),KBTM(IMAX,LP1)
CYH94 DIMENSION CAMTSW(IMAX,LP1),CAMT(IMAX,LP1)
      DIMENSION                  CAMT(IMAX,LP1)
      DIMENSION CLDFAC(IMAX,LP1,LP1),EMCLD(IMAX,LP1)
      DIMENSION PRESS(IMAX,LP1),TEMP(IMAX,LP1),RH2O(IMAX,L),QO3(IMAX,L)
      DIMENSION HEATRA(IMAX,L),GRNFLX(IMAX),TOPFLX(IMAX)
      DIMENSION GRNFX0(IMAX),TOPFX0(IMAX)
CYH94 DIMENSION KTOPSW(IMAX,LP1),KBTMSW(IMAX,LP1)
      DIMENSION EQCMT (IMAX,LP1)
CYH94 ...
CYH93 DIMENSION CIRAB(IMAX,LP1),CIRRF(IMAX,LP1),CUVRF(IMAX,LP1)
CYH94 DIMENSION FSW(IMAX,LP1),HSW(IMAX,LP1),GRDFLX(IMAX),
      DIMENSION FSW(IMAX,LP1),HSW(IMAX,LP1),
     1          UF(IMAX,LP1),DF(IMAX,LP1)
      DIMENSION COSZEN(IMAX),TAUDA(IMAX)
CYH93...
CYH93. ADD CLD REFLECTANCE AND TRANSMITTANCE, AND TEMP. VARIABLES
      DIMENSION RRCL(IMAX,NB,LP1), TTCL(IMAX,NB,LP1)
CYH93...
      DIMENSION
     1 JJROW(IMAX),DO3V(IMAX),DO3VP(IMAX),TTHAN(IMAX)
C====>    **************************************************************
C--     SEASONAL CLIMATOLOGIES OF O3 (OBTAINED FROM A PREVIOUSLY RUN
C             CODE WHICH INTERPOLATES O3 TO USER VERTICAL COORDINATE).
C         DEFINED AS 5 DEG LAT MEANS N.P.->S.P.
      COMMON /SAVMEM/
C-       ...WINTER....  ...SPRING....  ...SUMMER....  ....FALL.....
     1   DDUO3N(37,L), DDO3N2(37,L), DDO3N3(37,L), DDO3N4(37,L)
      DIMENSION RAD1(LNGTH), RAD2(LNGTH), RAD3(LNGTH), RAD4(LNGTH)
      EQUIVALENCE (RAD1(1),DDUO3N(1,1)),(RAD2(1),DDO3N2(1,1))
      EQUIVALENCE (RAD3(1),DDO3N3(1,1)),(RAD4(1),DDO3N4(1,1))
C====>    **************************************************************
      COMMON / SSALB /
     2   ALBD(21,20),        ZA(20),             TRN(21),
     3   DZA(19)
C    ***********************************************************
CSIB... LOCAL ARRAYS
      DIMENSION
     1  ALVB (IMAX),     ALNB (IMAX),     ALVD (IMAX),    ALND  (IMAX)
     2 ,GDFVB (IMAX),    GDFNB (IMAX),    GDFVD (IMAX),   GDFND (IMAX)
CSIB...
      DIMENSION  SFCALB(IMAX)
      COMMON /RDFSAV/ EMISP,EMIST,XLATT,XLATP,Q19001,HP98,H3M6,
     *     HP75,H6M2,HP537,H74E1,H15E1,Q14330,HP2,TWENTY,HNINE,
     *     DEGRAD,HSIGMA,DAYSEC,RCO2
      COMMON /ASTSAV/ SOLC,RSIN1,RCOS1,RCOS2
C====> BEGIN HERE             .......................
C.....    SOLC,THE SOLAR CONSTANT IS SCALED TO A MORE CURRENT VALUE.
C          I.E. IF SOLC=2.0 LY/MIN THEN SSOLAR=1.96 LY/MIN.
C....   RE-COMPUTED CAUSE SSOLAR OVERWRITTEN AS PART OF SCRATCH COMMON
      RNDG = 180./ 3.141593E+0
      SSOLAR=SOLC*HP98
      DO 40 I=1,IPTS
        IR = I + IBEG - 1
        TH2=HP2*XLAT(IR)*RNDG
        JJROW(I)=Q19001-TH2
        TTHAN(I)=(19-JJROW(I))-TH2
C.....  NOTE THAT THE NMC VARIABLES ARE IN MKS (THUS PRESSURE IS IN
C          CENTIBARS)WHILE ALL GFDL VARIABLES ARE IN CGS UNITS
        SFCALB(I) = ALBEDO(IR)
C.....  NOW PUT SFC TEMP,PRESSURES, ZENITH ANGLE INTO SW COMMON BLOCK...
        PRESS(I,LP1)=H1E4*QS(IR)
        TEMP(I,LP1)=TSFC(IR)
        COSZEN(I) = COSZRO(IR)
        TAUDA(I) = TAUDAR(IR)
   40 CONTINUE
C
C.....  ALL GFDL VARIABLES HAVE K=1 AT THE TOP OF THE ATMOSPHERE.NMC
C      VARIABLES HAVE K=1 AT THE SURFACE.K-LOOP STRUCTURE IS DIFFERENT.
C
      DO 50 K=1,L
       DO 50 I=1,IPTS
        IR = I + IBEG - 1
C.....  NOW PUT TEMP,PRESSURES, INTO SW COMMON BLOCK..........
        TEMP(I,K) = TT(IR,LP1-K)
        PRESS(I,K) = H1E4 * PP(IR,LP1-K)
C.... STORE LYR MOISTURE AND ADD TO SW COMMON BLOCK
        RH2O(I,K)=QQH2O(IR,LP1-K)
        IF(RH2O(I,K).LT.H3M6) RH2O(I,K)=H3M6
   50 CONTINUE
C...    *************************
      IF (KO3.EQ.0) GO TO 65
C...    *************************
      DO 60 K=1,L
       DO 60 I=1,IPTS
        QO3(I,K) = O3QO3(I+IBEG-1,LP1-K)
   60 CONTINUE
   65 CONTINUE
C...   ************************************
      IF (KALB.GT.0) GO TO 110
C...   ************************************
C..... THE FOLLOWING CODE GETS ALBEDO FROM PAYNE,1972 TABLES IF
C         1) OPEN SEA POINT (SLMSK=0);2) KALB=0
      IQ=INT(TWENTY*HP537+ONE)
      DO 105 I=1,IPTS
         IF(COSZEN(I).GT.0.0 .AND. SLMSK(I+IBEG-1).EQ.0.0) THEN
           ZEN=DEGRAD*ACOS(MAX(COSZEN(I),0.0))
           IF(ZEN.GE.H74E1) JX=INT(HAF*(HNINETY-ZEN)+ONE)
           IF(ZEN.LT.H74E1.AND.ZEN.GE.FIFTY)
     1        JX=INT(QUARTR*(H74E1-ZEN)+HNINE)
           IF(ZEN.LT.FIFTY) JX=INT(HP1*(FIFTY-ZEN)+H15E1)
           DZEN=-(ZEN-ZA(JX))/DZA(JX)
           ALB1=ALBD(IQ,JX)+DZEN*(ALBD(IQ,JX+1)-ALBD(IQ,JX))
           ALB2=ALBD(IQ+1,JX)+DZEN*(ALBD(IQ+1,JX+1)-ALBD(IQ+1,JX))
           SFCALB(I)=ALB1+TWENTY*(ALB2-ALB1)*(HP537-TRN(IQ))
         ENDIF
  105 CONTINUE
  110 CONTINUE
C        **********************************
      IF (KO3.GT.0) GO TO 135
C        **********************************
C.... COMPUTE CLIMATOLOGICAL ZONAL MEAN OZONE,
C....   SEASONAL AND SPATIAL INTERPOLATION DONE BELOW.
      DO 130 K=1,L
        DO 125 I=1,IPTS
          DO3V(I)  = DDUO3N(JJROW(I),K) + RSIN1*DDO3N2(JJROW(I),K)
     1                +RCOS1*DDO3N3(JJROW(I),K)
     2                +RCOS2*DDO3N4(JJROW(I),K)
          DO3VP(I) = DDUO3N(JJROW(I)+1,K) + RSIN1*DDO3N2(JJROW(I)+1,K)
     1               +RCOS1*DDO3N3(JJROW(I)+1,K)
     2               +RCOS2*DDO3N4(JJROW(I)+1,K)
C...   NOW LATITUDINAL INTERPOLATION, AND
C          CONVERT O3 INTO MASS MIXING RATIO(ORIGINAL DATA MPY BY 1.E4)
          QO3(I,K) = H1M4 * (DO3V(I)+TTHAN(I)*(DO3VP(I)-DO3V(I)))
  125   CONTINUE
  130 CONTINUE
  135 CONTINUE
C...   **********************************************************
CYH94   CLOUD SHUFFLING NOT NEEDED, SWBOT+1 DONE IN SWR CODE SO NO
CYH94    NEED TO CARRY A KTOPSW AND KTOP,ETC, AND EMISS DEFAULT NOT.
CYH94   RRCL,TTCL NOW IN CLDPRP
CYH94     SO LOTS OF CODE DELETED..
C...   **********************************************************
      IF (IPTS .EQ. IMAX) GO TO 165
      IPTS1 = IPTS + 1
      DO 120 I=IPTS1,IMAX
        COSZEN(I) = COSZEN(IPTS)
        TAUDA (I) = TAUDA (IPTS)
  120 CONTINUE
      DO 140 K=1,LP1
      DO 140 I=IPTS1,IMAX
        PRESS(I,K) = PRESS(IPTS,K)
        TEMP (I,K) = TEMP (IPTS,K)
  140 CONTINUE
      DO 160 K=1,L
      DO 160 I=IPTS1,IMAX
        RH2O(I,K) = RH2O(IPTS,K)
        QO3 (I,K) = QO3 (IPTS,K)
  160 CONTINUE
  165 CONTINUE
C        **********************************************************
C====>   *      CLOUD SECTION-PUT DATA INTO DESIRED FORMAT        *
C        **********************************************************
C...  CALL CLDPRP TO GET CLOUD PROPERTIES AND PUT INTO PROPER ARRAYS
C....    PASS LATITUDE OF FIRST POINT..OK FOR GLOBAL MODEL....
C
       CALL CLDPRP(QS,RH2O,TEMP,SLMRF,CLDARY,IBEG,IPTS,XLAT,
     1             CAMT,KTOP,KBTM,NCLDS,EMCLD,RRCL,TTCL)
C
      DO 195 I=1,IPTS
CSIB...ALBEDOES FROM SIB SFC PARAMETERIZATION..
CSIB...      (UNCOMMENT 5 LINES WHEN SIB ACTIVATED)
C       IR = I + IBEG - 1
C.....     VISIBLE AND NEAR IR DIFFUSE ALBEDO
C       ALVD(I) = ALVDR(IR)
C       ALND(I) = ALNDR(IR)
C.....     VISIBLE AND NEAR IR DIRECT BEAM ALBEDO
C       ALVB(I) = ALVBR(IR)
C       ALNB(I) = ALNBR(IR)
CSIB...
CSIB...ALBEDOES FOR CASE WITHOUT SIB IN THE FCST MODEL
CSIB...      (COMMENT 4 LINES WHEN SIB ACTIVATED..VD,ND,VB,NB)
C.....     VISIBLE AND NEAR IR DIFFUSE ALBEDO
        ALVD(I) = SFCALB(I)
        ALND(I) = SFCALB(I)
C.....     VISIBLE AND NEAR IR DIRECT BEAM ALBEDO
        ALVB(I) = SFCALB(I)
        ALNB(I) = SFCALB(I)
C.....     VISIBLE AND NEAR IR DIRECT BEAM ALBEDO,IF NOT OCEAN NOR SNOW
C            ..FUNCTION OF COSINE SOLAR ZENITH ANGLE..
        IF (SLMSK(I+IBEG-1).GT.0.0 E 0) THEN
CYH93    IF (SFCALB(I).LT.0.5) THEN
         IF (SFCALB(I).LE.0.5 E 0) THEN
CYH93...
          ALBD0 = -18.0 E 0 * (0.5 E 0 - ACOS(COSZEN(I))/ 3.141593E+0 )
          ALBD0 = EXP (ALBD0)
CYH93...
          ALVD1 = (ALVD(I) - 0.054313 E 0) / 0.945687 E 0
          ALND1 = (ALND(I) - 0.054313 E 0) / 0.945687 E 0
          ALVB(I) = ALVD1 + (1.0 E 0 - ALVD1) * ALBD0
          ALNB(I) = ALND1 + (1.0 E 0 - ALND1) * ALBD0
CYH       ALVB(I) = ALVD(I) + (1.0 - ALVD(I)) * ALBD0
CYH       ALNB(I) = ALND(I) + (1.0 - ALND(I)) * ALBD0
CYH93...
         END IF
        END IF
CSIB...
  195 CONTINUE
      IF (IPTS.LT.IMAX) THEN
       IPTS1 = IPTS + 1
       DO 197 I=IPTS1,IMAX
        ALVD(I) = ALVD(IPTS)
        ALND(I) = ALND(IPTS)
        ALVB(I) = ALVB(IPTS)
        ALNB(I) = ALNB(IPTS)
  197  CONTINUE
      END IF
CYH94...
C...  SURFACE VALUES OF RRCL AND TTCL
      DO 200 N=1,2
      DO 200 I=1,IMAX
        RRCL(I,N,1) = ALVD(I)
        TTCL(I,N,1) = ZERO
  200 CONTINUE
      DO 220 N=3,NB
      DO 220 I=1,IMAX
        RRCL(I,N,1) = ALND(I)
        TTCL(I,N,1) = ZERO
  220 CONTINUE
CYH94...
C...     **************************
C...     *  END OF CLOUD SECTION  *
C...     **************************
C... THE FOLLOWING CODE CONVERTS RRVCO2,THE VOLUME MIXING RATIO OF CO2
C   INTO RRCO2,THE MASS MIXING RATIO.
      RRVCO2=RCO2
      RRCO2=RRVCO2*RATCO2MW
C     IF(LAT .EQ. 2) CALL ERREXIT
  250 IF(ITIMLW .EQ. 0) GO TO 300
C             ***********************
C====>        * LONG WAVE RADIATION *
C             ***********************
CYH94...
C...  ACCOUNT FOR REDUCED EMISSIVITY OF ANY CLOUD
	do k=1,lp1
      DO 240 I=1,IMAX
        EQCMT(I,k) = CAMT(I,k) * EMCLD(I,k)
  240 CONTINUE
	enddo
CYH94...
C....    GET CLD FACTOR FOR LW CALCULATIONS
      CALL CLO89(CLDFAC,EQCMT,NCLDS,KBTM,KTOP)
C===>        LONG WAVE RADIATION
      CALL LWR88(HEATRA,GRNFLX,TOPFLX,
     1           GRNFX0,TOPFX0,
     1           PRESS,TEMP,RH2O,QO3,CLDFAC,
     2          EQCMT,NCLDS,KTOP,KBTM)
C....
      DO 280 I=1,IPTS
        IR = I + IBEG - 1
        FLWUP(IR) = TOPFLX(I) * .001 E 0
        GRNFLX(I)=Q14330*(HSIGMA*TEMP(I,LP1)**4-GRNFLX(I))
C.... GET LW FLUX DOWN AND UP AT GROUND(WATTS/M**2) - GRNFLX=LW DOWN.
        FLWDNS(IR)=GRNFLX(I)/(1.43306 E -06*1000. E 0)
        FLWUPS(IR)=HSIGMA*.001 E 0 * TEMP(I,LP1)**4
        FLWUP0(IR) = TOPFX0(I) * .001 E 0
        GRNFX0(I)=Q14330*(HSIGMA*TEMP(I,LP1)**4-GRNFX0(I))
        SLWDN0(IR)=GRNFX0(I)/(1.43306 E -06*1000. E 0)
  280 CONTINUE
C....      CONVERT HEATING RATES TO DEG/SEC
      DO 290 K=1,L
        DO 290 I=1,IPTS
          HLW(I+IBEG-1,LP1-K)=HEATRA(I,K)*DAYSEC
  290 CONTINUE
  300 CONTINUE
      IF(ITIMSW .EQ. 0) GO TO 350
CYH93
      CALL SWR93SIB(FSW,HSW,UF,DF,FSWL,HSWL,UFL,DFL,
     1              PRESS,COSZEN,TAUDA,RH2O,RRCO2,SSOLAR,QO3,
CYH942              NCLDS,KTOPSW,KBTMSW,CAMTSW,RRCL,TTCL,
     2              NCLDS,KTOP  ,KBTM  ,CAMT  ,RRCL,TTCL,
     3              ALVB,ALNB,ALVD,ALND,GDFVB,GDFNB,GDFVD,GDFND)
CYH93...
C.....    GET SW FLUXES IN WATTS/M**2
      DO 320 I=1,IPTS
       IR = I + IBEG - 1
       FSWUP(IR) = UF(I,1) * 1. E -3
       FSWDN(IR) = DF(I,1) * 1. E -3
       FSWUPS(IR) = UF(I,LP1) * 1. E -3
       FSWUP0(IR) = UFL(I,1) * 1. E -3
       SSWUP0(IR) = UFL(I,LP1) * 1. E -3
       SSWDN0(IR) = DFL(I,LP1) * 1. E -3
CSIB   FSWDNS(IR) = DF(I,LP1) * 1. E -3
CC..COUPLE W/M2 DIFF, IF FSWDNS(IR)=DF(I,LP1)*1. E -3
       FSWDNS(IR) = (GDFVB(I)+GDFNB(I)+GDFVD(I)+GDFND(I)) * 1. E -3
C...    DOWNWARD SFC FLUX FOR THE SIB PARAMETERATION
C.....     VISIBLE AND NEAR IR DIFFUSE
       GDFVDR(IR) = GDFVD(I) * 1. E -3
       GDFNDR(IR) = GDFND(I) * 1. E -3
C.....     VISIBLE AND NEAR IR DIRECT BEAM
       GDFVBR(IR) = GDFVB(I) * 1. E -3
       GDFNBR(IR) = GDFNB(I) * 1. E -3
CSIB...
  320 CONTINUE
C....      CONVERT HEATING RATES TO DEG/SEC
      DO 330 K=1,L
        DO 330 I=1,IPTS
          SWH(I+IBEG-1,LP1-K)=HSW(I,K)*DAYSEC
  330 CONTINUE
  350 CONTINUE
      RETURN
      STOP
 1000 FORMAT(1H ,' YOU ARE CALLING GFDL RADIATION CODE FOR',I5,' PTS',
     1           'AND',I4,' LYRS,WITH KDAPRX,KO3,KCZ,KEMIS,KALB = ',5I2)
      END
      SUBROUTINE GRADFS(SIGL,KCCO2,NFILE)
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
      PARAMETER (LNGTH=37*L)
      COMMON /RDFSAV/ EMISP,EMIST,XLATT,XLATP,Q19001,HP98,H3M6,
     *     HP75,H6M2,HP537,H74E1,H15E1,Q14330,HP2,TWENTY,HNINE,
     *     DEGRAD,HSIGMA,DAYSEC,RCO2
C====>    **************************************************************
C--     SEASONAL CLIMATOLOGIES OF O3 (OBTAINED FROM A PREVIOUSLY RUN
C             CODE WHICH INTERPOLATES O3 TO USER VERTICAL COORDINATE).
C         DEFINED AS 5 DEG LAT MEANS N.P.->S.P.
      COMMON /SAVMEM/
C-       ...WINTER....  ...SPRING....  ...SUMMER....  ....FALL.....
     1   DDUO3N(37,L), DDO3N2(37,L), DDO3N3(37,L), DDO3N4(37,L)
      DIMENSION RAD1(LNGTH), RAD2(LNGTH), RAD3(LNGTH), RAD4(LNGTH)
      EQUIVALENCE (RAD1(1),DDUO3N(1,1)),(RAD2(1),DDO3N2(1,1))
      EQUIVALENCE (RAD3(1),DDO3N3(1,1)),(RAD4(1),DDO3N4(1,1))
C====>    **************************************************************
      DIMENSION SIGL(L)
CYH94 DIMENSION XAO3SW(5),XAH2SW(5),XBSW(5)
CYH94 DATA
CYH941   XAO3SW / 0., .690, .480, .210, 0./ ,
CYH942   XAH2SW / 0., .690, .480, .210, 0./ ,
CYH943   XBSW   / 0., .035, .020, .005, 0./
CCCCCCMIC$ GUARD 0004
C..**************************
C..**************************
C      ********************************************************
C      *      ONE TIME COMPUTATION OF NECESSARY QUANTITIES    *
C      ********************************************************
C....    INITIALIZE ARRAYS,GET CONSTANTS,ETC...
      Q19001=19.001 E 0
      HP98=0.98 E 0
      H3M6=3.0 E -6
      HP537=0.537 E 0
      H74E1=74.0 E 0
      H15E1=15.0 E 0
      Q14330=1.43306 E -6
      HP2=0.2 E 0
      TWENTY=20.0 E 0
      HNINE=9.0 E 0
      DEGRAD=180.0 E 0/ 3.141593E+0
      HSIGMA=5.673 E -5
      DAYSEC=1.1574 E -5
C  ATMOSPERIC CARBON DIOXIDE CONCENTRATION IS NOW READ BY CONRAD,
C  BUT IT DEFAULTS TO 330 PPM FOR BACKWARD COMPATIBILITY.
      RCO2=3.3 E -4
      CALL HCONST
CNAS  IF(KCCO2.GT.0) CALL CO2O3(SLMRF,SLYMRF)
C.... INTERPOLATE CLIMO O3 TO THE CURRENT VERTICAL COORDINATE...
C..      NEED LAYER SIGMA, GET FROM PSFC AND LAYER P FOR I=1.....
      CALL O3INT(DDUO3N,SIGL)
      CALL CONRAD(NFILE,RCO2)
C....  AVERAGE CLIMATOLOGICAL VALUS OF O3 FROM 5 DEG LAT MEANS, SO THAT
C      TIME AND SPACE INTERPOLATION WILL WORK (DONE ELSEWHERE IN RADFS)
      DO 5 I=1,LNGTH
      AVG=.25 E 0*(RAD1(I)+RAD2(I)+RAD3(I)+RAD4(I))
      A1=.5 E 0*(RAD2(I)-RAD4(I))
      B1=.5 E 0*(RAD1(I)-RAD3(I))
      B2=.25 E 0*((RAD1(I)+RAD3(I))-(RAD2(I)+RAD4(I)))
      RAD1(I)=AVG
      RAD2(I)=A1
      RAD3(I)=B1
      RAD4(I)=B2
    5 CONTINUE
CYH94 EMIST = .6 E 0
CYH94 EMISP = .3 E 0
      XLATP = 60. E 0
      XLATT = 30. E 0
CCC15 CONTINUE
CCCCCCMIC$ END GUARD 0004
      RETURN
      END
      BLOCK DATA  GFDLRD
C
C....    BLOCK DATA INTIALIZES QUANTITIES NEEDED BY THE GFDL CODES.
C.... BD2,BD3,BD4,BD5,BLCKFS ALL COMBINED INTO 1 BLOCKDATA FOR FRONTEND.
C
C     BLOCK DATA BD1 GIVES INPUT DATA (TEMPS,PRESSURES,MIXING RATIOS,
C     CLOUD AMTS AND HEIGHTS) FOR TESTING THE RADIATION CODE AS A
C     STANDALONE MODEL.
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C   THE FOLLOWING COMMON BLOCKS CONTAIN PRETABULATED CO2 TRANSMISSION
C       FUNCTIONS, EVALUATED USING THE METHODS OF FELS AND
C       SCHWARZKOPF (1981) AND SCHWARZKOPF AND FELS (1985),
C***COMMON CO2BD3 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-800 CM-1 BAND. ALSO INCLUDED
C   ARE THE STANDARD TEMPERATURES AND THE WEIGHTING FUNCTION. THESE
C   DATA ARE IN BLOCK DATA BD3:
C         CO251    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO258    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT51    =  FIRST TEMPERATURE DERIVATIVE OF CO251
C         CDT58    =  FIRST TEMPERATURE DERIVATIVE OF CO258
C         C2D51    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         C2D58    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         CO2M51   =  TRANSMISSION FCTNS FOR T0 FOR ADJACENT PRESSURE
C                        LEVELS, WITH NO PRESSURE QUADRATURE. USED FOR
C                        NEARBY LAYER COMPUTATIONS. P(SFC)=1013.25 MB
C         CO2M58   =  SAME AS CO2M51,WITH P(SFC)= ^810 MB
C         CDTM51   =  FIRST TEMPERATURE DERIVATIVE OF CO2M51
C         CDTM58   =  FIRST TEMPERATURE DERIVATIVE OF CO2M58
C         C2DM51   =  SECOND TEMPERATURE DERIVATIVE OF CO2M51
C         C2DM58   =  SECOND TEMPERATURE DERIVATIVE OF CO2M58
C         STEMP    =  STANDARD TEMPERATURES FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB
C         GTEMP    =  WEIGHTING FUNCTION FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB.
C         B0       =  TEMP. COEFFICIENT USED FOR CO2 TRANS. FCTN.
C                        CORRECTION FOR T(K). (SEE REF. 4 AND BD3)
C         B1       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B2       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B3       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C
      COMMON/CO2BD3/CO251(LP1,LP1),CO258(LP1,LP1),CDT51(LP1,LP1),
     1 CDT58(LP1,LP1),C2D51(LP1,LP1),C2D58(LP1,LP1),CO2M51(L),
     2 CO2M58(L),CDTM51(L),CDTM58(L),C2DM51(L),C2DM58(L),
     3 STEMP(LP1),GTEMP(LP1),B0,B1,B2,B3
C
C***COMMON CO2BD2 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-670 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD2.
C         CO231    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO238    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT31    =  FIRST TEMPERATURE DERIVATIVE OF CO231
C         CDT38    =  FIRST TEMPERATURE DERIVATIVE OF CO238
C         C2D31    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C         C2D38    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C
      COMMON / CO2BD2 / CO231(LP1),CO238(LP1),CDT31(LP1),
     1 CDT38(LP1),C2D31(LP1),C2D38(LP1)
C
C***COMMON CO2BD4 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 670-800 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD4.
C         CO271    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO278    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT71    =  FIRST TEMPERATURE DERIVATIVE OF CO271
C         CDT78    =  FIRST TEMPERATURE DERIVATIVE OF CO278
C         C2D71    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C         C2D78    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C
      COMMON / CO2BD4 / CO271(LP1),CO278(LP1),CDT71(LP1),
     1 CDT78(LP1),C2D71(LP1),C2D78(LP1)
C
C***COMMON CO2BD5 CONTAINS CO2 TRANSMISSION FUNCTIONS FOR THE 2270-
C   2380 PART OF THE 4.3 UM CO2 BAND. THESE DATA ARE IN BLOCK DATA BD5.
C         CO211    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO218    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C
      COMMON / CO2BD5 / CO211(LP1),CO218(LP1)
C
      COMMON/TBLTMP/ DELCM(NBLY)
C*** NOTE: THE DATA,EQUIVALENCE AND DIMENSION STATEMENTS FOR QUANTITIES
C    EQUIVALENCED TO COMMON BLOCK BANDTA DEPEND ON THE VALUE OF THE
C    PARAMETER NBLW.
C
      DIMENSION ARNDM1(64),ARNDM2(64),ARNDM3(35)
      DIMENSION BRNDM1(64),BRNDM2(64),BRNDM3(35)
      DIMENSION AP1(64),AP2(64),AP3(35)
      DIMENSION BP1(64),BP2(64),BP3(35)
      DIMENSION ATP1(64),ATP2(64),ATP3(35)
      DIMENSION BTP1(64),BTP2(64),BTP3(35)
      DIMENSION BETAD1(64),BETAD2(64),BETAD3(35)
      DIMENSION BANDL1(64),BANDL2(64),BANDL3(35)
      DIMENSION BANDH1(64),BANDH2(64),BANDH3(35)
      EQUIVALENCE (ARNDM1(1),ARNDM(1)),(ARNDM2(1),ARNDM(65)),
     1            (ARNDM3(1),ARNDM(129))
      EQUIVALENCE (BRNDM1(1),BRNDM(1)),(BRNDM2(1),BRNDM(65)),
     1            (BRNDM3(1),BRNDM(129))
      EQUIVALENCE (AP1(1),AP(1)),(AP2(1),AP(65)),
     1            (AP3(1),AP(129))
      EQUIVALENCE (BP1(1),BP(1)),(BP2(1),BP(65)),
     1            (BP3(1),BP(129))
      EQUIVALENCE (ATP1(1),ATP(1)),(ATP2(1),ATP(65)),
     1            (ATP3(1),ATP(129))
      EQUIVALENCE (BTP1(1),BTP(1)),(BTP2(1),BTP(65)),
     1            (BTP3(1),BTP(129))
      EQUIVALENCE (BETAD1(1),BETAD(1)),(BETAD2(1),BETAD(65)),
     1            (BETAD3(1),BETAD(129))
      EQUIVALENCE (BANDL1(1),BANDLO(1)),(BANDL2(1),BANDLO(65)),
     1            (BANDL3(1),BANDLO(129))
      EQUIVALENCE (BANDH1(1),BANDHI(1)),(BANDH2(1),BANDHI(65)),
     1            (BANDH3(1),BANDHI(129))
C
C***THE FOLLOWING DATA STATEMENTS ARE BAND PARAMETERS OBTAINED USING
C   THE 1982 AFGL CATALOG ON THE SPECIFIED BANDS
      DATA ARNDM1  /
     *   0.354693E+00,  0.269857E+03,  0.167062E+03,  0.201314E+04,
     *   0.964533E+03,  0.547971E+04,  0.152933E+04,  0.599429E+04,
     *   0.699329E+04,  0.856721E+04,  0.962489E+04,  0.233348E+04,
     *   0.127091E+05,  0.104383E+05,  0.504249E+04,  0.181227E+05,
     *   0.856480E+03,  0.136354E+05,  0.288635E+04,  0.170200E+04,
     *   0.209761E+05,  0.126797E+04,  0.110096E+05,  0.336436E+03,
     *   0.491663E+04,  0.863701E+04,  0.540389E+03,  0.439786E+04,
     *   0.347836E+04,  0.130557E+03,  0.465332E+04,  0.253086E+03,
     *   0.257387E+04,  0.488041E+03,  0.892991E+03,  0.117148E+04,
     *   0.125880E+03,  0.458852E+03,  0.142975E+03,  0.446355E+03,
     *   0.302887E+02,  0.394451E+03,  0.438112E+02,  0.348811E+02,
     *   0.615503E+02,  0.143165E+03,  0.103958E+02,  0.725108E+02,
     *   0.316628E+02,  0.946456E+01,  0.542675E+02,  0.351557E+02,
     *   0.301797E+02,  0.381010E+01,  0.126319E+02,  0.548010E+01,
     *   0.600199E+01,  0.640803E+00,  0.501549E-01,  0.167961E-01,
     *   0.178110E-01,  0.170166E+00,  0.273514E-01,  0.983767E+00/
      DATA ARNDM2  /
     *   0.753946E+00,  0.941763E-01,  0.970547E+00,  0.268862E+00,
     *   0.564373E+01,  0.389794E+01,  0.310955E+01,  0.128235E+01,
     *   0.196414E+01,  0.247113E+02,  0.593435E+01,  0.377552E+02,
     *   0.305173E+02,  0.852479E+01,  0.116780E+03,  0.101490E+03,
     *   0.138939E+03,  0.324228E+03,  0.683729E+02,  0.471304E+03,
     *   0.159684E+03,  0.427101E+03,  0.114716E+03,  0.106190E+04,
     *   0.294607E+03,  0.762948E+03,  0.333199E+03,  0.830645E+03,
     *   0.162512E+04,  0.525676E+03,  0.137739E+04,  0.136252E+04,
     *   0.147164E+04,  0.187196E+04,  0.131118E+04,  0.103975E+04,
     *   0.621637E+01,  0.399459E+02,  0.950648E+02,  0.943161E+03,
     *   0.526821E+03,  0.104150E+04,  0.905610E+03,  0.228142E+04,
     *   0.806270E+03,  0.691845E+03,  0.155237E+04,  0.192241E+04,
     *   0.991871E+03,  0.123907E+04,  0.457289E+02,  0.146146E+04,
     *   0.319382E+03,  0.436074E+03,  0.374214E+03,  0.778217E+03,
     *   0.140227E+03,  0.562540E+03,  0.682685E+02,  0.820292E+02,
     *   0.178779E+03,  0.186150E+03,  0.383864E+03,  0.567416E+01/
      DATA ARNDM3  /
     *   0.225129E+03,  0.473099E+01,  0.753149E+02,  0.233689E+02,
     *   0.339802E+02,  0.108855E+03,  0.380016E+02,  0.151039E+01,
     *   0.660346E+02,  0.370165E+01,  0.234169E+02,  0.440206E+00,
     *   0.615283E+01,  0.304077E+02,  0.117769E+01,  0.125248E+02,
     *   0.142652E+01,  0.241831E+00,  0.483721E+01,  0.226357E-01,
     *   0.549835E+01,  0.597067E+00,  0.404553E+00,  0.143584E+01,
     *   0.294291E+00,  0.466273E+00,  0.156048E+00,  0.656185E+00,
     *   0.172727E+00,  0.118349E+00,  0.141598E+00,  0.588581E-01,
     *   0.919409E-01,  0.155521E-01,  0.537083E-02/
      DATA BRNDM1  /
     *   0.789571E-01,  0.920256E-01,  0.696960E-01,  0.245544E+00,
     *   0.188503E+00,  0.266127E+00,  0.271371E+00,  0.330917E+00,
     *   0.190424E+00,  0.224498E+00,  0.282517E+00,  0.130675E+00,
     *   0.212579E+00,  0.227298E+00,  0.138585E+00,  0.187106E+00,
     *   0.194527E+00,  0.177034E+00,  0.115902E+00,  0.118499E+00,
     *   0.142848E+00,  0.216869E+00,  0.149848E+00,  0.971585E-01,
     *   0.151532E+00,  0.865628E-01,  0.764246E-01,  0.100035E+00,
     *   0.171133E+00,  0.134737E+00,  0.105173E+00,  0.860832E-01,
     *   0.148921E+00,  0.869234E-01,  0.106018E+00,  0.184865E+00,
     *   0.767454E-01,  0.108981E+00,  0.123094E+00,  0.177287E+00,
     *   0.848146E-01,  0.119356E+00,  0.133829E+00,  0.954505E-01,
     *   0.155405E+00,  0.164167E+00,  0.161390E+00,  0.113287E+00,
     *   0.714720E-01,  0.741598E-01,  0.719590E-01,  0.140616E+00,
     *   0.355356E-01,  0.832779E-01,  0.128680E+00,  0.983013E-01,
     *   0.629660E-01,  0.643346E-01,  0.717082E-01,  0.629730E-01,
     *   0.875182E-01,  0.857907E-01,  0.358808E+00,  0.178840E+00/
      DATA BRNDM2  /
     *   0.254265E+00,  0.297901E+00,  0.153916E+00,  0.537774E+00,
     *   0.267906E+00,  0.104254E+00,  0.400723E+00,  0.389670E+00,
     *   0.263701E+00,  0.338116E+00,  0.351528E+00,  0.267764E+00,
     *   0.186419E+00,  0.238237E+00,  0.210408E+00,  0.176869E+00,
     *   0.114715E+00,  0.173299E+00,  0.967770E-01,  0.172565E+00,
     *   0.162085E+00,  0.157782E+00,  0.886832E-01,  0.242999E+00,
     *   0.760298E-01,  0.164248E+00,  0.221428E+00,  0.166799E+00,
     *   0.312514E+00,  0.380600E+00,  0.353828E+00,  0.269500E+00,
     *   0.254759E+00,  0.285408E+00,  0.159764E+00,  0.721058E-01,
     *   0.170528E+00,  0.231595E+00,  0.307184E+00,  0.564136E-01,
     *   0.159884E+00,  0.147907E+00,  0.185666E+00,  0.183567E+00,
     *   0.182482E+00,  0.230650E+00,  0.175348E+00,  0.195978E+00,
     *   0.255323E+00,  0.198517E+00,  0.195500E+00,  0.208356E+00,
     *   0.309603E+00,  0.112011E+00,  0.102570E+00,  0.128276E+00,
     *   0.168100E+00,  0.177836E+00,  0.105533E+00,  0.903330E-01,
     *   0.126036E+00,  0.101430E+00,  0.124546E+00,  0.221406E+00/
      DATA BRNDM3  /
     *   0.137509E+00,  0.911365E-01,  0.724508E-01,  0.795788E-01,
     *   0.137411E+00,  0.549175E-01,  0.787714E-01,  0.165544E+00,
     *   0.136484E+00,  0.146729E+00,  0.820496E-01,  0.846211E-01,
     *   0.785821E-01,  0.122527E+00,  0.125359E+00,  0.101589E+00,
     *   0.155756E+00,  0.189239E+00,  0.999086E-01,  0.480993E+00,
     *   0.100233E+00,  0.153754E+00,  0.130780E+00,  0.136136E+00,
     *   0.159353E+00,  0.156634E+00,  0.272265E+00,  0.186874E+00,
     *   0.192090E+00,  0.135397E+00,  0.131497E+00,  0.127463E+00,
     *   0.227233E+00,  0.190562E+00,  0.214005E+00/
      DATA AP1     /
     *  -0.675950E-02, -0.909459E-02, -0.800214E-02, -0.658673E-02,
     *  -0.245580E-02, -0.710464E-02, -0.205565E-02, -0.446529E-02,
     *  -0.440265E-02, -0.593625E-02, -0.201913E-02, -0.349169E-02,
     *  -0.209324E-02, -0.127980E-02, -0.388007E-02, -0.140542E-02,
     *   0.518346E-02, -0.159375E-02,  0.250508E-02,  0.132182E-01,
     *  -0.903779E-03,  0.110959E-01,  0.924528E-03,  0.207428E-01,
     *   0.364166E-02,  0.365229E-02,  0.884367E-02,  0.617260E-02,
     *   0.701340E-02,  0.184265E-01,  0.992822E-02,  0.908582E-02,
     *   0.106581E-01,  0.276268E-02,  0.158414E-01,  0.145747E-01,
     *   0.453080E-02,  0.214767E-01,  0.553895E-02,  0.195031E-01,
     *   0.237016E-01,  0.112371E-01,  0.275977E-01,  0.188833E-01,
     *   0.131079E-01,  0.130019E-01,  0.385122E-01,  0.111768E-01,
     *   0.622620E-02,  0.194397E-01,  0.134360E-01,  0.207829E-01,
     *   0.147960E-01,  0.744479E-02,  0.107564E-01,  0.181562E-01,
     *   0.170062E-01,  0.233303E-01,  0.256735E-01,  0.274745E-01,
     *   0.279259E-01,  0.197002E-01,  0.140268E-01,  0.185933E-01/
      DATA AP2     /
     *   0.169525E-01,  0.214410E-01,  0.136577E-01,  0.169510E-01,
     *   0.173025E-01,  0.958346E-02,  0.255024E-01,  0.308943E-01,
     *   0.196031E-01,  0.183608E-01,  0.149419E-01,  0.206358E-01,
     *   0.140654E-01,  0.172797E-01,  0.145470E-01,  0.982987E-02,
     *   0.116695E-01,  0.811333E-02,  0.965823E-02,  0.649977E-02,
     *   0.462192E-02,  0.545929E-02,  0.680407E-02,  0.291235E-02,
     *  -0.974773E-03,  0.341591E-02,  0.376198E-02,  0.770610E-03,
     *  -0.940864E-04,  0.514532E-02,  0.232371E-02, -0.177741E-02,
     *  -0.374892E-03, -0.370485E-03, -0.221435E-02, -0.490000E-02,
     *   0.588664E-02,  0.931411E-03, -0.456043E-03, -0.545576E-02,
     *  -0.421136E-02, -0.353742E-02, -0.174276E-02, -0.361246E-02,
     *  -0.337822E-02, -0.867030E-03, -0.118001E-02, -0.222405E-02,
     *  -0.725144E-03,  0.118483E-02,  0.995087E-02,  0.273812E-03,
     *   0.417298E-02,  0.764294E-02,  0.631568E-02, -0.213528E-02,
     *   0.746130E-02,  0.110337E-02,  0.153157E-01,  0.504532E-02,
     *   0.406047E-02,  0.192895E-02,  0.202058E-02,  0.126420E-01/
      DATA AP3     /
     *   0.310028E-02,  0.214779E-01,  0.560165E-02,  0.661070E-02,
     *   0.694966E-02,  0.539194E-02,  0.103745E-01,  0.180150E-01,
     *   0.747133E-02,  0.114927E-01,  0.115213E-01,  0.160709E-02,
     *   0.154278E-01,  0.112067E-01,  0.148690E-01,  0.154442E-01,
     *   0.123977E-01,  0.237539E-01,  0.162820E-01,  0.269484E-01,
     *   0.178081E-01,  0.143221E-01,  0.262468E-01,  0.217065E-01,
     *   0.107083E-01,  0.281220E-01,  0.115565E-01,  0.231244E-01,
     *   0.225197E-01,  0.178624E-01,  0.327708E-01,  0.116657E-01,
     *   0.277452E-01,  0.301647E-01,  0.349782E-01/
      DATA BP1     /
     *   0.717848E-05,  0.169280E-04,  0.126710E-04,  0.758397E-05,
     *  -0.533900E-05,  0.143490E-04, -0.595854E-05,  0.296465E-05,
     *   0.323446E-05,  0.115359E-04, -0.692861E-05,  0.131477E-04,
     *  -0.624945E-05, -0.756955E-06,  0.107458E-05, -0.159796E-05,
     *  -0.290529E-04, -0.170918E-05, -0.193934E-04, -0.707209E-04,
     *  -0.148154E-04, -0.383162E-04, -0.186050E-04, -0.951796E-04,
     *  -0.210944E-04, -0.330590E-04, -0.373087E-04, -0.408972E-04,
     *  -0.396759E-04, -0.827756E-04, -0.573773E-04, -0.325384E-04,
     *  -0.449411E-04, -0.271450E-04, -0.752791E-04, -0.549699E-04,
     *  -0.225655E-04, -0.102034E-03, -0.740322E-05, -0.668846E-04,
     *  -0.106063E-03, -0.304840E-04, -0.796023E-04,  0.504880E-04,
     *   0.486384E-04, -0.531946E-04, -0.147771E-03, -0.406785E-04,
     *   0.615750E-05, -0.486264E-04, -0.419335E-04, -0.819467E-04,
     *  -0.709498E-04,  0.326984E-05, -0.369743E-04, -0.526848E-04,
     *  -0.550050E-04, -0.684057E-04, -0.447093E-04, -0.778390E-04,
     *  -0.982953E-04, -0.772497E-04, -0.119430E-05, -0.655187E-04/
      DATA BP2     /
     *  -0.339078E-04,  0.716657E-04, -0.335893E-04,  0.220239E-04,
     *  -0.491012E-04, -0.393325E-04, -0.626461E-04, -0.795479E-04,
     *  -0.599181E-04, -0.578153E-04, -0.597559E-05, -0.866750E-04,
     *  -0.486783E-04, -0.580912E-04, -0.647368E-04, -0.350643E-04,
     *  -0.566635E-04, -0.385738E-04, -0.463782E-04, -0.321485E-04,
     *  -0.177300E-04, -0.250201E-04, -0.365492E-04, -0.165218E-04,
     *  -0.649177E-05, -0.218458E-04, -0.984604E-05, -0.120034E-04,
     *  -0.110119E-06, -0.164405E-04, -0.141396E-04,  0.315347E-05,
     *  -0.141544E-05, -0.297320E-05, -0.216248E-05,  0.839264E-05,
     *  -0.178197E-04, -0.106225E-04, -0.468195E-05,  0.997043E-05,
     *   0.679709E-05,  0.324610E-05, -0.367325E-05,  0.671058E-05,
     *   0.509293E-05, -0.437392E-05, -0.787922E-06, -0.271503E-06,
     *  -0.437940E-05, -0.128205E-04, -0.417830E-04, -0.561134E-05,
     *  -0.209940E-04, -0.414366E-04, -0.289765E-04,  0.680406E-06,
     *  -0.558644E-05, -0.530395E-05, -0.622242E-04, -0.159979E-05,
     *  -0.140286E-04, -0.128463E-04, -0.929499E-05, -0.327886E-04/
      DATA BP3     /
     *  -0.189353E-04, -0.737589E-04, -0.323471E-04, -0.272502E-04,
     *  -0.321731E-04, -0.326958E-04, -0.509157E-04, -0.681890E-04,
     *  -0.362182E-04, -0.354405E-04, -0.578392E-04,  0.238627E-05,
     *  -0.709028E-04, -0.518717E-04, -0.491859E-04, -0.718017E-04,
     *  -0.418978E-05, -0.940819E-04, -0.630375E-04, -0.478469E-04,
     *  -0.751896E-04, -0.267113E-04, -0.109019E-03, -0.890983E-04,
     *  -0.177301E-04, -0.120216E-03,  0.220464E-04, -0.734277E-04,
     *  -0.868068E-04, -0.652319E-04, -0.136982E-03, -0.279933E-06,
     *  -0.791824E-04, -0.111781E-03, -0.748263E-04/
      DATA ATP1    /
     *  -0.722782E-02, -0.901531E-02, -0.821263E-02, -0.808024E-02,
     *  -0.320169E-02, -0.661305E-02, -0.287272E-02, -0.486143E-02,
     *  -0.242857E-02, -0.530288E-02, -0.146813E-02, -0.566474E-03,
     *  -0.102192E-02,  0.300643E-03, -0.331655E-02,  0.648220E-03,
     *   0.552446E-02, -0.933046E-03,  0.205703E-02,  0.130638E-01,
     *  -0.229828E-02,  0.715648E-02,  0.444446E-03,  0.193500E-01,
     *   0.364119E-02,  0.252713E-02,  0.102420E-01,  0.494224E-02,
     *   0.584934E-02,  0.146255E-01,  0.921986E-02,  0.768012E-02,
     *   0.916105E-02,  0.276223E-02,  0.125245E-01,  0.131146E-01,
     *   0.793016E-02,  0.201536E-01,  0.658631E-02,  0.171711E-01,
     *   0.228470E-01,  0.131306E-01,  0.226658E-01,  0.176086E-01,
     *   0.149987E-01,  0.143060E-01,  0.313189E-01,  0.117070E-01,
     *   0.133522E-01,  0.244259E-01,  0.148393E-01,  0.223982E-01,
     *   0.151792E-01,  0.180474E-01,  0.106299E-01,  0.191016E-01,
     *   0.171776E-01,  0.229724E-01,  0.275530E-01,  0.302731E-01,
     *   0.281662E-01,  0.199525E-01,  0.192588E-01,  0.173220E-01/
      DATA ATP2    /
     *   0.195220E-01,  0.169371E-01,  0.193212E-01,  0.145558E-01,
     *   0.189654E-01,  0.122030E-01,  0.186206E-01,  0.228842E-01,
     *   0.139343E-01,  0.164006E-01,  0.137276E-01,  0.154005E-01,
     *   0.114575E-01,  0.129956E-01,  0.115305E-01,  0.929260E-02,
     *   0.106359E-01,  0.771623E-02,  0.106075E-01,  0.597630E-02,
     *   0.493960E-02,  0.532554E-02,  0.646175E-02,  0.302693E-02,
     *   0.150899E-02,  0.310333E-02,  0.533734E-02,  0.239094E-03,
     *   0.356782E-02,  0.707574E-02,  0.215758E-02, -0.527589E-03,
     *   0.643893E-03, -0.101916E-02, -0.383336E-02, -0.445966E-02,
     *   0.880190E-02,  0.245662E-02, -0.560923E-03, -0.582201E-02,
     *  -0.323233E-02, -0.454197E-02, -0.240905E-02, -0.343160E-02,
     *  -0.335156E-02, -0.623846E-03,  0.393633E-03, -0.271593E-02,
     *  -0.675874E-03,  0.920642E-03,  0.102168E-01, -0.250663E-03,
     *   0.437126E-02,  0.767434E-02,  0.569931E-02, -0.929326E-03,
     *   0.659414E-02,  0.280687E-02,  0.127614E-01,  0.780789E-02,
     *   0.374807E-02,  0.274288E-02,  0.534940E-02,  0.104349E-01/
       DATA ATP3   /
     *   0.294379E-02,  0.177846E-01,  0.523249E-02,  0.125339E-01,
     *   0.548538E-02,  0.577403E-02,  0.101532E-01,  0.170375E-01,
     *   0.758396E-02,  0.113402E-01,  0.106960E-01,  0.107782E-01,
     *   0.136148E-01,  0.992064E-02,  0.167276E-01,  0.149603E-01,
     *   0.136259E-01,  0.234521E-01,  0.166806E-01,  0.298505E-01,
     *   0.167592E-01,  0.186679E-01,  0.233062E-01,  0.228467E-01,
     *   0.128947E-01,  0.293979E-01,  0.219815E-01,  0.220663E-01,
     *   0.272710E-01,  0.237139E-01,  0.331743E-01,  0.208799E-01,
     *   0.281472E-01,  0.318440E-01,  0.370962E-01/
      DATA BTP1    /
     *   0.149748E-04,  0.188007E-04,  0.196530E-04,  0.124747E-04,
     *  -0.215751E-07,  0.128357E-04, -0.265798E-05,  0.606262E-05,
     *   0.287668E-05,  0.974612E-05, -0.833451E-05,  0.584410E-05,
     *  -0.452879E-05, -0.782537E-05,  0.786165E-05, -0.768351E-05,
     *  -0.196168E-04,  0.177297E-06, -0.129258E-04, -0.642798E-04,
     *  -0.986297E-05, -0.257145E-04, -0.141996E-04, -0.865089E-04,
     *  -0.141691E-04, -0.272578E-04, -0.295198E-04, -0.308878E-04,
     *  -0.313193E-04, -0.669272E-04, -0.475777E-04, -0.221332E-04,
     *  -0.419930E-04, -0.102519E-04, -0.590184E-04, -0.574771E-04,
     *  -0.240809E-04, -0.913994E-04, -0.908886E-05, -0.721074E-04,
     *  -0.902837E-04, -0.447582E-04, -0.664544E-04, -0.143150E-04,
     *  -0.511866E-05, -0.559352E-04, -0.104734E-03, -0.305206E-04,
     *   0.103303E-04, -0.613019E-04, -0.320040E-04, -0.738909E-04,
     *  -0.388263E-04,  0.306515E-04, -0.352214E-04, -0.253940E-04,
     *  -0.521369E-04, -0.746260E-04, -0.744124E-04, -0.881905E-04,
     *  -0.933645E-04, -0.664045E-04, -0.570712E-05, -0.566312E-04/
      DATA BTP2    /
     *  -0.364967E-04,  0.393501E-06, -0.234050E-04, -0.141317E-04,
     *  -0.525480E-04, -0.172241E-04, -0.410843E-04, -0.358348E-04,
     *  -0.256168E-04, -0.509482E-04, -0.180570E-04, -0.555356E-04,
     *  -0.271464E-04, -0.274040E-04, -0.480889E-04, -0.275751E-04,
     *  -0.415681E-04, -0.383770E-04, -0.280139E-04, -0.287919E-04,
     *  -0.125865E-04, -0.265467E-04, -0.172765E-04, -0.164611E-04,
     *   0.189183E-04, -0.171219E-04, -0.132766E-04, -0.344611E-05,
     *  -0.442832E-05, -0.185779E-04, -0.139755E-04,  0.168083E-05,
     *  -0.395287E-05, -0.297871E-05,  0.434383E-05,  0.131741E-04,
     *  -0.192637E-04, -0.549551E-05,  0.122553E-05,  0.204627E-04,
     *   0.154027E-04,  0.953462E-05,  0.131125E-05,  0.732839E-05,
     *   0.755405E-05, -0.305552E-05, -0.434858E-05,  0.308409E-05,
     *  -0.164787E-05, -0.818533E-05, -0.355041E-04, -0.504696E-05,
     *  -0.229022E-04, -0.356891E-04, -0.230346E-04,  0.518835E-05,
     *  -0.160187E-04, -0.104617E-04, -0.464754E-04, -0.115807E-04,
     *  -0.130230E-04, -0.603491E-05, -0.125324E-04, -0.165516E-04/
      DATA BTP3    /
     *  -0.991679E-05, -0.529432E-04, -0.200199E-04, -0.181977E-04,
     *  -0.220940E-04, -0.204483E-04, -0.432584E-04, -0.449109E-04,
     *  -0.247305E-04, -0.174253E-04, -0.484446E-04,  0.354150E-04,
     *  -0.425581E-04, -0.406562E-04, -0.505495E-04, -0.651856E-04,
     *  -0.153953E-04, -0.894294E-04, -0.616551E-04, -0.846504E-04,
     *  -0.699414E-04, -0.376203E-04, -0.940985E-04, -0.753050E-04,
     *  -0.183710E-04, -0.123907E-03, -0.279347E-04, -0.736381E-04,
     *  -0.103588E-03, -0.754117E-04, -0.140991E-03, -0.366687E-04,
     *  -0.927785E-04, -0.125321E-03, -0.115290E-03/
      DATA BETAD1  /
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.234879E+03,  0.217419E+03,  0.201281E+03,  0.186364E+03,
     *   0.172576E+03,  0.159831E+03,  0.148051E+03,  0.137163E+03,
     *   0.127099E+03,  0.117796E+03,  0.109197E+03,  0.101249E+03,
     *   0.939031E+02,  0.871127E+02,  0.808363E+02,  0.750349E+02,
     *   0.497489E+02,  0.221212E+02,  0.113124E+02,  0.754174E+01,
     *   0.589554E+01,  0.495227E+01,  0.000000E+00,  0.000000E+00/
      DATA BETAD2  /
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00/
      DATA BETAD3  /
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.000000E+00,  0.000000E+00,  0.000000E+00/
      DATA BANDL1 /
     *   0.000000E+00,  0.100000E+02,  0.200000E+02,  0.300000E+02,
     *   0.400000E+02,  0.500000E+02,  0.600000E+02,  0.700000E+02,
     *   0.800000E+02,  0.900000E+02,  0.100000E+03,  0.110000E+03,
     *   0.120000E+03,  0.130000E+03,  0.140000E+03,  0.150000E+03,
     *   0.160000E+03,  0.170000E+03,  0.180000E+03,  0.190000E+03,
     *   0.200000E+03,  0.210000E+03,  0.220000E+03,  0.230000E+03,
     *   0.240000E+03,  0.250000E+03,  0.260000E+03,  0.270000E+03,
     *   0.280000E+03,  0.290000E+03,  0.300000E+03,  0.310000E+03,
     *   0.320000E+03,  0.330000E+03,  0.340000E+03,  0.350000E+03,
     *   0.360000E+03,  0.370000E+03,  0.380000E+03,  0.390000E+03,
     *   0.400000E+03,  0.410000E+03,  0.420000E+03,  0.430000E+03,
     *   0.440000E+03,  0.450000E+03,  0.460000E+03,  0.470000E+03,
     *   0.480000E+03,  0.490000E+03,  0.500000E+03,  0.510000E+03,
     *   0.520000E+03,  0.530000E+03,  0.540000E+03,  0.550000E+03,
     *   0.560000E+03,  0.670000E+03,  0.800000E+03,  0.900000E+03,
     *   0.990000E+03,  0.107000E+04,  0.120000E+04,  0.121000E+04/
      DATA BANDL2 /
     *   0.122000E+04,  0.123000E+04,  0.124000E+04,  0.125000E+04,
     *   0.126000E+04,  0.127000E+04,  0.128000E+04,  0.129000E+04,
     *   0.130000E+04,  0.131000E+04,  0.132000E+04,  0.133000E+04,
     *   0.134000E+04,  0.135000E+04,  0.136000E+04,  0.137000E+04,
     *   0.138000E+04,  0.139000E+04,  0.140000E+04,  0.141000E+04,
     *   0.142000E+04,  0.143000E+04,  0.144000E+04,  0.145000E+04,
     *   0.146000E+04,  0.147000E+04,  0.148000E+04,  0.149000E+04,
     *   0.150000E+04,  0.151000E+04,  0.152000E+04,  0.153000E+04,
     *   0.154000E+04,  0.155000E+04,  0.156000E+04,  0.157000E+04,
     *   0.158000E+04,  0.159000E+04,  0.160000E+04,  0.161000E+04,
     *   0.162000E+04,  0.163000E+04,  0.164000E+04,  0.165000E+04,
     *   0.166000E+04,  0.167000E+04,  0.168000E+04,  0.169000E+04,
     *   0.170000E+04,  0.171000E+04,  0.172000E+04,  0.173000E+04,
     *   0.174000E+04,  0.175000E+04,  0.176000E+04,  0.177000E+04,
     *   0.178000E+04,  0.179000E+04,  0.180000E+04,  0.181000E+04,
     *   0.182000E+04,  0.183000E+04,  0.184000E+04,  0.185000E+04/
      DATA BANDL3 /
     *   0.186000E+04,  0.187000E+04,  0.188000E+04,  0.189000E+04,
     *   0.190000E+04,  0.191000E+04,  0.192000E+04,  0.193000E+04,
     *   0.194000E+04,  0.195000E+04,  0.196000E+04,  0.197000E+04,
     *   0.198000E+04,  0.199000E+04,  0.200000E+04,  0.201000E+04,
     *   0.202000E+04,  0.203000E+04,  0.204000E+04,  0.205000E+04,
     *   0.206000E+04,  0.207000E+04,  0.208000E+04,  0.209000E+04,
     *   0.210000E+04,  0.211000E+04,  0.212000E+04,  0.213000E+04,
     *   0.214000E+04,  0.215000E+04,  0.216000E+04,  0.217000E+04,
     *   0.218000E+04,  0.219000E+04,  0.227000E+04/
      DATA BANDH1 /
     *   0.100000E+02,  0.200000E+02,  0.300000E+02,  0.400000E+02,
     *   0.500000E+02,  0.600000E+02,  0.700000E+02,  0.800000E+02,
     *   0.900000E+02,  0.100000E+03,  0.110000E+03,  0.120000E+03,
     *   0.130000E+03,  0.140000E+03,  0.150000E+03,  0.160000E+03,
     *   0.170000E+03,  0.180000E+03,  0.190000E+03,  0.200000E+03,
     *   0.210000E+03,  0.220000E+03,  0.230000E+03,  0.240000E+03,
     *   0.250000E+03,  0.260000E+03,  0.270000E+03,  0.280000E+03,
     *   0.290000E+03,  0.300000E+03,  0.310000E+03,  0.320000E+03,
     *   0.330000E+03,  0.340000E+03,  0.350000E+03,  0.360000E+03,
     *   0.370000E+03,  0.380000E+03,  0.390000E+03,  0.400000E+03,
     *   0.410000E+03,  0.420000E+03,  0.430000E+03,  0.440000E+03,
     *   0.450000E+03,  0.460000E+03,  0.470000E+03,  0.480000E+03,
     *   0.490000E+03,  0.500000E+03,  0.510000E+03,  0.520000E+03,
     *   0.530000E+03,  0.540000E+03,  0.550000E+03,  0.560000E+03,
     *   0.670000E+03,  0.800000E+03,  0.900000E+03,  0.990000E+03,
     *   0.107000E+04,  0.120000E+04,  0.121000E+04,  0.122000E+04/
      DATA BANDH2 /
     *   0.123000E+04,  0.124000E+04,  0.125000E+04,  0.126000E+04,
     *   0.127000E+04,  0.128000E+04,  0.129000E+04,  0.130000E+04,
     *   0.131000E+04,  0.132000E+04,  0.133000E+04,  0.134000E+04,
     *   0.135000E+04,  0.136000E+04,  0.137000E+04,  0.138000E+04,
     *   0.139000E+04,  0.140000E+04,  0.141000E+04,  0.142000E+04,
     *   0.143000E+04,  0.144000E+04,  0.145000E+04,  0.146000E+04,
     *   0.147000E+04,  0.148000E+04,  0.149000E+04,  0.150000E+04,
     *   0.151000E+04,  0.152000E+04,  0.153000E+04,  0.154000E+04,
     *   0.155000E+04,  0.156000E+04,  0.157000E+04,  0.158000E+04,
     *   0.159000E+04,  0.160000E+04,  0.161000E+04,  0.162000E+04,
     *   0.163000E+04,  0.164000E+04,  0.165000E+04,  0.166000E+04,
     *   0.167000E+04,  0.168000E+04,  0.169000E+04,  0.170000E+04,
     *   0.171000E+04,  0.172000E+04,  0.173000E+04,  0.174000E+04,
     *   0.175000E+04,  0.176000E+04,  0.177000E+04,  0.178000E+04,
     *   0.179000E+04,  0.180000E+04,  0.181000E+04,  0.182000E+04,
     *   0.183000E+04,  0.184000E+04,  0.185000E+04,  0.186000E+04/
      DATA BANDH3 /
     *   0.187000E+04,  0.188000E+04,  0.189000E+04,  0.190000E+04,
     *   0.191000E+04,  0.192000E+04,  0.193000E+04,  0.194000E+04,
     *   0.195000E+04,  0.196000E+04,  0.197000E+04,  0.198000E+04,
     *   0.199000E+04,  0.200000E+04,  0.201000E+04,  0.202000E+04,
     *   0.203000E+04,  0.204000E+04,  0.205000E+04,  0.206000E+04,
     *   0.207000E+04,  0.208000E+04,  0.209000E+04,  0.210000E+04,
     *   0.211000E+04,  0.212000E+04,  0.213000E+04,  0.214000E+04,
     *   0.215000E+04,  0.216000E+04,  0.217000E+04,  0.218000E+04,
     *   0.219000E+04,  0.220000E+04,  0.238000E+04/
      DATA AO3RND /
     *   0.543368E+02,  0.234676E+04,  0.384881E+02/
      DATA BO3RND /
     *   0.526064E+01,  0.922424E+01,  0.496515E+01/
      DATA AWIDE  /
     *   0.309801E+01/
      DATA BWIDE  /
     *   0.495357E-01/
      DATA APWD   /
     *   0.177115E-01/
      DATA BPWD   /
     *  -0.545226E-04/
      DATA ATPWD  /
     *   0.187967E-01/
      DATA BTPWD  /
     *  -0.567449E-04/
      DATA BETAWD /
     *   0.347839E+02/
      DATA BETINW /
     *   0.766811E+01/
      DATA BDLOWD /
     *   0.560000E+03/
      DATA BDHIWD /
     *   0.800000E+03/
      DATA ACOMB  /
     *   0.152070E+05,  0.332194E+04,  0.527177E+03,  0.163124E+03,
     *   0.268808E+03,  0.534591E+02,  0.268071E+02,  0.123133E+02,
     *   0.600199E+01,  0.640803E+00,  0.501549E-01,  0.167961E-01,
     *   0.178110E-01,  0.170166E+00,  0.537083E-02/
      DATA BCOMB  /
     *   0.152538E+00,  0.118677E+00,  0.103660E+00,  0.100119E+00,
     *   0.127518E+00,  0.118409E+00,  0.904061E-01,  0.642011E-01,
     *   0.629660E-01,  0.643346E-01,  0.717082E-01,  0.629730E-01,
     *   0.875182E-01,  0.857907E-01,  0.214005E+00/
      DATA APCM   /
     *  -0.671879E-03,  0.654345E-02,  0.143657E-01,  0.923593E-02,
     *   0.117022E-01,  0.159596E-01,  0.181600E-01,  0.145013E-01,
     *   0.170062E-01,  0.233303E-01,  0.256735E-01,  0.274745E-01,
     *   0.279259E-01,  0.197002E-01,  0.349782E-01/
      DATA BPCM   /
     *  -0.113520E-04, -0.323965E-04, -0.448417E-04, -0.230779E-04,
     *  -0.361981E-04, -0.145117E-04,  0.198349E-04, -0.486529E-04,
     *  -0.550050E-04, -0.684057E-04, -0.447093E-04, -0.778390E-04,
     *  -0.982953E-04, -0.772497E-04, -0.748263E-04/
      DATA ATPCM  /
     *  -0.106346E-02,  0.641531E-02,  0.137362E-01,  0.922513E-02,
     *   0.136162E-01,  0.169791E-01,  0.206959E-01,  0.166223E-01,
     *   0.171776E-01,  0.229724E-01,  0.275530E-01,  0.302731E-01,
     *   0.281662E-01,  0.199525E-01,  0.370962E-01/
      DATA BTPCM  /
     *  -0.735731E-05, -0.294149E-04, -0.505592E-04, -0.280894E-04,
     *  -0.492972E-04, -0.341508E-04, -0.362947E-04, -0.250487E-04,
     *  -0.521369E-04, -0.746260E-04, -0.744124E-04, -0.881905E-04,
     *  -0.933645E-04, -0.664045E-04, -0.115290E-03/
      DATA BETACM /
     *   0.000000E+00,  0.000000E+00,  0.000000E+00,  0.000000E+00,
     *   0.188625E+03,  0.144293E+03,  0.174098E+03,  0.909366E+02,
     *   0.497489E+02,  0.221212E+02,  0.113124E+02,  0.754174E+01,
     *   0.589554E+01,  0.495227E+01,  0.000000E+00/
      DATA DELCM  /
     *   0.300000E+02,  0.110000E+03,  0.600000E+02,  0.400000E+02,
     *   0.200000E+02,  0.500000E+02,  0.400000E+02,  0.500000E+02,
     *   0.110000E+03,  0.130000E+03,  0.100000E+03,  0.900000E+02,
     *   0.800000E+02,  0.130000E+03,  0.110000E+03/
      DATA IBAND  /
     *    2,   1,   2,   2,   1,   2,   1,   3,   2,   2,
     *    3,   2,   2,   4,   2,   4,   2,   3,   3,   2,
     *    4,   3,   4,   3,   7,   5,   6,   7,   6,   5,
     *    7,   6,   7,   8,   6,   6,   8,   8,   8,   8/
C***THE FOLLOWING DATA ARE LEVEL-INDEPENDENT
CCCCC DATA RCO2/3.3E-4/
      DATA G/980.665/
c wne these dont appear to be used
c     DATA CTAUDA/.5/
c     DATA CSOLAR/1.96/
c     DATA CCOSZ/.5/
C   B0,B1,B2,B3 ARE COEFFICIENTS USED TO CORRECT FOR THE USE OF 250K IN
C   THE PLANCK FUNCTION USED IN EVALUATING PLANCK-WEIGHTED CO2
C   TRANSMISSION FUNCTIONS. (SEE REF. 4)
      DATA B0,B1,B2,B3/-.51926410E-4,-.18113332E-3,
     1 -.10680132E-5,-.67303519E-7/
C    *******************************************************************
C    *                                                                 *
C    *                           B L C K F S  FROM G F D L             *
C    *  UNUSED DATA CLEANED OUT - NOV 86 AND MAR 89 ..K.A.CAMPANA....  *
C    *                                                                 *
C    *******************************************************************
C
C     FOR SEASONAL VARIATION
C        SEASON=1,2,3,4 FOR WINTER,SPRING,SUMMER,FALL ONLY (NOT ACTIVE)
C        SEASON=5 - SEASONAL VARIATION(I.E.INTERPOLATE TO DAY OF FCST)
C
      INTEGER SEASON
	common /diucon/fcstda, daz(12), fjdnmc, tslag, timin, tpi
	common /diucon/ rlag, year, day, dhr, hpi
	common /diucon/season, jtime(5), jdnmc, ixxxx

      DATA SEASON/5/
      DATA TSLAG/45.25/,  RLAG/14.8125/
      DATA DAY/86400./,  YEAR/365.25/
      DATA TPI/6.283185308/,  HPI/1.570796327/
      DATA JTIME/0,1,0,0,0/
      DATA DHR/2./
      DATA DAZ/0.,31.,59.,90.,120.,151.,181.,212.,243.,273.,304.,334./
C
C     SEA SURFACE ALBEDO DATA
C
      COMMON/SSALB/ALBD(21,20),ZA(20),TRN(21),DZA(19)
      DIMENSION ALB1(21,7),ALB2(21,7),ALB3(21,6)
      EQUIVALENCE (ALB1(1,1),ALBD(1,1)),(ALB2(1,1),ALBD(1,8)),
     .            (ALB3(1,1),ALBD(1,15))
      DATA ALB1/ .061,.062,.072,.087,.115,.163,.235,.318,.395,.472,.542,
     . .604,.655,.693,.719,.732,.730,.681,.581,.453,.425,.061,.062,.070,
     . .083,.108,.145,.198,.263,.336,.415,.487,.547,.595,.631,.656,.670,
     . .652,.602,.494,.398,.370,.061,.061,.068,.079,.098,.130,.174,.228,
     . .290,.357,.424,.498,.556,.588,.603,.592,.556,.488,.393,.342,.325,
     . .061,.061,.065,.073,.086,.110,.150,.192,.248,.306,.360,.407,.444,
     . .469,.480,.474,.444,.386,.333,.301,.290,.061,.061,.065,.070,.082,
     . .101,.131,.168,.208,.252,.295,.331,.358,.375,.385,.377,.356,.320,
     . .288,.266,.255,.061,.061,.063,.068,.077,.092,.114,.143,.176,.210,
     . .242,.272,.288,.296,.300,.291,.273,.252,.237,.266,.220,.061,.061,
     . .062,.066,.072,.084,.103,.127,.151,.176,.198,.219,.236,.245,.250,
     . .246,.235,.222,.211,.205,.200/
      DATA ALB2/ .061,.061,.061,.065,.071,.079,.094,.113,.134,.154,.173,
     . .185,.190,.193,.193,.190,.188,.185,.182,.180,.178,.061,.061,.061,
     . .064,.067,.072,.083,.099,.117,.135,.150,.160,.164,.165,.164,.162,
     . .160,.159,.158,.157,.157,.061,.061,.061,.062,.065,.068,.074,.084,
     . .097,.111,.121,.127,.130,.131,.131,.130,.129,.127,.126,.125,.122,
     . .061,.061,.061,.061,.062,.064,.070,.076,.085,.094,.101,.105,.107,
     . .106,.103,.100,.097,.096,.095,.095,.095,.061,.061,.061,.060,.061,
     . .062,.065,.070,.075,.081,.086,.089,.090,.088,.084,.080,.077,.075,
     . .074,.074,.074,.061,.061,.060,.060,.060,.061,.063,.065,.068,.072,
     . .076,.077,.076,.074,.071,.067,.064,.062,.061,.061,.061,.061,.061,
     . .060,.060,.060,.060,.061,.062,.065,.068,.069,.069,.068,.065,.061,
     . .058,.055,.054,.053,.052,.052/
      DATA ALB3/ .061,.061,.060,.060,.060,.060,.060,.060,.062,.065,.065,
     . .063,.060,.057,.054,.050,.047,.046,.045,.044,.044,.061,.061,.060,
     . .060,.060,.059,.059,.059,.059,.059,.058,.055,.051,.047,.043,.039,
     . .035,.033,.032,.031,.031,.061,.061,.060,.060,.060,.059,.059,.058,
     . .057,.056,.054,.051,.047,.043,.039,.036,.033,.030,.028,.027,.026,
     . .061,.061,.060,.060,.060,.059,.059,.058,.057,.055,.052,.049,.045,
     . .040,.036,.032,.029,.027,.026,.025,.025,.061,.061,.060,.060,.060,
     . .059,.059,.058,.056,.053,.050,.046,.042,.038,.034,.031,.028,.026,
     . .025,.025,.025,.061,.061,.060,.060,.059,.058,.058,.057,.055,.053,
     . .050,.046,.042,.038,.034,.030,.028,.029,.025,.025,.025/
      DATA ZA/90.,88.,86.,84.,82.,80.,78.,76.,74.,70.,66.,62.,58.,54.,
     .        50.,40.,30.,20.,10.,0.0/
      DATA TRN/.00,.05,.10,.15,.20,.25,.30,.35,.40,.45,.50,.55,.60,.65,
     .         .70,.75,.80,.85,.90,.95,1.00/
      DATA DZA/8*2.0,6*4.0,5*10.0/
C
      COMMON/TABLES/SC
      COMMON /SWRSAV/ ABCFF(NB),PWTS(NB),CFCO2,CFO3,REFLO3,RRAYAV
      DATA SC/2.0/
C---SPECIFICATION OF DATA STATEMENTS:
C         ABCFF=ABSORPTION COEFFICIENTS FOR BANDS IN K-DISTRI-
C     BUTION. ORIGINALLY GIVEN BY LACIS AND HANSEN, REVISED BY
C     RAMASWAMY
C         PWTS=CORRESPONDING WEIGHTS ASSIGNED TO BANDS IN THE
C     K-DISTRIBUTION
C         REFLO3,RRAYAV= REFLECTION COEFFICIENTS GIVEN BY
C     LACIS AND HANSEN TO ACCOUNT FOR EFFECTS OF RAYLEIGH SCATTERING
C     IN THE VISIBLE FREQUENCIES (BAND 1)
C         CFCO2,CFO3=CONVERSION FACTORS FROM GM/CM**2 TO CM-ATM(STP)
C
C---THE FOLLOWING ARE THE COEFFICIENTS FOR THE 12-BAND SHORTWAVE
C   RADIATION CODE, SPECIFIED BY RAMASWAMY.
      DATA ABCFF/2*4.0E-5,.002,.035,.377,1.95,9.40,44.6,190.,
     1           989.,2706.,39011./
      DATA PWTS/.5000,.121416,.0698,.1558,.0631,.0362,.0243,.0158,.0087,
     1          .001467,.002342,.001075/
C---THE ORIGINAL 9-BAND LACIS-HANSEN COEFFICIENTS ARE GIVEN HERE; IT
C   THE USER INSISTS ON USING THESE VALUES, SHE MUST ALSO CHANGE
C   THE PARAMETER NB FROM 12 TO 9. THIS PARAMETER IS DEFINED IN
C   RDPARM.H . NO OTHER CHANGES ARE REQUIRED!
C     DATA ABCFF/2*4.0E-5,.002,.035,.377,1.95,9.40,44.6,190./
C     DATA PWTS/.5000,.1470,.0698,.1443,.0584,.0335,.0225,.0158,.0087/
C
      DATA CFCO2,CFO3/508.96,466.64/
      DATA REFLO3/1.9/
      DATA RRAYAV/0.144/
      END
      SUBROUTINE CLO89(CLDFAC,CAMT,NCLDS,KBTM,KTOP)
CFPP$ NOCONCUR R
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     SUBROUTINE CLO88 COMPUTES CLOUD TRANSMISSION FUNCTIONS FOR THE
C  LONGWAVE CODE,USING CODE WRITTEN BY BERT KATZ (301-763-8161).
C  AND MODIFIED BY DAN SCHWARZKOPF IN DECEMBER,1988.
C                INPUTS:          (COMMON BLOCK)
C      CAMT,KTOP,KBTM,NCLDS         RADISW
C                OUTPUT:
C      CLDFAC                       CLDCOM
C
C          CALLED BY:      RADMN OR MODEL ROUTINE
C          CALLS    :
C
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C
      DIMENSION NCLDS(IMAX),KTOP(IMAX,LP1),KBTM(IMAX,LP1)
      DIMENSION CAMT(IMAX,LP1),CLDFAC(IMAX,LP1,LP1)
C
       DIMENSION CLDFIP(LP1,LP1),CLDIPT(LP1,LP1,64)
C
      DO 1 IQ=1,IMAX,64
      ITOP=IQ+63
      IF(ITOP.GT.IMAX) ITOP=IMAX
      JTOP=ITOP-IQ+1
      DO 11 IP=1,JTOP
      IR=IQ+IP-1
      IF (NCLDS(IR).EQ.0) THEN
        DO 29 J=1,LP1
        DO 29 I=1,LP1
        CLDIPT(I,J,IP)=1.
29      CONTINUE
      ENDIF
      IF (NCLDS(IR).GE.1) THEN
          XCLD=1.-CAMT(IR,2)
           K1=KTOP(IR,2)+1
           K2=KBTM(IR,2)
          DO 31 J=1,LP1
          DO 31 I=1,LP1
              CLDIPT(I,J,IP)=1.
31        CONTINUE
          DO 41 K=K1,LP1
          DO 41 KP=1,K2
               CLDIPT(KP,K,IP)=XCLD
41        CONTINUE
          DO 43 K=1,K2
          DO 43 KP=K1,LP1
              CLDIPT(KP,K,IP)=XCLD
43        CONTINUE
      ENDIF
      IF (NCLDS(IR).GE.2) THEN
        DO 21 NC=2,NCLDS(IR)
          XCLD=1.-CAMT(IR,NC+1)
           K1=KTOP(IR,NC+1)+1
           K2=KBTM(IR,NC+1)
          DO 32 J=1,LP1
          DO 32 I=1,LP1
              CLDFIP(I,J)=1.
32        CONTINUE
          DO 42 K=K1,LP1
          DO 42 KP=1,K2
               CLDFIP(KP,K)=XCLD
42        CONTINUE
          DO 44 K=1,K2
          DO 44 KP=K1,LP1
              CLDFIP(KP,K)=XCLD
44        CONTINUE
            DO 62 J=1,LP1
            DO 62 I=1,LP1
          CLDIPT(I,J,IP)=CLDIPT(I,J,IP)*CLDFIP(I,J)
62        CONTINUE
21        CONTINUE
      ENDIF
11    CONTINUE
      DO 71 J=1,LP1
      DO 71 I=1,LP1
      DO 71 IP=1,JTOP
      IR=IQ+IP-1
      CLDFAC(IR,I,J)=CLDIPT(I,J,IP)
71    CONTINUE
1     CONTINUE
      RETURN
      END
      SUBROUTINE CONRAD(NFILE,RCO2)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    CONRAD      INITIALIZES ARRAYS FOR -LW- RADIATION
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: READS CO2 TRANSMISSION FUNCTION DATA(FROM EXTERNAL FILE),
C   WHICH HAS BEEN PRE-COMPUTED FOR CURRENT VERTICAL COORDINATE ON
C   THE FRONT-END MACHINE. WORD CONVERSION BETWEEN FRONT-END AND C205
C   OCCURS HERE. ALSO CALL TABL86 TO SET UP TABLES FOR LW CALCULATION
C   THIS CODE (CONRAD) IS ONLY CALLED ONCE...
C
C PROGRAM HISTORY LOG:
C   84-01-01  FELS AND SCHWARZKOPF,GFDL.
C   89-07-07  KENNETH CAMPANA - REMOVED UNNECESSARY CODE AND ADDED
C                            READING AND WORD CONVERSION OF CO2 DATA.
C   89-11-29  KENNETH CAMPANA - COMMENTED CO2 READS BECAUSE THEY
C                            ARE NOT YET READY FOR THE NEW GFDL LW.
C
C USAGE:    CALL CONRAD(NFILE)
C   INPUT ARGUMENT LIST:
C     NFILE    - INTEGER NAME OF EXTERNAL CO2 FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C    *******************************************************************
C    *                           C O N R A D                           *
C    *    READ CO2 TRANSMISSION DATA FROM UNIT(NFILE)FOR NEW VERTICAL  *
C    *      COORDINATE TESTS      ...                                  *
C    *    THESE ARRAYS USED TO BE IN BLOCK DATA    ...K.CAMPANA-MAR 90 *
C    *******************************************************************
C
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
      DIMENSION SGTMP(LP1,2),CO21D(L,6),CO22D(LP1,LP1,6)
      DIMENSION CO21D3(LP1,6),CO21D7(LP1,6)
C
C                 CO2 DATA TABLES FOR USER''S VERTICAL COORDINATE
C
C   THE FOLLOWING COMMON BLOCKS CONTAIN PRETABULATED CO2 TRANSMISSION
C       FUNCTIONS, EVALUATED USING THE METHODS OF FELS AND
C       SCHWARZKOPF (1981) AND SCHWARZKOPF AND FELS (1985),
C-----  THE 2-DIMENSIONAL ARRAYS ARE
C                    CO2 TRANSMISSION FUNCTIONS AND THEIR DERIVATIVES
C        FROM 109-LEVEL LINE-BY-LINE CALCULATIONS MADE USING THE 1982
C        MCCLATCHY TAPE (12511 LINES),CONSOLIDATED,INTERPOLATED
C        TO THE NMC MRF VERTICAL COORDINATTE,AND RE-CONSOLIDATED TO A
C        200 CM-1 BANDWIDTH. THE INTERPOLATION METHOD IS DESCRIBED IN
C        SCHWARZKOPF AND FELS (J.G.R.,1985).
C-----  THE 1-DIM ARRAYS ARE
C                  CO2 TRANSMISSION FUNCTIONS AND THEIR DERIVATIVES
C          FOR TAU(I,I+1),I=1,L,
C            WHERE THE VALUES ARE NOT OBTAINED BY QUADRATURE,BUT ARE THE
C            ACTUAL TRANSMISSIVITIES,ETC,BETWEEN A PAIR OF PRESSURES.
C          THESE USED ONLY FOR NEARBY LAYER CALCULATIONS INCLUDING QH2O.
C-----  THE WEIGHTING FUNCTION GTEMP=P(K)**0.2*(1.+P(K)/30000.)**0.8/
C         1013250.,WHERE P(K)=PRESSURE,NMC MRF(NEW)  L18 DATA LEVELS FOR
C         PSTAR=1013250.
C-----  STEMP IS US STANDARD ATMOSPHERES,1976,AT DATA PRESSURE LEVELS
C        USING NMC MRF SIGMAS,WHERE PSTAR=1013.25 MB (PTZ PROGRAM)
C   THE FOLLOWING COMMON BLOCKS CONTAIN PRETABULATED CO2 TRANSMISSION
C       FUNCTIONS, EVALUATED USING THE METHODS OF FELS AND
C       SCHWARZKOPF (1981) AND SCHWARZKOPF AND FELS (1985),
C***COMMON CO2BD3 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-800 CM-1 BAND. ALSO INCLUDED
C   ARE THE STANDARD TEMPERATURES AND THE WEIGHTING FUNCTION. THESE
C   DATA ARE IN BLOCK DATA BD3:
C         CO251    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO258    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT51    =  FIRST TEMPERATURE DERIVATIVE OF CO251
C         CDT58    =  FIRST TEMPERATURE DERIVATIVE OF CO258
C         C2D51    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         C2D58    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         CO2M51   =  TRANSMISSION FCTNS FOR T0 FOR ADJACENT PRESSURE
C                        LEVELS, WITH NO PRESSURE QUADRATURE. USED FOR
C                        NEARBY LAYER COMPUTATIONS. P(SFC)=1013.25 MB
C         CO2M58   =  SAME AS CO2M51,WITH P(SFC)= ^810 MB
C         CDTM51   =  FIRST TEMPERATURE DERIVATIVE OF CO2M51
C         CDTM58   =  FIRST TEMPERATURE DERIVATIVE OF CO2M58
C         C2DM51   =  SECOND TEMPERATURE DERIVATIVE OF CO2M51
C         C2DM58   =  SECOND TEMPERATURE DERIVATIVE OF CO2M58
C         STEMP    =  STANDARD TEMPERATURES FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB
C         GTEMP    =  WEIGHTING FUNCTION FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB.
C         B0       =  TEMP. COEFFICIENT USED FOR CO2 TRANS. FCTN.
C                        CORRECTION FOR T(K). (SEE REF. 4 AND BD3)
C         B1       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B2       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B3       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C
      COMMON/CO2BD3/CO251(LP1,LP1),CO258(LP1,LP1),CDT51(LP1,LP1),
     1 CDT58(LP1,LP1),C2D51(LP1,LP1),C2D58(LP1,LP1),CO2M51(L),
     2 CO2M58(L),CDTM51(L),CDTM58(L),C2DM51(L),C2DM58(L),
     3 STEMP(LP1),GTEMP(LP1),B0,B1,B2,B3
C
C***COMMON CO2BD2 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-670 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD2.
C         CO231    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO238    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT31    =  FIRST TEMPERATURE DERIVATIVE OF CO231
C         CDT38    =  FIRST TEMPERATURE DERIVATIVE OF CO238
C         C2D31    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C         C2D38    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C
      COMMON / CO2BD2 / CO231(LP1),CO238(LP1),CDT31(LP1),
     1 CDT38(LP1),C2D31(LP1),C2D38(LP1)
C
C***COMMON CO2BD4 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 670-800 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD4.
C         CO271    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO278    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT71    =  FIRST TEMPERATURE DERIVATIVE OF CO271
C         CDT78    =  FIRST TEMPERATURE DERIVATIVE OF CO278
C         C2D71    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C         C2D78    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C
      COMMON / CO2BD4 / CO271(LP1),CO278(LP1),CDT71(LP1),
     1 CDT78(LP1),C2D71(LP1),C2D78(LP1)
C
C***COMMON CO2BD5 CONTAINS CO2 TRANSMISSION FUNCTIONS FOR THE 2270-
C   2380 PART OF THE 4.3 UM CO2 BAND. THESE DATA ARE IN BLOCK DATA BD5.
C         CO211    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO218    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C
      COMMON / CO2BD5 / CO211(LP1),CO218(LP1)
C
C====>   BEGIN HERE TO GET CONSTANTS FOR RADIATION PACKAGE
      REWIND NFILE
C       READ IN PRE-COMPUTED CO2 TRANSMISSION DATA....
      DO 10 KK=1,2
        READ(NFILE) (SGTMP(I,KK),I=1,LP1)
   10 CONTINUE
      DO 15 KK=1,6
        READ(NFILE) (CO21D(I,KK),I=1,L)
   15 CONTINUE
      DO 20 KK=1,6
        READ(NFILE) ((CO22D(I,J,KK),I=1,LP1),J=1,LP1)
   20 CONTINUE
      DO 25 KK=1,6
        READ(NFILE) (CO21D3(I,KK),I=1,LP1)
   25 CONTINUE
      DO 30 KK=1,6
        READ(NFILE) (CO21D7(I,KK),I=1,LP1)
   30 CONTINUE
C  READ CO2 CONCENTRATION IN PPM (DEFAULTED IN GRADFS IF MISSING)
      READ(NFILE,END=31) RCO2
   31 CONTINUE
      PRINT *,'CO2 CONCENTRATION IS ',RCO2
      REWIND NFILE
      DO 35 K=1,LP1
        STEMP(K) = SGTMP(K,1)
        GTEMP(K) = SGTMP(K,2)
   35 CONTINUE
      DO 40 K=1,L
        CDTM51(K) = CO21D(K,1)
        CO2M51(K) = CO21D(K,2)
        C2DM51(K) = CO21D(K,3)
        CDTM58(K) = CO21D(K,4)
        CO2M58(K) = CO21D(K,5)
        C2DM58(K) = CO21D(K,6)
   40 CONTINUE
      DO 45 J=1,LP1
       DO 45 I=1,LP1
        CDT51(I,J) = CO22D(I,J,1)
        CO251(I,J) = CO22D(I,J,2)
        C2D51(I,J) = CO22D(I,J,3)
        CDT58(I,J) = CO22D(I,J,4)
        CO258(I,J) = CO22D(I,J,5)
        C2D58(I,J) = CO22D(I,J,6)
   45 CONTINUE
      DO 50 K=1,LP1
        CDT31(K) = CO21D3(K,1)
        CO231(K) = CO21D3(K,2)
        C2D31(K) = CO21D3(K,3)
        CDT38(K) = CO21D3(K,4)
        CO238(K) = CO21D3(K,5)
        C2D38(K) = CO21D3(K,6)
   50 CONTINUE
      DO 55 K=1,LP1
        CDT71(K) = CO21D7(K,1)
        CO271(K) = CO21D7(K,2)
        C2D71(K) = CO21D7(K,3)
        CDT78(K) = CO21D7(K,4)
        CO278(K) = CO21D7(K,5)
        C2D78(K) = CO21D7(K,6)
   55 CONTINUE
      PRINT 66,NFILE
   66 FORMAT(1H ,'----READ CO2 TRANSMISSION FUNCTIONS FROM UNIT ',I2)
C
C......    DEFINE TABLES FOR LW RADIATION
      CALL TABLE
C
      RETURN
      END
      SUBROUTINE E1E290(G1,G2,G3,G4,G5,EMISS,FXOE1,DTE1,FXOE2,DTE2,
     1                  AVEPHI,TEMP,T)
CFPP$ NOCONCUR R
C
C     SUBROUTINE E1E290 COMPUTES THE EXCHANGE TERMS IN THE FLUX EQUATION
C  FOR LONGWAVE RADIATION FOR ALL TERMS EXCEPT THE EXCHANGE WITH THE
C  TOP OF THE ATMOSPHERE. THE METHOD IS A TABLE LOOKUP ON A PRE-
C  COMPUTED E2 FUNCTION (DEFINED IN REF. (4)).
C      THE E1 FUNCTION  CALCULATIONS (FORMERLY DONE IN SUBROUTINE
C  E1V88 COMPUTE THE FLUX RESULTING FROM THE EXCHANGE OF PHOTONS
C  BETWEEN A LAYER AND THE TOP OF THE ATMOSPHERE.  THE METHOD IS A
C  TABLE LOOKUP ON A PRE-COMPUTED E1 FUNCTION.
C     CALCULATIONS ARE DONE IN TWO FREQUENCY RANGES:
C       1) 0-560,1200-2200 CM-1   FOR Q(APPROX)
C       2) 160-560 CM-1           FOR Q(APPROX,CTS).
C  MOTIVATION FOR THESE CALCULATIONS IS IN REFERENCES (1) AND (4).
C       INPUTS:                    (COMMON BLOCKS)
C     TABLE1,TABLE2,TABLE3,EM1,EM1WDE  TABCOM
C     AVEPHI                           TFCOM
C     TEMP                             RADISW
C     T                                KDACOM
C     FXOE1,DTE1                ARGUMENT LIST
C     FXOE2,DTE2                ARGUMENT LIST
C       OUTPUTS:
C     EMISS                            TFCOM
C     G1,G2,G3                  ARGUMENT LIST,FOR 1ST FREQ. RANGE
C     G4,G5                     ARGUMENT LIST,FOR 2ND FREQ. RANGE
C
C        CALLED BY :     FST88
C        CALLS     :
C
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
      DIMENSION TEMP(IMAX,LP1),T(IMAX,LP1)
      DIMENSION AVEPHI(IMAX,LP1),EMISS(IMAX,LP1)
C
      DIMENSION IT1(IMAX,LL3P),IVAL(IMAX,LP1),
     5  FYO(IMAX,LP1),DU(IMAX,LP1),
     6  WW1(IMAX,LP1),WW2(IMAX,LP1),
     7  TMP3(IMAX,LP1),TMP5(IMAX),TMP9(IMAX)
C---VARIABLES EQUIVALENCED TO COMMON BLOCK VARIABLES
      DIMENSION T1(5040),T2(5040),T4(5040)
      DIMENSION EM1V(5040),EM1VW(5040)
C---VARIABLES IN THE ARGUMENT LIST
      DIMENSION FXOE1(IMAX,LP1),DTE1(IMAX,LP1),
     1          FXOE2(IMAX,LP1),DTE2(IMAX,LP1),
     2    G1(IMAX,LP1),G2(IMAX,L),G3(IMAX,LP1),G4(IMAX,LP1),G5(IMAX,L)
C
      EQUIVALENCE (EM1V(1),EM1(1,1)),(EM1VW(1),EM1WDE(1,1))
      EQUIVALENCE (T1(1),TABLE1(1,1)),(T2(1),TABLE2(1,1)),
     1 (T4(1),TABLE3(1,1))
C---FIRST WE OBTAIN THE EMISSIVITIES AS A FUNCTION OF TEMPERATURE
C   (INDEX FXO) AND WATER AMOUNT (INDEX FYO). THIS PART OF THE CODE
C   THUS GENERATES THE E2 FUNCTION. THE FXO INDICES HAVE BEEN
C   OBTAINED IN FST88, FOR CONVENIENCE.
C
C---THIS SUBROUTINE EVALUATES THE K=1 CASE ONLY--
C
C---THIS LOOP REPLACES LOOPS GOING FROMI=1,IMAX AND KP=2,LP1 PLUS
C   THE SPECIAL CASE FOR THE LP1TH LAYER.
      DO 1322 KP=1,LP1
      DO 1322 I=1,IMAX
      TMP3(I,KP)=LOG10(AVEPHI(I,KP))+H16E1
      FYO(I,KP)=AINT(TMP3(I,KP)*TEN)
      DU(I,KP)=TMP3(I,KP)-HP1*FYO(I,KP)
      FYO(I,KP)=H28E1*FYO(I,KP)
      IVAL(I,KP)=FYO(I,KP)+FXOE2(I,KP)
      EMISS(I,KP)=T1(IVAL(I,KP))+DU(I,KP)*T2(IVAL(I,KP))
     1                        +DTE2(I,KP)*T4(IVAL(I,KP))
1322  CONTINUE
C
C---THE SPECIAL CASE EMISS(I,L) (LAYER KP) IS OBTAINED NOW
C   BY AVERAGING THE VALUES FOR L AND LP1:
      DO 1344 I=1,IMAX
      EMISS(I,L)=HAF*(EMISS(I,L)+EMISS(I,LP1))
1344  CONTINUE
C
C   CALCULATIONS FOR THE KP=1 LAYER ARE NOT PERFORMED, AS
C   THE RADIATION CODE ASSUMES THAT THE TOP FLUX LAYER (ABOVE THE
C   TOP DATA LEVEL) IS ISOTHERMAL, AND HENCE CONTRIBUTES NOTHING
C   TO THE FLUXES AT OTHER LEVELS.
C
C***THE FOLLOWING IS THE CALCULATION FOR THE E1 FUNCTION, FORMERLY
C    DONE IN SUBROUTINE E1V88. THE MOVE TO E1E288 IS DUE TO THE
C    SAVINGS IN OBTAINING INDEX VALUES (THE TEMP. INDICES HAVE
C    BEEN OBTAINED IN FST88, WHILE THE U-INDICES ARE OBTAINED
C    IN THE E2 CALCS.,WITH K=1).
C
C
C   FOR TERMS INVOLVING TOP LAYER, DU IS NOT KNOWN; IN FACT, WE
C   USE INDEX 2 TO REPERSENT INDEX 1 IN PREV. CODE. THIS MEANS THAT
C    THE IT1 INDEX 1 AND LLP1 HAS TO BE CALCULATED SEPARATELY. THE
C   INDEX LLP2 GIVES THE SAME VALUE AS 1; IT CAN BE OMITTED.
      DO 208 I=1,IMAX
      IT1(I,1)=FXOE1(I,1)
      WW1(I,1)=TEN-DTE1(I,1)
      WW2(I,1)=HP1
208   CONTINUE
      DO 209 KP=1,L
      DO 209 I=1,IMAX
      IT1(I,KP+1)=FYO(I,KP)+FXOE1(I,KP+1)
      IT1(I,KP+LP1)=FYO(I,KP)+FXOE1(I,KP)
      WW1(I,KP+1)=TEN-DTE1(I,KP+1)
      WW2(I,KP+1)=HP1-DU(I,KP)
209   CONTINUE
      DO 211 KP=1,L
      DO 211 I=1,IMAX
      IT1(I,KP+LLP1)=FYO(I,KP)+FXOE1(I,1)
211   CONTINUE
C
C
C  G3(I,1) HAS THE SAME VALUES AS G1 (AND DID ALL ALONG)
      DO 230 I=1,IMAX
      G1(I,1)=WW1(I,1)*WW2(I,1)*EM1V(IT1(I,1))+
     1        WW2(I,1)*DTE1(I,1)*EM1V(IT1(I,1)+1)
      G3(I,1)=G1(I,1)
230   CONTINUE
      DO 240 KP=1,L
      DO 240 I=1,IMAX
      G1(I,KP+1)=WW1(I,KP+1)*WW2(I,KP+1)*EM1V(IT1(I,KP+1))+
     1        WW2(I,KP+1)*DTE1(I,KP+1)*EM1V(IT1(I,KP+1)+1)+
     2        WW1(I,KP+1)*DU(I,KP)*EM1V(IT1(I,KP+1)+28)+
     3        DTE1(I,KP+1)*DU(I,KP)*EM1V(IT1(I,KP+1)+29)
      G2(I,KP)=WW1(I,KP)*WW2(I,KP+1)*EM1V(IT1(I,KP+LP1))+
     1        WW2(I,KP+1)*DTE1(I,KP)*EM1V(IT1(I,KP+LP1)+1)+
     1        WW1(I,KP)*DU(I,KP)*EM1V(IT1(I,KP+LP1)+28)+
     2        DTE1(I,KP)*DU(I,KP)*EM1V(IT1(I,KP+LP1)+29)
240   CONTINUE
      DO 241 KP=2,LP1
      DO 241 I=1,IMAX
      G3(I,KP)=WW1(I,1)*WW2(I,KP)*EM1V(IT1(I,LL+KP))+
     1        WW2(I,KP)*DTE1(I,1)*EM1V(IT1(I,LL+KP)+1)+
     2        WW1(I,1)*DU(I,KP-1)*EM1V(IT1(I,LL+KP)+28)+
     3        DTE1(I,1)*DU(I,KP-1)*EM1V(IT1(I,LL+KP)+29)
241   CONTINUE
C
      DO 244 I=1,IMAX
      G4(I,1)=WW1(I,1)*WW2(I,1)*EM1VW(IT1(I,1))+
     1        WW2(I,1)*DTE1(I,1)*EM1VW(IT1(I,1)+1)
244   CONTINUE
      DO 242 KP=1,L
      DO 242 I=1,IMAX
      G4(I,KP+1)=WW1(I,KP+1)*WW2(I,KP+1)*EM1VW(IT1(I,KP+1))+
     1        WW2(I,KP+1)*DTE1(I,KP+1)*EM1VW(IT1(I,KP+1)+1)+
     2        WW1(I,KP+1)*DU(I,KP)*EM1VW(IT1(I,KP+1)+28)+
     3        DTE1(I,KP+1)*DU(I,KP)*EM1VW(IT1(I,KP+1)+29)
      G5(I,KP)=WW1(I,KP)*WW2(I,KP+1)*EM1VW(IT1(I,KP+LP1))+
     1        WW2(I,KP+1)*DTE1(I,KP)*EM1VW(IT1(I,KP+LP1)+1)+
     1        WW1(I,KP)*DU(I,KP)*EM1VW(IT1(I,KP+LP1)+28)+
     2        DTE1(I,KP)*DU(I,KP)*EM1VW(IT1(I,KP+LP1)+29)
242   CONTINUE
C
      RETURN
      END
      SUBROUTINE E290(EMISSB,EMISS,AVEPHI,KLEN,FXOE2,DTE2)
CFPP$ NOCONCUR R
C
C     SUBROUTINE E290 COMPUTES THE EXCHANGE TERMS IN THE FLUX EQUATION
C  FOR LONGWAVE RADIATION FOR ALL TERMS EXCEPT THE EXCHANGE WITH THE
C  TOP OF THE ATMOSPHERE. THE METHOD IS A TABLE LOOKUP ON A PRE-
C  COMPUTED E2 FUNCTION (DEFINED IN REF. (4)).
C     CALCULATIONS ARE DONE IN THE FREQUENCY RANGE:
C       1) 0-560,1200-2200 CM-1   FOR Q(APPROX)
C  MOTIVATION FOR THESE CALCULATIONS IS IN REFERENCES (1) AND (4).
C       INPUTS:                    (COMMON BLOCKS)
C     TABLE1,TABLE2,TABLE3,            TABCOM
C     AVEPHI                           TFCOM
C     FXOE2,DTE2,KLEN           ARGUMENT LIST
C       OUTPUTS:
C     EMISS,EMISSB                     TFCOM
C
C        CALLED BY :     FST88
C        CALLS     :
C
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
      DIMENSION EMISSB(IMAX,LP1),EMISS(IMAX,LP1),AVEPHI(IMAX,LP1)
      DIMENSION IVAL(IMAX,LP1),
     1  DT(IMAX,LP1),FYO(IMAX,LP1),DU(IMAX,LP1)
C---TMP3 MAY BE EQUIVALENCED TO DT IN VTEMP
      DIMENSION TMP3(IMAX,LP1)
C---VARIABLES EQUIVALENCED TO COMMON BLOCK VARIABLES
      DIMENSION T1(5040),T2(5040),T4(5040)
C---VARIABLES IN THE ARGUMENT LIST
      DIMENSION FXOE2(IMAX,LP1),DTE2(IMAX,LP1)
C
      EQUIVALENCE (TMP3,DT)
      EQUIVALENCE (T1(1),TABLE1(1,1)),(T2(1),TABLE2(1,1)),
     1 (T4(1),TABLE3(1,1))
C---FIRST WE OBTAIN THE EMISSIVITIES AS A FUNCTION OF TEMPERATURE
C   (INDEX FXO) AND WATER AMOUNT (INDEX FYO). THIS PART OF THE CODE
C   THUS GENERATES THE E2 FUNCTION.
C
C---CALCULATIONS FOR VARYING KP (FROM KP=K+1 TO LP1, INCLUDING SPECIAL
C   CASE: RESULTS ARE IN EMISS
      DO 132 K=1,LP2-KLEN
      DO 132 I=1,IMAX
      TMP3(I,K)=LOG10(AVEPHI(I,K+KLEN-1))+H16E1
      FYO(I,K)=AINT(TMP3(I,K)*TEN)
      DU(I,K)=TMP3(I,K)-HP1*FYO(I,K)
      FYO(I,K)=H28E1*FYO(I,K)
      IVAL(I,K)=FYO(I,K)+FXOE2(I,K+KLEN-1)
      EMISS(I,K+KLEN-1)=T1(IVAL(I,K))+DU(I,K)*T2(IVAL(I,K))
     1                           +DTE2(I,K+KLEN-1)*T4(IVAL(I,K))
132   CONTINUE
C---THE SPECIAL CASE EMISS(I,L) (LAYER KP) IS OBTAINED NOW
C   BY AVERAGING THE VALUES FOR L AND LP1:
      DO 1344 I=1,IMAX
      EMISS(I,L)=HAF*(EMISS(I,L)+EMISS(I,LP1))
1344  CONTINUE
C---NOTE THAT EMISS(I,LP1) IS NOT USEFUL AFTER THIS POINT.
C
C---CALCULATIONS FOR KP=KLEN AND VARYING K; RESULTS ARE IN EMISSB.
C  IN THIS CASE, THE TEMPERATURE INDEX IS UNCHANGED, ALWAYS BEING
C  FXO(I,KLEN-1); THE WATER INDEX CHANGES, BUT IS SYMMETRICAL WITH
C  THAT FOR THE VARYING KP CASE.NOTE THAT THE SPECIAL CASE IS NOT
C  INVOLVED HERE.
C     (FIXED LEVEL) K VARIES FROM (KLEN+1) TO LP1; RESULTS ARE IN
C   EMISSB(I,(KLEN) TO L)
      DO 142 K=1,LP1-KLEN
      DO 142 I=1,IMAX
      DT(I,K)=DTE2(I,KLEN-1)
      IVAL(I,K)=FYO(I,K)+FXOE2(I,KLEN-1)
142   CONTINUE
C
      DO 234 K=1,LP1-KLEN
      DO 234 I=1,IMAX
      EMISSB(I,K+KLEN-1)=T1(IVAL(I,K))+DU(I,K)*T2(IVAL(I,K))
     1                                +DT(I,K)*T4(IVAL(I,K))
234   CONTINUE
      RETURN
      END
      SUBROUTINE E2SPEC(EMISS,AVEPHI,FXOSP,DTSP)
CFPP$ NOCONCUR R
C
C     SUBROUTINE E2SPEC COMPUTES THE EXCHANGE TERMS IN THE FLUX EQUATION
C  FOR LONGWAVE RADIATION FOR 2 TERMS USED FOR NEARBY LAYER COMPU-
C  TATIONS. THE METHOD IS A TABLE LOOKUP ON A PRE-
C  COMPUTED E2 FUNCTION (DEFINED IN REF. (4)).
C     CALCULATIONS ARE DONE IN THE FREQUENCY RANGE:
C        0-560,1200-2200 CM-1
C  MOTIVATION FOR THESE CALCULATIONS IS IN REFERENCES (1) AND (4).
C       INPUTS:                    (COMMON BLOCKS)
C     TABLE1,TABLE2,TABLE3,            TABCOM
C     AVEPHI                           TFCOM
C     FXOSP,DTSP                ARGUMENT LIST
C       OUTPUTS:
C     EMISS                            TFCOM
C
C        CALLED BY :     FST88
C        CALLS     :
C
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
      DIMENSION AVEPHI(IMAX,LP1),EMISS(IMAX,LP1)
      DIMENSION IVAL(IMAX,LP1),
     1  FYO(IMAX,LP1),DU(IMAX,LP1),
     2  TMP3(IMAX,LP1)
C---VARIABLES EQUIVALENCED TO COMMON BLOCK VARIABLES
      DIMENSION T1(5040),T2(5040),T4(5040)
C---VARIABLES IN THE ARGUMENT LIST
      DIMENSION FXOSP(IMAX,2),DTSP(IMAX,2)
C
      EQUIVALENCE (T1(1),TABLE1(1,1)),(T2(1),TABLE2(1,1)),
     1 (T4(1),TABLE3(1,1))
C---FIRST WE OBTAIN THE EMISSIVITIES AS A FUNCTION OF TEMPERATURE
C   (INDEX FXO) AND WATER AMOUNT (INDEX FYO). THIS PART OF THE CODE
C   THUS GENERATES THE E2 FUNCTION.
C
      DO 132 K=1,2
      DO 132 I=1,IMAX
      TMP3(I,K)=LOG10(AVEPHI(I,K))+H16E1
      FYO(I,K)=AINT(TMP3(I,K)*TEN)
      DU(I,K)=TMP3(I,K)-HP1*FYO(I,K)
      IVAL(I,K)=H28E1*FYO(I,K)+FXOSP(I,K)
      EMISS(I,K)=T1(IVAL(I,K))+DU(I,K)*T2(IVAL(I,K))+
     1                         DTSP(I,K)*T4(IVAL(I,K))
132   CONTINUE
      RETURN
      END
C     SUBROUTINE E3V88 COMPUTES NEARBY LAYER TRANSMISSIVITIES FOR
C  H2O USING A TABLE LOOKUP OF THE PRE-COMPUTED E3 FUNCTION
C ( DESCRIBED IN REF. (4)).
C         INPUTS:                 (COMMON BLOCKS,ARGS.)
C       TV,AV                      ARGUMENT LIST
C       EM3                        TABCOM
C          OUTPUTS:
C       EMV                        ARGUMENT LIST
C
C       CALLED BY  :    FST88
C       CALLS      :    ALOG10H,ALOG10V
C
      SUBROUTINE E3V88(EMV,TV,AV)
CFPP$ NOCONCUR R
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
      DIMENSION IT(IMAX,LLP1),WW1(IMAX,LLP1),
     1          DT(IMAX,LLP1),WW2(IMAX,LLP1),
     2          DU(IMAX,LLP1)
C   THE FOLLOWING ARRAYS ARE EQUIVALENCED TO VTEMP ARRAYS
      DIMENSION FXO(IMAX,LLP1),FYO(IMAX,LLP1),TMP3(IMAX,LLP1)
C
C    DIMENSIONS OF ARRAYS IN ARGUMENT LIST
      DIMENSION EMV(IMAX,LLP1),TV(IMAX,LLP1),AV(IMAX,LLP1)
C
C   THE FOLLOWING ARRAY IS EQUIVALENCED TO AN ARRAY IN TABCOM.H
      DIMENSION EM3V(5040)
C
      EQUIVALENCE (EM3V(1),EM3(1,1))
      EQUIVALENCE (FXO,WW1),(FYO,WW2)
C---THE FOLLOWING LOOP REPLACES A DOUBLE LOOP OVER I (1-IMAX) AND
C   K (1-LLP1)
      DO 203 K=1,LLP1
      DO 203 I=1,IMAX
        FXO(I,K)=AINT(TV(I,K)*HP1)
        TMP3(I,K)=LOG10(AV(I,K))+H16E1
        DT(I,K)=TV(I,K)-TEN*FXO(I,K)
        FYO(I,K)=AINT(TMP3(I,K)*TEN)
        DU(I,K)=TMP3(I,K)-HP1*FYO(I,K)
C---OBTAIN INDEX FOR TABLE LOOKUP; THIS VALUE WILL HAVE TO BE
C   DECREMENTED BY 9 TO ACCOUNT FOR TABLE TEMPS STARTING AT 100K.
        IT(I,K)=FXO(I,K)+FYO(I,K)*H28E1
        WW1(I,K)=TEN-DT(I,K)
        WW2(I,K)=HP1-DU(I,K)
        EMV(I,K)=WW1(I,K)*WW2(I,K)*EM3V(IT(I,K)-9)+
     1           WW2(I,K)*DT(I,K)*EM3V(IT(I,K)-8)+
     2           WW1(I,K)*DU(I,K)*EM3V(IT(I,K)+19)+
     3           DT(I,K)*DU(I,K)*EM3V(IT(I,K)+20)
203   CONTINUE
      RETURN
      END
C     *****************************************************************
C          SUBROUTINE FST88 IS THE MAIN COMPUTATION MODULE OF THE
C     LONG-WAVE RADIATION CODE. IN IT ALL "EMISSIVITY" CALCULATIONS,
C     INCLUDING CALLS TO TABLE LOOKUP SUBROUTINES. ALSO,AFTER CALLING
C     SUBROUTINE "SPA88", FINAL COMBINED HEATING RATES AND GROUND
C     FLUX ARE OBTAINED.
C     *****************************************************************
C              INPUTS:
C        BETINW,BETAWD,AB15WD              BDWIDE
C        BETAD,BO3RND,AO3RND               BANDTA
C        CLDFAC                            CLDCOM
C        QH2O,P,DELP2,DELP,T,VAR1,VAR2,    KDACOM
C        VAR3,VAR4,CNTVAL                  KDACOM
C        TOTVO2,TOTO3,TOTPHI,EMPL,EMX1     KDACOM
C        TPHIO3,EMX2                       KDACOM
C        TEMP,PRESS                        RADISW
C        NCLDS,KTOP,KBTM,CAMT              RADISW
C        IND,INDX2,KMAXV,SOURCE,DSRCE      TABCOM
C        SKC1R,SKC3R,KMAXVM,NREP1,NREP2    TABCOM
C        NST1,NST2,NRP1,NRP2               TABCOM
C        CO2NBL,CO21                       TFCOM
C        CO2SP1,CO2SP2                     TFCOM
C              OUTPUTS:
C        HEATRA,GRNFLX,TOPFLX              LWOUT
C
C          CALLED BY  :    RADMN OR MAIN PGM
C          CALLS      :    CLO88,E1E288,E3V88,SPA88,NLTE
C
C        PASSED VARIABLES:
C              IN E3V88:
C        EMD     =  E3 FUNCTION FOR H2O LINES (0-560,1200-2200 CM-1)
C                     COMPUTED IN E3V88
C        TPL     =  TEMPERATURE INPUT FOR E3 CALCULATION IN E3V88
C        EMPL    =  H2O AMOUNT,INPUT FOR E3 CALCULATION IN E3V88
C                   (COMPUTED IN LWR88; STORED IN KDACOM.H)
C              IN E1E288:
C        E1CTS1  =  E1 FUNCTION FOR THE (I+1)TH LEVEL USING THE
C                   TEMPERATURE OF THE ITH DATA LEVEL,COMPUTED OVER
C                   THE FREQUENCY RANGE 0-560,1200-2200 CM-1. (E1CTS1-
C                   E1CTW1) IS USED IN OBTAINING THE FLUX AT THE TOP
C                   IN THE 0-160,1200-2200 CM-1 RANGE (FLX1E1).
C        E1CTS2  =  E1 FUNCTION FOR THE ITH LEVEL, USING THE TEMP. OF
C                   THE ITH DATA LEVEL,COMPUTED OVER THE FREQUENCY RANGE
C                   0-560,1200-2200 CM-1. (E1CTS2-E1CTW2) IS ALSO USED
C                   IN OBTAINING THE FLUX AT THE TOP IN THE 0-160,.
C                   1200-2200 CM-1 RANGE.
C        E1FLX   =  E1 FCTN. FOR THE ITH LEVEL,USING THE TEMPERATURE AT
C                   THE TOP OF THE ATMOSPHERE. COMPUTED OVER THE FREQ.
C                   RANGE 0-560,1200-2200 CM-1. USED FOR Q(APPROX) TERM.
C                   (IN COMMON BLOCK TFCOM)
C        E1CTW1  =  LIKE E1CTS1,BUT COMPUTED OVER THE 160-560 CM-1 RANGE
C                   AND USED FOR Q(APPROX,CTS) CALCULATION
C        E1CTW2  =  LIKE E1CTS2,BUT COMPUTED OVER THE 160-560 CM-1 RANGE
C                   AND USED FOR Q(APPROX,CTS) CALCULATION
C        FXO     =  TEMPERATURE INDEX USED FOR E1 FUNCTION AND ALSO
C                   USED FOR SOURCE FUNCTION CALC. IN FST88.
C        DT      =  TEMP. DIFF.BETWEEN MODEL TEMPS. AND TEMPS. AT
C                   TABULAR VALUES OF E1 AND SOURCE FCTNS. USED IN
C                   FST88 AND IN E1 FUNCTION CALC.
C        FXOE2   =  TEMPERATURE INDEX USED FOR E2 FUNCTION
C        DTE2    =  TEMP. DIFF. BETWEEN MODEL TEMP. AND TEMPS. AT
C                   TABULAR VALUES OF E2 FUNCTION.
      SUBROUTINE FST88(HEATRA,GRNFLX,TOPFLX,
     1                 GRNFX0,TOPFX0,
     1                 QH2O,PRESS,P,DELP,DELP2,TEMP,T,
     2                 CLDFAC,NCLDS,KTOP,KBTM,CAMT,
     3                 CO21,CO2NBL,CO2SP1,CO2SP2,
     4                 VAR1,VAR2,VAR3,VAR4,CNTVAL,
     5                 TOTO3,TPHIO3,TOTPHI,TOTVO2,
     6                 EMX1,EMX2,EMPL)
CFPP$ NOCONCUR R
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
C
      DIMENSION QH2O(IMAX,LP1),PRESS(IMAX,LP1)
      DIMENSION P(IMAX,LP1),DELP(IMAX,L),DELP2(IMAX,L),TEMP(IMAX,LP1)
      DIMENSION T(IMAX,LP1),CLDFAC(IMAX,LP1,LP1),CAMT(IMAX,LP1)
      DIMENSION NCLDS(IMAX),KTOP(IMAX,LP1),KBTM(IMAX,LP1)
      DIMENSION CO21(IMAX,LP1,LP1),CO2NBL(IMAX,L)
      DIMENSION CO2SP1(IMAX,LP1),CO2SP2(IMAX,LP1)
      DIMENSION VAR1(IMAX,L),VAR2(IMAX,L),VAR3(IMAX,L),VAR4(IMAX,L)
      DIMENSION CNTVAL(IMAX,LP1)
      DIMENSION HEATRA(IMAX,L),GRNFLX(IMAX),TOPFLX(IMAX)
C
      DIMENSION HEATR0(IMAX,L),FLXNT0(IMAX,LP1)
      DIMENSION GRNFX0(IMAX),TOPFX0(IMAX),GXCTS0(IMAX),FLX1E0(IMAX)
      DIMENSION EXCTS0(IMAX,L),CTSO30(IMAX,L),CTS0(IMAX,L)
      DIMENSION FLX0(IMAX,LP1)
C
      DIMENSION GXCTS(IMAX),FLX1E1(IMAX)
      DIMENSION AVEPHI(IMAX,LP1),EMISS(IMAX,LP1),EMISSB(IMAX,LP1)
C
      DIMENSION TOTO3(IMAX,LP1),TPHIO3(IMAX,LP1),TOTPHI(IMAX,LP1)
      DIMENSION TOTVO2(IMAX,LP1),EMX1(IMAX),EMX2(IMAX),EMPL(IMAX,LLP1)
C
      DIMENSION EXCTS(IMAX,L),CTSO3(IMAX,L),CTS(IMAX,L),E1FLX(IMAX,LP1)
      DIMENSION CO2SP(IMAX,LP1),TO3SPC(IMAX,L),TO3SP(IMAX,LP1)
      DIMENSION OSS(IMAX,LP1),CSS(IMAX,LP1),SS1(IMAX,LP1),SS2(IMAX,LP1),
     1 TC(IMAX,LP1),DTC(IMAX,LP1)
      DIMENSION SORC(IMAX,LP1,NBLY),CSOUR(IMAX,LP1)
CCC
      DIMENSION        AVVO2(IMAX,LP1),HEATEM(IMAX,LP1),
     1                 OVER1D(IMAX,LP1),
     1                 TO31D(IMAX,LP1),CONT1D(IMAX,LP1),
     2                 AVMO3(IMAX,LP1),AVPHO3(IMAX,LP1),
     2                 C(IMAX,LLP1),C2(IMAX,LLP1)
      DIMENSION       ITOP(IMAX),IBOT(IMAX),INDTC(IMAX)
      DIMENSION
     4 DELPTC(IMAX),PTOP(IMAX),PBOT(IMAX),FTOP(IMAX),
     5 FBOT(IMAX) ,EMSPEC(IMAX,2)
C---DIMENSION OF VARIABLES EQUIVALENCED TO THOSE IN VTEMP---
      DIMENSION VTMP3(IMAX,LP1),DSORC(IMAX,LP1)
      DIMENSION ALP(IMAX,LLP1),CSUB(IMAX,LLP1),CSUB2(IMAX,LLP1)
      DIMENSION FAC1(IMAX,LP1)
      DIMENSION DELPR1(IMAX,LP1),DELPR2(IMAX,LP1)
      DIMENSION EMISDG(IMAX,LP1),CONTDG(IMAX,LP1),TO3DG(IMAX,LP1)
      DIMENSION FLXNET(IMAX,LP1)
      DIMENSION IXO(IMAX,LP1)
      DIMENSION VSUM1(IMAX,LP1)
      DIMENSION FLXTHK(IMAX,LP1)
      DIMENSION Z1(IMAX,LP1)
C---DIMENSION OF VARIABLES PASSED TO OTHER SUBROUTINES---
C   (AND NOT FOUND IN COMMON BLOCKS)
      DIMENSION E1CTS1(IMAX,LP1),E1CTS2(IMAX,L)
      DIMENSION E1CTW1(IMAX,LP1),E1CTW2(IMAX,L)
      DIMENSION EMD(IMAX,LLP1),TPL(IMAX,LLP1)
C   IT IS POSSIBLE TO EQUIVALENCE EMD,TPL TO THE ABOVE VARIABLES,
C   AS THEY GET CALLED AT DIFFERENT TIMES
      DIMENSION FXO(IMAX,LP1),DT(IMAX,LP1)
      DIMENSION FXOE2(IMAX,LP1),DTE2(IMAX,LP1)
      DIMENSION FXOSP(IMAX,2),DTSP(IMAX,2)
C
C     DIMENSION OF LOCAL VARIABLES
      DIMENSION RLOG(IMAX,L),FLX(IMAX,LP1)
      DIMENSION TOTEVV(IMAX,LP1),CNTTAU(IMAX,LP1)
C
      EQUIVALENCE (ALP,C,CSUB),(CSUB2,C2)
      EQUIVALENCE (FAC1,DSORC,OVER1D,DELPR2,FLXNET)
      EQUIVALENCE (DELPR1,HEATEM)
c     EQUIVALENCE (IXO,AVVO2,FLXTHK,TO3DG)
      EQUIVALENCE (AVVO2,FLXTHK,TO3DG)
      EQUIVALENCE (Z1,AVMO3,CONTDG)
      EQUIVALENCE (EMISDG,VSUM1,AVPHO3)
      EQUIVALENCE (EMD(1,1),E1CTS1(1,1)),(EMD(1,LP2),E1CTS2(1,1))
      EQUIVALENCE (TPL(1,1),E1CTW1(1,1)),(TPL(1,LP2),E1CTW2(1,1))
C
C          FIRST SECTION IS TABLE LOOKUP FOR SOURCE FUNCTION AND
C     DERIVATIVE (B AND DB/DT).ALSO,THE NLTE CO2 SOURCE FUNCTION
C     IS OBTAINED
C
C---IN CALCS. BELOW, DECREMENTING THE INDEX BY 9
C   ACCOUNTS FOR THE TABLES BEGINNING AT T=100K.
C   AT T=100K.
      DO 101 K=1,LP1
      DO 101 I=1,IMAX
C---TEMP. INDICES FOR E1,SOURCE
      VTMP3(I,K)=AINT(TEMP(I,K)*HP1)
      FXO(I,K)=VTMP3(I,K)-9.
      DT(I,K)=TEMP(I,K)-TEN*VTMP3(I,K)
C---INTEGER INDEX FOR SOURCE (USED IMMEDIATELY)
      IXO(I,K)=FXO(I,K)
101   CONTINUE
      DO 103 K=1,L
      DO 103 I=1,IMAX
C---TEMP. INDICES FOR E2 (KP=1 LAYER NOT USED IN FLUX CALCULATIONS)
      VTMP3(I,K)=AINT(T(I,K+1)*HP1)
      FXOE2(I,K)=VTMP3(I,K)-9.
      DTE2(I,K)=T(I,K+1)-TEN*VTMP3(I,K)
103   CONTINUE
C---SPECIAL CASE TO HANDLE KP=LP1 LAYER AND SPECIAL E2 CALCS.
      DO 105 I=1,IMAX
      FXOE2(I,LP1)=FXO(I,L)
      DTE2(I,LP1)=DT(I,L)
      FXOSP(I,1)=FXOE2(I,LM1)
      FXOSP(I,2)=FXO(I,LM1)
      DTSP(I,1)=DTE2(I,LM1)
      DTSP(I,2)=DT(I,LM1)
105   CONTINUE
C
C---SOURCE FUNCTION FOR COMBINED BAND 1
      DO 4114 I=1,IMAX
      DO 4114 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),1)
        DSORC(I,K)=DSRCE(IXO(I,K),1)
4114   CONTINUE
      DO 4112 K=1,LP1
      DO 4112 I=1,IMAX
      SORC(I,K,1)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4112   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 2
      DO 4214 I=1,IMAX
      DO 4214 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),2)
        DSORC(I,K)=DSRCE(IXO(I,K),2)
4214   CONTINUE
      DO 4212 K=1,LP1
      DO 4212 I=1,IMAX
      SORC(I,K,2)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4212   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 3
      DO 4314 I=1,IMAX
      DO 4314 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),3)
        DSORC(I,K)=DSRCE(IXO(I,K),3)
4314   CONTINUE
      DO 4312 K=1,LP1
      DO 4312 I=1,IMAX
      SORC(I,K,3)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4312   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 4
      DO 4414 I=1,IMAX
      DO 4414 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),4)
        DSORC(I,K)=DSRCE(IXO(I,K),4)
4414   CONTINUE
      DO 4412 K=1,LP1
      DO 4412 I=1,IMAX
      SORC(I,K,4)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4412   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 5
      DO 4514 I=1,IMAX
      DO 4514 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),5)
        DSORC(I,K)=DSRCE(IXO(I,K),5)
4514   CONTINUE
      DO 4512 K=1,LP1
      DO 4512 I=1,IMAX
      SORC(I,K,5)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4512   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 6
      DO 4614 I=1,IMAX
      DO 4614 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),6)
        DSORC(I,K)=DSRCE(IXO(I,K),6)
4614   CONTINUE
      DO 4612 K=1,LP1
      DO 4612 I=1,IMAX
      SORC(I,K,6)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4612   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 7
      DO 4714 I=1,IMAX
      DO 4714 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),7)
        DSORC(I,K)=DSRCE(IXO(I,K),7)
4714   CONTINUE
      DO 4712 K=1,LP1
      DO 4712 I=1,IMAX
      SORC(I,K,7)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4712   CONTINUE
C---SOURCE FUNCTION FOR COMBINED BAND 8
      DO 4814 I=1,IMAX
      DO 4814 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),8)
        DSORC(I,K)=DSRCE(IXO(I,K),8)
4814   CONTINUE
      DO 4812 K=1,LP1
      DO 4812 I=1,IMAX
      SORC(I,K,8)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4812   CONTINUE
C---SOURCE FUNCTION FOR BAND 9 (560-670 CM-1)
      DO 4914 I=1,IMAX
      DO 4914 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),9)
        DSORC(I,K)=DSRCE(IXO(I,K),9)
4914   CONTINUE
      DO 4912 K=1,LP1
      DO 4912 I=1,IMAX
      SORC(I,K,9)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
4912   CONTINUE
C---SOURCE FUNCTION FOR BAND 10 (670-800 CM-1)
      DO 5014 I=1,IMAX
      DO 5014 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),10)
        DSORC(I,K)=DSRCE(IXO(I,K),10)
5014  CONTINUE
      DO 5012 K=1,LP1
      DO 5012 I=1,IMAX
      SORC(I,K,10)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
5012   CONTINUE
C---SOURCE FUNCTION FOR BAND 11 (800-900 CM-1)
      DO 5114 I=1,IMAX
      DO 5114 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),11)
        DSORC(I,K)=DSRCE(IXO(I,K),11)
5114   CONTINUE
      DO 5112 K=1,LP1
      DO 5112 I=1,IMAX
      SORC(I,K,11)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
5112   CONTINUE
C---SOURCE FUNCTION FOR BAND 12 (900-990 CM-1)
      DO 5214 I=1,IMAX
      DO 5214 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),12)
        DSORC(I,K)=DSRCE(IXO(I,K),12)
5214   CONTINUE
      DO 5212 K=1,LP1
      DO 5212 I=1,IMAX
      SORC(I,K,12)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
5212   CONTINUE
C---SOURCE FUNCTION FOR BAND 13 (990-1070 CM-1)
      DO 5314 I=1,IMAX
      DO 5314 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),13)
        DSORC(I,K)=DSRCE(IXO(I,K),13)
5314   CONTINUE
      DO 5312 K=1,LP1
      DO 5312 I=1,IMAX
      SORC(I,K,13)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
5312   CONTINUE
C---SOURCE FUNCTION FOR BAND 14 (1070-1200 CM-1)
      DO 5414 I=1,IMAX
      DO 5414 K=1,LP1
        VTMP3(I,K)=SOURCE(IXO(I,K),14)
        DSORC(I,K)=DSRCE(IXO(I,K),14)
5414   CONTINUE
      DO 5412 K=1,LP1
      DO 5412 I=1,IMAX
      SORC(I,K,14)=VTMP3(I,K)+DT(I,K)*DSORC(I,K)
5412   CONTINUE
C
C        THE FOLLOWING SUBROUTINE OBTAINS NLTE SOURCE FUNCTION FOR CO2
C
C
C     CALL NLTE
C
C
C---OBTAIN SPECIAL SOURCE FUNCTIONS FOR THE 15 UM BAND (CSOUR)
C   AND THE WINDOW REGION (SS1)
      DO 131 K=1,LP1
      DO 131 I=1,IMAX
      SS1(I,K)=SORC(I,K,11)+SORC(I,K,12)+SORC(I,K,14)
131   CONTINUE
      DO 143 K=1,LP1
      DO 143 I=1,IMAX
      CSOUR(I,K)=SORC(I,K,9)+SORC(I,K,10)
143   CONTINUE
C
C---COMPUTE TEMP**4 (TC) AND VERTICAL TEMPERATURE DIFFERENCES
C   (OSS,CSS,SS2,DTC). ALL THESE WILL BE USED LATER IN FLUX COMPUTA-
C   TIONS.
C
      DO 901 K=1,LP1
      DO 901 I=1,IMAX
      TC(I,K)=(TEMP(I,K)*TEMP(I,K))**2
901   CONTINUE
      DO 903 K=1,L
      DO 903 I=1,IMAX
      OSS(I,K+1)=SORC(I,K+1,13)-SORC(I,K,13)
      CSS(I,K+1)=CSOUR(I,K+1)-CSOUR(I,K)
      DTC(I,K+1)=TC(I,K+1)-TC(I,K)
      SS2(I,K+1)=SS1(I,K+1)-SS1(I,K)
903   CONTINUE
C
C
C---THE FOLLOWIMG IS A DRASTIC REWRITE OF THE RADIATION CODE TO
C    (LARGELY) ELIMINATE THREE-DIMENSIONAL ARRAYS. THE CODE WORKS
C    ON THE FOLLOWING PRINCIPLES:
C
C          LET K = FIXED FLUX LEVEL, KP = VARYING FLUX LEVEL
C          THEN FLUX(K)=SUM OVER KP : (DELTAB(KP)*TAU(KP,K))
C               OVER ALL KP'S, FROM 1 TO LP1.
C
C          WE CAN BREAK DOWN THE CALCULATIONS FOR ALL K'S AS FOLLOWS:
C
C          FOR ALL K'S K=1 TO LP1:
C              FLUX(K)=SUM OVER KP : (DELTAB(KP)*TAU(KP,K))  (1)
C                      OVER ALL KP'S, FROM K+1 TO LP1
C          AND
C              FOR KP FROM K+1 TO LP1:
C                 FLUX(KP) = DELTAB(K)*TAU(K,KP)              (2)
C
C          NOW IF TAU(K,KP)=TAU(KP,K) (SYMMETRICAL ARRAYS)
C          WE CAN COMPUTE A 1-DIMENSIONAL ARRAY TAU1D(KP) FROM
C          K+1 TO LP1, EACH TIME K IS INCREMENTED.
C          EQUATIONS (1) AND (2) THEN BECOME:
C
C             TAU1D(KP) = (VALUES FOR TAU(KP,K) AT THE PARTICULAR K)
C             FLUX(K) = SUM OVER KP : (DELTAB(KP)*TAU1D(KP))   (3)
C             FLUX(KP) = DELTAB(K)*TAU1D(KP)                   (4)
C
C         THE TERMS FOR TAU (K,K) AND OTHER SPECIAL TERMS (FOR
C         NEARBY LAYERS) MUST, OF COURSE, BE HANDLED SEPARATELY, AND
C         WITH CARE.
C
C      COMPUTE "UPPER TRIANGLE" TRANSMISSION FUNCTIONS FOR
C      THE 9.6 UM BAND (TO3SP) AND THE 15 UM BAND (OVER1D). ALSO,
C      THE
C      STAGE 1...COMPUTE O3 ,OVER TRANSMISSION FCTNS AND AVEPHI
C---DO K=1 CALCULATION (FROM FLUX LAYER KK TO THE TOP) SEPARATELY
C   AS VECTORIZATION IS IMPROVED,AND OZONE CTS TRANSMISSIVITY
C   MAY BE EXTRACTED HERE.
      DO 3021 K=1,L
      DO 3021 I=1,IMAX
      AVEPHI(I,K)=TOTPHI(I,K+1)
3021  CONTINUE
C---IN ORDER TO PROPERLY EVALUATE EMISS INTEGRATED OVER THE (LP1)
C   LAYER, A SPECIAL EVALUATION OF EMISS IS DONE. THIS REQUIRES
C   A SPECIAL COMPUTATION OF AVEPHI, AND IT IS STORED IN THE
C   (OTHERWISE VACANT) LP1'TH POSITION
C
      DO 803 I=1,IMAX
      AVEPHI(I,LP1)=AVEPHI(I,LM1)+EMX1(I)
803   CONTINUE
C   COMPUTE FLUXES FOR K=1
      CALL E1E290(E1CTS1,E1CTS2,E1FLX,E1CTW1,E1CTW2,EMISS,
     1            FXO,DT,FXOE2,DTE2,AVEPHI,TEMP,T)
      DO 302 K=1,L
      DO 302 I=1,IMAX
      FAC1(I,K)=BO3RND(2)*TPHIO3(I,K+1)/TOTO3(I,K+1)
      TO3SPC(I,K)=HAF*(FAC1(I,K)*
     1    (SQRT(ONE+(FOUR*AO3RND(2)*TOTO3(I,K+1))/FAC1(I,K))-ONE))
C   FOR K=1, TO3SP IS USED INSTEAD OF TO31D (THEY ARE EQUAL IN THIS
C   CASE); TO3SP IS PASSED TO SPA90, WHILE TO31D IS A WORK-ARRAY.
      TO3SP(I,K)=EXP(HM1EZ*(TO3SPC(I,K)+SKO3R*TOTVO2(I,K+1)))
      OVER1D(I,K)=EXP(HM1EZ*(SQRT(AB15WD*TOTPHI(I,K+1))+
     1            SKC1R*TOTVO2(I,K+1)))
C---BECAUSE ALL CONTINUUM TRANSMISSIVITIES ARE OBTAINED FROM THE
C  2-D QUANTITY CNTTAU (AND ITS RECIPROCAL TOTEVV) WE STORE BOTH
C  OF THESE HERE. FOR K=1, CONT1D EQUALS CNTTAU
      CNTTAU(I,K)=EXP(HM1EZ*TOTVO2(I,K+1))
      TOTEVV(I,K)=1./CNTTAU(I,K)
302   CONTINUE
      DO 3022 K=1,L
      DO 3022 I=1,IMAX
      CO2SP(I,K+1)=OVER1D(I,K)*CO21(I,1,K+1)
3022  CONTINUE
      DO 3023 K=1,L
      DO 3023 I=1,IMAX
      CO21(I,K+1,1)=CO21(I,K+1,1)*OVER1D(I,K)
3023  CONTINUE
C---RLOG IS THE NBL AMOUNT FOR THE 15 UM BAND CALCULATION
      DO 1808 I=1,IMAX
      RLOG(I,1)=OVER1D(I,1)*CO2NBL(I,1)
1808  CONTINUE
C---THE TERMS WHEN KP=1 FOR ALL K ARE THE PHOTON EXCHANGE WITH
C   THE TOP OF THE ATMOSPHERE, AND ARE OBTAINED DIFFERENTLY THAN
C   THE OTHER CALCULATIONS
      DO 305 K=2,LP1
      DO 305 I=1,IMAX
      FLX(I,K)= (TC(I,1)*E1FLX(I,K)
     1          +SS1(I,1)*CNTTAU(I,K-1)
     2          +SORC(I,1,13)*TO3SP(I,K-1)
     3          +CSOUR(I,1)*CO2SP(I,K))
     4          *CLDFAC(I,1,K)
305   CONTINUE
      DO 307 I=1,IMAX
      FLX(I,1)= TC(I,1)*E1FLX(I,1)+SS1(I,1)+SORC(I,1,13)
     1          +CSOUR(I,1)
307   CONTINUE
C---THE KP TERMS FOR K=1...
      DO 303 KP=2,LP1
      DO 303 I=1,IMAX
      FLX(I,1)=FLX(I,1)+(OSS(I,KP)*TO3SP(I,KP-1)
     1                  +SS2(I,KP)*CNTTAU(I,KP-1)
     2                  +CSS(I,KP)*CO21(I,KP,1)
     3                  +DTC(I,KP)*EMISS(I,KP-1))*CLDFAC(I,KP,1)
303   CONTINUE
C...    DITTO FOR CLEAR SKY....
      DO 2305 K=2,LP1
      DO 2305 I=1,IMAX
      FLX0(I,K)=  TC(I,1)*E1FLX(I,K)
     1          +SS1(I,1)*CNTTAU(I,K-1)
     2          +SORC(I,1,13)*TO3SP(I,K-1)
     3          +CSOUR(I,1)*CO2SP(I,K)
2305  CONTINUE
      DO 2307 I=1,IMAX
      FLX0(I,1)=TC(I,1)*E1FLX(I,1)+SS1(I,1)+SORC(I,1,13)
     1          +CSOUR(I,1)
2307  CONTINUE
C---THE KP TERMS FOR K=1...
      DO 2303 KP=2,LP1
       DO 2303 I=1,IMAX
        FLX0(I,1)=FLX0(I,1)+ OSS(I,KP)*TO3SP(I,KP-1)
     1                  +SS2(I,KP)*CNTTAU(I,KP-1)
     2                  +CSS(I,KP)*CO21(I,KP,1)
     3                  +DTC(I,KP)*EMISS(I,KP-1)
2303  CONTINUE
C          SUBROUTINE SPA88 IS CALLED TO OBTAIN EXACT CTS FOR WATER
C     CO2 AND O3, AND APPROXIMATE CTS CO2 AND O3 CALCULATIONS.
C
      CALL SPA88(EXCTS,CTSO3,GXCTS,SORC,CSOUR,
     1           EXCTS0,CTSO30,GXCTS0,
     1           CLDFAC,TEMP,PRESS,VAR1,VAR2,
     2           P,DELP,DELP2,TOTVO2,TO3SP,TO3SPC,
     3           CO2SP1,CO2SP2,CO2SP)
C
C    THIS SECTION COMPUTES THE EMISSIVITY CTS HEATING RATES FOR 2
C    EMISSIVITY BANDS: THE 0-160,1200-2200 CM-1 BAND AND THE 800-
C    990,1070-1200 CM-1 BAND. THE REMAINING CTS COMTRIBUTIONS ARE
C    CONTAINED IN CTSO3, COMPUTED IN SPA88.
C
      DO 998 I=1,IMAX
      VTMP3(I,1)=1.
998   CONTINUE
      DO 999 K=1,L
      DO 999 I=1,IMAX
      VTMP3(I,K+1)=CNTTAU(I,K)*CLDFAC(I,K+1,1)
999   CONTINUE
      DO 1001 K=1,L
      DO 1001 I=1,IMAX
      CTS(I,K)=RADCON*DELP(I,K)*(TC(I,K)*
     1     (E1CTW2(I,K)*CLDFAC(I,K+1,1)-E1CTW1(I,K)*CLDFAC(I,K,1)) +
     2      SS1(I,K)*(VTMP3(I,K+1)-VTMP3(I,K)))
1001  CONTINUE
C
      DO 1011 K=1,L
      DO 1011 I=1,IMAX
      VTMP3(I,K)=TC(I,K)*(CLDFAC(I,K,1)*(E1CTS1(I,K)-E1CTW1(I,K)) -
     1                    CLDFAC(I,K+1,1)*(E1CTS2(I,K)-E1CTW2(I,K)))
1011  CONTINUE
      DO 1012 I=1,IMAX
      FLX1E1(I)=TC(I,LP1)*CLDFAC(I,LP1,1)*
     1          (E1CTS1(I,LP1)-E1CTW1(I,LP1))
1012  CONTINUE
      DO 1014 K=1,L
      DO 1013 I=1,IMAX
      FLX1E1(I)=FLX1E1(I)+VTMP3(I,K)
1013  CONTINUE
1014  CONTINUE
C  ... DITTO FOR CLEAR SKY  ...
      DO 2998 I=1,IMAX
       VTMP3(I,1)=1.
2998  CONTINUE
	do k = 1, l
      DO 2999 I=1,IMAX
       VTMP3(I,k+1)=CNTTAU(I,k)
2999  CONTINUE
	enddo
	do k = 1, l
      DO 2001 I=1,IMAX
       CTS0(I,k)=RADCON*DELP(I,k)*(TC(I,k)*
     1     (E1CTW2(I,k)     -E1CTW1(I,k) ) +
     2      SS1(I,k)*(VTMP3(I,k+1)-VTMP3(I,k)))
2001  CONTINUE
	enddo
C
	do k = 1, l
      DO 2011 I=1,IMAX
       VTMP3(I,k)=TC(I,k)*( E1CTS1(I,k)-E1CTW1(I,k)  -
     1                (E1CTS2(I,k)-E1CTW2(I,k)))
2011  CONTINUE
	enddo
      DO 2012 I=1,IMAX
       FLX1E0(I)=TC(I,LP1)*
     1          (E1CTS1(I,LP1)-E1CTW1(I,LP1))
2012  CONTINUE
      DO 2014 K=1,L
       DO 2013 I=1,IMAX
        FLX1E0(I)=FLX1E0(I)+VTMP3(I,K)
2013   CONTINUE
2014  CONTINUE
C
C---NOW REPEAT FLUX CALCULATIONS FOR THE K=2..LM1  CASES.
C   CALCULATIONS FOR FLUX LEVEL L AND LP1 ARE DONE SEPARATELY, AS ALL
C   EMISSIVITY AND CO2 CALCULATIONS ARE SPECIAL CASES OR NEARBY LAYERS.
C
      DO 321 K=2,LM1
      KLEN=K
C
      DO 3218 KK=1,LP1-K
      DO 3218 I=1,IMAX
      AVEPHI(I,KK+K-1)=TOTPHI(I,KK+K)-TOTPHI(I,K)
3218  CONTINUE
      DO 1803 I=1,IMAX
      AVEPHI(I,LP1)=AVEPHI(I,LM1)+EMX1(I)
1803   CONTINUE
C---COMPUTE EMISSIVITY FLUXES (E2) FOR THIS CASE. NOTE THAT
C   WE HAVE OMITTED THE NEARBY LATER CASE (EMISS(I,K,K)) AS WELL
C   AS ALL CASES WITH K=L OR LP1. BUT THESE CASES HAVE ALWAYS
C   BEEN HANDLED AS SPECIAL CASES, SO WE MAY AS WELL COMPUTE
C    THEIR FLUXES SEPARASTELY.
C
      CALL E290(EMISSB,EMISS,AVEPHI,KLEN,FXOE2,DTE2)
      DO 322 KK=1,LP1-K
      DO 322 I=1,IMAX
      AVMO3(I,KK+K-1)=TOTO3(I,KK+K)-TOTO3(I,K)
      AVPHO3(I,KK+K-1)=TPHIO3(I,KK+K)-TPHIO3(I,K)
      AVVO2(I,KK+K-1)=TOTVO2(I,KK+K)-TOTVO2(I,K)
      CONT1D(I,KK+K-1)=CNTTAU(I,KK+K-1)*TOTEVV(I,K-1)
322   CONTINUE
C
      DO 3221 KK=1,LP1-K
      DO 3221 I=1,IMAX
      FAC1(I,KK+K-1)=BO3RND(2)*AVPHO3(I,KK+K-1)/AVMO3(I,KK+K-1)
      VTMP3(I,KK+K-1)=HAF*(FAC1(I,KK+K-1)*
     1  (SQRT(ONE+(FOUR*AO3RND(2)*AVMO3(I,KK+K-1))/FAC1(I,KK+K-1))-ONE))
      TO31D(I,KK+K-1)=EXP(HM1EZ*(VTMP3(I,KK+K-1)+SKO3R*AVVO2(I,KK+K-1)))
      OVER1D(I,KK+K-1)=EXP(HM1EZ*(SQRT(AB15WD*AVEPHI(I,KK+K-1))+
     1            SKC1R*AVVO2(I,KK+K-1)))
      CO21(I,KK+K,K)=OVER1D(I,KK+K-1)*CO21(I,KK+K,K)
3221  CONTINUE
      DO 3223 KP=K+1,LP1
      DO 3223 I=1,IMAX
      CO21(I,K,KP)=OVER1D(I,KP-1)*CO21(I,K,KP)
3223  CONTINUE
C---RLOG IS THE NBL AMOUNT FOR THE 15 UM BAND CALCULATION
      DO 1804 I=1,IMAX
      RLOG(I,K)=OVER1D(I,K)*CO2NBL(I,K)
1804  CONTINUE
C---THE KP TERMS FOR ARBIRRARY K..
      DO 3423 KP=K+1,LP1
      DO 3423 I=1,IMAX
      FLX(I,K)=FLX(I,K)+(OSS(I,KP)*TO31D(I,KP-1)
     1                  +SS2(I,KP)*CONT1D(I,KP-1)
     2                  +CSS(I,KP)*CO21(I,KP,K)
     3                  +DTC(I,KP)*EMISS(I,KP-1))*CLDFAC(I,KP,K)
3423  CONTINUE
      DO 3425 KP=K+1,LP1
      DO 3425 I=1,IMAX
      FLX(I,KP)=FLX(I,KP)+(OSS(I,K)*TO31D(I,KP-1)
     1                   +SS2(I,K)*CONT1D(I,KP-1)
     2                   +CSS(I,K)*CO21(I,K,KP)
     3                   +DTC(I,K)*EMISSB(I,KP-1))*CLDFAC(I,K,KP)
3425  CONTINUE
C ....   DITTO FOR CLEAR SKY .. CLDFAC=1.
      DO 2423 KP=K+1,LP1
       DO 2423 I=1,IMAX
        FLX0(I,K)=FLX0(I,K)+ OSS(I,KP)*TO31D(I,KP-1)
     1                  +SS2(I,KP)*CONT1D(I,KP-1)
     2                  +CSS(I,KP)*CO21(I,KP,K)
     3                  +DTC(I,KP)*EMISS(I,KP-1)
2423  CONTINUE
      DO 2425 KP=K+1,LP1
       DO 2425 I=1,IMAX
        FLX0(I,KP)=FLX0(I,KP)+ OSS(I,K)*TO31D(I,KP-1)
     1                   +SS2(I,K)*CONT1D(I,KP-1)
     2                   +CSS(I,K)*CO21(I,K,KP)
     3                   +DTC(I,K)*EMISSB(I,KP-1)
2425  CONTINUE
321   CONTINUE
C
C   NOW DO K=L CASE. SINCE THE KP LOOP IS LENGTH 1, MANY SIMPLIFI-
C   CATIONS OCCUR. ALSO, THE CO2 QUANTITIES (AS WELL AS THE EMISS
C  QUANTITIES) ARE COMPUTED IN THE NBL SEDCTION; THEREFORE, WE WANT
C  ONLY OVER,TO3 AND CONT1D (OVER(I,L),TO31D(I,L) AND CONT1D(I,L)
C  ACCORDING TO THE NOTATION. THUS NO CALL IS MADE TO THE E290
C  SUBROUTINE.
C         THE THIRD SECTION CALCULATES BOUNDARY LAYER AND NEARBY LAYER
C     CORRECTIONS TO THE TRANSMISSION FUNCTIONS OBTAINED ABOVE. METHODS
C     ARE GIVEN IN REF. (4).
C          THE FOLLOWING RATIOS ARE USED IN VARIOUS NBL CALCULATIONS:
C
C   THE REMAINING CALCULATIONS ARE FOR :
C                        1) THE (K,K) TERMS, K=2,LM1;
C                        2) THE (L,L) TERM
C                        3) THE (L,LP1) TERM
C                        4) THE (LP1,L) TERM
C                        5) THE (LP1,LP1) TERM.
C     EACH IS UNIQUELY HANDLED; DIFFERENT FLUX TERMS ARE COMPUTED
C     DIFFERENTLY
C
C
C          FOURTH SECTION OBTAINS WATER TRANSMISSION FUNCTIONS
C     USED IN Q(APPROX) CALCULATIONS AND ALSO MAKES NBL CORRECTIONS:
C     1) EMISS (I,J) IS THE TRANSMISSION FUNCTION MATRIX OBTAINED
C     BY CALLING SUBROUTINE E1E288;
C     2) "NEARBY LAYER" CORRECTIONS (EMISS(I,I)) ARE OBTAINED
C     USING SUBROUTINE E3V88;
C     3) SPECIAL VALUES AT THE SURFACE (EMISS(L,LP1),EMISS(LP1,L),
C     EMISS(LP1,LP1)) ARE CALCULATED.
C
C
C      OBTAIN ARGUMENTS FOR E1E288 AND E3V88:
C
      DO 821 I=1,IMAX
      TPL(I,1)=TEMP(I,L)
      TPL(I,LP1)=HAF*(T(I,LP1)+TEMP(I,L))
      TPL(I,LLP1)=HAF*(T(I,L)+TEMP(I,L))
821   CONTINUE
      DO 823 K=2,L
      DO 823 I=1,IMAX
      TPL(I,K)=T(I,K)
      TPL(I,K+L)=T(I,K)
823   CONTINUE
C
C---E2 FUNCTIONS ARE REQUIRED IN THE NBL CALCULATIONS FOR 2 CASES,
C   DENOTED (IN OLD CODE) AS (L,LP1) AND (LP1,LP1)
      DO 833 I=1,IMAX
      AVEPHI(I,1)=VAR2(I,L)
      AVEPHI(I,2)=VAR2(I,L)+EMPL(I,L)
833   CONTINUE
      CALL E2SPEC(EMISS,AVEPHI,FXOSP,DTSP)
C
C     CALL E3V88 FOR NBL H2O TRANSMISSIVITIES
           CALL E3V88(EMD,TPL,EMPL)
C
C   COMPUTE NEARBY LAYER AND SPECIAL-CASE TRANSMISSIVITIES FOR EMISS
C    USING METHODS FOR H2O GIVEN IN REF. (4)
      DO 851 K=2,L
      DO 851 I=1,IMAX
      EMISDG(I,K)=EMD(I,K+L)+EMD(I,K)
851   CONTINUE
C
C   NOTE THAT EMX1/2 (PRESSURE SCALED PATHS) ARE NOW COMPUTED IN
C   LWR88
      DO 861 I=1,IMAX
      EMSPEC(I,1)=(EMD(I,1)*EMPL(I,1)-EMD(I,LP1)*EMPL(I,LP1))/
     1 EMX1(I) + QUARTR*(EMISS(I,1)+EMISS(I,2))
      EMISDG(I,LP1)=TWO*EMD(I,LP1)
      EMSPEC(I,2)=TWO*(EMD(I,1)*EMPL(I,1)-EMD(I,LLP1)*EMPL(I,LLP1))/
     * EMX2(I)
861   CONTINUE
      DO 331 I=1,IMAX
      FAC1(I,L)=BO3RND(2)*VAR4(I,L)/VAR3(I,L)
      VTMP3(I,L)=HAF*(FAC1(I,L)*
     1    (SQRT(ONE+(FOUR*AO3RND(2)*VAR3(I,L))/FAC1(I,L))-ONE))
      TO31D(I,L)=EXP(HM1EZ*(VTMP3(I,L)+SKO3R*CNTVAL(I,L)))
      OVER1D(I,L)=EXP(HM1EZ*(SQRT(AB15WD*VAR2(I,L))+
     1            SKC1R*CNTVAL(I,L)))
      CONT1D(I,L)=CNTTAU(I,L)*TOTEVV(I,LM1)
      RLOG(I,L)=OVER1D(I,L)*CO2NBL(I,L)
331   CONTINUE
      DO 618 K=1,L
      DO 618 I=1,IMAX
      RLOG(I,K)=LOG(RLOG(I,K))
618   CONTINUE
      DO 601 K=1,LM1
      DO 601 I=1,IMAX
      DELPR1(I,K+1)=DELP(I,K+1)*(PRESS(I,K+1)-P(I,K+1))
      ALP(I,K+L)=-SQRT(DELPR1(I,K+1))*RLOG(I,K+1)
601   CONTINUE
      DO 603 K=1,L
      DO 603 I=1,IMAX
      DELPR2(I,K+1)=DELP(I,K)*(P(I,K+1)-PRESS(I,K))
      ALP(I,K)=-SQRT(DELPR2(I,K+1))*RLOG(I,K)
603   CONTINUE
      DO 625 I=1,IMAX
      ALP(I,LL)=-RLOG(I,L)
      ALP(I,LLP1)=-RLOG(I,L)*SQRT(DELP(I,L)*(P(I,LP1)-PRESS(I,LM1)))
625   CONTINUE
C        THE FIRST COMPUTATION IS FOR THE 15 UM BAND,WITH THE
C     FOR THE COMBINED H2O AND CO2 TRANSMISSION FUNCTION.
C
C       PERFORM NBL COMPUTATIONS FOR THE 15 UM BAND
C***THE STATEMENT FUNCTION SF IN PREV. VERSIONS IS NOW EXPLICITLY
C   EVALUATED.
      DO 631 K=1,LLP1
      DO 631 I=1,IMAX
      C(I,K)=ALP(I,K)*(HMP66667+ALP(I,K)*(QUARTR+ALP(I,K)*HM6666M2))
631   CONTINUE
      DO 641 I=1,IMAX
      CO21(I,LP1,LP1)=ONE+C(I,L)
      CO21(I,LP1,L)=ONE+(DELP2(I,L)*C(I,LL)-(PRESS(I,L)-P(I,L))*
     1 C(I,LLM1))/(P(I,LP1)-PRESS(I,L))
      CO21(I,L,LP1)=ONE+((P(I,LP1)-PRESS(I,LM1))*C(I,LLP1)-
     1 (P(I,LP1)-PRESS(I,L))*C(I,L))/(PRESS(I,L)-PRESS(I,LM1))
641   CONTINUE
      DO 643 K=2,L
      DO 643 I=1,IMAX
      CO21(I,K,K)=ONE+HAF*(C(I,LM1+K)+C(I,K-1))
643   CONTINUE
C
C    COMPUTE NEARBY-LAYER TRANSMISSIVITIES FOR THE O3 BAND AND FOR THE
C    ONE-BAND CONTINUUM BAND (TO3 AND EMISS2). THE SF2 FUNCTION IS
C    USED. THE METHOD IS THE SAME AS DESCRIBED FOR CO2 IN REF (4).
      DO 651 K=1,LM1
      DO 651 I=1,IMAX
      CSUB(I,K+1)=CNTVAL(I,K+1)*DELPR1(I,K+1)
      CSUB(I,K+L)=CNTVAL(I,K)*DELPR2(I,K+1)
651   CONTINUE
C---THE SF2 FUNCTION IN PREV. VERSIONS IS NOW EXPLICITLY EVALUATED
      DO 655 K=1,LLM2
      DO 655 I=1,IMAX
      CSUB2(I,K+1)=SKO3R*CSUB(I,K+1)
      C(I,K+1)=CSUB(I,K+1)*(HMP5+CSUB(I,K+1)*
     1          (HP166666-CSUB(I,K+1)*H41666M2))
      C2(I,K+1)=CSUB2(I,K+1)*(HMP5+CSUB2(I,K+1)*
     1           (HP166666-CSUB2(I,K+1)*H41666M2))
655   CONTINUE
      DO 661 I=1,IMAX
      CONTDG(I,LP1)=1.+C(I,LLM1)
      TO3DG(I,LP1)=1.+C2(I,LLM1)
661   CONTINUE
      DO 663 K=2,L
      DO 663 I=1,IMAX
      CONTDG(I,K)=ONE+HAF*(C(I,K)+C(I,LM1+K))
      TO3DG(I,K)=ONE+HAF*(C2(I,K)+C2(I,LM1+K))
663   CONTINUE
C---NOW OBTAIN FLUXES
C
C    FOR THE DIAGONAL TERMS...
      DO 871 K=2,LP1
      DO 871 I=1,IMAX
      FLX(I,K)=FLX(I,K)+(DTC(I,K)*EMISDG(I,K)
     1                 +SS2(I,K)*CONTDG(I,K)
     2                 +OSS(I,K)*TO3DG(I,K)
     3                 +CSS(I,K)*CO21(I,K,K))*CLDFAC(I,K,K)
871   CONTINUE
C     FOR THE TWO OFF-DIAGONAL TERMS...
      DO 873 I=1,IMAX
      FLX(I,L)=FLX(I,L)+(CSS(I,LP1)*CO21(I,LP1,L)
     1                  +DTC(I,LP1)*EMSPEC(I,2)
     2                  +OSS(I,LP1)*TO31D(I,L)
     3                  +SS2(I,LP1)*CONT1D(I,L))*CLDFAC(I,LP1,L)
      FLX(I,LP1)=FLX(I,LP1)+(CSS(I,L)*CO21(I,L,LP1)
     1                      +OSS(I,L)*TO31D(I,L)
     2                      +SS2(I,L)*CONT1D(I,L)
     3                      +DTC(I,L)*EMSPEC(I,1))*CLDFAC(I,L,LP1)
873   CONTINUE
C ...   DITTO FOR CLEAR SKY ... CLDFAC =1.
      DO 2871 K=2,LP1
       DO 2871 I=1,IMAX
        FLX0(I,K)=FLX0(I,K)+ DTC(I,K)*EMISDG(I,K)
     1                 +SS2(I,K)*CONTDG(I,K)
     2                 +OSS(I,K)*TO3DG(I,K)
     3                 +CSS(I,K)*CO21(I,K,K)
2871  CONTINUE
C     FOR THE TWO OFF-DIAGONAL TERMS...
      DO 2873 I=1,IMAX
       FLX0(I,L)=FLX0(I,L)+ CSS(I,LP1)*CO21(I,LP1,L)
     1                  +DTC(I,LP1)*EMSPEC(I,2)
     2                  +OSS(I,LP1)*TO31D(I,L)
     3                  +SS2(I,LP1)*CONT1D(I,L)
       FLX0(I,LP1)=FLX0(I,LP1)+ CSS(I,L)*CO21(I,L,LP1)
     1                      +OSS(I,L)*TO31D(I,L)
     2                      +SS2(I,L)*CONT1D(I,L)
     3                      +DTC(I,L)*EMSPEC(I,1)
2873  CONTINUE
C
C     FINAL SECTION OBTAINS EMISSIVITY HEATING RATES,
C     TOTAL HEATING RATES AND THE FLUX AT THE GROUND
C
C     .....CALCULATE THE EMISSIVITY HEATING RATES
      DO 1101 K=1,L
      DO 1101 I=1,IMAX
      HEATEM(I,K)=RADCON*(FLX(I,K+1)-FLX(I,K))*DELP(I,K)
1101  CONTINUE
C     .....CALCULATE THE TOTAL HEATING RATES
      DO 1103 K=1,L
      DO 1103 I=1,IMAX
      HEATRA(I,K)=HEATEM(I,K)-CTS(I,K)-CTSO3(I,K)+EXCTS(I,K)
1103  CONTINUE
C     .....CALCULATE THE FLUX AT EACH FLUX LEVEL USING THE FLUX AT THE
C    TOP (FLX1E1+GXCTS) AND THE INTEGRAL OF THE HEATING RATES (VSUM1)
      DO 1111 K=1,L
      DO 1111 I=1,IMAX
      VSUM1(I,K)=HEATRA(I,K)*DELP2(I,K)*RADCON1
1111  CONTINUE
      DO 1115 I=1,IMAX
      TOPFLX(I)=FLX1E1(I)+GXCTS(I)
      FLXNET(I,1)=TOPFLX(I)
1115  CONTINUE
C---ONLY THE SURFACE VALUE OF FLUX (GRNFLX) IS NEEDED UNLESS
C    THE THICK CLOUD SECTION IS INVOKED.
      DO 1123 K=2,LP1
      DO 1123 I=1,IMAX
      FLXNET(I,K)=FLXNET(I,K-1)+VSUM1(I,K-1)
1123  CONTINUE
      DO 1125 I=1,IMAX
      GRNFLX(I)=FLXNET(I,LP1)
1125  CONTINUE
C ...   DITTO FOR CLEAR SKY .. CLDFAC=1.
	do k = 1, l
      DO 2101 I=1,IMAX
       HEATEM(I,k)=RADCON*(FLX0(I,k+1)-FLX0(I,k))*DELP(I,k)
2101  CONTINUE
	enddo
C     .....CALCULATE THE TOTAL HEATING RATES
	do k = 1, l
      DO 2103 I=1,IMAX
       HEATR0(I,k)=HEATEM(I,k)-CTS0(I,k)-CTSO30(I,k)+EXCTS0(I,k)
2103  CONTINUE
	enddo
C     .....CALCULATE THE FLUX AT EACH FLUX LEVEL USING THE FLUX AT THE
C    TOP (FLX1E1+GXCTS) AND THE INTEGRAL OF THE HEATING RATES (VSUM1)
	do k = 1, l
      DO 2111 I=1,IMAX
       VSUM1(I,k)=HEATR0(I,k)*DELP2(I,k)*RADCON1
2111  CONTINUE
	enddo
      DO 2115 I=1,IMAX
       TOPFX0(I)=FLX1E0(I)+GXCTS0(I)
       FLXNT0(I,1)=TOPFX0(I)
2115  CONTINUE
C---ONLY THE SURFACE VALUE OF FLUX (GRNFLX) IS NEEDED UNLESS
C    THE THICK CLOUD SECTION IS INVOKED.
      DO 2123 K=2,LP1
       DO 2123 I=1,IMAX
        FLXNT0(I,K)=FLXNT0(I,K-1)+VSUM1(I,K-1)
2123  CONTINUE
      DO 2125 I=1,IMAX
       GRNFX0(I)=FLXNT0(I,LP1)
2125  CONTINUE
C
C     THIS IS THE THICK CLOUD SECTION.OPTIONALLY,IF THICK CLOUD
C     FLUXES ARE TO BE "CONVECTIVELY ADJUSTED",IE,DF/DP IS CONSTANT,
C     FOR CLOUDY PART OF GRID POINT, THE FOLLOWING CODE IS EXECUTED.
C***FIRST,COUNT THE NUMBER OF CLOUDS ALONG THE LAT. ROW. SKIP THE
C   ENTIRE THICK CLOUD COMPUTATION OF THERE ARE NO CLOUDS.
      ICNT=0
      DO 1301 I=1,IMAX
      ICNT=ICNT+NCLDS(I)
1301  CONTINUE
      IF (ICNT.EQ.0) GO TO 6999
C---FIND THE MAXIMUM NUMBER OF CLOUDS IN THE LATITUDE ROW
      KCLDS=NCLDS(1)
      DO 2106 I=2,IMAX
      KCLDS=MAX(NCLDS(I),KCLDS)
2106  CONTINUE
C
C
C***OBTAIN THE PRESSURES AND FLUXES OF THE TOP AND BOTTOM OF
C   THE NC'TH CLOUD (IT IS ASSUMED THAT ALL KTOP AND KBTM'S HAVE
C   BEEN DEFINED!).
      DO 1361 KK=1,KCLDS
      KMIN=LP1
      KMAX=0
      DO 1362 I=1,IMAX
        J1=KTOP(I,KK+1)
C       IF (J1.EQ.1) GO TO 1362
        J3=KBTM(I,KK+1)
        IF (J3.GT.J1) THEN
          PTOP(I)=P(I,J1)
          PBOT(I)=P(I,J3+1)
          FTOP(I)=FLXNET(I,J1)
          FBOT(I)=FLXNET(I,J3+1)
C***OBTAIN THE "FLUX DERIVATIVE" DF/DP (DELPTC)
          DELPTC(I)=(FTOP(I)-FBOT(I))/(PTOP(I)-PBOT(I))
          KMIN=MIN(KMIN,J1)
          KMAX=MAX(KMAX,J3)
        ENDIF
1362  CONTINUE
      KMIN=KMIN+1
C***CALCULATE THE TOT. FLUX CHG. FROM THE TOP OF THE CLOUD, FOR
C   ALL LEVELS.
      DO 1365 K=KMIN,KMAX
      DO 1363 I=1,IMAX
C       IF (KTOP(I,KK+1).EQ.1) GO TO 1363
        IF(KTOP(I,KK+1).LT.K .AND. K.LE.KBTM(I,KK+1)) THEN
          Z1(I,K)=(P(I,K)-PTOP(I))*DELPTC(I)+FTOP(I)
CORIGINAL FLXNET(I,K)=FLXNET(I,K)*(ONE-CAMT(I,KK+1)) +
CORIGINAL1            Z1(I,K)*CAMT(I,KK+1)
          FLXNET(I,K)=Z1(I,K)
        ENDIF
1363  CONTINUE
1365  CONTINUE
1361  CONTINUE
C***USING THIS FLUX CHG. IN THE CLOUDY PART OF THE GRID BOX, OBTAIN
C   THE NEW FLUXES, WEIGHTING THE CLEAR AND CLOUDY FLUXES:AGAIN, ONLY
C    THE FLUXES IN THICK-CLOUD LEVELS WILL EVENTUALLY BE USED.
C     DO 6051 K=1,LP1
C     DO 6051 I=1,IMAX
C     FLXNET(I,K)=FLXNET(I,K)*(ONE-CAMT(I,NC)) +
C    1            Z1(I,K)*CAMT(I,NC)
C051  CONTINUE
C***MERGE FLXTHK INTO FLXNET FOR APPROPRIATE LEVELS.
C     DO 1401 K=1,LP1
C     DO 1401 I=1,IMAX
C     IF (K.GT.ITOP(I) .AND. K.LE.IBOT(I)
C    1  .AND.  (NC-1).LE.NCLDS(I))  THEN
C          FLXNET(I,K)=FLXTHK(I,K)
C     ENDIF
C401  CONTINUE
C
C******END OF CLOUD LOOP*****
6001  CONTINUE
6999  CONTINUE
C***THE FINAL STEP IS TO RECOMPUTE THE HEATING RATES BASED ON THE
C   REVISED FLUXES:
      DO 6101 K=1,L
      DO 6101 I=1,IMAX
      HEATRA(I,K)=RADCON*(FLXNET(I,K+1)-FLXNET(I,K))*DELP(I,K)
6101  CONTINUE
C     THE THICK CLOUD SECTION ENDS HERE.
      RETURN
      END
      SUBROUTINE HCONST
CFPP$ NOCONCUR R
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     SUBROUTINE HCONST DEFINES VARIABLES TO REPRESENT FLOATING-
C       POINT CONSTANTS.
C
C     COMDECK HCON CONTAINS THE COMMON BLOCK FOR THESE FLOATING-
C       POINT CONSTANTS.
C
C     THE NAMING CONVENTIONS FOR THE FLOATING-POINT VARIABLES ARE
C       AS FOLLOWS:
C
C   1) PHYSICAL AND MATHEMATICAL CONSTANTS WILL BE GIVEN NAMES
C     RELEVANT TO THEIR MEANING
C   2) OTHER CONSTANTS WILL BE GIVEN NAMES RELEVANT TO THEIR VALUE
C      AND ADHERING TO THE FOLLOWING CONVENTIONS:
C       A) THE FIRST LETTER WILL BE REPRESENTED WITH AN 'H' EXCEPT
C          FOR I) AND J) BELOW
C       B) A DECIMAL POINT WILL BE REPRESENTED WITH A 'P'
C       C) THERE WILL BE NO EMBEDDED '0'(ZERO); ALL 0'S WILL
C          BE REPRESENTED WITH A 'Z'
C       D) A MINUS SIGN WILL BE REPRESENTED WITH AN 'M'
C       E) THE DECIMAL POINT IS ASSUMED AFTER THE FIRST DIGIT FOR
C          NUMBERS WITH EXPONENTS
C       F) POSITIVE EXPONENTS ARE INDICATED WITH 'E';NEGATIVE
C          EXPONENTS WITH 'M'
C       G) DIGITS ARE TRUNCATED IN ORDER TO HAVE NO MORE THAN 8
C          CHARACTERS PER NAME
C       H) NUMBERS LESS THAN 0.1 AND GREATER THAN 10. WILL BE
C          REPRESENTED IN EXPONENT FORMAT (EXCEPT A FEW SPECIAL CASES)
C       I) THE WHOLE NUMBERS FROM 0.0 THROUGH 10.,AND 20.,30.,40.,50.,
C          60.,70.,80.,90.,100.,WILL BE SPELLED OUT
C       J) GOOD JUDGMENT WILL PREVAIL OVER ALL CONVENTIONS
C
C       EXAMPLES
C     CONSTANT           VARIABLE NAME             CONVENTION
C      600.                 LHEATC                  1)
C      680.                 LHEATS                  1)
C     1.4142               SQROOT2                  1)
C     2.0                    TWO                    2)-(I)
C    -3.0                  HM3PZ                    2)-(A,B,D)
C    310.                  C31E2                    2)-(A,E,F,H)
C   -0.7239E-9             HM723M1Z                 2)-(A,C,D,E,F,G,H)
C     0.0                   ZERO                    2)-(I)
C     0.1                   HP1                     2)-(A,B,H)
C     0.01                 H1M2                     2)-(A,E,F,H)
C     30.                  THIRTY                   2)-(H,I)
C     0.5                  HAF                      2)-(J)
C     9.0                  HNINE                    2)-(J)
C
C******THE FOLLOWING ARE PHYSICAL CONSTANTS*****
C        ARRANGED IN ALPHABETICAL ORDER
      AMOLWT=28.9644
      CSUBP=1.00484E7
      DIFFCTR=1.66
      G=980.665
      GINV=1./G
      GRAVDR=980.0
      O3DIFCTR=1.90
      P0=1013250.
      P0INV=1./P0
      GP0INV=GINV*P0INV
      P0XZP2=202649.902
      P0XZP8=810600.098
      P0X2=2.*1013250.
      RADCON=8.427
      RADCON1=1./8.427
      RATCO2MW=1.519449738
      RATH2OMW=.622
      RGAS=8.3142E7
      RGASSP=8.31432E7
      SECPDA=8.64E4
C
C******THE FOLLOWING ARE MATHEMATICAL CONSTANTS*******
C        ARRANGED IN DECREASING ORDER
      HUNDRED=100.
      HNINETY=90.
      SIXTY=60.
      FIFTY=50.
      TEN=10.
      EIGHT=8.
      FIVE=5.
      FOUR=4.
      THREE=3.
      TWO=2.
      ONE=1.
      HAF=0.5
      QUARTR=0.25
      ZERO=0.
C
C******FOLLOWING ARE POSITIVE FLOATING POINT CONSTANTS(H'S)
C       ARRANGED IN DECREASING ORDER
      H83E26=8.3E26
      H71E26=7.1E26
      H1E15=1.E15
      H1E13=1.E13
      H1E11=1.E11
      H1E8=1.E8
      H2E6=2.0E6
      H1E6=1.0E6
      H69766E5=6.97667E5
      H4E5=4.E5
      H165E5=1.65E5
      H5725E4=57250.
      H488E4=48800.
      H1E4=1.E4
      H24E3=2400.
      H20788E3=2078.8
      H2075E3=2075.
      H18E3=1800.
      H1224E3=1224.
      H67390E2=673.9057
      H5E2=500.
      H3082E2=308.2
      H3E2=300.
      H2945E2=294.5
      H29316E2=293.16
      H26E2=260.0
      H25E2=250.
      H23E2=230.
      H2E2=200.0
      H15E2=150.
      H1386E2=138.6
      H1036E2=103.6
      H8121E1=81.21
      H35E1=35.
      H3116E1=31.16
      H28E1=28.
      H181E1=18.1
      H18E1=18.
      H161E1=16.1
      H16E1=16.
      H1226E1=12.26
      H9P94=9.94
      H6P08108=6.081081081
      H3P6=3.6
      H3P5=3.5
      H2P9=2.9
      H2P8=2.8
      H2P5=2.5
      H1P8=1.8
      H1P4387=1.4387
      H1P41819=1.418191
      H1P4=1.4
      H1P25892=1.258925411
      H1P082=1.082
      HP816=0.816
      HP805=0.805
      HP8=0.8
      HP60241=0.60241
      HP602409=0.60240964
      HP6=0.6
      HP526315=0.52631579
      HP518=0.518
      HP5048=0.5048
      HP3795=0.3795
      HP369=0.369
      HP26=0.26
      HP228=0.228
      HP219=0.219
      HP166666=.166666
      HP144=0.144
      HP118666=0.118666192
      HP1=0.1
C        (NEGATIVE EXPONENTIALS BEGIN HERE)
      H658M2=0.0658
      H625M2=0.0625
      H44871M2=4.4871E-2
      H44194M2=.044194
      H42M2=0.042
      H41666M2=0.0416666
      H28571M2=.02857142857
      H2118M2=0.02118
      H129M2=0.0129
      H1M2=.01
      H559M3=5.59E-3
      H3M3=0.003
      H235M3=2.35E-3
      H1M3=1.0E-3
      H987M4=9.87E-4
      H323M4=0.000323
      H3M4=0.0003
      H285M4=2.85E-4
      H1M4=0.0001
      H75826M4=7.58265E-4
      H6938M5=6.938E-5
      H394M5=3.94E-5
      H37412M5=3.7412E-5
      H15M5=1.5E-5
      H1439M5=1.439E-5
      H128M5=1.28E-5
      H102M5=1.02E-5
      H1M5=1.0E-5
      H7M6=7.E-6
      H4999M6=4.999E-6
      H451M6=4.51E-6
      H25452M6=2.5452E-6
      H1M6=1.E-6
      H391M7=3.91E-7
      H1174M7=1.174E-7
      H8725M8=8.725E-8
      H327M8=3.27E-8
      H257M8=2.57E-8
      H1M8=1.0E-8
      H23M10=2.3E-10
      H14M10=1.4E-10
      H11M10=1.1E-10
      H1M10=1.E-10
      H83M11=8.3E-11
      H82M11=8.2E-11
      H8M11=8.E-11
      H77M11=7.7E-11
      H72M11=7.2E-11
      H53M11=5.3E-11
      H48M11=4.8E-11
      H44M11=4.4E-11
      H42M11=4.2E-11
      H37M11=3.7E-11
      H35M11=3.5E-11
      H32M11=3.2E-11
      H3M11=3.0E-11
      H28M11=2.8E-11
      H24M11=2.4E-11
      H23M11=2.3E-11
      H2M11=2.E-11
      H18M11=1.8E-11
      H15M11=1.5E-11
      H14M11=1.4E-11
      H114M11=1.14E-11
      H11M11=1.1E-11
      H1M11=1.E-11
      H96M12=9.6E-12
      H93M12=9.3E-12
      H77M12=7.7E-12
      H74M12=7.4E-12
      H65M12=6.5E-12
      H62M12=6.2E-12
      H6M12=6.E-12
      H45M12=4.5E-12
      H44M12=4.4E-12
      H4M12=4.E-12
      H38M12=3.8E-12
      H37M12=3.7E-12
      H3M12=3.E-12
      H29M12=2.9E-12
      H28M12=2.8E-12
      H24M12=2.4E-12
      H21M12=2.1E-12
      H16M12=1.6E-12
      H14M12=1.4E-12
      H12M12=1.2E-12
      H8M13=8.E-13
      H46M13=4.6E-13
      H36M13=3.6E-13
      H135M13=1.35E-13
      H12M13=1.2E-13
      H1M13=1.E-13
      H3M14=3.E-14
      H15M14=1.5E-14
      H14M14=1.4E-14
      H101M16=1.01E-16
      H1M16=1.0E-16
      H1M17=1.E-17
      H1M18=1.E-18
      H1M19=1.E-19
      H1M20=1.E-20
      H1M21=1.E-21
      H1M22=1.E-22
      H1M23=1.E-23
      H1M24=1.E-24
      H26M30=2.6E-30
      H14M30=1.4E-30
      H25M31=2.5E-31
      H21M31=2.1E-31
      H12M31=1.2E-31
      H9M32=9.E-32
      H55M32=5.5E-32
      H45M32=4.5E-32
      H4M33=4.E-33
      H62M34=6.2E-34
      H1M60=1.0E-60
C
C******FOLLOWING ARE NEGATIVE FLOATING POINT CONSTANTS (HM'S)
C          ARRANGED IN DESCENDING ORDER
      HM2M2=-.02
      HM6666M2=-.066667
      HMP5=-0.5
      HMP575=-0.575
      HMP66667=-.66667
      HMP805=-0.805
      HM1EZ=-1.
      HM13EZ=-1.3
      HM19EZ=-1.9
      HM1E1=-10.
      HM1597E1=-15.97469413
      HM161E1=-16.1
      HM1797E1=-17.97469413
      HM181E1=-18.1
      HM8E1=-80.
      HM1E2=-100.
C
      RETURN
      END
      SUBROUTINE LWR88(HEATRA,GRNFLX,TOPFLX,
     1                 GRNFX0,TOPFX0,
     1                 PRESS,TEMP,RH2O,QO3,CLDFAC,
     2                 CAMT,NCLDS,KTOP,KBTM)
CFPP$ NOCONCUR R
C     SUBROUTINE LWR88 COMPUTES TEMPERATURE-CORRECTED CO2 TRANSMISSION
C   FUNCTIONS AND ALSO COMPUTES THE PRESSURE GRID AND LAYER OPTICAL
C   PATHS.
C          INPUTS:                (COMMON BLOCKS)
C      CLDFAC                          CLDCOM
C      PRESS,TEMP,RH2O,QO3             RADISW
C      CAMT,NCLDS,KTOP,KBTM            RADISW
C      CO251,CO258,CDT51,CDT58         CO2BD3
C      C2D51,C2D58,CO2M51,CO2M58       CO2BD3
C      CDTM51,CDTM58,C2DM51,C2DM58     CO2BD3
C      STEMP,GTEMP                     CO2BD3
C      CO231,CO238,CDT31,CDT38         CO2BD2
C      C2D31,C2D38                     CO2BD2
C      CO271,CO278,CDT71,CDT78         CO2BD4
C      C2D71,C2D78                     CO2BD4
C      BETINW                          BDWIDE
C          OUTPUTS:
C      HEATRA,GRNFLX,TOPFLX            LWOUT
C          CALLED BY:
C      RADMN OR INPUT ROUTINE OF MODEL
C          CALLS:
C      FST88
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C   THE FOLLOWING COMMON BLOCKS CONTAIN PRETABULATED CO2 TRANSMISSION
C       FUNCTIONS, EVALUATED USING THE METHODS OF FELS AND
C       SCHWARZKOPF (1981) AND SCHWARZKOPF AND FELS (1985),
C***COMMON CO2BD3 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-800 CM-1 BAND. ALSO INCLUDED
C   ARE THE STANDARD TEMPERATURES AND THE WEIGHTING FUNCTION. THESE
C   DATA ARE IN BLOCK DATA BD3:
C         CO251    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO258    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT51    =  FIRST TEMPERATURE DERIVATIVE OF CO251
C         CDT58    =  FIRST TEMPERATURE DERIVATIVE OF CO258
C         C2D51    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         C2D58    =  SECOND TEMPERATURE DERIVATIVE OF CO251
C         CO2M51   =  TRANSMISSION FCTNS FOR T0 FOR ADJACENT PRESSURE
C                        LEVELS, WITH NO PRESSURE QUADRATURE. USED FOR
C                        NEARBY LAYER COMPUTATIONS. P(SFC)=1013.25 MB
C         CO2M58   =  SAME AS CO2M51,WITH P(SFC)= ^810 MB
C         CDTM51   =  FIRST TEMPERATURE DERIVATIVE OF CO2M51
C         CDTM58   =  FIRST TEMPERATURE DERIVATIVE OF CO2M58
C         C2DM51   =  SECOND TEMPERATURE DERIVATIVE OF CO2M51
C         C2DM58   =  SECOND TEMPERATURE DERIVATIVE OF CO2M58
C         STEMP    =  STANDARD TEMPERATURES FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB
C         GTEMP    =  WEIGHTING FUNCTION FOR MODEL PRESSURE LEVEL
C                        STRUCTURE WITH P(SFC)=1013.25 MB.
C         B0       =  TEMP. COEFFICIENT USED FOR CO2 TRANS. FCTN.
C                        CORRECTION FOR T(K). (SEE REF. 4 AND BD3)
C         B1       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B2       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C         B3       =  TEMP. COEFFICIENT, USED ALONG WITH B0
C
      COMMON/CO2BD3/CO251(LP1,LP1),CO258(LP1,LP1),CDT51(LP1,LP1),
     1 CDT58(LP1,LP1),C2D51(LP1,LP1),C2D58(LP1,LP1),CO2M51(L),
     2 CO2M58(L),CDTM51(L),CDTM58(L),C2DM51(L),C2DM58(L),
     3 STEMP(LP1),GTEMP(LP1),B0,B1,B2,B3
C
C***COMMON CO2BD2 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 560-670 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD2.
C         CO231    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO238    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT31    =  FIRST TEMPERATURE DERIVATIVE OF CO231
C         CDT38    =  FIRST TEMPERATURE DERIVATIVE OF CO238
C         C2D31    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C         C2D38    =  SECOND TEMPERATURE DERIVATIVE OF CO231
C
      COMMON / CO2BD2 / CO231(LP1),CO238(LP1),CDT31(LP1),
     1 CDT38(LP1),C2D31(LP1),C2D38(LP1)
C
C***COMMON CO2BD4 CONTAINS CO2 TRANSMISSION FUNCTIONS AND TEMPERATURE
C   AND PRESSURE DERIVATIVES FOR THE 670-800 CM-1 PART OF THE 15 UM
C   CO2 BAND.  THESE DATA ARE IN BLOCK DATA BD4.
C         CO271    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO278    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C         CDT71    =  FIRST TEMPERATURE DERIVATIVE OF CO271
C         CDT78    =  FIRST TEMPERATURE DERIVATIVE OF CO278
C         C2D71    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C         C2D78    =  SECOND TEMPERATURE DERIVATIVE OF CO271
C
      COMMON / CO2BD4 / CO271(LP1),CO278(LP1),CDT71(LP1),
     1 CDT78(LP1),C2D71(LP1),C2D78(LP1)
C
C***COMMON CO2BD5 CONTAINS CO2 TRANSMISSION FUNCTIONS FOR THE 2270-
C   2380 PART OF THE 4.3 UM CO2 BAND. THESE DATA ARE IN BLOCK DATA BD5.
C         CO211    =  TRANSMISSION FCTNS FOR T0 (STD. PROFILE)
C                       WITH P(SFC)=1013.25 MB
C         CO218    =  TRANSMISSION FCTNS. FOR T0 (STD. PROFILE)
C                       WITH P(SFC)= ^810 MB
C
      COMMON / CO2BD5 / CO211(LP1),CO218(LP1)
C
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C
      DIMENSION PRESS(IMAX,LP1),TEMP(IMAX,LP1),RH2O(IMAX,L),QO3(IMAX,L)
      DIMENSION CLDFAC(IMAX,LP1,LP1),CAMT(IMAX,LP1)
      DIMENSION NCLDS(IMAX),KTOP(IMAX,LP1),KBTM(IMAX,LP1)
      DIMENSION HEATRA(IMAX,L),GRNFLX(IMAX),TOPFLX(IMAX)
      DIMENSION GRNFX0(IMAX),TOPFX0(IMAX)
      DIMENSION DELP2(IMAX,L)
C
      DIMENSION QH2O(IMAX,L),T(IMAX,LP1)
      DIMENSION P(IMAX,LP1),DELP(IMAX,L)
      DIMENSION CO21(IMAX,LP1,LP1),CO2NBL(IMAX,L)
      DIMENSION CO2SP1(IMAX,LP1),CO2SP2(IMAX,LP1)
      DIMENSION VAR1(IMAX,L),VAR2(IMAX,L),VAR3(IMAX,L),VAR4(IMAX,L)
      DIMENSION CNTVAL(IMAX,LP1)
      DIMENSION TOTO3(IMAX,LP1),TPHIO3(IMAX,LP1),TOTPHI(IMAX,LP1)
      DIMENSION TOTVO2(IMAX,LP1),EMX1(IMAX),EMX2(IMAX),EMPL(IMAX,LLP1)
C
      DIMENSION CO2R(IMAX,LP1),DIFT(IMAX,LP1)
      DIMENSION CO2R1(IMAX,LP1),DCO2D1(IMAX,LP1)
      DIMENSION D2CD21(IMAX,LP1),D2CD22(IMAX,LP1)
      DIMENSION CO2R2(IMAX,LP1),DCO2D2(IMAX,LP1)
      DIMENSION CO2MR(IMAX,L),CO2MD(IMAX,L),CO2M2D(IMAX,L)
      DIMENSION TDAV(IMAX,LP1),TSTDAV(IMAX,LP1),
     1 VV(IMAX,L),VSUM3(IMAX,LP1),VSUM1(IMAX),VSUM2(IMAX)
      DIMENSION A1(IMAX),A2(IMAX)
      DIMENSION DCO2DT(IMAX,LP1),D2CDT2(IMAX,LP1)
C
      DIMENSION TEXPSL(IMAX,LP1),TLSQU(IMAX,LP1)
      DIMENSION VSUM4(IMAX,L)
      EQUIVALENCE (VSUM3,TLSQU,TEXPSL)
      EQUIVALENCE (VV,VSUM4)
C
C****COMPUTE FLUX PRESSURES (P) AND DIFFERENCES (DELP2,DELP)
C****COMPUTE FLUX LEVEL TEMPERATURES (T) AND CONTINUUM TEMPERATURE
C    CORRECTIONS (TEXPSL)
      DO 103 K=2,L
      DO 103 I=1,IMAX
      P(I,K)=HAF*(PRESS(I,K-1)+PRESS(I,K))
      T(I,K)=HAF*(TEMP(I,K-1)+TEMP(I,K))
103   CONTINUE
      DO 105 I=1,IMAX
      P(I,1)=ZERO
      P(I,LP1)=PRESS(I,LP1)
      T(I,1)=TEMP(I,1)
      T(I,LP1)=TEMP(I,LP1)
105   CONTINUE
      DO 107 K=1,L
      DO 107 I=1,IMAX
      DELP2(I,K)=P(I,K+1)-P(I,K)
      DELP(I,K)=ONE/DELP2(I,K)
107   CONTINUE
C****COMPUTE ARGUMENT FOR CONT.TEMP.COEFF.
C    (THIS IS 1800.(1./TEMP-1./296.))
      DO 125 K=1,LP1
      DO 125 I=1,IMAX
      TEXPSL(I,K)=H18E3/TEMP(I,K)-H6P08108
C...THEN TAKE EXPONENTIAL
      TEXPSL(I,K)=EXP(TEXPSL(I,K))
125   CONTINUE
C***COMPUTE OPTICAL PATHS FOR H2O AND O3, USING THE DIFFUSIVITY
C   APPROXIMATION FOR THE ANGULAR INTEGRATION (1.66). OBTAIN THE
C   UNWEIGHTED VALUES(VAR1,VAR3) AND THE WEIGHTED VALUES(VAR2,VAR4).
C   THE QUANTITIES H3M4(.0003) AND H3M3(.003) APPEARING IN THE VAR2 AND
C   VAR4 EXPRESSIONS ARE THE APPROXIMATE VOIGT CORRECTIONS FOR H2O AND
C   O3,RESPECTIVELY.
C
      DO 131 K=1,L
      DO 131 I=1,IMAX
      QH2O(I,K)=RH2O(I,K)*DIFFCTR
C---VV IS THE LAYER-MEAN PRESSURE (IN ATM),WHICH IS NOT THE SAME AS
C   THE LEVEL PRESSURE (PRESS)
      VV(I,K)=HAF*(P(I,K+1)+P(I,K))*P0INV
      VAR1(I,K)=DELP2(I,K)*QH2O(I,K)*GINV
      VAR3(I,K)=DELP2(I,K)*QO3(I,K)*DIFFCTR*GINV
      VAR2(I,K)=VAR1(I,K)*(VV(I,K)+H3M4)
      VAR4(I,K)=VAR3(I,K)*(VV(I,K)+H3M3)
C  COMPUTE OPTICAL PATH FOR THE H2O CONTINUUM, USING ROBERTS COEFFS.
C  (BETINW),AND TEMP. CORRECTION (TEXPSL). THE DIFFUSIVITY FACTOR
C  (WHICH CANCELS OUT IN THIS EXPRESSION) IS ASSUMED TO BE 1.66. THE
C  USE OF THE DIFFUSIVITY FACTOR HAS BEEN SHOWN TO BE A SIGNIFICANT
C  SOURCE OF ERROR IN THE CONTINUUM CALCS.,BUT THE TIME PENALTY OF
C  AN ANGULAR INTEGRATION IS SEVERE.
C
      CNTVAL(I,K)=TEXPSL(I,K)*RH2O(I,K)*VAR2(I,K)*BETINW/
     1             (RH2O(I,K)+RATH2OMW)
131   CONTINUE
C   COMPUTE SUMMED OPTICAL PATHS FOR H2O,O3 AND CONTINUUM
      DO 201 I=1,IMAX
      TOTPHI(I,1)=ZERO
      TOTO3(I,1)=ZERO
      TPHIO3(I,1)=ZERO
      TOTVO2(I,1)=ZERO
201   CONTINUE
      DO 203 K=2,LP1
      DO 203 I=1,IMAX
      TOTPHI(I,K)=TOTPHI(I,K-1)+VAR2(I,K-1)
      TOTO3(I,K)=TOTO3(I,K-1)+VAR3(I,K-1)
      TPHIO3(I,K)=TPHIO3(I,K-1)+VAR4(I,K-1)
      TOTVO2(I,K)=TOTVO2(I,K-1)+CNTVAL(I,K-1)
203   CONTINUE
C---EMX1 IS THE ADDITIONAL PRESSURE-SCALED MASS FROM PRESS(L) TO
C   P(L). IT IS USED IN NEARBY LAYER AND EMISS CALCULATIONS.
C---EMX2 IS THE ADDITIONAL PRESSURE-SCALED MASS FROM PRESS(L) TO
C   P(LP1). IT IS USED IN CALCULATIONS BETWEEN FLUX LEVELS L AND LP1.
C
      DO 801 I=1,IMAX
      EMX1(I)=QH2O(I,L)*PRESS(I,L)*(PRESS(I,L)-P(I,L))*GP0INV
      EMX2(I)=QH2O(I,L)*PRESS(I,L)*(P(I,LP1)-PRESS(I,L))*GP0INV
801   CONTINUE
C---EMPL IS THE PRESSURE SCALED MASS FROM P(K) TO PRESS(K) (INDEX 2-LP1)
C   OR TO PRESS(K+1) (INDEX LP2-LL)
      DO 811 K=1,L
      DO 811 I=1,IMAX
      EMPL(I,K+1)=QH2O(I,K)*P(I,K+1)*(P(I,K+1)-PRESS(I,K))*GP0INV
811   CONTINUE
      DO 812 K=1,LM1
      DO 812 I=1,IMAX
      EMPL(I,K+LP1)=QH2O(I,K+1)*P(I,K+1)*(PRESS(I,K+1)-P(I,K+1))*GP0INV
812   CONTINUE
      DO 821 I=1,IMAX
      EMPL(I,1)=VAR2(I,L)
      EMPL(I,LLP1)=EMPL(I,LL)
821   CONTINUE
C***COMPUTE WEIGHTED TEMPERATURE (TDAV) AND PRESSURE (TSTDAV) INTEGRALS
C   FOR USE IN OBTAINING TEMP. DIFFERENCE BET. SOUNDING AND STD.
C   TEMP. SOUNDING (DIFT)
      DO 161 I=1,IMAX
      TSTDAV(I,1)=ZERO
      TDAV(I,1)=ZERO
161   CONTINUE
      DO 162 K=1,LP1
      DO 162 I=1,IMAX
      VSUM3(I,K)=TEMP(I,K)-STEMP(K)
162   CONTINUE
      DO 163 K=1,L
      DO 165 I=1,IMAX
      VSUM2(I)=GTEMP(K)*DELP2(I,K)
      VSUM1(I)=VSUM2(I)*VSUM3(I,K)
      TSTDAV(I,K+1)=TSTDAV(I,K)+VSUM2(I)
      TDAV(I,K+1)=TDAV(I,K)+VSUM1(I)
165   CONTINUE
163   CONTINUE
C
C****EVALUATE COEFFICIENTS FOR CO2 PRESSURE INTERPOLATION (A1,A2)
      DO 171 I=1,IMAX
      A1(I)=(PRESS(I,LP1)-P0XZP8)/P0XZP2
      A2(I)=(P0-PRESS(I,LP1))/P0XZP2
171   CONTINUE
C***PERFORM CO2 PRESSURE INTERPOLATION ON ALL INPUTTED TRANSMISSION
C   FUNCTIONS AND TEMP. DERIVATIVES
C---SUCCESSIVELY COMPUTING CO2R,DCO2DT AND D2CDT2 IS DONE TO SAVE
C   STORAGE (AT A SLIGHT LOSS IN COMPUTATION TIME)
      DO 184 K=1,LP1
      DO 184 I=1,IMAX
        CO2R1(I,K)=A1(I)*CO231(K)+A2(I)*CO238(K)
        D2CD21(I,K)=H1M3*(A1(I)*C2D31(K)+A2(I)*C2D38(K))
        DCO2D1(I,K)=H1M2*(A1(I)*CDT31(K)+A2(I)*CDT38(K))
        CO2R2(I,K)=A1(I)*CO271(K)+A2(I)*CO278(K)
        D2CD22(I,K)=H1M3*(A1(I)*C2D71(K)+A2(I)*C2D78(K))
        DCO2D2(I,K)=H1M2*(A1(I)*CDT71(K)+A2(I)*CDT78(K))
184   CONTINUE
      DO 190 K=1,L
      DO 190 I=1,IMAX
        CO2MR(I,K)=A1(I)*CO2M51(K)+A2(I)*CO2M58(K)
        CO2MD(I,K)=H1M2*(A1(I)*CDTM51(K)+A2(I)*CDTM58(K))
        CO2M2D(I,K)=H1M3*(A1(I)*C2DM51(K)+A2(I)*C2DM58(K))
190   CONTINUE
C***COMPUTE CO2 TEMPERATURE INTERPOLATIONS FOR ALL BANDS,USING DIFT
C
C   THE CASE WHERE K=1 IS HANDLED FIRST. WE ARE NOW REPLACING
C   3-DIMENSIONAL ARRAYS BY 2-D ARRAYS, TO SAVE SPACE. THUS THIS
C   CALCULATION IS FOR (I,KP,1)
      DO 211 KP=2,LP1
      DO 211 I=1,IMAX
      DIFT(I,KP)=TDAV(I,KP)/TSTDAV(I,KP)
211   CONTINUE
      DO 212 I=1,IMAX
      CO21(I,1,1)=1.0
      CO2SP1(I,1)=1.0
      CO2SP2(I,1)=1.0
212   CONTINUE
      DO 215 KP=2,LP1
      DO 215 I=1,IMAX
C---CALCULATIONS FOR KP>1 FOR K=1
      CO2R(I,KP)=A1(I)*CO251(KP,1)+A2(I)*CO258(KP,1)
      DCO2DT(I,KP)=H1M2*(A1(I)*CDT51(KP,1)+A2(I)*CDT58(KP,1))
      D2CDT2(I,KP)=H1M3*(A1(I)*C2D51(KP,1)+A2(I)*C2D58(KP,1))
      CO21(I,KP,1)=CO2R(I,KP)+DIFT(I,KP)*(DCO2DT(I,KP)+
     1             HAF*DIFT(I,KP)*D2CDT2(I,KP))
C---CALCULATIONS FOR (EFFECTIVELY) KP=1,K>KP. THESE USE THE
C   SAME VALUE OF DIFT DUE TO SYMMETRY
      CO2R(I,KP)=A1(I)*CO251(1,KP)+A2(I)*CO258(1,KP)
      DCO2DT(I,KP)=H1M2*(A1(I)*CDT51(1,KP)+A2(I)*CDT58(1,KP))
      D2CDT2(I,KP)=H1M3*(A1(I)*C2D51(1,KP)+A2(I)*C2D58(1,KP))
      CO21(I,1,KP)=CO2R(I,KP)+DIFT(I,KP)*(DCO2DT(I,KP)+
     1             HAF*DIFT(I,KP)*D2CDT2(I,KP))
215   CONTINUE
C   THE TRANSMISSION FUNCTIONS USED IN SPA88 MAY BE COMPUTED NOW.
C---(IN THE 250 LOOP,DIFT REALLY SHOULD BE (I,1,K), BUT DIFT IS
C    INVARIANT WITH RESPECT TO K,KP,AND SO (I,1,K)=(I,K,1))
      DO 250 K=2,LP1
      DO 250 I=1,IMAX
      CO2SP1(I,K)=CO2R1(I,K)+DIFT(I,K)*(DCO2D1(I,K)+HAF*DIFT(I,K)*
     1 D2CD21(I,K))
      CO2SP2(I,K)=CO2R2(I,K)+DIFT(I,K)*(DCO2D2(I,K)+HAF*DIFT(I,K)*
     1 D2CD22(I,K))
250   CONTINUE
C
C   NEXT THE CASE WHEN K=2...L
      DO 220 K=2,L
      DO 222 KP=K+1,LP1
      DO 222 I=1,IMAX
      DIFT(I,KP)=(TDAV(I,KP)-TDAV(I,K))/
     1              (TSTDAV(I,KP)-TSTDAV(I,K))
      CO2R(I,KP)=A1(I)*CO251(KP,K)+A2(I)*CO258(KP,K)
      DCO2DT(I,KP)=H1M2*(A1(I)*CDT51(KP,K)+A2(I)*CDT58(KP,K))
      D2CDT2(I,KP)=H1M3*(A1(I)*C2D51(KP,K)+A2(I)*C2D58(KP,K))
      CO21(I,KP,K)=CO2R(I,KP)+DIFT(I,KP)*(DCO2DT(I,KP)+
     1             HAF*DIFT(I,KP)*D2CDT2(I,KP))
      CO2R(I,KP)=A1(I)*CO251(K,KP)+A2(I)*CO258(K,KP)
      DCO2DT(I,KP)=H1M2*(A1(I)*CDT51(K,KP)+A2(I)*CDT58(K,KP))
      D2CDT2(I,KP)=H1M3*(A1(I)*C2D51(K,KP)+A2(I)*C2D58(K,KP))
      CO21(I,K,KP)=CO2R(I,KP)+DIFT(I,KP)*(DCO2DT(I,KP)+
     1             HAF*DIFT(I,KP)*D2CDT2(I,KP))
222   CONTINUE
220   CONTINUE
C   FINALLY THE CASE WHEN K=KP,K=2..LP1
      DO 206 K=2,LP1
      DO 206 I=1,IMAX
      DIFT(I,K)=HAF*(VSUM3(I,K)+VSUM3(I,K-1))
      CO2R(I,K)=A1(I)*CO251(K,K)+A2(I)*CO258(K,K)
      DCO2DT(I,K)=H1M2*(A1(I)*CDT51(K,K)+A2(I)*CDT58(K,K))
      D2CDT2(I,K)=H1M3*(A1(I)*C2D51(K,K)+A2(I)*C2D58(K,K))
      CO21(I,K,K)=CO2R(I,K)+DIFT(I,K)*(DCO2DT(I,K)+
     1             HAF*DIFT(I,K)*D2CDT2(I,K))
206   CONTINUE
C--- WE AREN'T DOING NBL TFS ON THE 100 CM-1 BANDS .
      DO 260 K=1,L
      DO 260 I=1,IMAX
      CO2NBL(I,K)=CO2MR(I,K)+VSUM3(I,K)*(CO2MD(I,K)+HAF*
     1 VSUM3(I,K)*CO2M2D(I,K))
260   CONTINUE
C***COMPUTE TEMP. COEFFICIENT BASED ON T(K) (SEE REF.2)
      DO 264 K=1,LP1
      DO 264 I=1,IMAX
      IF (T(I,K).LE.H25E2) THEN
         TLSQU(I,K)=B0+(T(I,K)-H25E2)*
     1                      (B1+(T(I,K)-H25E2)*
     2                   (B2+B3*(T(I,K)-H25E2)))
      ELSE
         TLSQU(I,K)=B0
      ENDIF
264   CONTINUE
C***APPLY TO ALL CO2 TFS
      DO 280 K=1,LP1
      DO 282 KP=1,LP1
      DO 282 I=1,IMAX
      CO21(I,KP,K)=CO21(I,KP,K)*(ONE-TLSQU(I,KP))+TLSQU(I,KP)
282   CONTINUE
280   CONTINUE
      DO 284 K=1,LP1
      DO 286 I=1,IMAX
      CO2SP1(I,K)=CO2SP1(I,K)*(ONE-TLSQU(I,1))+TLSQU(I,1)
      CO2SP2(I,K)=CO2SP2(I,K)*(ONE-TLSQU(I,1))+TLSQU(I,1)
286   CONTINUE
284   CONTINUE
      DO 288 K=1,L
      DO 290 I=1,IMAX
      CO2NBL(I,K)=CO2NBL(I,K)*(ONE-TLSQU(I,K))+TLSQU(I,K)
290   CONTINUE
288   CONTINUE
      CALL FST88(HEATRA,GRNFLX,TOPFLX,
     1           GRNFX0,TOPFX0,
     1           QH2O,PRESS,P,DELP,DELP2,TEMP,T,
     2           CLDFAC,NCLDS,KTOP,KBTM,CAMT,
     3           CO21,CO2NBL,CO2SP1,CO2SP2,
     4           VAR1,VAR2,VAR3,VAR4,CNTVAL,
     5           TOTO3,TPHIO3,TOTPHI,TOTVO2,
     6           EMX1,EMX2,EMPL)
      RETURN
      END
C     SUBROUTINE SPA88 COMPUTES EXACT CTS HEATING RATES AND FLUXES AND
C  CORRESPONDING CTS EMISSIVITY QUANTITIES FOR H2O,CO2 AND O3.
C          INPUTS:                (COMMON BLOCKS)
C       ACOMB,BCOMB,APCM,BPCM                  BDCOMB
C       ATPCM,BTPCM,BETACM                     BDCOMB
C       BETINW                                 BDWIDE
C       TEMP,PRESS                             RADISW
C       VAR1,VAR2,P,DELP,DELP2                 KDACOM
C       TOTVO2,TO3SP,TO3SPC                    TFCOM
C       CO2SP1,CO2SP2,CO2SP                    TFCOM
C       CLDFAC                                 CLDCOM
C       SKO2D                                  TABCOM
C       SORC,CSOUR                             SRCCOM
C           OUTPUTS:
C       EXCTS,CTSO3                            TFCOM
C       GXCTS                                  RDFLUX
C           CALLED BY:
C       FST88
C            CALLS:
C
      SUBROUTINE SPA88(EXCTS,CTSO3,GXCTS,SORC,CSOUR,
     1                 EXCTS0,CTSO30,GXCTS0,
     1                 CLDFAC,TEMP,PRESS,VAR1,VAR2,
     2                 P,DELP,DELP2,TOTVO2,TO3SP,TO3SPC,
     3                 CO2SP1,CO2SP2,CO2SP)
CFPP$ NOCONCUR R
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C
      DIMENSION SORC(IMAX,LP1,NBLY),CSOUR(IMAX,LP1)
      DIMENSION CLDFAC(IMAX,LP1,LP1)
      DIMENSION TEMP(IMAX,LP1),PRESS(IMAX,LP1)
      DIMENSION VAR1(IMAX,L),VAR2(IMAX,L)
      DIMENSION P(IMAX,LP1),DELP(IMAX,L),DELP2(IMAX,L)
      DIMENSION TOTVO2(IMAX,LP1),TO3SPC(IMAX,L),TO3SP(IMAX,LP1)
      DIMENSION CO2SP1(IMAX,LP1),CO2SP2(IMAX,LP1),CO2SP(IMAX,LP1)
      DIMENSION EXCTS(IMAX,L),CTSO3(IMAX,L),GXCTS(IMAX)
      DIMENSION EXCTS0(IMAX,L),CTSO30(IMAX,L),GXCTS0(IMAX)
      DIMENSION CTMP0(IMAX,LP1),CTMP20(IMAX,LP1),CTMP30(IMAX,LP1)
C
      DIMENSION PHITMP(IMAX,L),PSITMP(IMAX,L),TT(IMAX,L),
     1          FAC1(IMAX,L),FAC2(IMAX,L),
     2          CTMP(IMAX,LP1),X(IMAX,L),Y(IMAX,L),
     3          TOPM(IMAX,L),TOPPHI(IMAX,L),
     4          CTMP3(IMAX,LP1),CTMP2(IMAX,LP1)
      DIMENSION F(IMAX,L),FF(IMAX,L),AG(IMAX,L),AGG(IMAX,L)
      EQUIVALENCE (F,AG,PHITMP)
      EQUIVALENCE (FF,AGG,PSITMP)
C---COMPUTE TEMPERATURE QUANTITIES FOR USE IN PROGRAM
      DO 101 K=1,L
      DO 101 I=1,IMAX
      X(I,K)=TEMP(I,K)-H25E2
      Y(I,K)=X(I,K)*X(I,K)
101   CONTINUE
C---INITIALIZE CTMP(I,1),CTMP2(I,1),CTMP3(I,1) TO UNITY; THESE ARE
C   TRANSMISSION FCTNS AT THE TOP.
      DO 345 I=1,IMAX
      CTMP(I,1)=ONE
      CTMP2(I,1)=1.
      CTMP3(I,1)=1.
345   CONTINUE
C...   DITTO FOR THE CLEAR SKY CALCULATION...
      DO 2345 I=1,IMAX
       CTMP0(I,1)=ONE
       CTMP20(I,1)=1.
       CTMP30(I,1)=1.
2345  CONTINUE
C***BEGIN LOOP ON FREQUENCY BANDS (1)***
C
C---CALCULATION FOR BAND 1 (COMBINED BAND 1)
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 301 K=1,L
      DO 301 I=1,IMAX
      F(I,K)=H44194M2*(APCM(1)*X(I,K)+BPCM(1)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(1)*X(I,K)+BTPCM(1)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
301   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 315 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
315   CONTINUE
      DO 319 K=2,L
      DO 317 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
317   CONTINUE
319   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 321 K=1,L
      DO 321 I=1,IMAX
      FAC1(I,K)=ACOMB(1)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(1)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*FAC1(I,K)/SQRT(1.+FAC2(I,K)))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
321   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 353 K=1,L
      DO 353 I=1,IMAX
      EXCTS(I,K)=SORC(I,K,1)*(CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=SORC(I,K,1)*(CTMP0(I,K+1)-CTMP0(I,K))
353   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 361 I=1,IMAX
      GXCTS(I)=                 TT(I,L)*SORC(I,L,1)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,1)-SORC(I,L,1))
       GXCTS0(I)=GXCTS(I)
       GXCTS(I)=CLDFAC(I,LP1,1)*GXCTS(I)
361   CONTINUE
C
C
C-----CALCULATION FOR BAND 2 (COMBINED BAND 2)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 401 K=1,L
      DO 401 I=1,IMAX
      F(I,K)=H44194M2*(APCM(2)*X(I,K)+BPCM(2)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(2)*X(I,K)+BTPCM(2)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
401   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 415 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
415   CONTINUE
      DO 419 K=2,L
      DO 417 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
417   CONTINUE
419   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 421 K=1,L
      DO 421 I=1,IMAX
      FAC1(I,K)=ACOMB(2)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(2)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*FAC1(I,K)/SQRT(1.+FAC2(I,K)))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
421   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 453 K=1,L
      DO 453 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,2)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,2)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
453   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 461 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,2)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,2)-SORC(I,L,2)))
461   CONTINUE
      DO 2461 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+               TT(I,L)*SORC(I,L,2)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,2)-SORC(I,L,2))
2461  CONTINUE
C
C-----CALCULATION FOR BAND 3 (COMBINED BAND 3)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 501 K=1,L
      DO 501 I=1,IMAX
      F(I,K)=H44194M2*(APCM(3)*X(I,K)+BPCM(3)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(3)*X(I,K)+BTPCM(3)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
501   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 515 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
515   CONTINUE
      DO 519 K=2,L
      DO 517 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
517   CONTINUE
519   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 521 K=1,L
      DO 521 I=1,IMAX
      FAC1(I,K)=ACOMB(3)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(3)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*FAC1(I,K)/SQRT(1.+FAC2(I,K)))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
521   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 553 K=1,L
      DO 553 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,3)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,3)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
553   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 561 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,3)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,3)-SORC(I,L,3)))
561   CONTINUE
      DO 2561 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,3)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,3)-SORC(I,L,3))
2561  CONTINUE
C
C-----CALCULATION FOR BAND 4 (COMBINED BAND 4)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 601 K=1,L
      DO 601 I=1,IMAX
      F(I,K)=H44194M2*(APCM(4)*X(I,K)+BPCM(4)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(4)*X(I,K)+BTPCM(4)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
601   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 615 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
615   CONTINUE
      DO 619 K=2,L
      DO 617 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
617   CONTINUE
619   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 621 K=1,L
      DO 621 I=1,IMAX
      FAC1(I,K)=ACOMB(4)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(4)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*FAC1(I,K)/SQRT(1.+FAC2(I,K)))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
621   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 653 K=1,L
      DO 653 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,4)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,4)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
653   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 661 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,4)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,4)-SORC(I,L,4)))
661   CONTINUE
      DO 2661 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,4)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,4)-SORC(I,L,4))
2661  CONTINUE
C
C-----CALCULATION FOR BAND 5 (COMBINED BAND 5)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 701 K=1,L
      DO 701 I=1,IMAX
      F(I,K)=H44194M2*(APCM(5)*X(I,K)+BPCM(5)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(5)*X(I,K)+BTPCM(5)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
701   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 715 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
715   CONTINUE
      DO 719 K=2,L
      DO 717 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
717   CONTINUE
719   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 721 K=1,L
      DO 721 I=1,IMAX
      FAC1(I,K)=ACOMB(5)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(5)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(5)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
721   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 753 K=1,L
      DO 753 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,5)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,5)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
753   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 761 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,5)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,5)-SORC(I,L,5)))
761   CONTINUE
      DO 2761 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,5)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,5)-SORC(I,L,5))
2761  CONTINUE
C
C-----CALCULATION FOR BAND 6 (COMBINED BAND 6)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 801 K=1,L
      DO 801 I=1,IMAX
      F(I,K)=H44194M2*(APCM(6)*X(I,K)+BPCM(6)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(6)*X(I,K)+BTPCM(6)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
801   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 815 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
815   CONTINUE
      DO 819 K=2,L
      DO 817 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
817   CONTINUE
819   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 821 K=1,L
      DO 821 I=1,IMAX
      FAC1(I,K)=ACOMB(6)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(6)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(6)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
821   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 853 K=1,L
      DO 853 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,6)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,6)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
853   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 861 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,6)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,6)-SORC(I,L,6)))
861   CONTINUE
      DO 2861 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+ TT(I,L)*SORC(I,L,6)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,6)-SORC(I,L,6))
2861  CONTINUE
C
C-----CALCULATION FOR BAND 7 (COMBINED BAND 7)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 901 K=1,L
      DO 901 I=1,IMAX
      F(I,K)=H44194M2*(APCM(7)*X(I,K)+BPCM(7)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(7)*X(I,K)+BTPCM(7)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
901   CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 915 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
915   CONTINUE
      DO 919 K=2,L
      DO 917 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
917   CONTINUE
919   CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 921 K=1,L
      DO 921 I=1,IMAX
      FAC1(I,K)=ACOMB(7)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(7)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(7)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
921   CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 953 K=1,L
      DO 953 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,7)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,7)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
953   CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 961 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,7)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,7)-SORC(I,L,7)))
961   CONTINUE
      DO 1961 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,7)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,7)-SORC(I,L,7))
1961  CONTINUE
C
C-----CALCULATION FOR BAND 8 (COMBINED BAND 8)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1001 K=1,L
      DO 1001 I=1,IMAX
      F(I,K)=H44194M2*(APCM(8)*X(I,K)+BPCM(8)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(8)*X(I,K)+BTPCM(8)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1001  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1015 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1015  CONTINUE
      DO 1019 K=2,L
      DO 1017 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1017  CONTINUE
1019  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1021 K=1,L
      DO 1021 I=1,IMAX
      FAC1(I,K)=ACOMB(8)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(8)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(8)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1021  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1053 K=1,L
      DO 1053 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,8)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,8)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1053  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1061 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,8)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,8)-SORC(I,L,8)))
1061  CONTINUE
      DO 2061 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,8)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,8)-SORC(I,L,8))
2061  CONTINUE
C
C-----CALCULATION FOR BAND 9 ( 560-670 CM-1; INCLUDES CO2)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1101 K=1,L
      DO 1101 I=1,IMAX
      F(I,K)=H44194M2*(APCM(9)*X(I,K)+BPCM(9)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(9)*X(I,K)+BTPCM(9)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1101  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1115 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1115  CONTINUE
      DO 1119 K=2,L
      DO 1117 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1117  CONTINUE
1119  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1121 K=1,L
      DO 1121 I=1,IMAX
      FAC1(I,K)=ACOMB(9)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(9)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(9)*TOTVO2(I,K+1)*SKO2D))*CO2SP1(I,K+1)
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1121  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1153 K=1,L
      DO 1153 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,9)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,9)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1153  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1161 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,9)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,9)-SORC(I,L,9)))
1161  CONTINUE
      DO 2161 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,9)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,9)-SORC(I,L,9))
2161  CONTINUE
C
C-----CALCULATION FOR BAND 10 (670-800 CM-1; INCLUDES CO2)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1201 K=1,L
      DO 1201 I=1,IMAX
      F(I,K)=H44194M2*(APCM(10)*X(I,K)+BPCM(10)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(10)*X(I,K)+BTPCM(10)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1201  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1215 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1215  CONTINUE
      DO 1219 K=2,L
      DO 1217 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1217  CONTINUE
1219  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1221 K=1,L
      DO 1221 I=1,IMAX
      FAC1(I,K)=ACOMB(10)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(10)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(10)*TOTVO2(I,K+1)*SKO2D))*CO2SP2(I,K+1)
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1221  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1253 K=1,L
      DO 1253 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,10)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,10)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1253  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1261 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,10)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,10)-SORC(I,L,10)))
1261  CONTINUE
      DO 3261 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,10)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,10)-SORC(I,L,10))
3261  CONTINUE
C
C-----CALCULATION FOR BAND 11 (800-900 CM-1)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1301 K=1,L
      DO 1301 I=1,IMAX
      F(I,K)=H44194M2*(APCM(11)*X(I,K)+BPCM(11)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(11)*X(I,K)+BTPCM(11)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1301  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1315 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1315  CONTINUE
      DO 1319 K=2,L
      DO 1317 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1317  CONTINUE
1319  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1321 K=1,L
      DO 1321 I=1,IMAX
      FAC1(I,K)=ACOMB(11)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(11)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(11)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1321  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1353 K=1,L
      DO 1353 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,11)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,11)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1353  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1361 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,11)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,11)-SORC(I,L,11)))
1361  CONTINUE
      DO 3361 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,11)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,11)-SORC(I,L,11))
3361  CONTINUE
C
C-----CALCULATION FOR BAND 12 (900-990 CM-1)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1401 K=1,L
      DO 1401 I=1,IMAX
      F(I,K)=H44194M2*(APCM(12)*X(I,K)+BPCM(12)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(12)*X(I,K)+BTPCM(12)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1401  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1415 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1415  CONTINUE
      DO 1419 K=2,L
      DO 1417 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1417  CONTINUE
1419  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1421 K=1,L
      DO 1421 I=1,IMAX
      FAC1(I,K)=ACOMB(12)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(12)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(12)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1421  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1453 K=1,L
      DO 1453 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,12)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,12)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1453  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1461 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,12)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,12)-SORC(I,L,12)))
1461  CONTINUE
      DO 3461 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,12)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,12)-SORC(I,L,12))
3461  CONTINUE
C
C-----CALCULATION FOR BAND 13 (990-1070 CM-1; INCLUDES O3))
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1501 K=1,L
      DO 1501 I=1,IMAX
      F(I,K)=H44194M2*(APCM(13)*X(I,K)+BPCM(13)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(13)*X(I,K)+BTPCM(13)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1501  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1515 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1515  CONTINUE
      DO 1519 K=2,L
      DO 1517 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1517  CONTINUE
1519  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1521 K=1,L
      DO 1521 I=1,IMAX
      FAC1(I,K)=ACOMB(13)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(13)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(13)*TOTVO2(I,K+1)*SKO2D +TO3SPC(I,K)))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1521  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1553 K=1,L
      DO 1553 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,13)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,13)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1553  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1561 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,13)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,13)-SORC(I,L,13)))
1561  CONTINUE
      DO 3561 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,13)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,13)-SORC(I,L,13))
3561  CONTINUE
C
C-----CALCULATION FOR BAND 14 (1070-1200 CM-1)
C
C
C---OBTAIN TEMPERATURE CORRECTION (CAPPHI,CAPPSI),THEN MULTIPLY
C   BY OPTICAL PATH (VAR1,VAR2) TO COMPUTE TEMPERATURE-CORRECTED
C   OPTICAL PATH AND MEAN PRESSURE FOR A LAYER (PHITMP,PSITMP)
      DO 1601 K=1,L
      DO 1601 I=1,IMAX
      F(I,K)=H44194M2*(APCM(14)*X(I,K)+BPCM(14)*Y(I,K))
      FF(I,K)=H44194M2*(ATPCM(14)*X(I,K)+BTPCM(14)*Y(I,K))
      AG(I,K)=(H1P41819+F(I,K))*F(I,K)+ONE
      AGG(I,K)=(H1P41819+FF(I,K))*FF(I,K)+ONE
      PHITMP(I,K)=VAR1(I,K)*(((( AG(I,K)*AG(I,K))**2)**2)**2)
      PSITMP(I,K)=VAR2(I,K)*(((( AGG(I,K)*AGG(I,K))**2)**2)**2)
1601  CONTINUE
C---OBTAIN OPTICAL PATH,MEAN PRESSURE FROM THE TOP TO THE PRESSURE
C   P(K) (TOPM,TOPPHI)
      DO 1615 I=1,IMAX
      TOPM(I,1)=PHITMP(I,1)
      TOPPHI(I,1)=PSITMP(I,1)
1615  CONTINUE
      DO 1619 K=2,L
      DO 1617 I=1,IMAX
      TOPM(I,K)=TOPM(I,K-1)+PHITMP(I,K)
      TOPPHI(I,K)=TOPPHI(I,K-1)+PSITMP(I,K)
1617  CONTINUE
1619  CONTINUE
C---TT IS THE CLOUD-FREE CTS TRANSMISSION FUNCTION
      DO 1621 K=1,L
      DO 1621 I=1,IMAX
      FAC1(I,K)=ACOMB(14)*TOPM(I,K)
      FAC2(I,K)=FAC1(I,K)*TOPM(I,K)/(BCOMB(14)*TOPPHI(I,K))
      TT(I,K)=EXP(HM1EZ*(FAC1(I,K)/SQRT(ONE+FAC2(I,K))+
     1           BETACM(14)*TOTVO2(I,K+1)*SKO2D))
      CTMP(I,K+1)=TT(I,K)*CLDFAC(I,K+1,1)
       CTMP0(I,K+1)=TT(I,K)
1621  CONTINUE
C---EXCTS IS THE CTS COOLING RATE ACCUMULATED OVER FREQUENCY BANDS
      DO 1653 K=1,L
      DO 1653 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)+SORC(I,K,14)*
     1             (CTMP(I,K+1)-CTMP(I,K))
       EXCTS0(I,K)=EXCTS0(I,K)+SORC(I,K,14)*
     1             (CTMP0(I,K+1)-CTMP0(I,K))
1653  CONTINUE
C---GXCTS IS THE EXACT CTS TOP FLUX ACCUMULATED OVER FREQUENCY BANDS
      DO 1661 I=1,IMAX
      GXCTS(I)=GXCTS(I)+CLDFAC(I,LP1,1)*(TT(I,L)*SORC(I,L,14)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,14)-SORC(I,L,14)))
1661  CONTINUE
      DO 3661 I=1,IMAX
       GXCTS0(I)=GXCTS0(I)+TT(I,L)*SORC(I,L,14)+
     1   (HAF*DELP(I,L)*(TT(I,LM1)*(P(I,LP1)-PRESS(I,L)) +
     2   TT(I,L)*(P(I,LP1)+PRESS(I,L)-TWO*P(I,L)))) *
     3   (SORC(I,LP1,14)-SORC(I,L,14))
3661  CONTINUE
C
C
C   OBTAIN CTS FLUX AT THE TOP BY INTEGRATION OF HEATING RATES AND
C   USING CTS FLUX AT THE BOTTOM (CURRENT VALUE OF GXCTS). NOTE
C   THAT THE PRESSURE QUANTITIES AND CONVERSION FACTORS HAVE NOT
C   BEEN INCLUDED EITHER IN EXCTS OR IN GXCTS. THESE CANCEL OUT, THUS
C   REDUCING COMPUTATIONS!
      DO 1731 K=1,L
      DO 1731 I=1,IMAX
      GXCTS(I)=GXCTS(I)-EXCTS(I,K)
      GXCTS0(I)=GXCTS0(I)-EXCTS0(I,K)
1731  CONTINUE
C
C   NOW SCALE THE COOLING RATE (EXCTS) BY INCLUDING THE PRESSURE
C   FACTOR (DELP) AND THE CONVERSION FACTOR (RADCON)
      DO 1741 K=1,L
      DO 1741 I=1,IMAX
      EXCTS(I,K)=EXCTS(I,K)*RADCON*DELP(I,K)
      EXCTS0(I,K)=EXCTS0(I,K)*RADCON*DELP(I,K)
1741  CONTINUE
C---THIS IS THE END OF THE EXACT CTS COMPUTATIONS; AT THIS POINT
C   EXCTS HAS ITS APPROPRIATE VALUE.
C
C*** COMPUTE APPROXIMATE CTS HEATING RATES FOR 15UM AND 9.6 UM BANDS
C     (CTSO3)
      DO 1711 K=1,L
      DO 1711 I=1,IMAX
      CTMP2(I,K+1)=CO2SP(I,K+1)*CLDFAC(I,K+1,1)
      CTMP3(I,K+1)=TO3SP(I,K)*CLDFAC(I,K+1,1)
      CTMP20(I,K+1)=CO2SP(I,K+1)
      CTMP30(I,K+1)=TO3SP(I,K)
1711  CONTINUE
      DO 1701 K=1,L
      DO 1701 I=1,IMAX
      CTSO3(I,K)=RADCON*DELP(I,K)*
     1     (CSOUR(I,K)*(CTMP2(I,K+1)-CTMP2(I,K)) +
     2      SORC(I,K,13)*(CTMP3(I,K+1)-CTMP3(I,K)))
1701  CONTINUE
      DO 3701 K=1,L
      DO 3701 I=1,IMAX
       CTSO30(I,K)=RADCON*DELP(I,K)*
     1     (CSOUR(I,K)*(CTMP20(I,K+1)-CTMP20(I,K)) +
     2      SORC(I,K,13)*(CTMP30(I,K+1)-CTMP30(I,K)))
3701  CONTINUE
      RETURN
      END
      SUBROUTINE SWR93SIB(FSWC,HSWC,UFSWC,DFSWC,FSWL,HSWL,UFSWL,DFSWL,
     1                    PRESS,COSZRO,TAUDAR,RH2O,RRCO2,SSOLAR,QO3,
CFE932                    NCLDS,KTOPSW,KBTMSW,CIRAB,CIRRF,CUVRF,CAMT,
     2                    NCLDS,KTOP,KBTM,CAMT,CRR,CTT,
     A                    ALVB,ALNB,ALVD,ALND,GDFVB,GDFNB,GDFVD,GDFND)
CFPP$ NOCONCUR R
C===>    *********************************************************
C --- SWR91SIB --- MODIFIED FROM SWR89-BAND12....YUTAI HOU
C --- SWR93SIB --- MODIFIED FROM SWR91SIB AS NOTED BELOW..
C        -INPUTS 12 BANDS CLD REFLECTANCE AND TRANSMITANCE
C        -CRR,CTT TO REPLACE CIRAB,CIRRF,CUVRF...YUTAI HOU ..FEB 93
C
C     -SW- RADIATION CODE............................
C        INPUTS:PRESS,COSZRO,TAUDAR,RH2O,RRCO2,SSOLAR,QO3,NCLDS,
CDE93           KTOPSW,KBTMSW,CIRAB,CIRRF,CUVRF,CAMT,
C               KTOP,KBTM,CAMT,CRR,CTT,
C               ALVB,ALVD,ALNB,ALND;
C        OUTPUT:FSWC,HSWC,UFSWC,DFSWC,FSWL,HSWL,UFSWL,DFSWL,
C               GDFVB,GDFVD,GDFNB,GDFND.
C --- SWR91SIB --- MODIFIED BY K. CAMPANA..06 MAR 92
C         INCLUDE HPCON,PARMC CHANGED TO HCON,RDPARM
C         6 Q..... VARIABLE NAMES RESTORED TO ORIGINAL 7,8 CHAR
C         CHANGE O3DIFF,DIFFCC TO O3DIFCTR,DIFFCTR
C --- SWR91SIB --- MODIFIED BY Y. HOU         FEB 93
C         INPUTS 12 BANDS CLD REFLECTTANCE AND TRANSMITTANCE
C         CRR,CTT TO REPLACE CIRAB,CIRRF,CUVRF
C --- SWR93SIB --- MODIFIED BY Y. HOU         DEC 93
C         INPUT VARIABLES KTOP, KBTM
C ---          --- MODIFIED BY Y. HOU         FEB 94
C         TO INCORPORATE B KATZ IMPROVED CODING
C
C===>    *********************************************************
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NB IS A SHORTWAVE PARAMETER; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
C --- VARIABLES AS IN ARGUMENT LIST
                       D I M E N S I O N
CFE931  FSWC  (IMAX,LP1),  HSWC  (IMAX,LP1)
CFE932, FSWL  (IMAX,LP1),  HSWL  (IMAX,LP1)
     1  FSWC  (IMAX,LP1),  HSWC  (IMAX,LP1),   CRR   (IMAX,NB,LP1)
     2, FSWL  (IMAX,LP1),  HSWL  (IMAX,LP1),   CTT   (IMAX,NB,LP1)
     3, UFSWC (IMAX,LP1),  DFSWC (IMAX,LP1)
     4, UFSWL (IMAX,LP1),  DFSWL (IMAX,LP1)
     5, PRESS (IMAX,LP1),  RH2O  (IMAX,L),     QO3   (IMAX,L)
     6, CAMT  (IMAX,LP1),  KTOP  (IMAX,LP1),   KBTM  (IMAX,LP1)
CFE937, CIRAB (IMAX,LP1),  CIRRF (IMAX,LP1),   CUVRF (IMAX,LP1)
     8, COSZRO(IMAX),      TAUDAR(IMAX),       NCLDS (IMAX)
     A, ALVB  (IMAX),  ALNB  (IMAX),  ALVD  (IMAX),  ALND  (IMAX)
     B, GDFVB (IMAX),  GDFNB (IMAX),  GDFVD (IMAX),  GDFND (IMAX)
C --- LOCAL VARIABLES
                       D I M E N S I O N
     1  PP    (IMAX,LP1),  DP    (IMAX,LP1),   PR2   (IMAX,LP1)
     3, DU    (IMAX,LP1),  DUCO2 (IMAX,LP1),   DUO3  (IMAX,LP1)
     4, FF    (IMAX,LP1),  FFCO2 (IMAX,LP1),   FFO3  (IMAX,LP1)
     5, RRAY  (IMAX),      DFNTOP(IMAX,NB),    SECZ  (IMAX)
     6, REFL  (IMAX),      TEMP1 (IMAX),       REFL2 (IMAX)
     A, CCMAX (IMAX),      XAMT  (IMAX,LP1),   KBTMSW(IMAX,LP1)
                       D I M E N S I O N
     1                     UD    (IMAX,LP1),   UR    (IMAX,LP1)
     2, UCO2  (IMAX,LLP2), UDCO2 (IMAX,LP1),   URCO2 (IMAX,LP1)
     3, UO3   (IMAX,LLP2), UDO3  (IMAX,LP1),   URO3  (IMAX,LP1)
     4, TCO2  (IMAX,LLP2), TDCO2 (IMAX,LP1),   TUCO2 (IMAX,LP1)
     5, TO3   (IMAX,LLP2), TDO3  (IMAX,LP1),   TUO3  (IMAX,LP1)
                       D I M E N S I O N
     1  DFN   (IMAX,LP1),  UFN   (IMAX,LP1),   CR    (IMAX,LP1)
     2, TTD   (IMAX,LP1),  TTU   (IMAX,LP1),   CT    (IMAX,LP1)
     3, PPTOP (IMAX,LP1),  DPCLD (IMAX,LP1)
C --- EQUIVALENCED LOCAL VARIABLES
                       D I M E N S I O N
     1  TTUB1 (IMAX,LP1),  TUCL1 (IMAX,LP1)
     2, TTDB1 (IMAX,LP1),  TDCL1 (IMAX,LP1),   TDCL2 (IMAX,LP1)
     3, UFNTRN(IMAX,LP1),  UFNCLU(IMAX,LP1),   TCLU  (IMAX,LP1)
     4, DFNTRN(IMAX,LP1),  DFNCLU(IMAX,LP1),   TCLD  (IMAX,LP1)
     5, ALFA  (IMAX,LP1),  ALFAU (IMAX,LP1)
                     E Q U I V A L E N C E
     1  (UDO3 , UO3 (1,1), DFNCLU),  (URO3 , UO3 (1,LP2), UFNCLU)
     2, (UDCO2, UCO2(1,1), TCLD  ),  (URCO2, UCO2(1,LP2), TCLU  )
     3, (TDO3 , TO3 (1,1), DFNTRN),  (TUO3 , TO3 (1,LP2), UFNTRN)
     4, (TDCO2, TCO2(1,1)        ),  (TUCO2, TCO2(1,LP2)        )
     5, (FF   , ALFA ),   (FFCO2 , ALFAU ),   (FFO3  , TTDB1 )
     6, (DU   , TTUB1),   (DUCO2 , TUCL1 ),   (DUO3  , TDCL1 )
     7, (PR2  , TDCL2)
C
C---COMMON FOR LOCAL DATA VARIABLES---
      COMMON /SWRSAV/ ABCFF(NB),PWTS(NB),CFCO2,CFO3,REFLO3,RRAYAV
C                           D A T A
C    1  ABCFF / 2*4.0E-5, 0.002, 0.035, 0.377, 1.95, 9.40, 44.6,
C    1          190.0,    989.0, 2706.0, 39011.0 /
C    2, PWTS  / 0.5000, 0.121416, 0.0698, 0.1558, 0.0631, 0.0362,
C    2          0.0243, 0.0158, 0.0087, 0.001467, 0.002342, 0.001075 /
C    3, CFCO2, CFO3, REFLO3, RRAYAV / 508.96, 466.64, 1.9, 0.144 /
C    1  ABCFF / 2*4.0E-5, .002, .035, .377, 1.95, 9.40, 44.6, 190. /
C    2, PWTS  /.5000,.1470,.698,.1443,.0584,.0335,.0225,.0158,.0087/
C    3, CFCO2, CFO3, REFLO3, RRAYAV / 508.96, 466.64, 1.9, 0.144 /
C
C     CALCULATE SECANT OF ZENITH ANGLE (SECZ),FLUX PRESSURES(PP),
C     LAYER WIDTH (DP) AND PRESSURE SCALING FACTOR (PR2).
      DO 100 I=1,IMAX
        SECZ(I) = H35E1/SQRT(H1224E3*COSZRO(I)*COSZRO(I)+ONE)
        PP(I,1)   = ZERO
        PP(I,LP1) = PRESS(I,LP1)
        TEMP1(I)  = ONE/PRESS(I,LP1)
100   CONTINUE
	do k = 1, lm1
      DO 110 I=1,IMAX
        PP(I,k+1) = HAF*(PRESS(I,k+1)+PRESS(I,k))
110   CONTINUE
	enddo
	do k = 1, l
      DO 120 I=1,IMAX
        DP (I,k) = PP(I,k+1)-PP(I,k)
        PR2(I,k) = HAF*(PP(I,k)+PP(I,k+1))
120   CONTINUE
	enddo
      DO 130 K=1,L
      DO 130 I=1,IMAX
        PR2(I,K) = PR2(I,K)*TEMP1(I)
130   CONTINUE
C     CALCULATE ENTERING FLUX AT THE TOP FOR EACH BAND(IN CGS UNITS)
      DO 140 N=1,NB
      DO 140 IP=1,IMAX
        DFNTOP(IP,N) = SSOLAR*H69766E5*COSZRO(IP)*TAUDAR(IP)*PWTS(N)
140   CONTINUE
C     EXECUTE THE LACIS-HANSEN REFLECTIVITY PARAMETERIZATION
C     FOR THE VISIBLE BAND
      DO 150 I=1,IMAX
        RRAY(I) = HP219/(ONE+HP816*COSZRO(I))
        REFL(I) = RRAY(I) + (ONE-RRAY(I))*(ONE-RRAYAV)*ALVB(I)/
     1            (ONE-ALVD(I)*RRAYAV)
150   CONTINUE
      DO 155 I=1,IMAX
        RRAY(I) = 0.104/(ONE+4.8*COSZRO(I))
        REFL2(I)= RRAY(I) + (ONE-RRAY(I))*(ONE-0.093)*ALVB(I)/
     1            (ONE-ALVD(I)*0.093)
155   CONTINUE
C     CALCULATE PRESSURE-WEIGHTED OPTICAL PATHS FOR EACH LAYER
C     IN UNITS OF CM-ATM. PRESSURE WEIGHTING IS USING PR2.
C     DU= VALUE FOR H2O;DUCO2 FOR CO2;DUO3 FOR O3.
      do k = 1, l
      DO 160 I=1,IMAX
        DU   (I,k) = GINV*RH2O(I,k)*DP(I,k)*PR2(I,k)
        DUCO2(I,k) = (RRCO2*GINV*CFCO2)*DP(I,k)*PR2(I,k)
        DUO3 (I,k) = (GINV*CFO3)*QO3(I,k)*DP(I,k)
160   CONTINUE
      enddo
C...............  CALCULATE CLEAR SKY SW FLUX
C     OBTAIN THE OPTICAL PATH FROM THE TOP OF THE ATMOSPHERE TO THE
C     FLUX PRESSURE. ANGULAR FACTORS ARE NOW INCLUDED. UD=DOWNWARD
C     PATH FOR H2O,WIGTH UR THE UPWARD PATH FOR H2O. CORRESPONDING
C     QUANTITIES FOR CO2,O3 ARE UDCO2/URCO2 AND UDO3/URO3.
      DO 200 IP=1,IMAX
        UD   (IP,1) = ZERO
        UDCO2(IP,1) = ZERO
        UDO3 (IP,1) = ZERO
200   CONTINUE
      DO 210 K=2,LP1
      DO 210 I=1,IMAX
        UD   (I,K) = UD   (I,K-1)+DU   (I,K-1)*SECZ(I)
        UDCO2(I,K) = UDCO2(I,K-1)+DUCO2(I,K-1)*SECZ(I)
        UDO3 (I,K) = UDO3 (I,K-1)+DUO3 (I,K-1)*SECZ(I)
210   CONTINUE
      DO 220 IP=1,IMAX
        UR   (IP,LP1) = UD   (IP,LP1)
        URCO2(IP,LP1) = UDCO2(IP,LP1)
        URO3 (IP,LP1) = UDO3 (IP,LP1)
220   CONTINUE
      DO 230 K=L,1,-1
      DO 230 IP=1,IMAX
        UR   (IP,K) = UR   (IP,K+1)+DU   (IP,K)*DIFFCTR
        URCO2(IP,K) = URCO2(IP,K+1)+DUCO2(IP,K)*DIFFCTR
        URO3 (IP,K) = URO3 (IP,K+1)+DUO3 (IP,K)*O3DIFCTR
230   CONTINUE
C     CALCULATE CO2 ABSORPTIONS . THEY WILL BE USED IN NEAR INFRARED
C     BANDS.SINCE THE ABSORPTION AMOUNT IS GIVEN (IN THE FORMULA USED
C     BELOW, DERIVED FROM SASAMORI) IN TERMS OF THE TOTAL SOLAR FLUX,
C     AND THE ABSORPTION IS ONLY INCLUDED IN THE NEAR IR (50 PERCENT
C     OF THE SOLAR SPECTRUM), THE ABSORPTIONS ARE MULTIPLIED BY 2.
C       SINCE CODE ACTUALLY REQUIRES TRANSMISSIONS, THESE ARE THE
C     VALUES ACTUALLY STORED IN TCO2.
      do k = 1, ll
      DO 240 I=1,IMAX
        TCO2(I,k+1) = ONE - TWO*(H235M3 * 
     1    EXP(HP26*LOG(UCO2(I,k+1)+H129M2)) - H75826M4)
240   CONTINUE
      enddo
C     NOW CALCULATE OZONE ABSORPTIONS. THESE WILL BE USED IN
C     THE VISIBLE BAND.JUST AS IN THE CO2 CASE, SINCE THIS BAND IS
C     50 PERCENT OF THE SOLAR SPECTRUM,THE ABSORPTIONS ARE MULTIPLIED
C     BY 2. THE TRANSMISSIONS ARE STORED IN TO3.
      HTEMP = H1036E2*H1036E2*H1036E2
      do k = 1, ll
      DO 250 I=1,IMAX
        TO3(I,k+1) = ONE - TWO*UO3(I,k+1)*
     1        (H1P082*EXP(HMP805*LOG(ONE+H1386E2*UO3(I,k+1)))+
     2        H658M2/(ONE+HTEMP*UO3(I,k+1)*UO3(I,k+1)*UO3(I,k+1))+
     3        H2118M2/(ONE+UO3(I,k+1)*(H42M2+H323M4*UO3(I,k+1))))
250   CONTINUE
      enddo
C   START FREQUENCY LOOP (ON N) HERE
C
C--- BAND 1 (VISIBLE) INCLUDES O3 AND H2O ABSORPTION
      do k = 1, l
      DO 260 I=1,IMAX
        TTD(I,k+1) = EXP(HM1EZ*MIN(FIFTY,ABCFF(1)*UD(I,k+1)))
        TTU(I,k) = EXP(HM1EZ*MIN(FIFTY,ABCFF(1)*UR(I,k)))
        DFN(I,k+1) = TTD(I,k+1)*TDO3(I,k+1)
        UFN(I,k) = TTU(I,k)*TUO3(I,k)
260   CONTINUE
      enddo
      DO 270 I=1,IMAX
        DFN(I,1)   = ONE
        UFN(I,LP1) = DFN(I,LP1)
270   CONTINUE
C     SCALE VISIBLE BAND FLUXES BY SOLAR FLUX AT THE TOP OF THE
C     ATMOSPHERE (DFNTOP(I,1))
C     DFSW/UFSW WILL BE THE FLUXES, SUMMED OVER ALL BANDS
      DO 280  K=1,LP1
      DO 280  I=1,IMAX
        DFSWL(I,K) =         DFN(I,K)*DFNTOP(I,1)
        UFSWL(I,K) = REFL(I)*UFN(I,K)*DFNTOP(I,1)
280   CONTINUE
      DO 285 I=1,IMAX
        GDFVB(I) = DFSWL(I,LP1)*EXP(-0.15746*SECZ(I))
        GDFVD(I) = ((ONE-REFL2(I))*DFSWL(I,LP1) -
     1              (ONE-ALVB(I)) *GDFVB(I)) / (ONE-ALVD(I))
        GDFNB(I) = ZERO
        GDFND(I) = ZERO
285   CONTINUE
C---NOW OBTAIN FLUXES FOR THE NEAR IR BANDS. THE METHODS ARE THE SAME
C   AS FOR THE VISIBLE BAND, EXCEPT THAT THE REFLECTION AND
C   TRANSMISSION COEFFICIENTS (OBTAINED BELOW) ARE DIFFERENT, AS
C   RAYLEIGH SCATTERING NEED NOT BE CONSIDERED.
      DO 350 N=2,NB
        IF (N.EQ.2) THEN
C   THE WATER VAPOR TRANSMISSION FUNCTION FOR BAND 2 IS EQUAL TO
C   THAT OF BAND 1 (SAVED AS TTD,TTU)
C--- BAND 2-9 (NEAR-IR) INCLUDES O3, CO2 AND H2O ABSORPTION
          DO 290 I=1,IMAX*L
            DFN(I,2) = TTD(I,2)*TDCO2(I,2)
            UFN(I,1) = TTU(I,1)*TUCO2(I,1)
290       CONTINUE
        ELSE
C   CALCULATE WATER VAPOR TRANSMISSION FUNCTIONS FOR NEAR INFRARED
C   BANDS. INCLUDE CO2 TRANSMISSION (TDCO2/TUCO2), WHICH
C   IS THE SAME FOR ALL INFRARED BANDS.
          DO 300 I=1,IMAX*L
            DFN(I,2)=EXP(HM1EZ*MIN(FIFTY,ABCFF(N)*UD(I,2)))*TDCO2(I,2)
            UFN(I,1)=EXP(HM1EZ*MIN(FIFTY,ABCFF(N)*UR(I,1)))*TUCO2(I,1)
300       CONTINUE
        ENDIF
C---AT THIS POINT,INCLUDE DFN(1),UFN(LP1), NOTING THAT DFN(1)=1 FOR
C   ALL BANDS, AND THAT UFN(LP1)=DFN(LP1) FOR ALL BANDS.
        DO 310 I=1,IMAX
          DFN(I,1)   = ONE
          UFN(I,LP1) = DFN(I,LP1)
310     CONTINUE
C     SCALE THE PREVIOUSLY COMPUTED FLUXES BY THE FLUX AT THE TOP
C     AND SUM OVER BANDS
        DO 320 K=1,LP1
        DO 320 I=1,IMAX
          DFSWL(I,K) = DFSWL(I,K) +         DFN(I,K)*DFNTOP(I,N)
          UFSWL(I,K) = UFSWL(I,K) + ALNB(I)*UFN(I,K)*DFNTOP(I,N)
320     CONTINUE
        DO 330 I=1,IMAX
          GDFNB(I) = GDFNB(I) + DFN(I,LP1)*DFNTOP(I,N)
330     CONTINUE
350   CONTINUE
      DO 360 I=1,IMAX*LP1
        FSWL(I,1) = UFSWL(I,1)-DFSWL(I,1)
360   CONTINUE
      DO 370 I=1,IMAX*L
        HSWL(I,1) = RADCON*(FSWL(I,2)-FSWL(I,1))/DP(I,1)
370   CONTINUE
C
C---END OF FREQUENCY LOOP (OVER N)
C.................CALCULATE CLOUDY SKY SW FLUX
      KCLDS=NCLDS(1)
      DO 400 I=2,IMAX
        KCLDS=MAX(NCLDS(I),KCLDS)
400   CONTINUE
      IF (KCLDS .EQ. 0) THEN
        DO 410 I=1,IMAX*LP1
          DFSWC(I,1) = DFSWL(I,1)
          UFSWC(I,1) = UFSWL(I,1)
          FSWC (I,1) = FSWL (I,1)
410     CONTINUE
        DO 420 I=1,IMAX*L
          HSWC(I,1) = HSWL(I,1)
420     CONTINUE
        RETURN
      END IF
      DO 430 I=1,IMAX*LP1
        XAMT(I,1) = CAMT(I,1)
        KBTMSW(I,1) = KBTM(I,1)
430   CONTINUE
      DO 440 K=2,KCLDS+1
      DO 440 I=1,IMAX
        IF (CAMT(I,K).GT.ZERO) KBTMSW(I,K) = KBTMSW(I,K) + 1
440   CONTINUE
      DO 470 I=1,IMAX
        NNCLDS   = NCLDS(I)
        CCMAX(I) = ZERO
        IF (NNCLDS .LE. 0) GO TO 470
        CCMAX(I) = ONE
        DO 450 K=1,NNCLDS
          CCMAX(I) = CCMAX(I) * (ONE - CAMT(I,K+1))
450     CONTINUE
        CCMAX(I) = ONE - CCMAX(I)
        IF (CCMAX(I) .GT. ZERO) THEN
          DO 460 K=1,NNCLDS
            XAMT(I,K+1) = CAMT(I,K+1)/CCMAX(I)
460       CONTINUE
        END IF
470   CONTINUE
      DO 480 I=1,IMAX*LP1
        FF   (I,1) = DIFFCTR
        FFCO2(I,1) = DIFFCTR
        FFO3 (I,1) = O3DIFCTR
480   CONTINUE
      DO 490 IP=1,IMAX
CDE93   JTOP = KTOPSW(IP,NCLDS(IP)+1)
        JTOP = KTOP(IP,NCLDS(IP)+1)
      DO 490 K=1,JTOP
        FF   (IP,K) = SECZ(IP)
        FFCO2(IP,K) = SECZ(IP)
        FFO3 (IP,K) = SECZ(IP)
490   CONTINUE
      DO 500 I=1,IMAX
        RRAY(I) = HP219/(ONE+HP816*COSZRO(I))
        REFL(I) = RRAY(I) + (ONE-RRAY(I))*(ONE-RRAYAV)*ALVD(I)/
     1            (ONE-ALVD(I)*RRAYAV)
500   CONTINUE
      DO 510 IP=1,IMAX
        UD   (IP,1) = ZERO
        UDCO2(IP,1) = ZERO
        UDO3 (IP,1) = ZERO
510   CONTINUE
      DO 520 K=2,LP1
      DO 520 I=1,IMAX
        UD   (I,K) = UD   (I,K-1)+DU   (I,K-1)*FF   (I,K)
        UDCO2(I,K) = UDCO2(I,K-1)+DUCO2(I,K-1)*FFCO2(I,K)
        UDO3 (I,K) = UDO3 (I,K-1)+DUO3 (I,K-1)*FFO3 (I,K)
520   CONTINUE
      DO 530 IP=1,IMAX
        UR   (IP,LP1) = UD   (IP,LP1)
        URCO2(IP,LP1) = UDCO2(IP,LP1)
        URO3 (IP,LP1) = UDO3 (IP,LP1)
530   CONTINUE
      DO 540 K=L,1,-1
      DO 540 IP=1,IMAX
        UR   (IP,K) = UR   (IP,K+1)+DU   (IP,K)*DIFFCTR
        URCO2(IP,K) = URCO2(IP,K+1)+DUCO2(IP,K)*DIFFCTR
        URO3 (IP,K) = URO3 (IP,K+1)+DUO3 (IP,K)*O3DIFCTR
540   CONTINUE
      DO 550 I=1,IMAX*LL
        TCO2(I,2) = ONE - TWO*(H235M3 * EXP(HP26*LOG(UCO2(I,2)+H129M2))
     1                        -H75826M4)
550   CONTINUE
      DO 560 I=1,IMAX*LL
        TO3(I,2) = ONE - TWO*UO3(I,2)*
     1             (H1P082*EXP(HMP805*LOG(ONE+H1386E2*UO3(I,2)))+
     2             H658M2/(ONE+HTEMP*UO3(I,2)*UO3(I,2)*UO3(I,2))+
     3             H2118M2/(ONE+UO3(I,2)*(H42M2+H323M4*UO3(I,2))))
560   CONTINUE
C********************************************************************
C---THE FIRST CLOUD IS THE GROUND; ITS PROPERTIES ARE GIVEN
C   BY REFL (THE TRANSMISSION (0) IS IRRELEVANT FOR NOW!).
C********************************************************************
      DO 570 I=1,IMAX
        CR(I,1) = REFL(I)
570   CONTINUE
C***OBTAIN CLOUD REFLECTION AND TRANSMISSION COEFFICIENTS FOR
C   REMAINING CLOUDS (IF ANY) IN THE VISIBLE BAND
C---THE MAXIMUM NO OF CLOUDS IN THE ROW (KCLDS) IS USED. THIS CREATES
C   EXTRA WORK (MAY BE REMOVED IN A SUBSEQUENT UPDATE).
      DO 580 KK=2,KCLDS+1
      DO 580 I=1,IMAX
CFE93   CR(I,KK) = CUVRF(I,KK)*XAMT(I,KK)
CFE93   CT(I,KK) = ONE-CR(I,KK)
        CR(I,KK) = CRR(I,1,KK)*XAMT(I,KK)
        CT(I,KK) = ONE - (ONE-CTT(I,1,KK))*XAMT(I,KK)
580   CONTINUE
C---OBTAIN THE PRESSURE AT THE TOP,BOTTOM AND THE THICKNESS OF
C   "THICK" CLOUDS (THOSE AT LEAST 2 LAYERS THICK). THIS IS USED
C   LATER IS OBTAINING FLUXES INSIDE THE THICK CLOUDS, FOR ALL
C   FREQUENCY BANDS.
      DO 590 KK=1,KCLDS
      DO 590 I=1,IMAX
CDE93   IF ((KBTMSW(I,KK+1)-1).GT.KTOPSW(I,KK+1)) THEN
        IF ((KBTM(I,KK+1)).GT.KTOP(I,KK+1)) THEN
CDE93      PPTOP(I,KK)=PP(I,KTOPSW(I,KK+1))
           PPTOP(I,KK)=PP(I,KTOP(I,KK+1))
           DPCLD(I,KK)=ONE/(PPTOP(I,KK)-PP(I,KBTMSW(I,KK+1)))
        ENDIF
590   CONTINUE
      DO 600 I=1,IMAX*L
        TTDB1(I,2) = EXP(HM1EZ*MIN(FIFTY,ABCFF(1)*UD(I,2)))
        TTUB1(I,1) = EXP(HM1EZ*MIN(FIFTY,ABCFF(1)*UR(I,1)))
        TTD  (I,2) = TTDB1(I,2)*TDO3(I,2)
        TTU  (I,1) = TTUB1(I,1)*TUO3(I,1)
600   CONTINUE
      DO 610 I=1,IMAX
        TTD(I,1)   = ONE
        TTU(I,LP1) = TTD(I,LP1)
610   CONTINUE
C***FOR EXECUTION OF THE CLOUD LOOP, IT IS NECESSARY TO SEPARATE OUT
C   TRANSMISSION FCTNS AT THE TOP AND BOTTOM OF THE CLOUDS, FOR
C   EACH BAND N. THE REQUIRED QUANTITIES ARE:
C      TTD(I,KTOPSW(I,K),N)  K RUNS FROM 1 TO NCLDS(I)+1:
C      TTU(I,KTOPSW(I,K),N)  K RUNS FROM 1 TO NCLDS(I)+1:
C      TTD(I,KBTMSW(I,K),N)  K RUNS FROM 1 TO NCLDS(I)+1:
C      AND INVERSES OF THE FIRST TWO. THE ABOVE QUANTITIES ARE
C      STORED IN TDCL1,TUCL1,TDCL2, AND DFNTRN,UFNTRN, RESPECTIVELY,
C      AS THEY HAVE MULTIPLE USE IN THE PGM.
C---FOR FIRST CLOUD LAYER (GROUND) TDCL1,TUCL1 ARE KNOWN:
      DO 620 I=1,IMAX
        TDCL1 (I,1) = TTD(I,LP1)
        TUCL1 (I,1) = TTU(I,LP1)
        TDCL2 (I,1) = TDCL1(I,1)
        DFNTRN(I,1) = ONE/TDCL1(I,1)
        UFNTRN(I,1) = DFNTRN(I,1)
620   CONTINUE
      DO 630 KK=2,KCLDS+1
      DO 630 I=1,IMAX
CDE93   TDCL1(I,KK) = TTD(I,KTOPSW(I,KK))
CDE93   TUCL1(I,KK) = TTU(I,KTOPSW(I,KK))
        TDCL1(I,KK) = TTD(I,KTOP(I,KK))
        TUCL1(I,KK) = TTU(I,KTOP(I,KK))
        TDCL2(I,KK) = TTD(I,KBTMSW(I,KK))
630   CONTINUE
C---COMPUTE INVERSES
      DO 640 I=1,IMAX*KCLDS
        DFNTRN(I,2) = ONE/TDCL1(I,2)
        UFNTRN(I,2) = ONE/TUCL1(I,2)
640   CONTINUE
C---COMPUTE THE TRANSMISSIVITY FROM THE TOP OF CLOUD (K+1) TO THE
C   TOP OF CLOUD (K). THE CLOUD TRANSMISSION (CT) IS INCLUDED. THIS
C   QUANTITY IS CALLED TCLU (INDEX K). ALSO, OBTAIN THE TRANSMISSIVITY
C   FROM THE BOTTOM OF CLOUD (K+1) TO THE TOP OF CLOUD (K)(A PATH
C   ENTIRELY OUTSIDE CLOUDS). THIS QUANTITY IS CALLED TCLD (INDEX K).
      DO 650 I=1,IMAX*KCLDS
        TCLU(I,1) = TDCL1(I,1)*DFNTRN(I,2)*CT(I,2)
        TCLD(I,1) = TDCL1(I,1)/TDCL2(I,2)
650   CONTINUE
C***THE FOLLOWING IS THE RECURSION RELATION FOR ALFA: THE REFLECTION
C   COEFFICIENT FOR A SYSTEM INCLUDING THE CLOUD IN QUESTION AND THE
C   FLUX COMING OUT OF THE CLOUD SYSTEM INCLUDING ALL CLOUDS BELOW
C   THE CLOUD IN QUESTION.
C---ALFAU IS ALFA WITHOUT THE REFLECTION OF THE CLOUD IN QUESTION
      DO 660 I=1,IMAX
        ALFA (I,1)=CR(I,1)
        ALFAU(I,1)=ZERO
660   CONTINUE
C---AGAIN,EXCESSIVE CALCULATIONS-MAY BE CHANGED LATER!
      DO 670 KK=2,KCLDS+1
      DO 670 I=1,IMAX
        ALFAU(I,KK)= TCLU(I,KK-1)*TCLU(I,KK-1)*ALFA(I,KK-1)/
     1        (ONE - TCLD(I,KK-1)*TCLD(I,KK-1)*ALFA(I,KK-1)*CR(I,KK))
        ALFA (I,KK)= ALFAU(I,KK)+CR(I,KK)
670   CONTINUE
C     CALCULATE UFN AT CLOUD TOPS AND DFN AT CLOUD BOTTOMS
C---NOTE THAT UFNCLU(I,KCLDS+1) GIVES THE UPWARD FLUX AT THE TOP
C   OF THE HIGHEST REAL CLOUD (IF NCLDS(I)=KCLDS). IT GIVES THE FLUX
C   AT THE TOP OF THE ATMOSPHERE IF NCLDS(I) < KCLDS. IN THE FIRST
C   CASE, TDCL1 EQUALS THE TRANSMISSION FCTN TO THE TOP OF THE
C   HIGHEST CLOUD, AS WE WANT. IN THE SECOND CASE, TDCL1=1, SO UFNCLU
C   EQUALS ALFA. THIS IS ALSO CORRECT.
CKZ   DO 680 I=1,IMAX
      DO 680 KK=KCLDS,1,-1
      DO 680 I=1,IMAX
        IF(KK.GE.NCLDS(I)) THEN
          UFNCLU(I,KK+1) = ALFA(I,KK+1)*TDCL1(I,KK+1)
          DFNCLU(I,KK+1) = TDCL1(I,KK+1)
        END IF
680   CONTINUE
C---THIS CALCULATION IS THE REVERSE OF THE RECURSION RELATION USED
C  ABOVE
CKZ   DO 690 KK=KCLDS,1,-1
      DO 690 KK=KCLDS,2,-1
      DO 690 I=1,IMAX
        IF(KK.LE.NCLDS(I)) THEN
          UFNCLU(I,KK) = UFNCLU(I,KK+1)*ALFAU(I,KK+1)/(ALFA(I,KK+1)*
     1                   TCLU(I,KK))
          DFNCLU(I,KK) = UFNCLU(I,KK)/ALFA(I,KK)
        END IF
690   CONTINUE
CKZ
      DO 695 I=1,IMAX
        UFNCLU(I,1) = UFNCLU(I,2)*ALFAU(I,2)/(ALFA(I,2)*TCLU(I,1))
        DFNCLU(I,1) = UFNCLU(I,1)/ALFA(I,1)
695   CONTINUE
      DO 700 I=1,IMAX*(KCLDS+1)
        UFNTRN(I,1) = UFNCLU(I,1)*UFNTRN(I,1)
        DFNTRN(I,1) = DFNCLU(I,1)*DFNTRN(I,1)
700   CONTINUE
C---CASE OF KK=1( FROM THE GROUND TO THE BOTTOM OF THE LOWEST CLOUD)
      DO 720 I=1,IMAX
        J2=KBTMSW(I,2)
        DO 710 K=J2,LP1
          UFN(I,K) = UFNTRN(I,1)*TTU(I,K)
          DFN(I,K) = DFNTRN(I,1)*TTD(I,K)
710     CONTINUE
720   CONTINUE
C---REMAINING LEVELS (IF ANY!)
      DO 760 KK=2,KCLDS+1
      DO 755 I=1,IMAX
CDE93   J1=KTOPSW(I,KK)
        J1=KTOP(I,KK)
        J2=KBTMSW(I,KK+1)
        IF (J1.EQ.1) GO TO 755
        DO 730 K=J2,J1
          UFN(I,K) = UFNTRN(I,KK)*TTU(I,K)
          DFN(I,K) = DFNTRN(I,KK)*TTD(I,K)
730     CONTINUE
C---FOR THE THICK CLOUDS, THE FLUX DIVERGENCE THROUGH THE CLOUD
C   LAYER IS ASSUMED TO BE CONSTANT. THE FLUX DERIVATIVE IS GIVEN BY
C   TEMPF (FOR THE UPWARD FLUX) AND TEMPG (FOR THE DOWNWARD FLUX).
        J3=KBTMSW(I,KK)
        IF ((J3-J1).GT.1) THEN
          TEMPF = (UFNCLU(I,KK)-UFN(I,J3))*DPCLD(I,KK-1)
          TEMPG = (DFNCLU(I,KK)-DFN(I,J3))*DPCLD(I,KK-1)
          DO 740 K=J1+1,J3-1
            UFN(I,K) = UFNCLU(I,KK)+TEMPF*(PP(I,K)-PPTOP(I,KK-1))
            DFN(I,K) = DFNCLU(I,KK)+TEMPG*(PP(I,K)-PPTOP(I,KK-1))
740       CONTINUE
        ENDIF
755   CONTINUE
760   CONTINUE
      DO 770 K=1,LP1
      DO 770 I=1,IMAX
        DFSWC(I,K) = DFN(I,K)*DFNTOP(I,1)
        UFSWC(I,K) = UFN(I,K)*DFNTOP(I,1)
770   CONTINUE
      DO 780 I=1,IMAX
        TEMP1(I) = ONE - CCMAX(I)
        GDFVB(I) = TEMP1(I)*GDFVB(I)
        GDFNB(I) = TEMP1(I)*GDFNB(I)
        GDFVD(I) = TEMP1(I)*GDFVD(I) + CCMAX(I)*DFSWC(I,LP1)
780   CONTINUE
C---NOW OBTAIN FLUXES FOR THE NEAR IR BANDS. THE METHODS ARE THE SAME
C   AS FOR THE VISIBLE BAND, EXCEPT THAT THE REFLECTION AND
C   TRANSMISSION COEFFICIENTS ARE DIFFERENT, AS
C   RAYLEIGH SCATTERING NEED NOT BE CONSIDERED.
CFE93 DO 790 I=1,IMAX*(KCLDS+1)
CFE93   CR(I,1) = CIRRF(I,1)*XAMT(I,1)
CFE93   CT(I,1) = ONE-XAMT(I,1)*(CIRRF(I,1)+CIRAB(I,1))
C90   CONTINUE
C
      DO 1000 N=2,NB
CFE93
        DO 790 K=1,KCLDS+1
        DO 790 I=1,IMAX
          CR(I,K) = CRR(I,N,K)*XAMT(I,K)
          CT(I,K) = ONE - (ONE-CTT(I,N,K))*XAMT(I,K)
790     CONTINUE
CFE93
        IF (N.EQ.2) THEN
C   THE WATER VAPOR TRANSMISSION FUNCTION FOR BAND 2 IS EQUAL TO
C   THAT OF BAND 1 (SAVED AS TTDB1,TTUB1)
          DO 800 I=1,IMAX*L
            TTD(I,2) = TTDB1(I,2)*TDCO2(I,2)
            TTU(I,1) = TTUB1(I,1)*TUCO2(I,1)
800       CONTINUE
        ELSE
          DO 810 I=1,IMAX*L
            TTD(I,2) = EXP(HM1EZ*MIN(FIFTY,ABCFF(N)*UD(I,2)))
     1               * TDCO2(I,2)
            TTU(I,1) = EXP(HM1EZ*MIN(FIFTY,ABCFF(N)*UR(I,1)))
     1               * TUCO2(I,1)
810       CONTINUE
        ENDIF
C---AT THIS POINT,INCLUDE TTD(1),TTU(LP1), NOTING THAT TTD(1)=1 FOR
C   ALL BANDS, AND THAT TTU(LP1)=TTD(LP1) FOR ALL BANDS.
        DO 820 I=1,IMAX
          TTU(I,LP1) = TTD(I,LP1)
          TTD(I,1)   = ONE
820     CONTINUE
C***FOR EXECUTION OF THE CLOUD LOOP, IT IS NECESSARY TO SEPARATE OUT
C   TRANSMISSION FCTNS AT THE TOP AND BOTTOM OF THE CLOUDS, FOR
C   EACH BAND N. THE REQUIRED QUANTITIES ARE:
C      TTD(I,KTOPSW(I,K),N)  K RUNS FROM 1 TO NCLDS(I)+1:
C      TTD(I,KBTMSW(I,K),N)  K RUNS FROM 2 TO NCLDS(I)+1:
C      TTU(I,KTOPSW(I,K),N)  K RUNS FROM 1 TO NCLDS(I)+1:
C      AND INVERSES OF THE ABOVE. THE ABOVE QUANTITIES ARE STORED
C      IN TDCL1,TDCL2,TUCL1,AND DFNTRN,UFNTRN,RESPECTIVELY, AS
C      THEY HAVE MULTIPLE USE IN THE PGM.
C---FOR FIRST CLOUD LAYER (GROUND) TDCL1,TUCL1 ARE KNOWN:
        DO 830 I=1,IMAX
          TDCL1 (I,1) = TTD(I,LP1)
          TUCL1 (I,1) = TTU(I,LP1)
          TDCL2 (I,1) = TDCL1(I,1)
          DFNTRN(I,1) = ONE/TDCL1(I,1)
          UFNTRN(I,1) = DFNTRN(I,1)
830     CONTINUE
        DO 840 KK=2,KCLDS+1
        DO 840 I=1,IMAX
CDE93     TDCL1(I,KK) = TTD(I,KTOPSW(I,KK))
CDE93     TUCL1(I,KK) = TTU(I,KTOPSW(I,KK))
          TDCL1(I,KK) = TTD(I,KTOP(I,KK))
          TUCL1(I,KK) = TTU(I,KTOP(I,KK))
          TDCL2(I,KK) = TTD(I,KBTMSW(I,KK))
840     CONTINUE
        DO 850 I=1,IMAX*KCLDS
          DFNTRN(I,2) = ONE/TDCL1(I,2)
          UFNTRN(I,2) = ONE/TUCL1(I,2)
850     CONTINUE
        DO 860 I=1,IMAX*KCLDS
          TCLU(I,1) = TDCL1(I,1)*DFNTRN(I,2)*CT(I,2)
          TCLD(I,1) = TDCL1(I,1)/TDCL2(I,2)
860     CONTINUE
C***THE FOLLOWING IS THE RECURSION RELATION FOR ALFA: THE REFLECTION
C   COEFFICIENT FOR A SYSTEM INCLUDING THE CLOUD IN QUESTION AND THE
C   FLUX COMING OUT OF THE CLOUD SYSTEM INCLUDING ALL CLOUDS BELOW
C   THE CLOUD IN QUESTION.
        DO 870 I=1,IMAX
          ALFA (I,1) = CR(I,1)
          ALFAU(I,1) = ZERO
870     CONTINUE
C---AGAIN,EXCESSIVE CALCULATIONS-MAY BE CHANGED LATER!
        DO 880 KK=2,KCLDS+1
        DO 880 I=1,IMAX
          ALFAU(I,KK) = TCLU(I,KK-1)*TCLU(I,KK-1)*ALFA(I,KK-1)/(ONE -
     1             TCLD(I,KK-1)*TCLD(I,KK-1)*ALFA(I,KK-1)*CR(I,KK))
          ALFA (I,KK) = ALFAU(I,KK)+CR(I,KK)
880     CONTINUE
C     CALCULATE UFN AT CLOUD TOPS AND DFN AT CLOUD BOTTOMS
C---NOTE THAT UFNCLU(I,KCLDS+1) GIVES THE UPWARD FLUX AT THE TOP
C   OF THE HIGHEST REAL CLOUD (IF NCLDS(I)=KCLDS). IT GIVES THE FLUX
C   AT THE TOP OF THE ATMOSPHERE IF NCLDS(I) < KCLDS. IT THE FIRST
C   CASE, TDCL1 EQUALS THE TRANSMISSION FCTN TO THE TOP OF THE
C   HIGHEST CLOUD, AS WE WANT. IN THE SECOND CASE, TDCL1=1, SO UFNCLU
C   EQUALS ALFA. THIS IS ALSO CORRECT.
CKZ     DO 890 I=1,IMAX
        DO 890 KK=KCLDS,1,-1
        DO 890 I=1,IMAX
          IF(KK.GE.NCLDS(I)) THEN
            UFNCLU(I,KK+1) = ALFA(I,KK+1)*TDCL1(I,KK+1)
            DFNCLU(I,KK+1) = TDCL1(I,KK+1)
          END IF
890     CONTINUE
CKZ     DO 900 KK=KCLDS,1,-1
        DO 900 KK=KCLDS,2,-1
        DO 900 I=1,IMAX
          IF(KK.LE.NCLDS(I)) THEN
            UFNCLU(I,KK) = UFNCLU(I,KK+1)*ALFAU(I,KK+1)/(ALFA(I,KK+1)*
     1                     TCLU(I,KK))
            DFNCLU(I,KK) = UFNCLU(I,KK)/ALFA(I,KK)
          END IF
900     CONTINUE
CKZ
        DO 905 I=1,IMAX
          UFNCLU(I,1) = UFNCLU(I,2)*ALFAU(I,2)/(ALFA(I,2)*TCLU(I,1))
          DFNCLU(I,1) = UFNCLU(I,1)/ALFA(I,1)
905     CONTINUE
C     NOW OBTAIN DFN AND UFN FOR LEVELS BETWEEN THE CLOUDS
        DO 910 I=1,IMAX*(KCLDS+1)
          UFNTRN(I,1) = UFNCLU(I,1)*UFNTRN(I,1)
          DFNTRN(I,1) = DFNCLU(I,1)*DFNTRN(I,1)
910     CONTINUE
        DO 930 I=1,IMAX
          J2=KBTMSW(I,2)
          DO 920 K=J2,LP1
            UFN(I,K) = UFNTRN(I,1)*TTU(I,K)
            DFN(I,K) = DFNTRN(I,1)*TTD(I,K)
920       CONTINUE
930     CONTINUE
        DO 970  KK=2,KCLDS+1
        DO 965  I=1,IMAX
CDE93     J1 = KTOPSW(I,KK)
          J1 = KTOP  (I,KK)
          J2 = KBTMSW(I,KK+1)
          IF (J1.EQ.1) GO TO 965
          DO 940 K=J2,J1
            UFN(I,K) = UFNTRN(I,KK)*TTU(I,K)
            DFN(I,K) = DFNTRN(I,KK)*TTD(I,K)
940       CONTINUE
          J3 = KBTMSW(I,KK)
          IF ((J3-J1).GT.1) THEN
            TEMPF = (UFNCLU(I,KK)-UFN(I,J3))*DPCLD(I,KK-1)
            TEMPG = (DFNCLU(I,KK)-DFN(I,J3))*DPCLD(I,KK-1)
            DO 950 K=J1+1,J3-1
              UFN(I,K) = UFNCLU(I,KK)+TEMPF*(PP(I,K)-PPTOP(I,KK-1))
              DFN(I,K) = DFNCLU(I,KK)+TEMPG*(PP(I,K)-PPTOP(I,KK-1))
950         CONTINUE
          ENDIF
965     CONTINUE
970     CONTINUE
        DO 980 K=1,LP1
        DO 980 I=1,IMAX
          DFSWC(I,K) = DFSWC(I,K) + DFN(I,K)*DFNTOP(I,N)
          UFSWC(I,K) = UFSWC(I,K) + UFN(I,K)*DFNTOP(I,N)
980     CONTINUE
        DO 990 I=1,IMAX
          GDFND(I) = GDFND(I) + CCMAX(I)*DFN(I,LP1)*DFNTOP(I,N)
990     CONTINUE
1000  CONTINUE
      DO 1100 K=1,LP1
      DO 1100 I=1,IMAX
        DFSWC(I,K) = TEMP1(I)*DFSWL(I,K) + CCMAX(I)*DFSWC(I,K)
        UFSWC(I,K) = TEMP1(I)*UFSWL(I,K) + CCMAX(I)*UFSWC(I,K)
1100  CONTINUE
      DO 1200 I=1,IMAX*LP1
        FSWC(I,1) = UFSWC(I,1)-DFSWC(I,1)
1200  CONTINUE
      DO 1250 I=1,IMAX*L
        HSWC(I,1) = RADCON*(FSWC(I,2)-FSWC(I,1))/DP(I,1)
1250  CONTINUE
      RETURN
      END
      SUBROUTINE TABLE
CFPP$ NOCONCUR R
C     SUBROUTINE TABLE COMPUTES TABLE ENTRIES USED IN THE LONGWAVE RADIA
C     PROGRAM. ALSO CALCULATED ARE INDICES USED IN STRIP-MINING AND FOR
C     SOME PRE-COMPUTABLE FUNCTIONS.
C         INPUTS:
C         OUTPUTS:
C       EM1,EM1WDE,TABLE1,TABLE2,TABLE3         TABCOM
C       EM3,SOURCE,DSRCE,IND,INDX2,KMAXV        TABCOM
C       KMAXVM,                                 TABCOM
C       AO3RND,BO3RND,AB15                      BANDTA
C       AB15WD,SKC1R,SKO3R,SKO2D                BDWIDE
C
      COMMON/PHYCON/AMOLWT,CSUBP,DIFFCTR,G,GRAVDR,O3DIFCTR,P0,
     *            P0XZP2,P0XZP8,P0X2,RADCON,RGAS,RGASSP,SECPDA
      COMMON/PHYCON/RATCO2MW,RATH2OMW
      COMMON/PHYCON/RADCON1
      COMMON/PHYCON/GINV,P0INV,GP0INV
      COMMON/HCON/HUNDRED,HNINETY,SIXTY,FIFTY,TEN,EIGHT,FIVE,
     *            FOUR,THREE,TWO,ONE,HAF,QUARTR,ZERO
      COMMON/HCON/H83E26,H71E26,H1E15,H1E13,H1E11,H1E8,H4E5,
     *            H165E5,H5725E4,H488E4,H1E4,H24E3,H20788E3,
     *            H2075E3,H1224E3,H5E2,H3082E2,H3E2,H2945E2,
     *            H23E2,H15E2,H35E1,H3P6,H181E1,H18E1,H2P9,H2P8,
     *            H2P5,H1P8,H1P4387,H1P4,H1P25892,HP8,HP518,
     *            HP369,HP1
      COMMON/HCON/H44871M2,H559M3,H1M3,H987M4,H285M4,H1M4,
     *            H6938M5,H394M5,H37412M5,H1439M5,H128M5,H1M5,
     *            H7M6,H4999M6,H25452M6,H1M6,H391M7,H1174M7,
     *            H8725M8,H327M8,H257M8,H1M8,H23M10,H14M10,
     *            H11M10,H1M10,H83M11,H82M11,H8M11,H77M11,
     *            H72M11,H53M11,H48M11,H44M11,H42M11,H37M11,
     *            H35M11,H32M11,H3M11,H28M11,H24M11,H23M11,
     *            H2M11,H18M11,H15M11,H14M11,H114M11,H11M11,
     *            H1M11,H96M12,H93M12,H77M12,H74M12,H65M12,
     *            H62M12,H6M12,H45M12,H44M12,H4M12,H38M12,
     *            H37M12,H3M12,H29M12,H28M12,H24M12,H21M12,
     *            H16M12,H14M12,H12M12,H8M13,H46M13,H36M13,
     *            H135M13,H12M13,H1M13,H3M14,H15M14,H14M14,
     *            H1M17,H1M18,H1M19,H1M20,H1M21,H1M22,H1M23,
     *            H1M24,H26M30,H14M30,H25M31,H21M31,H12M31,
     *            H9M32,H55M32,H45M32,H4M33,H62M34,H1M60
      COMMON/HCON/HMP575,HM13EZ,HM19EZ,HM1E1,HM181E1,HM1E2
      COMMON/HCON/H1E6,H2E6,H1M2,HMP66667,HM6666M2,HP166666,
     *            H41666M2,HMP5,HM2M2,H29316E2,H1226E1,H3116E1,
     *            H9P94,HP6,H625M2,HP228,HP60241,HM1797E1,
     *            H8121E1,H2E2,HM1EZ,H26E2,H44194M2,H1P41819
      COMMON/HCON/HP219,HP144,HP816,H69766E5,H235M3,HP26,
     *            H129M2,H75826M4,H1P082,HP805,H1386E2,
     *            H658M2,H1036E2,H2118M2,H42M2,H323M4,
     *            H67390E2,HP3795,HP5048,H102M5,H451M6
      COMMON/HCON/H16E1,HM161E1,H161E1,H3M3,H101M16,
     *            HM1597E1,H25E2,HP118666,H15M5,H3P5,H18E3,
     *            H6P08108,HMP805,HP602409,HP526315,
     *            H28571M2,H1M16
      COMMON/HCON/H3M4
      COMMON/HCON/HM8E1
      COMMON/HCON/H28E1
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C    COMMON BLOCK BANDTA CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING 10 CM-1 WIDE BANDS.THE 15 UM CO2 COMPLEX
C    IS 2 BANDS,560-670 AND 670-800 CM-1. OZONE COEFFICIENTS ARE
C    IN 3 BANDS,670-800 (14.1 UM),990-1070 AND 1070-1200 (9.6 UM).
C    THE  (NBLW) BANDS NOW INCLUDE:
C                56 BANDS, 10  CM-1 WIDE    0  -   560  CM-1
C                 2 BANDS, 15 UM COMPLEX  560  -   670  CM-1
C                                         670  -   800  CM-1
C                 3 "CONTINUUM" BANDS     800  -   900  CM-1
C                                         900  -   990  CM-1
C                                        1070  -   1200 CM-1
C                 1 BAND FOR 9.6 UM BAND  990  -   1070 CM-1
C               100 BANDS, 10 CM-1 WIDE  1200  -   2200 CM-1
C                 1 BAND FOR 4.3 UM SRC  2270  -   2380 CM-1
C    THUS NBLW PRESENTLY EQUALS    163
C    ALL BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C
C        ARNDM   =   RANDOM "A" PARAMETER FOR (NBLW) BANDS
C        BRNDM   =   RANDOM "B" PARAMETER FOR (NBLW) BANDS
C        BETAD   =   CONTINUUM COEFFICIENTS FOR (NBLW) BANDS
C        AP,BP   =   CAPPHI COEFFICIENTS FOR (NBLW) BANDS
C        ATP,BTP =   CAPPSI COEFFICIENTS FOR (NBLW) BANDS
C        BANDLO  =   LOWEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        BANDHI  =   HIGHEST FREQUENCY IN EACH OF (NBLW) FREQ. BANDS
C        AO3RND  =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        BO3RND  =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                    BANDS
C        AB15    =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                    REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C     DATA FOR ARNDM,BRNDM,AP,BP,ATP,BTP,AO3RND,BO3RND ARE OBTAINED BY
C     USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS ARE FROM
C     ROBERTS (1976).
      COMMON / BANDTA / ARNDM(NBLW),BRNDM(NBLW),BETAD(NBLW),AP(NBLW),
     1                  BP(NBLW),ATP(NBLW),BTP(NBLW),BANDLO(NBLW),
     2                  BANDHI(NBLW),AO3RND(3),BO3RND(3),AB15(2)
C
C    COMMON BLOCK BDWIDE CONTAINS RANDOM BAND PARAMETERS FOR SPECIFIC
C    WIDE BANDS. AT PRESENT,THE INFORMATION CONSISTS OF 1) RANDOM
C    MODEL PARAMETERS FOR THE 15 UM BAND,560-800 CM-1; 2) THE
C    CONTINUUM COEFFICIENT FOR THE 800-990,1070-1200 CM-1 BAND
C        SPECIFICALLY:
C        AWIDE       =   RANDOM "A" PARAMETER FOR  BAND
C        BWIDE       =   RANDOM "B" PARAMETER FOR  BAND
C        BETAWD      =   CONTINUUM COEFFICIENTS FOR BAND
C        APWD,BPWD   =   CAPPHI COEFFICIENTS FOR  BAND
C        ATPWD,BTPWD =   CAPPSI COEFFICIENTS FOR BAND
C        BDLOWD      =   LOWEST FREQUENCY IN EACH  FREQ  BAND
C        BDHIWD      =   HIGHEST FREQUENCY IN EACH FREQ  BAND
C        AB15WD      =   THE PRODUCT ARNDM*BRNDM FOR THE ONE BAND
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINW      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        SKO2D       =   1./BETINW, USED IN SPA88 FOR CONT. COEFFS
C        SKC1R       =   BETAWD/BETINW, USED FOR CONT. COEFF. FOR
C                        15 UM BAND IN FST88
C        SKO3R       =   RATIO OF CONT. COEFF. FOR 9.9 UM BAND TO
C                        BETINW, USED FOR 9.6 UM CONT COEFF IN FST88
C     DATA FOR AWIDE,BWIDE,APWD,BPWD,ATPWD,BTPWD,AO3WD,BO3WD ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976).
      COMMON / BDWIDE / AWIDE,BWIDE,BETAWD,
     1                  APWD,BPWD,ATPWD,BTPWD,
     2                  BDLOWD,BDHIWD,BETINW,
     3                  AB15WD,SKO2D,SKC1R,SKO3R
C
C    COMMON BLOCK BDCOMB CONTAINS RANDOM BAND PARAMETERS FOR THE LW
C    CALCULATIONS USING COMBINED WIDE FREQUENCY BANDS BETWEEN 160 AND
C    1200 CM-1,AS WELL AS THE 2270-2380 BAND FOR SOURCE CALC.
C        BANDS 1-8: COMBINED WIDE FREQUENCY BANDS FOR 160-560 CM-1
C        BANDS 9-14: FREQUENCY BANDS,AS IN BANDTA (NARROW BANDS)
C                    FOR 560-1200 CM-1
C        BAND  15:  FREQUENCY BAND 2270-2380 CM-1,USED FOR SOURCE
C                   CALCULATION ONLY
C        THUS NBLY PRESENTLY EQUALS   15
C
C        BANDS ARE ARRANGED IN ORDER OF INCREASING WAVENUMBER
C        ACOMB       =   RANDOM "A" PARAMETER FOR (NBLY) BANDS
C        BCOMB       =   RANDOM "B" PARAMETER FOR (NBLY) BANDS
C        BETACM      =   CONTINUUM COEFFICIENTS FOR (NBLY) BANDS
C        APCM,BPCM   =   CAPPHI COEFFICIENTS FOR (NBLY) BANDS
C        ATPCM,BTPCM =   CAPPSI COEFFICIENTS FOR (NBLY) BANDS
C        BDLOCM      =   LOWEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        BDHICM      =   HIGHEST FREQUENCY IN EACH OF (NBLY) FREQ. BANDS
C        AO3CM       =   RANDOM "A" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        BO3CM       =   RANDOM "B" PARAMETER FOR OZONE IN (3) OZONE
C                        BANDS
C        AB15CM      =   THE PRODUCT ARNDM*BRNDM FOR THE TWO BANDS
C                        REPRESENTING THE 15 UM BAND COMPLEX OF CO2
C        BETINC      =   CONT.COEFFICIENT FOR A SPECIFIED WIDE
C                        FREQ.BAND (800-990 AND 1070-1200 CM-1).
C        IBAND       =   INDEX NO OF THE 40 WIDE BANDS USED IN
C                        COMBINED WIDE BAND CALCULATIONS. IN OTHER
C                        WORDS,INDEX TELLING WHICH OF THE 40 WIDE
C                        BANDS BETWEEN 160-560 CM-1 ARE INCLUDED IN
C                        EACH OF THE FIRST 8 COMBINED WIDE BANDS
C     DATA FOR ACOMB,BCOMB,APCM,BPCM,ATPCM,BTPCM,AO3CM,BO3CM ARE
C     OBTAINED BY USING THE AFGL 1982 CATALOG. CONTINUUM COEFFICIENTS
C     ARE FROM ROBERTS (1976). IBAND INDEX VALUES ARE OBTAINED BY
C     EXPERIMENTATION.
      COMMON / BDCOMB / ACOMB(NBLY),BCOMB(NBLY),
     1                  BETACM(NBLY),APCM(NBLY),BPCM(NBLY),ATPCM(NBLY),
     2                  BTPCM(NBLY),BDLOCM(NBLY),BDHICM(NBLY),BETINC,
     3                  AO3CM(3),BO3CM(3),AB15CM(2),IBAND(40)
C
C     COMMON BLOCK TABCOM CONTAINS QUANTITIES PRECOMPUTED IN SUBROUTINE
C     TABLE FOR USE IN THE LONGWAVE RADIATION PROGRAM:
C          EM1     =  E1 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          EM1WDE  =  E1 FUNCTION, EVALUATED OVER THE 160-560 CM-1
C                     INTERVAL
C          TABLE1  =  E2 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          TABLE2  =  TEMPERATURE DERIVATIVE OF TABLE1
C          TABLE3  =  MASS DERIVATIVE OF TABLE1
C          EM3     =  E3 FUNCTION, EVALUATED OVER THE 0-560 AND
C                     1200-2200 CM-1 INTERVALS
C          SOURCE  =  PLANCK FUNCTION, EVALUATED AT SPECIFIED TEMPS. FOR
C                     BANDS USED IN CTS CALCULATIONS
C          DSRCE   =  TEMPERATURE DERIVATIVE OF SOURCE
C          IND     =  INDEX, WITH VALUE IND(I)=I. USED IN FST88
C          INDX2   =  INDEX VALUES USED IN OBTAINING "LOWER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXV   =  INDEX VALUES USED IN OBTAINING "UPPER TRIANGLE"
C                     ELEMENTS OF AVEPHI,ETC.,IN FST88
C          KMAXVM  =  KMAXV(L),USED FOR DO LOOP INDICES
C
      COMMON/TABCOM/EM1(28,180),EM1WDE(28,180),TABLE1(28,180),
     1 TABLE2(28,180),TABLE3(28,180),EM3(28,180),SOURCE(28,NBLY),
     2 DSRCE(28,NBLY)
      COMMON / TABCOM / IND(IMAX),INDX2(LP1V),KMAXV(LP1),KMAXVM
C
      DIMENSION SUM(28,180),PERTSM(28,180),SUM3(28,180),
     1 SUMWDE(28,180),SRCWD(28,NBLX),SRC1NB(28,NBLW),DBDTNB(28,NBLW)
      DIMENSION ZMASS(181),ZROOT(181),SC(28),DSC(28),XTEMV(28),
     1 TFOUR(28),FORTCU(28),X(28),X1(28),X2(180),SRCS(28),
     2 SUM4(28),SUM6(28),SUM7(28),SUM8(28),SUM4WD(28),
     3 R1(28),R2(28),S2(28),T3(28),R1WD(28)
      DIMENSION EXPO(180),FAC(180)
      DIMENSION CNUSB(30),DNUSB(30)
      DIMENSION ALFANB(NBLW),AROTNB(NBLW)
      DIMENSION ANB(NBLW),BNB(NBLW),CENTNB(NBLW),DELNB(NBLW),
     1          BETANB(NBLW)
      COMMON/TBLTMP/ DELCM(NBLY)
C****************************************
C***COMPUTE LOCAL QUANTITIES AND AO3,BO3,AB15
C....FOR NARROW-BANDS...
      DO 101 N=1,NBLW
      ANB(N)=ARNDM(N)
      BNB(N)=BRNDM(N)
      CENTNB(N)=HAF*(BANDLO(N)+BANDHI(N))
      DELNB(N)=BANDHI(N)-BANDLO(N)
      BETANB(N)=BETAD(N)
101   CONTINUE
      AB15(1)=ANB(57)*BNB(57)
      AB15(2)=ANB(58)*BNB(58)
C....FOR WIDE BANDS...
      AB15WD=AWIDE*BWIDE
C
C***COMPUTE INDICES: IND,INDX2,KMAXV
      DO 111 I=1,IMAX
      IND(I)=I
111   CONTINUE
      ICNT=0
      DO 113 I1=1,L
        I2E=LP1-I1
        DO 115 I2=1,I2E
          ICNT=ICNT+1
          INDX2(ICNT)=LP1*(I2-1)+LP2*I1
115     CONTINUE
113   CONTINUE
      KMAXV(1)=1
      DO 117 I=2,L
      KMAXV(I)=KMAXV(I-1)+(LP2-I)
117   CONTINUE
      KMAXVM=KMAXV(L)
C***COMPUTE RATIOS OF CONT. COEFFS
      SKC1R=BETAWD/BETINW
      SKO3R=BETAD(61)/BETINW
      SKO2D=ONE/BETINW
C
C****BEGIN TABLE COMPUTATIONS HERE***
C***COMPUTE TEMPS, MASSES FOR TABLE ENTRIES
C---NOTE: THE DIMENSIONING AND INITIALIZATION OF XTEMV AND OTHER ARRAYS
C   WITH DIMENSION OF 28 IMPLY A RESTRICTION OF MODEL TEMPERATURES FROM
C   100K TO 370K.
C---THE DIMENSIONING OF ZMASS,ZROOT AND OTHER ARRAYS WITH DIMENSION OF
C   180 IMPLY A RESTRICTION OF MODEL H2O AMOUNTS SUCH THAT OPTICAL PATHS
C   ARE BETWEEN 10**-16 AND 10**2, IN CGS UNITS.
      ZMASS(1)=H1M16
      DO 201 J=1,180
      JP=J+1
      ZROOT(J)=SQRT(ZMASS(J))
      ZMASS(JP)=ZMASS(J)*H1P25892
201   CONTINUE
      DO 203 I=1,28
      XTEMV(I)=HNINETY+TEN*I
      TFOUR(I)=XTEMV(I)*XTEMV(I)*XTEMV(I)*XTEMV(I)
      FORTCU(I)=FOUR*XTEMV(I)*XTEMV(I)*XTEMV(I)
203   CONTINUE
C******THE COMPUTATION OF SOURCE,DSRCE IS  NEEDED ONLY
C   FOR THE COMBINED WIDE-BAND CASE.TO OBTAIN THEM,THE SOURCE
C   MUST BE COMPUTED FOR EACH OF THE (NBLX) WIDE BANDS(=SRCWD)
C   THEN COMBINED (USING IBAND) INTO SOURCE.
      DO 205 N=1,NBLY
      DO 205 I=1,28
      SOURCE(I,N)=ZERO
205   CONTINUE
      DO 207 N=1,NBLX
      DO 207 I=1,28
      SRCWD(I,N)=ZERO
207   CONTINUE
C---BEGIN FREQ. LOOP (ON N)
      DO 211 N=1,NBLX
        IF (N.LE.46) THEN
C***THE 160-1200 BAND CASES
          CENT=CENTNB(N+16)
          DEL=DELNB(N+16)
          BDLO=BANDLO(N+16)
          BDHI=BANDHI(N+16)
        ENDIF
        IF (N.EQ.NBLX) THEN
C***THE 2270-2380 BAND CASE
          CENT=CENTNB(NBLW)
          DEL=DELNB(NBLW)
          BDLO=BANDLO(NBLW)
          BDHI=BANDHI(NBLW)
        ENDIF
C***FOR PURPOSES OF ACCURACY, ALL EVALUATIONS OF PLANCK FCTNS ARE MADE
C  ON 10 CM-1 INTERVALS, THEN SUMMED INTO THE (NBLX) WIDE BANDS.
      NSUBDS=(DEL-H1M3)/10+1
      DO 213 NSB=1,NSUBDS
      IF (NSB.NE.NSUBDS) THEN
        CNUSB(NSB)=TEN*(NSB-1)+BDLO+FIVE
        DNUSB(NSB)=TEN
      ELSE
        CNUSB(NSB)=HAF*(TEN*(NSB-1)+BDLO+BDHI)
        DNUSB(NSB)=BDHI-(TEN*(NSB-1)+BDLO)
      ENDIF
      C1=(H37412M5)*CNUSB(NSB)**3
C---BEGIN TEMP. LOOP (ON I)
      DO 215 I=1,28
      X(I)=H1P4387*CNUSB(NSB)/XTEMV(I)
      X1(I)=EXP(X(I))
      SRCS(I)=C1/(X1(I)-ONE)
      SRCWD(I,N)=SRCWD(I,N)+SRCS(I)*DNUSB(NSB)
215   CONTINUE
213   CONTINUE
211   CONTINUE
C***THE FOLLOWING LOOPS CREATE THE COMBINED WIDE BAND QUANTITIES SOURCE
C   AND DSRCE
      DO 221 N=1,40
      DO 221 I=1,28
      SOURCE(I,IBAND(N))=SOURCE(I,IBAND(N))+SRCWD(I,N)
221   CONTINUE
      DO 223 N=9,NBLY
      DO 223 I=1,28
      SOURCE(I,N)=SRCWD(I,N+32)
223   CONTINUE
      DO 225 N=1,NBLY
      DO 225 I=1,27
      DSRCE(I,N)=(SOURCE(I+1,N)-SOURCE(I,N))*HP1
225   CONTINUE
      DO 231 N=1,NBLW
      ALFANB(N)=BNB(N)*ANB(N)
      AROTNB(N)=SQRT(ALFANB(N))
231   CONTINUE
C***FIRST COMPUTE PLANCK FCTNS (SRC1NB) AND DERIVATIVES (DBDTNB) FOR
C   USE IN TABLE EVALUATIONS. THESE ARE DIFFERENT FROM SOURCE,DSRCE
C   BECAUSE DIFFERENT FREQUENCY PTS ARE USED IN EVALUATION, THE FREQ.
C   RANGES ARE DIFFERENT, AND THE DERIVATIVE ALGORITHM IS DIFFERENT.
C
      DO 301 N=1,NBLW
      CENT=CENTNB(N)
      DEL=DELNB(N)
C---NOTE: AT PRESENT, THE IA LOOP IS ONLY USED FOR IA=2. THE LOOP STRUCT
C   IS KEPT SO THAT IN THE FUTURE, WE MAY USE A QUADRATURE SCHEME FOR
C   THE PLANCK FCTN EVALUATION, RATHER THAN USE THE MID-BAND FREQUENCY.
      DO 303 IA=1,3
      ANU=CENT+HAF*(IA-2)*DEL
      C1=(H37412M5)*ANU*ANU*ANU+H1M20
C---TEMPERATURE LOOP---
      DO 305 I=1,28
         X(I)=H1P4387*ANU/XTEMV(I)
         X1(I)=EXP(X(I))
         SC(I)=C1/((X1(I)-ONE)+H1M20)
         DSC(I)=SC(I)*SC(I)*X(I)*X1(I)/(XTEMV(I)*C1)
305      CONTINUE
      IF (IA.EQ.2) THEN
         DO 307 I=1,28
         SRC1NB(I,N)=DEL*SC(I)
         DBDTNB(I,N)=DEL*DSC(I)
307      CONTINUE
      ENDIF
303   CONTINUE
301   CONTINUE
C***NEXT COMPUTE R1,R2,S2,AND T3- COEFFICIENTS USED FOR E3 FUNCTION
C   WHEN THE OPTICAL PATH IS LESS THAN 10-4. IN THIS CASE, WE ASSUME A
C   DIFFERENT DEPENDENCE ON (ZMASS).
C---ALSO OBTAIN R1WD, WHICH IS R1 SUMMED OVER THE 160-560 CM-1 RANGE
      DO 311 I=1,28
      SUM4(I)=ZERO
      SUM6(I)=ZERO
      SUM7(I)=ZERO
      SUM8(I)=ZERO
      SUM4WD(I)=ZERO
311   CONTINUE
      DO 313 N=1,NBLW
      CENT=CENTNB(N)
C***PERFORM SUMMATIONS FOR FREQ. RANGES OF 0-560,1200-2200 CM-1 FOR SUM4
C   SUM6,SUM7,SUM8
      IF (CENT.LT.560. .OR. CENT.GT.1200..AND.CENT.LE.2200.) THEN
         DO 315 I=1,28
         SUM4(I)=SUM4(I)+SRC1NB(I,N)
         SUM6(I)=SUM6(I)+DBDTNB(I,N)
         SUM7(I)=SUM7(I)+DBDTNB(I,N)*AROTNB(N)
         SUM8(I)=SUM8(I)+DBDTNB(I,N)*ALFANB(N)
315      CONTINUE
      ENDIF
C***PERFORM SUMMATIONS OVER 160-560 CM-1 FREQ RANGE FOR E1 CALCS (SUM4WD
      IF (CENT.GT.160. .AND. CENT.LT.560.) THEN
         DO 316 I=1,28
         SUM4WD(I)=SUM4WD(I)+SRC1NB(I,N)
316      CONTINUE
      ENDIF
313   CONTINUE
      DO 317 I=1,28
      R1(I)=SUM4(I)/TFOUR(I)
      R2(I)=SUM6(I)/FORTCU(I)
      S2(I)=SUM7(I)/FORTCU(I)
      T3(I)=SUM8(I)/FORTCU(I)
      R1WD(I)=SUM4WD(I)/TFOUR(I)
317   CONTINUE
      DO 401 J=1,180
      DO 401 I=1,28
      SUM(I,J)=ZERO
      PERTSM(I,J)=ZERO
      SUM3(I,J)=ZERO
      SUMWDE(I,J)=ZERO
401   CONTINUE
C---FREQUENCY LOOP BEGINS---
      DO 411 N=1,NBLW
      CENT=CENTNB(N)
C***PERFORM CALCULATIONS FOR FREQ. RANGES OF 0-560,1200-2200 CM-1
      IF (CENT.LT.560. .OR. CENT.GT.1200..AND.CENT.LE.2200.) THEN
         DO 413 J=1,180
         X2(J)=AROTNB(N)*ZROOT(J)
         EXPO(J)=EXP(-X2(J))
413      CONTINUE
         DO 415 J=1,180
         IF (X2(J).GE.HUNDRED) THEN
              EXPO(J)=ZERO
         ENDIF
415      CONTINUE
         DO 417 J=121,180
         FAC(J)=ZMASS(J)*(ONE-(ONE+X2(J))*EXPO(J))/(X2(J)*X2(J))
417      CONTINUE
         DO 419 J=1,180
         DO 419 I=1,28
         SUM(I,J)=SUM(I,J)+SRC1NB(I,N)*EXPO(J)
         PERTSM(I,J)=PERTSM(I,J)+DBDTNB(I,N)*EXPO(J)
419      CONTINUE
         DO 421 J=121,180
         DO 421 I=1,28
         SUM3(I,J)=SUM3(I,J)+DBDTNB(I,N)*FAC(J)
421      CONTINUE
      ENDIF
C---COMPUTE SUM OVER 160-560 CM-1 RANGE FOR USE IN E1 CALCS (SUMWDE)
      IF (CENT.GT.160. .AND. CENT.LT.560.) THEN
         DO 420 J=1,180
         DO 420 I=1,28
         SUMWDE(I,J)=SUMWDE(I,J)+SRC1NB(I,N)*EXPO(J)
420      CONTINUE
      ENDIF
411   CONTINUE
      DO 431 J=1,180
      DO 431 I=1,28
      EM1(I,J)=SUM(I,J)/TFOUR(I)
      TABLE1(I,J)=PERTSM(I,J)/FORTCU(I)
431   CONTINUE
      DO 433 J=121,180
      DO 433 I=1,28
      EM3(I,J)=SUM3(I,J)/FORTCU(I)
433   CONTINUE
      DO 441 J=1,179
      DO 441 I=1,28
      TABLE2(I,J)=(TABLE1(I,J+1)-TABLE1(I,J))*TEN
441   CONTINUE
      DO 443 J=1,180
      DO 443 I=1,27
      TABLE3(I,J)=(TABLE1(I+1,J)-TABLE1(I,J))*HP1
443   CONTINUE
      DO 445 I=1,28
      TABLE2(I,180)=ZERO
445   CONTINUE
      DO 447 J=1,180
      TABLE3(28,J)=ZERO
447   CONTINUE
      DO 449 J=1,2
      DO 449 I=1,28
      EM1(I,J)=R1(I)
449   CONTINUE
      DO 451 J=1,120
      DO 451 I=1,28
      EM3(I,J)=R2(I)/TWO-S2(I)*SQRT(ZMASS(J))/THREE+T3(I)*ZMASS(J)/EIGHT
451   CONTINUE
      DO 453 J=121,180
      DO 453 I=1,28
      EM3(I,J)=EM3(I,J)/ZMASS(J)
453   CONTINUE
C***NOW COMPUTE E1 TABLES FOR 160-560 CM-1 BANDS ONLY.
C   WE USE R1WD AND SUMWDE OBTAINED ABOVE.
      DO 501 J=1,180
      DO 501 I=1,28
      EM1WDE(I,J)=SUMWDE(I,J)/TFOUR(I)
501   CONTINUE
      DO 503 J=1,2
      DO 503 I=1,28
      EM1WDE(I,J)=R1WD(I)
503   CONTINUE
      RETURN
      END
      SUBROUTINE O3INT(O3O3,SIGL)
CFPP$ NOCONCUR R
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    O3INT       COMPUTE ZONAL MEAN OZONE FOR SIGMA LYRS
C   PRGMMR: KENNETH CAMPANA  ORG: W/NMC23    DATE: 89-07-07
C
C ABSTRACT: THIS CODE WRITTEN AT GFDL...
C   CALCULATES SEASONAL ZONAL MEAN OZONE,EVERY 5 DEG OF LATITUDE,
C   FOR CURRENT MODEL VERTICAL COORDINATE. OUTPUT DATA IN G/G * 1.E4
C   CODE IS CALLED ONLY ONCE.
C
C PROGRAM HISTORY LOG:
C   84-01-01  FELS AND SCHWARZKOPF,GFDL.
C   89-07-07  K. CAMPANA - ADAPTED STAND-ALONE CODE FOR IN-LINE USE.
C
C USAGE:    CALL O3INT(O3,SIGL)
C   INPUT ARGUMENT LIST:
C     SIGL     - LAYER SIGMA (K=1 IS LOWEST MODEL LAYER)
C   OUTPUT ARGUMENT LIST:
C     O3       - ZONAL MEAN OZONE DATA IN ALL MODEL LAYERS (G/G*1.E4)
C                DIMENSIONED(L,N,IS),WHERE L(=37) IS LATITUDE BETWEEN
C                N AND S POLES,N=NUM OF VERTICAL LYRS(K=1 IS TOP LYR)
C                ,AND IS(=4) DEFINES THE SEASON-WIN,SPR,SUM,FALL.
C
C   OUTPUT FILES:
C     OUTPUT   - PRINT FILE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 200.
C   MACHINE:  CYBER 205.
C
C$$$
C....     PROGRAM O3INT FROM DAN SCHWARZKOPF-GETS ZONAL MEAN O3
C..       CODE ADAPTED FOR MRF USE, IN-LINE.....    K.A.C. JUNE 1989
C....     LAUNCHER======SUBROUTINE O3INT(T41,O3O3)
C..    OUTPUT O3 IS WINTER,SPRING,SUMMER,FALL (NORTHERN HEMISPHERE)
C     PARAMETER SETTINGS FOR THE LONGWAVE AND SHORTWAVE RADIATION CODE:
C          IMAX   =  NO. POINTS ALONG THE LAT. CIRCLE USED IN CALCS.
C          L      =  NO. VERTICAL LEVELS (ALSO LAYERS) IN MODEL
C***NOTE: THE USER NORMALLY WILL MODIFY ONLY THE IMAX AND L PARAMETERS
C          NBLW   =  NO. FREQ. BANDS FOR APPROX COMPUTATIONS. SEE
C                      BANDTA FOR DEFINITION
C          NBLX   =  NO. FREQ BANDS FOR APPROX CTS COMPUTATIONS
C          NBLY   =  NO. FREQ. BANDS FOR EXACT CTS COMPUTATIONS. SEE
C                      BDCOMB FOR DEFINITION
C          INLTE  =  NO. LEVELS USED FOR NLTE CALCS.
C          NNLTE  =  INDEX NO. OF FREQ. BAND IN NLTE CALCS.
C          NB,KO2 ARE SHORTWAVE PARAMETERS; OTHER QUANTITIES ARE DERIVED
C                    FROM THE ABOVE PARAMETERS.
      PARAMETER (L= 28 )
      PARAMETER (IMAX=64)
      PARAMETER (NBLW=163,NBLX=47,NBLY=15)
      PARAMETER (NBLM=NBLY-1)
      PARAMETER (LP1=L+1,LP2=L+2,LP3=L+3)
      PARAMETER (LM1=L-1,LM2=L-2,LM3=L-3)
      PARAMETER (LL=2*L,LLP1=LL+1,LLP2=LL+2,LLP3=LL+3)
      PARAMETER (LLM1=LL-1,LLM2=LL-2,LLM3=LL-3)
      PARAMETER (LP1M=LP1*LP1,LP1M1=LP1M-1)
      PARAMETER (LP1V=LP1*(1+2*L/2))
      PARAMETER (LP121=LP1*NBLY)
      PARAMETER (LL3P=3*L+2)
      PARAMETER (NB=12)
      PARAMETER (INLTE=3,INLTEP=INLTE+1,NNLTE=56)
      PARAMETER (NB1=NB-1)
      PARAMETER (KO2=12)
      PARAMETER (KO21=KO2+1,KO2M=KO2-1)
C     *********************************************************
C       SAVE DATA ON PERMANENT DATA SET DENOTED BY CO222 ****
C          ..... K.CAMPANA   OCTOBER 1988
CCCC  DIMENSION T41(LP2,2),O3O3(37,L,4)
      DIMENSION SIGL(L),O3O3(37,L,4)
C     *********************************************************
      DIMENSION QI(82)
      DIMENSION DDUO3N(19,L),RO31(10,41),RO32(10,41),DUO3N(19,41)
      DIMENSION TEMPN(19)
      DIMENSION O3HI(10,25),O3LO1(10,16),O3LO2(10,16),O3LO3(10,16),
     1          O3LO4(10,16)
      DIMENSION O3HI1(10,16),O3HI2(10,9),PH1(45),PH2(37),P1(48),P2(33)
      DIMENSION O35DEG(37,L)
      DIMENSION RSTD(81),RO3(10,41),RO3M(10,40),RBAR(L),RDATA(81),
     1 PHALF(LP1),PSTD(LP2),P(81),PH(82)
      EQUIVALENCE (O3HI1(1,1),O3HI(1,1)),(O3HI2(1,1),O3HI(1,17))
      EQUIVALENCE (PH1(1),PH(1)),(PH2(1),PH(46))
      EQUIVALENCE (P1(1),P(1)),(P2(1),P(49))
      DATA PH1/      0.,
     1     0.1027246E-04, 0.1239831E-04, 0.1491845E-04, 0.1788053E-04,
     1     0.2135032E-04, 0.2540162E-04, 0.3011718E-04, 0.3558949E-04,
     1     0.4192172E-04, 0.4922875E-04, 0.5763817E-04, 0.6729146E-04,
     1     0.7834518E-04, 0.9097232E-04, 0.1053635E-03, 0.1217288E-03,
     1     0.1402989E-03, 0.1613270E-03, 0.1850904E-03, 0.2119495E-03,
     1     0.2423836E-03, 0.2768980E-03, 0.3160017E-03, 0.3602623E-03,
     1     0.4103126E-03, 0.4668569E-03, 0.5306792E-03, 0.6026516E-03,
     1     0.6839018E-03, 0.7759249E-03, 0.8803303E-03, 0.9987843E-03,
     1     0.1133178E-02, 0.1285955E-02, 0.1460360E-02, 0.1660001E-02,
     1     0.1888764E-02, 0.2151165E-02, 0.2452466E-02, 0.2798806E-02,
     1     0.3197345E-02, 0.3656456E-02, 0.4185934E-02, 0.4797257E-02/
      DATA PH2/
     1     0.5503893E-02, 0.6321654E-02, 0.7269144E-02, 0.8368272E-02,
     1     0.9644873E-02, 0.1112946E-01, 0.1285810E-01, 0.1487354E-01,
     1     0.1722643E-01, 0.1997696E-01, 0.2319670E-01, 0.2697093E-01,
     1     0.3140135E-01, 0.3660952E-01, 0.4274090E-01, 0.4996992E-01,
     1     0.5848471E-01, 0.6847525E-01, 0.8017242E-01, 0.9386772E-01,
     1     0.1099026E 00, 0.1286765E 00, 0.1506574E 00, 0.1763932E 00,
     1     0.2065253E 00, 0.2415209E 00, 0.2814823E 00, 0.3266369E 00,
     1     0.3774861E 00, 0.4345638E 00, 0.4984375E 00, 0.5697097E 00,
     1     0.6490189E 00, 0.7370409E 00, 0.8344896E 00, 0.9421190E 00,
     1     0.1000000E 01/
      DATA P1/
     1     0.9300000E-05, 0.1129521E-04, 0.1360915E-04, 0.1635370E-04,
     1     0.1954990E-04, 0.2331653E-04, 0.2767314E-04, 0.3277707E-04,
     1     0.3864321E-04, 0.4547839E-04, 0.5328839E-04, 0.6234301E-04,
     1     0.7263268E-04, 0.8450696E-04, 0.9793231E-04, 0.1133587E-03,
     1     0.1307170E-03, 0.1505832E-03, 0.1728373E-03, 0.1982122E-03,
     1     0.2266389E-03, 0.2592220E-03, 0.2957792E-03, 0.3376068E-03,
     1     0.3844381E-03, 0.4379281E-03, 0.4976965E-03, 0.5658476E-03,
     1     0.6418494E-03, 0.7287094E-03, 0.8261995E-03, 0.9380076E-03,
     1     0.1063498E-02, 0.1207423E-02, 0.1369594E-02, 0.1557141E-02,
     1     0.1769657E-02, 0.2015887E-02, 0.2295520E-02, 0.2620143E-02,
     1     0.2989651E-02, 0.3419469E-02, 0.3909867E-02, 0.4481491E-02,
     1     0.5135272E-02, 0.5898971E-02, 0.6774619E-02, 0.7799763E-02/
      DATA P2/
     1     0.8978218E-02, 0.1036103E-01, 0.1195488E-01, 0.1382957E-01,
     1     0.1599631E-01, 0.1855114E-01, 0.2151235E-01, 0.2501293E-01,
     1     0.2908220E-01, 0.3390544E-01, 0.3952926E-01, 0.4621349E-01,
     1     0.5403168E-01, 0.6330472E-01, 0.7406807E-01, 0.8677983E-01,
     1     0.1015345E 00, 0.1189603E 00, 0.1391863E 00, 0.1630739E 00,
     1     0.1908004E 00, 0.2235461E 00, 0.2609410E 00, 0.3036404E 00,
     1     0.3513750E 00, 0.4055375E 00, 0.4656677E 00, 0.5335132E 00,
     1     0.6083618E 00, 0.6923932E 00, 0.7845676E 00, 0.8875882E 00,
     1     0.1000000E 01/
      DATA O3HI1/
     * .55,.50,.45,.45,.40,.35,.35,.30,.30,.30,
     * .55,.51,.46,.47,.42,.38,.37,.36,.35,.35,
     * .55,.53,.48,.49,.44,.42,.41,.40,.38,.38,
     * .60,.55,.52,.52,.50,.47,.46,.44,.42,.41,
     * .65,.60,.55,.56,.53,.52,.50,.48,.45,.45,
     * .75,.65,.60,.60,.55,.55,.55,.50,.48,.47,
     * .80,.75,.75,.75,.70,.70,.65,.63,.60,.60,
     * .90,.85,.85,.80,.80,.75,.75,.74,.72,.71,
     * 1.10,1.05,1.00,.90,.90,.90,.85,.83,.80,.80,
     * 1.40,1.30,1.25,1.25,1.25,1.20,1.15,1.10,1.05,1.00,
     * 1.7,1.7,1.6,1.6,1.6,1.6,1.6,1.6,1.5,1.5,
     * 2.1,2.0,1.9,1.9,1.9,1.8,1.8,1.8,1.7,1.7,
     * 2.4,2.3,2.2,2.2,2.2,2.1,2.1,2.1,2.0,2.0,
     * 2.7,2.5,2.5,2.5,2.5,2.5,2.4,2.4,2.3,2.3,
     * 2.9,2.8,2.7,2.7,2.7,2.7,2.7,2.7,2.6,2.6,
     * 3.1,3.1,3.0,3.0,3.0,3.0,3.0,3.0,2.9,2.8/
      DATA O3HI2/
     * 3.3,3.4,3.4,3.6,3.7,3.9,4.0,4.1,4.0,3.8,
     * 3.6,3.8,3.9,4.2,4.7,5.3,5.6,5.7,5.5,5.2,
     * 4.1,4.3,4.7,5.2,6.0,6.7,7.0,6.8,6.4,6.2,
     * 5.4,5.7,6.0,6.6,7.3,8.0,8.4,7.7,7.1,6.7,
     * 6.7,6.8,7.0,7.6,8.3,10.0,9.6,8.2,7.5,7.2,
     * 9.2,9.3,9.4,9.6,10.3,10.6,10.0,8.5,7.7,7.3,
     * 12.6,12.1,12.0,12.1,11.7,11.0,10.0,8.6,7.8,7.4,
     * 14.2,13.5,13.1,12.8,11.9,10.9,9.8,8.5,7.8,7.5,
     * 14.3,14.0,13.4,12.7,11.6,10.6,9.3,8.4,7.6,7.3/
      DATA O3LO1/
     * 14.9,14.2,13.3,12.5,11.2,10.3,9.5,8.6,7.5,7.4,
     * 14.5,14.1,13.0,11.8,10.5,9.8,9.2,7.9,7.4,7.4,
     * 11.8,11.5,10.9,10.5,9.9,9.6,8.9,7.5,7.2,7.2,
     * 7.3,7.7,7.8,8.4,8.4,8.5,7.9,7.4,7.1,7.1,
     * 4.1,4.4,5.3,6.6,6.9,7.5,7.4,7.2,7.0,6.9,
     * 1.8,1.9,2.5,3.3,4.5,5.8,6.3,6.3,6.4,6.1,
     * 0.4,0.5,0.8,1.2,2.7,3.6,4.6,4.7,5.0,5.2,
     * .10,.15,.20,.50,1.4,2.1,3.0,3.2,3.5,3.9,
     * .07,.10,.12,.30,1.0,1.4,1.8,1.9,2.3,2.5,
     * .06,.08,.10,.15,.60,.80,1.4,1.5,1.5,1.6,
     * .05,.05,.06,.09,.20,.40,.70,.80,.90,.90,
     * .05,.05,.06,.08,.10,.13,.20,.25,.30,.40,
     * .05,.05,.05,.06,.07,.07,.08,.09,.10,.13,
     * .05,.05,.05,.05,.06,.06,.06,.06,.07,.07,
     * .05,.05,.05,.05,.05,.05,.05,.06,.06,.06,
     * .04,.04,.04,.04,.04,.04,.04,.05,.05,.05/
      DATA O3LO2/
     * 14.8,14.2,13.8,12.2,11.0,9.8,8.5,7.8,7.4,6.9,
     * 13.2,13.0,12.5,11.3,10.4,9.0,7.8,7.5,7.0,6.6,
     * 10.6,10.6,10.7,10.1,9.4,8.6,7.5,7.0,6.5,6.1,
     * 7.0,7.3,7.5,7.5,7.5,7.3,6.7,6.4,6.0,5.8,
     * 3.8,4.0,4.7,5.0,5.2,5.9,5.8,5.6,5.5,5.5,
     * 1.4,1.6,2.4,3.0,3.7,4.1,4.6,4.8,5.1,5.0,
     * .40,.50,.90,1.2,2.0,2.7,3.2,3.6,4.3,4.1,
     * .07,.10,.20,.30,.80,1.4,2.1,2.4,2.7,3.0,
     * .06,.07,.09,.15,.30,.70,1.2,1.4,1.6,2.0,
     * .05,.05,.06,.12,.15,.30,.60,.70,.80,.80,
     * .04,.05,.06,.08,.09,.15,.30,.40,.40,.40,
     * .04,.04,.05,.055,.06,.09,.12,.13,.15,.15,
     * .03,.03,.045,.052,.055,.06,.07,.07,.06,.07,
     * .03,.03,.04,.051,.052,.052,.06,.06,.05,.05,
     * .02,.02,.03,.05,.05,.05,.04,.04,.04,.04,
     * .02,.02,.02,.04,.04,.04,.03,.03,.03,.03/
      DATA O3LO3/
     * 14.5,14.0,13.5,11.3,11.0,10.0,9.0,8.3,7.5,7.3,
     * 13.5,13.2,12.5,11.1,10.4,9.7,8.2,7.8,7.4,6.8,
     * 10.8,10.9,11.0,10.4,10.0,9.6,7.9,7.5,7.0,6.7,
     * 7.3,7.5,7.8,8.5,9.0,8.5,7.7,7.4,6.9,6.5,
     * 4.1,4.5,5.3,6.2,7.3,7.7,7.3,7.0,6.6,6.4,
     * 1.8,2.0,2.2,3.8,4.3,5.6,6.2,6.2,6.4,6.2,
     * .30,.50,.60,1.5,2.8,3.7,4.5,4.7,5.5,5.6,
     * .09,.10,.15,.60,1.2,2.1,3.0,3.5,4.0,4.3,
     * .06,.08,.10,.30,.60,1.1,1.9,2.2,2.9,3.0,
     * .04,.05,.06,.15,.45,.60,1.1,1.3,1.6,1.8,
     * .04,.04,.04,.08,.20,.30,.55,.60,.75,.90,
     * .04,.04,.04,.05,.06,.10,.12,.15,.20,.25,
     * .04,.04,.03,.04,.05,.06,.07,.07,.07,.08,
     * .03,.03,.04,.05,.05,.05,.05,.05,.05,.05,
     * .03,.03,.03,.04,.04,.04,.05,.05,.04,.04,
     * .02,.02,.02,.04,.04,.04,.04,.04,.03,.03/
      DATA O3LO4/
     * 14.2,13.8,13.2,12.5,11.7,10.5,8.6,7.8,7.5,6.6,
     * 12.5,12.4,12.2,11.7,10.8,9.8,7.8,7.2,6.5,6.1,
     * 10.6,10.5,10.4,10.1,9.6,9.0,7.1,6.8,6.1,5.9,
     * 7.0,7.4,7.9,7.8,7.6,7.3,6.2,6.1,5.8,5.6,
     * 4.2,4.6,5.1,5.6,5.9,5.9,5.9,5.8,5.6,5.3,
     * 2.1,2.3,2.6,2.9,3.5,4.3,4.8,4.9,5.1,5.1,
     * 0.7,0.8,1.0,1.5,2.0,2.8,3.5,3.6,3.7,4.0,
     * .15,.20,.40,.50,.60,1.4,2.1,2.2,2.3,2.5,
     * .08,.10,.15,.25,.30,.90,1.2,1.3,1.4,1.6,
     * .07,.08,.10,.14,.20,.50,.70,.90,.90,.80,
     * .05,.06,.08,.12,.14,.20,.35,.40,.60,.50,
     * .05,.05,.08,.09,.09,.09,.11,.12,.15,.18,
     * .04,.05,.06,.07,.07,.08,.08,.08,.08,.08,
     * .04,.04,.05,.07,.07,.07,.07,.07,.06,.05,
     * .02,.02,.04,.05,.05,.05,.05,.05,.04,.04,
     * .02,.02,.03,.04,.04,.04,.04,.04,.03,.03/
C***READ IN USER-SPECIFIED PRESSURES,IN MB. THIS CAN BE OUTPUT FROM PTZ
CKAC ..  FILE 41 FROM PTZ(PSFC=1013.25 MB)
606   FORMAT (5E16.9)
CCC      READ (8,606) (PSTD(K),K=1,LP2)
CCC      READ (8,606) (PHALF(K),K=1,LP1)
CO222  ***************************************************
      PSS=1013.250 E 0
      PSTD(1) = 0. E 0
      PSTD(LP2) = PSS
      DO 202 K=2,LP1
        PSTD(K) = SIGL(LP2-K) * PSS
  202 CONTINUE
      PHALF(1) = 0. E 0
      PHALF(LP1) = PSS
      DO 204 K=1,LM1
        PHALF(K+1) = 0.5 E 0 * (PSTD(K+1)+PSTD(K+2))
  204 CONTINUE
CKAC  DO 300 K=1,LP2
CKAC    PSTD(K) = T41(K,1)
CK300 CONTINUE
CKAC  DO 301 K=1,LP1
CKAC    PHALF(K) = T41(K,2)
CK301 CONTINUE
CC          REWIND 66
CO222  ***************************************************
      NKK=41
      NK=81
      NKP=NK+1
      DO 24 K=1,LP1
      PHALF(K)=PHALF(K)*1.0E 03
   24 PSTD(K)=PSTD(K+1)*1.0E 03
      DO 25 K=1,NK
      PH(K)=PH(K)*1013250.
   25 P(K)=P(K)*1013250.
      PH(NKP)=PH(NKP)*1013250.
CKAC  WRITE (6,3) PH
CKAC  WRITE (6,3) P
      WRITE (6,3) (PHALF(K),K=1,LP1)
      WRITE (6,3) (PSTD(K),K=1,LP1)
C***LOAD ARRAYS RO31,RO32,AS IN DICKS PGM.
      DO 1010 K=1,25
      DO 1010 N=1,10
        RO31(N,K)=O3HI(N,K)
        RO32(N,K)=O3HI(N,K)
1010  CONTINUE
C
      DO 3000 NCASE=1,4
      ITAPE=NCASE+50
      IPLACE=2
      IF (NCASE.EQ.2) IPLACE=4
      IF (NCASE.EQ.3) IPLACE=1
      IF (NCASE.EQ.4) IPLACE=3
C***NCASE=1: SPRING (IN N.H.)
C***NCASE=2: FALL   (IN N.H.)
C***NCASE=3: WINTER (IN N.H.)
C***NCASE=4: SUMMER (IN N.H.)
      IF (NCASE.EQ.1.OR.NCASE.EQ.2) THEN
         DO 1011 K=26,41
         DO 1011 N=1,10
           RO31(N,K)=O3LO1(N,K-25)
           RO32(N,K)=O3LO2(N,K-25)
1011     CONTINUE
      ENDIF
      IF (NCASE.EQ.3.OR.NCASE.EQ.4) THEN
         DO 1031 K=26,41
         DO 1031 N=1,10
           RO31(N,K)=O3LO3(N,K-25)
           RO32(N,K)=O3LO4(N,K-25)
1031     CONTINUE
      ENDIF
      DO 30 KK=1,NKK
      DO 31 N=1,10
      DUO3N(N,KK)=RO31(11-N,KK)
   31 DUO3N(N+9,KK)=RO32(N,KK)
      DUO3N(10,KK)=.5*(RO31(1,KK)+RO32(1,KK))
   30 CONTINUE
C***FOR NCASE=2 OR NCASE=4,REVERSE LATITUDE ARRANGEMENT OF CORR. SEASON
      IF (NCASE.EQ.2.OR.NCASE.EQ.4) THEN
         DO 1024 KK=1,NKK
         DO 1025 N=1,19
           TEMPN(N)=DUO3N(20-N,KK)
1025     CONTINUE
         DO 1026 N=1,19
           DUO3N(N,KK)=TEMPN(N)
1026     CONTINUE
1024     CONTINUE
      ENDIF
C***DUO3N NOW IS O3 PROFILE FOR APPROPRIATE SEASON,AT STD. PRESSURE
C      LEVELS
CKAC  WRITE (6,800) DUO3N
C***BEGIN LATITUDE (10 DEG) LOOP
      DO 33 N=1,19
      DO 22 KK=1,NKK
   22 RSTD(KK)=DUO3N(N,KK)
      NKM=NK-1
      NKMM=NK-3
C     BESSELS HALF-POINT INTERPOLATION FORMULA
      DO 60 K=4,NKMM,2
      KI=K/2
   60 RDATA(K)=.5*(RSTD(KI)+RSTD(KI+1))-(RSTD(KI+2)-RSTD(KI+1)-RSTD(KI)+
     1RSTD(KI-1))/16.
      RDATA(2)=.5*(RSTD(2)+RSTD(1))
      RDATA(NKM)=.5*(RSTD(NKK)+RSTD(NKK-1))
C     PUT UNCHANGED DATA INTO NEW ARRAY
      DO 61 K=1,NK,2
      KQ=(K+1)/2
   61 RDATA(K)=RSTD(KQ)
C---NOTE TO NMC: THIS WRITE IS COMMENTED OUT TO REDUCE PRINTOUT
C     WRITE (6,798) RDATA
C     CALCULATE LAYER-MEAN OZONE MIXING RATIO FOR EACH MODEL LEVEL
      DO 99 KK=1,L
      RBAR(KK)=0.
C     LOOP TO CALCULATE SUMS TO GET LAYER OZONE MEAN
      DO 98 K=1,NK
      IF(PH(K+1).LT.PHALF(KK)) GO TO 98
      IF(PH(K).GT.PHALF(KK+1)) GO TO 98
      IF(PH(K+1).LT.PHALF(KK+1).AND.PH(K).LT.PHALF(KK)) RBAR(KK)=RBAR(KK
     1)+RDATA(K)*(PH(K+1)-PHALF(KK))
      IF(PH(K+1).LT.PHALF(KK+1).AND.PH(K).GE.PHALF(KK)) RBAR(KK)=RBAR(K
     1K)+RDATA(K)*(PH(K+1)-PH(K))
      IF(PH(K+1).GT.PHALF(KK+1).AND.PH(K).GT.PHALF(KK)) RBAR(KK)=RBAR(K
     1K)+RDATA(K)*(PHALF(KK+1)-PH(K))
   98 CONTINUE
      RBAR(KK)=RBAR(KK)/(PHALF(KK+1)-PHALF(KK))
      IF(RBAR(KK).GT..0000) GO TO 99
C     CODE TO COVER CASE WHEN MODEL RESOLUTION IS SO FINE THAT NO VALUE
C     OF P(K) IN THE OZONE DATA ARRAY FALLS BETWEEN PHALF(KK+1) AND
C     PHALF(KK).   PROCEDURE IS TO SIMPLY GRAB THE NEAREST VALUE FROM
C     RDATA
      DO 29 K=1,NK
      IF(PH(K).LT.PHALF(KK).AND.PH(K+1).GE.PHALF(KK+1)) RBAR(KK)=RDATA(K
     1)
   29 CONTINUE
   99 CONTINUE
C     CALCULATE TOTAL OZONE
      O3RD=0.
      DO 89 KK=1,80
   89 O3RD=O3RD+RDATA(KK)*(PH(KK+1)-PH(KK))
      O3RD=O3RD+RDATA(81)*(P(81)-PH(81))
      O3RD=O3RD/980.
      O3TOT=0.
      DO 88 KK=1,L
   88 O3TOT=O3TOT+RBAR(KK)*(PHALF(KK+1)-PHALF(KK))
      O3TOT=O3TOT/980.
C     UNITS ARE MICROGRAMS/CM**2
      O3DU=O3TOT/2.144
C     O3DU UNITS ARE DOBSON UNITS (10**-3 ATM-CM)
C--NOTE TO NMC: THIS IS COMMENTED OUT TO SAVE PRINTOUT
C     WRITE (6,796) O3RD,O3TOT,O3DU
      DO 23 KK=1,L
   23 DDUO3N(N,KK)=RBAR(KK)*.01
   33 CONTINUE
C***END OF LATITUDE LOOP
C
C***CREATE 5 DEG OZONE QUANTITIES BY LINEAR INTERPOLATION OF
C      10 DEG VALUES
      DO 1060 KK=1,L
        DO 1061 N=1,19
          O35DEG(2*N-1,KK)=DDUO3N(N,KK)
1061    CONTINUE
        DO 1062 N=1,18
          O35DEG(2*N,KK)=0.5*(DDUO3N(N,KK)+DDUO3N(N+1,KK))
1062    CONTINUE
1060  CONTINUE
C***OUTPUT TO UNIT (ITAPE) THE OZONE VALUES FOR LATER USE
CO222  ***************************************************
CC          WRITE (66) O35DEG
      DO 302 JJ=1,37
       DO 302 KEN=1,L
        O3O3(JJ,KEN,IPLACE) = O35DEG(JJ,KEN)
  302 CONTINUE
CO222  ***************************************************
CCC       WRITE (ITAPE,101) O35DEG
CKAC  WRITE (6,101) O35DEG
3000  CONTINUE
C***END OF LOOP OVER CASES
      RETURN
   1  FORMAT(10F4.2)
    2 FORMAT(10X,E14.7,1X,E14.7,1X,E14.7,1X,E14.7,1X)
   3  FORMAT(10E12.5)
C 796 FORMAT(3E12.5)
  797 FORMAT(10F7.2)
C 798 FORMAT(20F6.2)
  799 FORMAT(19F6.4)
  800 FORMAT(19F6.2)
  101 FORMAT(5X,1H*,F6.5,1H,,F6.5,1H,,F6.5,1H,,F6.5,1H,,F6.5,1H,,F6.5,
     *1H,,F6.5,1H,,F6.5,1H,,F6.5,1H,)
      END
      SUBROUTINE ZNLDIA(NZNL,RHOUR,IDATE,KDT,
     &                  LAT,LATB2,LONB2,LONB22,LEVS,SHOUR,
     &                  WGB,RBS2,COLRAB,
     &                  SI,SL,DEL,PSEXP,GESHEM,BENGSH,
     &                  DUSFC,DVSFC,DTSFC,DQSFC,
     &                  DUGWD,DVGWD,DUMTN,
     &                  SLMSK,SHELEG,TSEA,SOILM,
     &                  TG1,TG2,TG3,ZORL,SFCSW,SFCLW,
     &                  ZG,DG,TG,RQG,DLAM,DPHI,UG,VG,EP,CLDWRK)
CFPP$ EXPAND(FPVS)
C
      DIMENSION IDATE(4)
      DIMENSION SI(LEVS+1),SL(LEVS),DEL(LEVS)
      DIMENSION PSEXP(LONB2),GESHEM(LONB2),BENGSH(LONB2)
      DIMENSION DUSFC(LONB2),DVSFC(LONB2),DTSFC(LONB2),DQSFC(LONB2)
      DIMENSION DUGWD(LONB2),DVGWD(LONB2),DUMTN(LONB2)
      DIMENSION SLMSK(LONB2),SHELEG(LONB2),TSEA(LONB2),SOILM(LONB2)
      DIMENSION TG1(LONB2),TG2(LONB2),TG3(LONB2)
      DIMENSION ZORL(LONB2),SFCSW(LONB2),SFCLW(LONB2)
      DIMENSION ZG(LONB22,LEVS),DG(LONB22,LEVS)
      DIMENSION TG(LONB22,LEVS),RQG(LONB22,LEVS)
      DIMENSION DLAM(LONB2),DPHI(LONB2)
      DIMENSION UG(LONB22,LEVS),VG(LONB22,LEVS)
      DIMENSION EP(LONB2),CLDWRK(LONB2)
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 )
      PARAMETER(FKAPPA=RD/CP,FVIRT=RV/RD-1.,FEPS=RD/RV,FEPSM1=RD/RV-1.)
      PARAMETER(NRM=21,NRS=32)
      PARAMETER(NLB=6,NST=6)
      PARAMETER(NMU=1,NMV=2,NMTV=3,NMQ=4,NMVOT2=5,
     &          NMDIV2=6,NMOMEGA=7,NMT=8,NMRH=9,NMKE=10,
     &          NMTCONV=11,NMTLARG=12,NMTSHAL=13,NMTVRDF=14,NMQCONV=15,
     &          NMQSHAL=16,NMQVRDF=17,NMUVRDF=18,NMVVRDF=19,NMTHSW=20,
     &          NMTHLW=21)
      PARAMETER(NSRAIN=1,NSRAINC=2,NSTSFC=3,NSQSFC=4,NSUSFC=5,
     &          NSVSFC=6,NSRCOV=7,NSRCOVC=8,NSPS=9,NSTSKIN=10,
     &          NSWET=11,NSSNOW=12,NSTG1=13,NSTG2=14,NSTG3=15,
     &          NSSFCSW=16,NSSFCLW=17,NSRHS=18,NSTVS=19,NSTS=20,
     &          NSQS=21,NSZORL=22,NSSLMSK=23,NSUGWD=24,NSVGWD=25,
     &          NSUASFC=26,NSUAGWD=27,NSUAMTN=28,NSUA=29,NSUAP=30,
     &          NEP=31,NCLDWK=32)
      CHARACTER*8 CNM,CNS
      DIMENSION CNM(NRM),CNS(NRS)
      DIMENSION ISM(NRM),ISS(NRS)
      DIMENSION ZNLM(NLB, 29 ,NRM)
      DIMENSION ZNLS(NLB,NST,NRS)
      LOGICAL LSMSK(LONB2,NST)
      DIMENSION WEI(NLB),WEIS(NLB,NST)
      DIMENSION WORK(LONB2,LEVS),WORK1(LONB2)
      SAVE ISM,ISS,ZNLM,ZNLS,WEI,WEIS
      DATA CNM/'U       ','V       ','TV      ','Q       ','VOT**2  ',
     &         'DIV**2  ','OMEGA   ','T       ','RH      ','KE      ',
     &         'DTCONV  ','DTLARG  ','DTSHAL  ','DTVRDF  ','DQCONV  ',
     &         'DQSHAL  ','DQVRDF  ','DUVRDF  ','DVVRDF  ','DTHSW   ',
     &         'DTHLW   '/
      DATA CNS/'RAIN    ','RAINC   ','DTSFC   ','DQSFC   ','DUSFC   ',
     &         'DVSFC   ','RCOV    ','RCOVC   ','PS      ','TSKIN   ',
     &         'WETNESS ','SNOW    ','TG1     ','TG2     ','TG3     ',
     &         'SFCSW   ','SFCLW   ','RHS     ','TVS     ','TS      ',
     &         'QS      ','ZORL    ','SLMSK   ','DUGWD   ','DVGWD   ',
     &         'DUASFC  ','DUAGWD  ','DUAMTN  ','UA      ','UAP     ',
     &         'EP      ','CLDWORK '/
C.......................................................................
      IF(LAT.EQ.1) THEN
        ISM=0
        ISS=0
        WEI=0.
        WEIS=0.
        ZNLM=0.
        ZNLS=0.
      ENDIF
C
      ACL= 6.3712E+6 /SQRT(RBS2)
      WGTIME=0.
      IF(SHOUR.GT.0.) WGTIME=WGB/SHOUR
      CALL ZNLLAT(NLB,COLRAB,JN,JS)
      CALL ZNLWTM(LONB2,NLB,JN,JS,PSEXP,WGB,
     1            WEI)
      CALL ZNLWTS(LONB2,NLB,NST,JN,JS,
     1            SLMSK,SHELEG,WGB,
     2            LSMSK,WEIS)
C
      DO I=1,LONB2
        WORK1(I)=0.
      ENDDO
      DO K=LEVS,1,-1
        DO I=1,LONB2
          CG1=RBS2*(UG(I,K)*DLAM(I)+VG(I,K)*DPHI(I))
          CG2=CG1+DG(I,K)
          WORK1(I)=WORK1(I)+CG2*(SL(K)-SI(K+1))
          WORK(I,K)=FKAPPA*TG(I,K)*(CG1-WORK1(I)/SL(K))
          WORK1(I)=WORK1(I)+CG2*(SI(K)-SL(K))
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMOMEGA,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      DO K=1,LEVS
        DO I=1,LONB2
          WORK(I,K)=TG(I,K)*(1.+FVIRT*RQG(I,K))
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMTV,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      DO K=1,LEVS
        DO I=1,LONB2
          ES=FPVS(TG(I,K))
          QS=FEPS*ES/(SL(K)*PSEXP(I)+FEPSM1*ES)
          WORK(I,K)=100.*RQG(I,K)/QS
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMRH,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      DO K=1,LEVS
        DO I=1,LONB2
          WORK(I,K)=RBS2*0.5*(UG(I,K)**2+VG(I,K)**2)
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMKE,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      DO K=1,LEVS
        DO I=1,LONB2
          WORK(I,K)=ZG(I,K)**2
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMVOT2,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      DO K=1,LEVS
        DO I=1,LONB2
          WORK(I,K)=DG(I,K)**2
        ENDDO
      ENDDO
      CALL ZNLAVM(LONB2,LONB2,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMDIV2,WORK,WGB,PSEXP,
     2            ISM,ZNLM)
      CALL ZNLAVM(LONB2,LONB22,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMU,UG,WGB,PSEXP,
     2            ISM,ZNLM)
      CALL ZNLAVM(LONB2,LONB22,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMV,VG,WGB,PSEXP,
     2            ISM,ZNLM)
      CALL ZNLAVM(LONB2,LONB22,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMT,TG,WGB,PSEXP,
     2            ISM,ZNLM)
      CALL ZNLAVM(LONB2,LONB22,NLB, 29 ,LEVS,JN,JS,NRM,
     1            NMQ,RQG,WGB,PSEXP,
     2            ISM,ZNLM)
      ISS(NSUA)=0
      DO I=1,LONB2
        WORK1(I)=0.
      ENDDO
      DO K=1,LEVS
        DO I=1,LONB2
          WORK1(I)=WORK1(I)+DEL(K)*UG(I,K)
        ENDDO
      ENDDO
      UAFAC= 6.3712E+6 *1.E3/ 9.8000E+0
      DO I=1,LONB2
        WORK1(I)=UAFAC*PSEXP(I)*WORK1(I)
      ENDDO
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSUA,WORK1,WGB,LSMSK,
     2            ISS,ZNLS)
      ISS(NSUAP)=0
      UAFAC= 7.2921E-5 *ACL*ACL*1.E3/ 9.8000E+0
      UAREF= 7.2921E-5 *ACL*ACL*1.E4
      DO I=1,LONB2
        WORK1(I)=UAFAC*PSEXP(I)-UAREF
      ENDDO
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSUAP,WORK1,WGB,LSMSK,
     2            ISS,ZNLS)
      DO I=1,LONB2
        WORK1(I)=TG(I,1)*(1.+FVIRT*RQG(I,1))
      ENDDO
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTVS,WORK1,WGB,LSMSK,
     2            ISS,ZNLS)
      DO I=1,LONB2
        ES=FPVS(TG(I,1))
        QS=FEPS*ES/(SL(1)*PSEXP(I)+FEPSM1*ES)
        WORK1(I)=100.*RQG(I,1)/QS
      ENDDO
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSRHS,WORK1,WGB,LSMSK,
     2            ISS,ZNLS)
      IF(SHOUR.GT.0.) THEN
        DO I=1,LONB2
          WORK1(I)=0.
          IF(GESHEM(I).GT.0.) WORK1(I)=100.
        ENDDO
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSRCOV,WORK1,WGB,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        DO I=1,LONB2
          WORK1(I)=0.
          IF(BENGSH(I).GT.0.) WORK1(I)=100.
        ENDDO
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSRCOVC,WORK1,WGB,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSRAIN,GESHEM,WGTIME*86400.,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSRAINC,BENGSH,WGTIME*86400.,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSUSFC,DUSFC,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSVSFC,DVSFC,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      ISS(NSUGWD)=0
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSUGWD,DUGWD,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      ISS(NSVGWD)=0
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSVGWD,DVGWD,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      ISS(NSUASFC)=0
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSUASFC,DUSFC,WGTIME*ACL,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      ISS(NSUAGWD)=0
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSUAGWD,DUGWD,WGTIME*ACL,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      ISS(NSUAMTN)=0
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSUAMTN,DUMTN,WGTIME*ACL,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSTSFC,DTSFC,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      IF(SHOUR.GT.0.) THEN
        CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1              NSQSFC,DQSFC,WGTIME,LSMSK,
     2              ISS,ZNLS)
      ENDIF
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSSNOW,SHELEG,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSPS,PSEXP,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTS,TG(1,1),WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSQS,RQG(1,1),WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTSKIN,TSEA,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSWET,SOILM,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTG1,TG1,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTG2,TG2,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSTG3,TG3,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSZORL,ZORL,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSSFCSW,SFCSW,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NSSFCLW,SFCLW,WGB,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NEP,EP,WGTIME,LSMSK,
     2            ISS,ZNLS)
      CALL ZNLAVS(LONB2,NLB,NST,JN,JS,NRS,
     1            NCLDWK,CLDWRK,WGTIME,LSMSK,
     2            ISS,ZNLS)
      ISM(NMTCONV)=0
      IF(SHOUR.GT.0..AND.KDTCONV.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTCONV,GDZ(1,1,KDTCONV,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMTLARG)=0
      IF(SHOUR.GT.0..AND.KDTLARG.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTLARG,GDZ(1,1,KDTLARG,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMTSHAL)=0
      IF(SHOUR.GT.0..AND.KDTSHAL.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTSHAL,GDZ(1,1,KDTSHAL,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMQCONV)=0
      IF(SHOUR.GT.0..AND.KDQCONV.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMQCONV,GDZ(1,1,KDQCONV,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMQSHAL)=0
      IF(SHOUR.GT.0..AND.KDQSHAL.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMQSHAL,GDZ(1,1,KDQSHAL,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMTVRDF)=0
      IF(SHOUR.GT.0..AND.KDTVRDF.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTVRDF,GDZ(1,1,KDTVRDF,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMQVRDF)=0
      IF(SHOUR.GT.0..AND.KDQVRDF.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMQVRDF,GDZ(1,1,KDQVRDF,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMUVRDF)=0
      IF(SHOUR.GT.0..AND.KDUVRDF.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMUVRDF,GDZ(1,1,KDUVRDF,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMVVRDF)=0
      IF(SHOUR.GT.0..AND.KDVVRDF.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMVVRDF,GDZ(1,1,KDVVRDF,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMTHLW)=0
      IF(SHOUR.GT.0..AND.KDTHLW.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTHLW,GDZ(1,1,KDTHLW,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
      ISM(NMTHSW)=0
      IF(SHOUR.GT.0..AND.KDTHSW.GT.0) THEN
        CALL ZNLAXM(NLB, 29 ,LEVS,JN,JS,NRM,
     1              NMTHSW,GDZ(1,1,KDTHSW,LAT),WGTIME,
     2              ISM,ZNLM)
      ENDIF
C
C
      IF(LAT.EQ.LATB2) THEN
        CALL ZNLFNM(NLB, 29 ,NRM,DEL,WEI,ISM,ZNLM)
        CALL ZNLFNS(NLB,NST,NRS,WEIS,ISS,ZNLS)
        CALL ZNLSLM(NLB,NST,NRS,NSSLMSK,WEIS,ISS,ZNLS)
        CALL ZNLPRT(NZNL,RHOUR,IDATE,KDT,NLB,NST, 29 ,
     &              NRM,NRS,CNM,CNS,ISM,ISS,ZNLM,ZNLS)
      ENDIF
      RETURN
      END
      SUBROUTINE ZNLPRT(NZNL,RHOUR,IDATE,KDT,NLB,NST,NLV,
     &                  NRM,NRS,CNM,CNS,ISM,ISS,ZNLM,ZNLS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLPRT      PRINT ZONAL DIAGNOSTICS.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: PRINT ZONAL DIAGNOSTICS.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLPRT (RHOUR,IDATE,KDT,NLB,NST,NLV,
C    &            NRD,NRM,NRS,CND,CNM,CNS,ISD,ISM,ISS,ZNLD,ZNLM,ZNLS)
C   INPUT ARGUMENT LIST:
C     RHOUR    - CURRENT FORECAST HOUR
C     IDATE    - INITIAL HOUR,MONTH,DAY,YEAR
C     KDT      - FORECAST STEP IF POSITIVE OR -100-DIAB.INI.STEP OR
C                -4 FOR INITIAL-DT DATA IN DIAB.INI
C                -3 FOR INITIAL    DATA IN DIAB.INI
C                -2 FOR INITIAL-DT DATA
C                -1 FOR INITIAL    DATA
C                0  FOR DATA AFTER INITIALIZATION
C     NLB      - NUMBER OF LATITUDE BANDS
C     NST      - NUMBER OF SURFACE TYPES
C     NLV      - NUMBER OF LEVELS
C     NRD      - NUMBER OF 3D DYNAMICS FIELDS
C     NRM      - NUMBER OF 3D PHYSICS FIELDS
C     NRS      - NUMBER OF 2D PHYSICS FIELDS
C     CND      - CHARACTER*8 IDENTIFICATIONS OF 3D DYNAMICS FIELDS
C     CNM      - CHARACTER*8 IDENTIFICATIONS OF 3D PHYSICS FIELDS
C     CNS      - CHARACTER*8 IDENTIFICATIONS OF 2D PHYSICS FIELDS
C     ISD      - STATUS FLAGS OF 3D DYNAMICS FIELDS
C     ISM      - STATUS FLAGS OF 3D PHYSICS FIELDS
C     ISS      - STATUS FLAGS OF 2D PHYSICS FIELDS
C     ZNLD     - ZONAL DIAGNOSTIC ARRAY OF 3D DYNAMICS FIELDS
C     ZNLM     - ZONAL DIAGNOSTIC ARRAY OF 3D PHYSICS FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY OF 2D PHYSICS FIELDS
C
C   SUBPROGRAMS CALLED:
C     IPWRCN   - FUNCTION TO DETERMINE ORDER OF MAGNITUDE OF OUTPUT
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      INTEGER IDATE(4)
      integer*4 idate4(4)
      CHARACTER*8 CNM,CNS
      DIMENSION CNM(NRM),CNS(NRS)
      DIMENSION ISM(NRM),ISS(NRS)
      DIMENSION ZNLM(NLB,NLV,NRM)
      DIMENSION ZNLS(NLB,NST,NRS)
      DIMENSION WRKM(NLB,NLV),WRKS(NLB,NST)
      CHARACTER*32 LABZ
C
      CHARACTER*8 CLB(6)
      CHARACTER*4 CST(6)
      CHARACTER*80 CFMT
      DATA CLB/'90N-90S ','90N-60N ','60N-30N ','30N-30S ',
     &                    '30S-60S ','60S-90S '/
      DATA CST/'MEAN',' LND','SLND',' ICE','SICE',' SEA'/
      DATA NCOL/12/
C
      PRINT 900,KDT
C
      DO 40 N=1,NRM
      IF(ISM(N).EQ.2) THEN
      IPWR=IPWRCN(CNM(N))
      PRINT 910,CNM(N),IPWR,RHOUR,IDATE,KDT
      NROW=(NLV-1)/NCOL+1
      DO 30 KROW=1,NROW
      K1=(KROW-1)*NCOL+1
      IF(KROW.LT.NROW) THEN
        K2=K1-1+NCOL
        WRITE(CFMT,921) NCOL
        PRINT CFMT,(K,K=K1,K2)
      ELSEIF(K1.LT.NLV) THEN
        K2=NLV
        WRITE(CFMT,922) K2-K1
        PRINT CFMT,(K,K=K1,K2-1)
      ELSE
        K2=NLV
        WRITE(CFMT,923)
        PRINT CFMT
      ENDIF
      WRITE(CFMT,930) -IPWR,K2-K1+1
      PRINT CFMT,(CLB(J),(ZNLM(J,K,N),K=K1,K2),J=1,NLB)
30    CONTINUE
      ENDIF
40    CONTINUE
C
      DO 50 N=1,NRS
      IF(ISS(N).EQ.2) THEN
      IPWR=IPWRCN(CNS(N))
      PRINT 910,CNS(N),IPWR,RHOUR,IDATE,KDT
      WRITE(CFMT,920) NST
      PRINT CFMT,(CST(K),K=1,NST)
      WRITE(CFMT,930) -IPWR,NST
      PRINT CFMT,(CLB(J),(ZNLS(J,K,N),K=1,NST),J=1,NLB)
      ENDIF
50    CONTINUE
C
      IF(NZNL.GT.0) THEN
        LABZ='ZNL 92/6'
        FSTEP=KDT
        WRKM=0.
        WRKS=0.
        WRITE(NZNL)LABZ
	idate4 = idate
c       WRITE(NZNL)RHOUR,FSTEP,IDATE,
        WRITE(NZNL)RHOUR,FSTEP,idate4,
     &             (((ZNLM(J,K,N),J=1,NLB),K=1,NLV),N= 1,10),
     &             (((ZNLM(J,K,N),J=1,NLB),K=1,NLV),N=20,21),
     &             (  WRKM                         ,N=13,30),
     &             (((ZNLS(J,K,N),J=1,NLB),K=1,NST),N= 9,15),
     &             (  WRKS                         ,N= 8,11),
     &             (((ZNLS(J,K,N),J=1,NLB),K=1,NST),N=16,22),
     &             (  WRKS                         ,N=19,29),
     &             (((ZNLS(J,K,N),J=1,NLB),K=1,NST),N=23,23),
     &             (((ZNLM(J,K,N),J=1,NLB),K=1,NLV),N=11,19),
     &             (  WRKM                         ,N=10,30),
     &             (((ZNLS(J,K,N),J=1,NLB),K=1,NST),N= 1, 8),
     &             (((ZNLS(J,K,N),J=1,NLB),K=1,NST),N=24,30),
     &             (  WRKS                         ,N=16,30)
      ENDIF
      RETURN
900   FORMAT('0','ZONALLY AVERAGED DIAGNOSTICS',2X,'KDT=',I4)
910   FORMAT(1X,A8,' (10**',I3,')',
     &       ' FHOUR=',F6.1,' IDATE= (',4I4,')',' KDT=',I4)
920   FORMAT("(5X,'--LAT-- ',",I2,"(5X,A4))")
921   FORMAT("(5X,'--LAT-- ',",I2,"(5X,'K=',I2))")
922   FORMAT("(5X,'--LAT-- ',",I2,"(5X,'K=',I2),5X,' SUM')")
923   FORMAT("(5X,'--LAT-- ',                   5X,' SUM')")
930   FORMAT("(5X,A8,",I3,"P",I2,"F9.2))")
      END
CFPP$ NOCONCUR R
      SUBROUTINE ZNLACM(NLONX,A,PS,DT,KD,LAT)
      DIMENSION A(NLONX, 28 ),PS( 384 )
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
      IF(KD.GT.0.AND.KD.LE.KDGDA) THEN
      NLON= 384 /2
      DO 20 K=1, 28
      DO 10 I=1,NLON
      I1=I
      I2=I+NLON
      GDZ(1,K,KD,LAT)=GDZ(1,K,KD,LAT)+A(I1,K)*PS(I1)*DT
      GDZ(2,K,KD,LAT)=GDZ(2,K,KD,LAT)+A(I2,K)*PS(I2)*DT
10    CONTINUE
20    CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE ZNLAXM(NLB,NLV,KMAX,JN,JS,NRM,N,F,WGT,
     1                  ISM,ZNLM)
C
      DIMENSION F(2,KMAX)
      DIMENSION ISM(NRM)
      DIMENSION ZNLM(NLB,NLV,NRM)
C
      IF(N.GT.0.AND.N.LE.NRM.AND.(ISM(N).EQ.0.OR.ISM(N).EQ.1)) THEN
      ISM(N)=1
      DO 10 K=1,KMAX
      ZNLM(JN,K,N)=ZNLM(JN,K,N)+F(1,K)*WGT
      ZNLM(JS,K,N)=ZNLM(JS,K,N)+F(2,K)*WGT
10    CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE ZNLAVM(NLON2,NLONX,NLB,NLV,KMAX,JN,JS,NRM,N,F,WGT,PSFC,
     1                  ISM,ZNLM)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLAVM      COMPUTE ZONAL AVERAGE OF A 3D FIELD.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLAVM (NLON2,NLB,NLV,KMAX,JN,JS,NRM,N,F,WGT,PSFC,
C    1                   ISM,ZNLM)
C   INPUT ARGUMENT LIST:
C     NLON2    - NUMBER OF POINTS IN A PAIRED LATITUDE
C     NLB      - NUMBER OF LATITUDE BANDS
C     NLV      - NUMBER OF LEVELS IN OUTPUT ARRAY
C     KMAX     - NUMBER OF LEVELS TO AVERAGE
C     JN       - NORTHERN HEMISPHERE LATITUDE BAND
C     JS       - SOUTHERN HEMISPHERE LATITUDE BAND
C     NRM      - NUMBER OF 3D FIELDS
C     N        - FIELD INDEX
C     F        - FIELD ARRAY
C     WGT      - LATITUDE WEIGHT
C     PSFC     - SURFACE PRESSURE FOR WEIGHTING
C     ISM      - STATUS FLAGS OF FIELDS
C     ZNLM     - ZONAL DIAGNOSTIC ARRAY
C
C   OUTPUT ARGUMENT LIST:
C     ISM      - STATUS FLAGS OF FIELDS
C     ZNLM     - ZONAL DIAGNOSTIC ARRAY
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION F(NLONX,KMAX)
      DIMENSION PSFC(NLON2)
      DIMENSION ISM(NRM)
      DIMENSION ZNLM(NLB,NLV,NRM)
C
      IF(N.GT.0.AND.N.LE.NRM.AND.(ISM(N).EQ.0.OR.ISM(N).EQ.1)) THEN
      ISM(N)=1
      NLON=NLON2/2
      DO 10 I=1,NLON
      IN=I
      IS=I+NLON
      DO 10 K=1,KMAX
      ZNLM(JN,K,N)=ZNLM(JN,K,N)+F(IN,K)*WGT*PSFC(IN)
      ZNLM(JS,K,N)=ZNLM(JS,K,N)+F(IS,K)*WGT*PSFC(IS)
10    CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE ZNLAVS(NLON2,NLB,NST,JN,JS,NRS,N,F,WGT,LSMSK,
     1                  ISS,ZNLS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLAVS      COMPUTE ZONAL AVERAGE OF A 2D FIELD.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLAVS (NLON2,NLB,NST,JN,JS,NRS,N,F,WGT,LSMSK,
C    1                   ISS,ZNLS)
C   INPUT ARGUMENT LIST:
C     NLON2    - NUMBER OF POINTS IN A PAIRED LATITUDE
C     NLB      - NUMBER OF LATITUDE BANDS
C     NST      - NUMBER OF SURFACE TYPES
C     JN       - NORTHERN HEMISPHERE LATITUDE BAND
C     JS       - SOUTHERN HEMISPHERE LATITUDE BAND
C     NRS      - NUMBER OF 2D FIELDS
C     N        - FIELD INDEX
C     F        - FIELD ARRAY
C     WGT      - LATITUDE WEIGHT
C     LSMSK    - LOGICAL MASK FOR SURFACE TYPE
C     ISS      - STATUS FLAGS OF FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY
C
C   OUTPUT ARGUMENT LIST:
C     ISS      - STATUS FLAGS OF FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION F(NLON2)
      LOGICAL LSMSK(NLON2,NST)
      DIMENSION ISS(NRS)
      DIMENSION ZNLS(NLB,NST,NRS)
C
      IF(N.GT.0.AND.N.LE.NRS.AND.(ISS(N).EQ.0.OR.ISS(N).EQ.1)) THEN
      ISS(N)=1
      NLON=NLON2/2
      DO 10 I=1,NLON
      IN=I
      IS=I+NLON
      DO 10 K=1,NST
      IF(LSMSK(IN,K))
     &ZNLS(JN,K,N)=ZNLS(JN,K,N)+F(IN)*WGT
      IF(LSMSK(IS,K))
     &ZNLS(JS,K,N)=ZNLS(JS,K,N)+F(IS)*WGT
10    CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE ZNLFNM(NLB,NLV,NRM,DEL,WEI,ISM,ZNLM)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLFNM      COMPLETE ZONAL AVERAGE OF A 3D FIELD.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLFNM (NLB,NLV,NRM,DEL,WEI,ISM,ZNLM)
C   INPUT ARGUMENT LIST:
C     NLB      - NUMBER OF LATITUDE BANDS
C     NLV      - NUMBER OF LEVELS IN OUTPUT ARRAY
C     NRM      - NUMBER OF 3D FIELDS
C     DEL      - DELTA SIGMAS
C     WEI      - REFERENCE WEIGHTS
C     ISM      - STATUS FLAGS OF FIELDS
C     ZNLM     - ZONAL DIAGNOSTIC ARRAY
C
C   OUTPUT ARGUMENT LIST:
C     ISM      - STATUS FLAGS OF FIELDS
C     ZNLM     - ZONAL DIAGNOSTIC ARRAY
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION DEL(*)
      DIMENSION WEI(NLB)
      DIMENSION ISM(NRM)
      DIMENSION ZNLM(NLB,NLV,NRM)
C
      DO 10 J=2,NLB
      WEI(1)=WEI(1)+WEI(J)
10    CONTINUE
C
      DO 50 N=1,NRM
C
      IF(ISM(N).EQ.1) THEN
      ISM(N)=2
      DO 20 J=2,NLB
      DO 20 K=1,NLV-1
      ZNLM(1,K,N)=ZNLM(1,K,N)+ZNLM(J,K,N)
20    CONTINUE
C
      DO 30 K=1,NLV-1
      DO 30 J=1,NLB
      ZNLM(J,NLV,N)=ZNLM(J,NLV,N)+ZNLM(J,K,N)*DEL(K)
30    CONTINUE
C
      DO 40 K=1,NLV
      DO 40 J=1,NLB
      IF(WEI(J).NE.0.)
     &ZNLM(J,K,N)=ZNLM(J,K,N)/WEI(J)
40    CONTINUE
      ENDIF
C
50    CONTINUE
C
      RETURN
      END
      SUBROUTINE ZNLFNS(NLB,NST,NRS,WEIS,ISS,ZNLS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLFNS      COMPLETE ZONAL AVERAGE OF A 2D FIELD.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLFNS (NLB,NST,NRS,WEIS,ISS,ZNLS)
C   INPUT ARGUMENT LIST:
C     NLB      - NUMBER OF LATITUDE BANDS
C     NST      - NUMBER OF SURFACE TYPES
C     NRS      - NUMBER OF 2D FIELDS
C     WEIS     - REFERENCE WEIGHTS
C     ISS      - STATUS FLAGS OF FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY
C
C   OUTPUT ARGUMENT LIST:
C     ISS      - STATUS FLAGS OF FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION WEIS(NLB,NST)
      DIMENSION ISS(NRS)
      DIMENSION ZNLS(NLB,NST,NRS)
C
      DO 10 J=2,NLB
      DO 10 K=1,NST
      WEIS(1,K)=WEIS(1,K)+WEIS(J,K)
10    CONTINUE
C
      DO 50 N=1,NRS
C
      IF(ISS(N).EQ.1) THEN
      ISS(N)=2
      DO 20 J=2,NLB
      DO 20 K=1,NST
      ZNLS(1,K,N)=ZNLS(1,K,N)+ZNLS(J,K,N)
20    CONTINUE
C
      DO 40 K=1,NST
      DO 40 J=1,NLB
      IF(WEIS(J,K).NE.0.)
     &ZNLS(J,K,N)=ZNLS(J,K,N)/WEIS(J,K)
40    CONTINUE
      ENDIF
C
50    CONTINUE
C
      RETURN
      END
      SUBROUTINE ZNLLAT(NLB,COLRAD,JN,JS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLLAT      DETERMINE LATITUDE BANDS.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLLAT (NLB,COLRAD,JN,JS)
C   INPUT ARGUMENT LIST:
C     NLB      - NUMBER OF LATITUDE BANDS
C     COLRAD   - COLATITUDE IN RADIANS
C
C   OUTPUT ARGUMENT LIST:
C     JN       - NORTHERN HEMISPHERE LATITUDE BAND
C     JS       - SOUTHERN HEMISPHERE LATITUDE BAND
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      NLBH=NLB/2
      WLB= 3.141593E+0 /(2*NLBH)
      JB=COLRAD/WLB+1
      JN=JB+1
      JS=NLB-JB+1
C
      RETURN
      END
      SUBROUTINE ZNLSLM(NLB,NST,NRS,N,WEIS,ISS,ZNLS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLSLM      COMPUTE ZONAL AVERAGE OF SURFACE TYPE MASK.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLSLM (NLB,NST,NRS,N,WEIS,ISS,ZNLS)
C   INPUT ARGUMENT LIST:
C     NLB      - NUMBER OF LATITUDE BANDS
C     NST      - NUMBER OF SURFACE TYPES
C     NRS      - NUMBER OF 2D FIELDS
C     WEIS     - REFERENCE WEIGHTS
C     N        - FIELD INDEX OF SURFACE TYPE MASK
C
C   OUTPUT ARGUMENT LIST:
C     ISS      - STATUS FLAGS OF FIELDS
C     ZNLS     - ZONAL DIAGNOSTIC ARRAY
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION WEIS(NLB,NST)
      DIMENSION ISS(NRS)
      DIMENSION ZNLS(NLB,NST,NRS)
C
      IF(N.GT.0.AND.N.LE.NRS) THEN
      ISS(N)=2
      DO 10 J=1,NLB
      IF(WEIS(1,1).NE.0.)
     &ZNLS(J,1,N)=100.*WEIS(J,1)/WEIS(1,1)
10    CONTINUE
      DO 20 K=2,NST
      DO 20 J=1,NLB
      IF(WEIS(J,1).NE.0.)
     &ZNLS(J,K,N)=100.*WEIS(J,K)/WEIS(J,1)
20    CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE ZNLWTM(NLON2,NLB,JN,JS,PSFC,WGT,
     1                  WEI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLWTM      COMPUTE REFERENCE WEIGHTS FOR 3D FIELDS.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLWTM (NLON2,NLB,JN,JS,PSFC,WGT,WEI)
C   INPUT ARGUMENT LIST:
C     NLON2    - NUMBER OF POINTS IN A PAIRED LATITUDE
C     NLB      - NUMBER OF LATITUDE BANDS
C     JN       - NORTHERN HEMISPHERE LATITUDE BAND
C     JS       - SOUTHERN HEMISPHERE LATITUDE BAND
C     PSFC     - SURFACE PRESSURE FOR WEIGHTING
C     WGT      - LATITUDE WEIGHT
C
C   OUTPUT ARGUMENT LIST:
C     WEI      - REFERENCE WEIGHTS
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION PSFC(NLON2)
      DIMENSION WEI(NLB)
C
      NLON=NLON2/2
      DO 10 I=1,NLON
      IN=I
      IS=I+NLON
      WEI(JN)=WEI(JN)+PSFC(IN)*WGT
      WEI(JS)=WEI(JS)+PSFC(IS)*WGT
10    CONTINUE
C
      RETURN
      END
      SUBROUTINE ZNLWTS(NLON2,NLB,NST,JN,JS,SLMSK,SHELEG,WGT,
     1                  LSMSK,WEIS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ZNLWTS      COMPUTE REFERENCE WEIGHTS FOR 2D FIELDS.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: ZONAL DIAGNOSTICS UTILITY ROUTINE.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    CALL ZNLWTS (NLON2,NLB,NST,JN,JS,SLMSK,SHELEG,WGT,
C    1                   LSMSK,WEIS)
C   INPUT ARGUMENT LIST:
C     NLON2    - NUMBER OF POINTS IN A PAIRED LATITUDE
C     NLB      - NUMBER OF LATITUDE BANDS
C     NST      - NUMBER OF SURFACE TYPES
C     JN       - NORTHERN HEMISPHERE LATITUDE BAND
C     JS       - SOUTHERN HEMISPHERE LATITUDE BAND
C     SLMSK    - MODEL LAND-SEA MASK
C     SHELEG   - MODEL SNOW COVER
C     WGT      - LATITUDE WEIGHT
C
C   OUTPUT ARGUMENT LIST:
C     LSMSK    - LOGICAL MASK FOR SURFACE TYPE
C     WEIS     - REFERENCE WEIGHTS
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C
      DIMENSION SLMSK(NLON2),SHELEG(NLON2)
      LOGICAL LSMSK(NLON2,NST)
      DIMENSION WEIS(NLB,NST)
C
      IF(NST.EQ.1) THEN
      DO 10 I=1,NLON2
      LSMSK(I,1)=.TRUE.
10    CONTINUE
C
      ELSE IF(NST.EQ.6) THEN
      DO 15 I=1,NLON2
      LSMSK(I,1)=.TRUE.
      LSMSK(I,2)=SLMSK(I).EQ.1..AND.SHELEG(I).LE.1.E-3
      LSMSK(I,3)=SLMSK(I).EQ.1..AND.SHELEG(I).GT.1.E-3
      LSMSK(I,4)=SLMSK(I).EQ.2..AND.SHELEG(I).LE.1.E-3
      LSMSK(I,5)=SLMSK(I).EQ.2..AND.SHELEG(I).GT.1.E-3
      LSMSK(I,6)=SLMSK(I).EQ.0.
15    CONTINUE
C
      ELSE
      PRINT 19, NST
19    FORMAT(/' IN ZNLWTS. INVALID NUMBER OF SURFACE TYPES',I4)
      LSMSK=.FALSE.
      ENDIF
C
      NLON=NLON2/2
      DO 20 I=1,NLON
      IN=I
      IS=I+NLON
      DO 20 K=1,NST
      IF(LSMSK(IN,K)) WEIS(JN,K)=WEIS(JN,K)+WGT
      IF(LSMSK(IS,K)) WEIS(JS,K)=WEIS(JS,K)+WGT
20    CONTINUE
C
      RETURN
      END
      FUNCTION IPWRCN(CN)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    IPWRCN      GET EXPECTED ORDER OF MAGNITUDE OF A FIELD.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: INTEGER FUNCTION TO RETURN THE EXPECTED
C           ORDER OF MAGNITUDE OF A FIELD GIVEN ITS NAME.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    I = IPWRCN (CN)
C   INPUT ARGUMENT LIST:
C     CN       - CHARACTER*8 FIELD NAME
C
C   OUTPUT ARGUMENT LIST:
C     IPWRCN   - EXPECTED ORDER OF MAGNITUDE
C
C   SUBPROGRAMS CALLED:
C     (ISC8)   - CHARACTER*8 STRING SEARCH
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
      PARAMETER(NL=54)
      CHARACTER*8 CN
      CHARACTER*8 CNL(NL)
      INTEGER IPL(0:NL)
      SAVE CNL,IPL
      DATA IPL(0)/0/
      DATA CNL( 1)/'U       '/, IPL( 1)/0/
      DATA CNL( 2)/'V       '/, IPL( 2)/0/
      DATA CNL( 3)/'TV      '/, IPL( 3)/0/
      DATA CNL( 4)/'Q       '/, IPL( 4)/-3/
      DATA CNL( 5)/'VOT**2  '/, IPL( 5)/-12/
      DATA CNL( 6)/'DIV**2  '/, IPL( 6)/-12/
      DATA CNL( 7)/'OMEGA   '/, IPL( 7)/-5/
      DATA CNL( 8)/'T       '/, IPL( 8)/0/
      DATA CNL( 9)/'RH      '/, IPL( 9)/0/
      DATA CNL(10)/'KE      '/, IPL(10)/0/
      DATA CNL(11)/'PD      '/, IPL(11)/-1/
      DATA CNL(12)/'DTCONV  '/, IPL(12)/-5/
      DATA CNL(13)/'DTLARG  '/, IPL(13)/-5/
      DATA CNL(14)/'DTSHAL  '/, IPL(14)/-5/
      DATA CNL(15)/'DTVRDF  '/, IPL(15)/-5/
      DATA CNL(16)/'DQCONV  '/, IPL(16)/-8/
      DATA CNL(17)/'DQSHAL  '/, IPL(17)/-8/
      DATA CNL(18)/'DQVRDF  '/, IPL(18)/-8/
      DATA CNL(19)/'DUVRDF  '/, IPL(19)/-5/
      DATA CNL(20)/'DVVRDF  '/, IPL(20)/-5/
      DATA CNL(21)/'DTHSW   '/, IPL(21)/-5/
      DATA CNL(22)/'DTHLW   '/, IPL(22)/-5/
      DATA CNL(23)/'RAIN    '/, IPL(23)/-3/
      DATA CNL(24)/'RAINC   '/, IPL(24)/-3/
      DATA CNL(25)/'DTSFC   '/, IPL(25)/0/
      DATA CNL(26)/'DQSFC   '/, IPL(26)/0/
      DATA CNL(27)/'DUSFC   '/, IPL(27)/-3/
      DATA CNL(28)/'DVSFC   '/, IPL(28)/-3/
      DATA CNL(29)/'RCOV    '/, IPL(29)/0/
      DATA CNL(30)/'RCOVC   '/, IPL(30)/0/
      DATA CNL(31)/'TSKIN   '/, IPL(31)/0/
      DATA CNL(32)/'WETNESS '/, IPL(32)/0/
      DATA CNL(33)/'SNOW    '/, IPL(33)/1/
      DATA CNL(34)/'TG1     '/, IPL(34)/0/
      DATA CNL(35)/'TG2     '/, IPL(35)/0/
      DATA CNL(36)/'TG3     '/, IPL(36)/0/
      DATA CNL(37)/'SFCSW   '/, IPL(37)/0/
      DATA CNL(38)/'SFCLW   '/, IPL(38)/0/
      DATA CNL(39)/'ZORL    '/, IPL(39)/0/
      DATA CNL(40)/'SLMSK   '/, IPL(40)/0/
      DATA CNL(41)/'PS      '/, IPL(41)/-1/
      DATA CNL(42)/'TVS     '/, IPL(42)/0/
      DATA CNL(43)/'QS      '/, IPL(43)/-3/
      DATA CNL(44)/'TS      '/, IPL(44)/0/
      DATA CNL(45)/'RHS     '/, IPL(45)/0/
      DATA CNL(46)/'DUGWD   '/, IPL(46)/-3/
      DATA CNL(47)/'DVGWD   '/, IPL(47)/-3/
      DATA CNL(48)/'UA      '/, IPL(48)/10/
      DATA CNL(49)/'UAP     '/, IPL(49)/10/
      DATA CNL(50)/'DUASFC  '/, IPL(50)/3/
      DATA CNL(51)/'DUAGWD  '/, IPL(51)/3/
      DATA CNL(52)/'DUAMTN  '/, IPL(52)/3/
      DATA CNL(53)/'EP      '/, IPL(53)/0/
      DATA CNL(54)/'CLDWORK '/, IPL(54)/0/
C
      N=ISC8(NL,CNL,CN)
      IPWRCN=IPL(N)
      RETURN
      END
      FUNCTION ISC8(N,CA,CI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ISC8        FIND A CHARACTER*8 STRING.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-03-15
C
C ABSTRACT: INTEGER FUNCTION TO RETURN THE INDEX OF A CHARACTER*8 NAME.
C
C PROGRAM HISTORY LOG:
C   91-03-15  MARK IREDELL
C
C USAGE:    I=ISC8 (N,CA,CI)
C   INPUT ARGUMENT LIST:
C     N        - NUMBER OF STRINGS TO SEARCH
C     CA       - CHARACTER*8 ARRAY TO SEARCH
C     CI       - CHARACTER*8 STRING FOR WHICH TO SEARCH
C
C   OUTPUT ARGUMENT LIST:
C     ISC8     - INDEX OF FIRST STRING FOUND OR 0 IF NOT FOUND
C
C REMARKS: THIS ROUTINE MAY BE INLINED.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
      CHARACTER*8 CA(N),CI
      DO 10 I=1,N
      IF(CA(I).EQ.CI) THEN
        ISC8=I
        RETURN
      ENDIF
10    CONTINUE
      ISC8=0
      RETURN
      END
      SUBROUTINE INDDIA
C  SET LEVELS AND INDICES FOR DIAGNOSTICS
C
C  USE KD AS DEFINED BELOW WHEN USING SUBROUTINE ACCDIA
C
C  KD     CNMGDA
C   1     DTLARG
C   2     DTCONV
C   3     DQCONV
C   4     DTSHAL
C   5     DQSHAL
C   6     DTVRDF
C   7     DUVRDF
C   8     DVVRDF
C   9     DQVRDF
C   10    DTHSW
C   11    DTHLW
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
C  SET IDENTIFICATION INDEX
C
C  LARGE-SCALE HEATING
      CNMGDA( 1)='DTLARG  '
      IPUGDA( 1)=241
      IBMGDA( 1)=0
C  DEEP CONVECTIVE HEATING
      CNMGDA( 2)='DTCONV  '
      IPUGDA( 2)=242
      IBMGDA( 2)=0
C  DEEP CONVECTIVE MOISTENING
      CNMGDA( 3)='DQCONV  '
      IPUGDA( 3)=243
      IBMGDA( 3)=0
C  SHALLOW CONVECTIVE HEATING
      CNMGDA( 4)='DTSHAL  '
      IPUGDA( 4)=244
      IBMGDA( 4)=0
C  SHALLOW CONVECTIVE MOISTENING
      CNMGDA( 5)='DQSHAL  '
      IPUGDA( 5)=245
      IBMGDA( 5)=0
C  VERTICAL DIFFUSION OF TEMPERATURE
      CNMGDA( 6)='DTVRDF  '
      IPUGDA( 6)=246
      IBMGDA( 6)=0
C  VERTICAL DIFFUSION OF ZONAL WIND
      CNMGDA( 7)='DUVRDF  '
      IPUGDA( 7)=247
      IBMGDA( 7)=0
C  VERTICAL DIFFUSION OF MERIDIONAL WIND
      CNMGDA( 8)='DVVRDF  '
      IPUGDA( 8)=248
      IBMGDA( 8)=0
C  VERTICAL DIFFUSION OF MOISTURE
      CNMGDA( 9)='DQVRDF  '
      IPUGDA( 9)=249
      IBMGDA( 9)=0
C  SHORT WAVE RADIATION HEATING
      CNMGDA(10)='DTHSW   '
      IPUGDA(10)=250
      IBMGDA(10)=0
C  LONG WAVE RADIATION HEATING
      CNMGDA(11)='DTHLW   '
      IPUGDA(11)=251
      IBMGDA(11)=0
C
      RETURN
      END
      SUBROUTINE ZERDIA(RHOUR)
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
      DIMENSION GDA(NWGDA*KDGDA)
      PRINT 91,RHOUR
C      OPEN(UNIT=NTGDA,ACCESS='DIRECT',RECL=8*NWGDA*KDGDA)
      GDA=0.
      DO 30 JR=1,NRGDA
      CALL PUTDIA(JR,NWGDA*KDGDA,GDA)
30    CONTINUE
C
      PRINT 92,RHOUR
      GDZ=0.
C
      CALL SYNDIA
C
      RETURN
91    FORMAT(' ZERO FULL PHYSICS TENDENCY DIAGNOSTICS AT FHOUR ',F6.1)
92    FORMAT(' ZERO ZONAL PHYSICS TENDENCY DIAGNOSTICS AT FHOUR ',F6.1)
      END
      SUBROUTINE MLTDIA(FAC)
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
      DIMENSION GDA(NWGDA*KDGDA)
      DO 30 JR=1,NRGDA
      CALL GETDIA(JR,NWGDA*KDGDA,GDA)
      GDA=FAC*GDA
      CALL PUTDIA(JR,NWGDA*KDGDA,GDA)
30    CONTINUE
      GDZ=FAC*GDZ
      CALL SYNDIA
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE ACCDIA(LAN,NLONX,A,DT,KD,GDA)
C  ACCUMULATE DIAGNOSTICS
C
C  LAN IS LOCAL LATITUDE BETWEEN 1 AND  7
C  NLONX IS 1ST DIMENSION OF A
C  A IS ARRAY TO ACCUMULATE
C  DT IS FACTOR BY WHICH TO MULTIPLY BEFORE ACCUMULATING
C  KD IS DIAGNOSTIC NUMBER
C  GDA IS ACCUMULATION ARRAY
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
      DIMENSION A(NLONX, 28 )
      DIMENSION GDA(NWGDA,KDGDA)
C
      IF(KD.GT.0.AND.KD.LE.KDGDA) THEN
      DO 20 K=1, 28
      DO 10 I=1, 384
      IKLAN=I+ 384 *((K-1)+(LAN-1)* 28 )
      GDA(IKLAN,KD)=GDA(IKLAN,KD)+A(I,K)*DT
10    CONTINUE
20    CONTINUE
      ENDIF
C
      RETURN
      END
CFPP$ NOCONCUR R
      SUBROUTINE GETDIA(J,L,A)
C  GET DIAGNOSTICS FROM DISK OR MEMORY
C  CALL SYNDIA OR ANOTHER GETDIA OR PUTDIA TO FINISH I/O
C
C  J IS RECORD NUMBER
C  L IS RECORD LENGTH
C  A IS ARRAY OF LENGTH L TO GET
C
      DIMENSION A(L)
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
c
c       originally save data onto disk
c       now use memory
c       ncpu = 1 is best but not critical for
c       minimal size
C
      A=GDD(J*L-L+1:J*L)
      RETURN
C
c     RC=UNIT(NTGDA)
c     CALL SETPOS(NTGDA,3,(J-1)*L)
c     BUFFERIN(NTGDA,0) (A(1),A(L))
c     RETURN
C
      END
CFPP$ NOCONCUR R
      SUBROUTINE PUTDIA(J,L,A)
C  PUT DIAGNOSTICS ONTO DISK OR MEMORY
C  CALL SYNDIA OR ANOTHER GETDIA OR PUTDIA TO FINISH I/O
C
C  J IS RECORD NUMBER
C  L IS RECORD LENGTH
C  A IS ARRAY OF LENGTH L TO GET
C
      DIMENSION A(L)
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
      GDD(J*L-L+1:J*L)=A
      RETURN
C
c     RC=UNIT(NTGDA)
c     CALL SETPOS(NTGDA,3,(J-1)*L)
c     BUFFEROUT(NTGDA,0) (A(1),A(L))
c     RETURN
C
      END
CFPP$ NOCONCUR R
      SUBROUTINE SYNDIA
C  SYNCHRONIZE DIAGNOSTICS DISK
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
C
      RETURN
C
c     RC=UNIT(NTGDA)
c     RETURN
C
      END
      SUBROUTINE WRIDIA(FHOUR,RHOUR,IDATE,SL,COLRAB,SLMASK,
     1 TSEA,SMSOIL,SHELEG,STSOIL,TG3,CANOPY,ZORL,GESHEM,BENGSH,
     2 DUSFC,DVSFC,DTSFC,DQSFC,
     3 FLUXR,CVAVG,
     3             ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     4 NDG)
C
      INTEGER IDATE(4)
      DIMENSION SL( 28 ),COLRAB( 384 )
CSIB
C...... DOWNWARD SW FLUXES FROM SW SIB RAD..
C     ..   SAVED FOR H2D FILE....
      COMMON/SIBSW/ DFVBR( 256 , 31 ),DFNBR( 256 , 31 ),
     1              DFVDR( 256 , 31 ),DFNDR( 256 , 31 )
CSIB
CLD FORCE
      DIMENSION CFSW( 256 , 31 ,3)
      DIMENSION CFLW( 256 , 31 ,3)
      EQUIVALENCE (CFSW(1,1,1),CFLW(1,1,1))
CLD FORCE
      DIMENSION SLMASK( 384 , 47 ),TSEA( 384 , 47 ),
     1          SMSOIL( 384 , 47 , 2 ),SHELEG( 384 , 47 ),
     2          STSOIL( 384 , 47 , 2 ),CANOPY( 384 , 47 ),
     3          TG3( 384 , 47 ),
     4          ZORL( 384 , 47 ),GESHEM( 384 , 47 )
     5                             ,BENGSH( 384 , 47 )
     6         ,DUSFC( 384 , 47 ),DVSFC( 384 , 47 )
     6         ,DTSFC( 384 , 47 ),DQSFC( 384 , 47 )
      DIMENSION   FLUXR( 256 , 31 ,31)
      DIMENSION   CVAVG( 384 , 47 )
      DIMENSION   ILEFT( 384 ),IRGHT( 384 ),WGTLON( 384 )
      DIMENSION   INSLAT( 47 ),WGTLAT( 47 )
C
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C
C  DIAGNOSTIC INDEXES AND FLAGS
      PARAMETER(KDGDA=11)
      PARAMETER(KDTLARG=1,KDTCONV=2,KDQCONV=3,KDTSHAL=4,KDQSHAL=5,
     &          KDTVRDF=6,KDUVRDF=7,KDVVRDF=8,KDQVRDF=9,
     &          KDTHSW=10,KDTHLW=11)
      CHARACTER*8 CNMGDA
      COMMON /COMGDC/ CNMGDA(KDGDA)
      COMMON /COMGDZ/ GDZ(2, 28 ,KDGDA, 47 )
      PARAMETER(NTGDA=92)
c     PARAMETER(NCPUS= 12 )
      PARAMETER(NCPUS= 1 )
      PARAMETER(NWGDA=(( 384 * 28 * NCPUS -1)/512+1)*512)
      PARAMETER(NRGDA=( 47 -1)/ NCPUS +1)
      COMMON /COMGDA/ IPUGDA(KDGDA),IBMGDA(KDGDA)
      COMMON /COMGDD/ GDD(NWGDA*KDGDA*NRGDA)
      DIMENSION GDA(NWGDA)
C
      PARAMETER(IPRS=1,ITEMP=11,IZNLW=33,IMERW=34,ISPHUM=51,
     $          IPCPR=59,ISNOWD=65,ICLDF=71,ICCLDF=72,
     $          ISLMSK=81,IZORL=83,IALBDO=84,ISOILM=144,ICEMSK=91,
     $          ILHFLX=121,ISHFLX=122,IZWS=124,IMWS=125,IGHFLX=155,
     $          IUSWFC=160,IDSWFC=161,IULWFC=162,IDLWFC=163,
     $          INSWFC=164,INLWFC=165,
     $          IDSWVB=166,IDSWVD=167,IDSWNB=168,IDSWND=169,
     $          ISGLYR=175,ICNPY=145,
     $          IDSWF=204,IDLWF=205,IUSWF=211,IULWF=212,ICPCPR=214)
      PARAMETER(ISFC=1,ITOA=8,IELEV=105,ISGLEV=107,IDBLS=111,I2DBLS=112,
     $          ICOLMN=200,
     $          ILCBL=212,ILCTL=213,ILCLYR=214,
     $          IMCBL=222,IMCTL=223,IMCLYR=224,
     $          IHCBL=232,IHCTL=233,IHCLYR=234)
      PARAMETER(INST=10,IAVG=3,IACC=4)
      PARAMETER(IFHOUR=1,IFDAY=2)
      PARAMETER(LONB= 384 /2,LATB= 47 *2)
      LOGICAL LBM( 384 , 47 )

c     CHARACTER G(200+ 384 * 47 *(16+1)/8)
      CHARACTER G(400+ 384 * 47 *(16+1)/8)
      DIMENSION IDS(255)
      DIMENSION ICLYR(3),ICTL(3),ICBL(3),ITLCF(3)
      DATA ICLYR/IHCLYR,IMCLYR,ILCLYR/
      DATA ICTL /IHCTL ,IMCTL ,ILCTL /
      DATA ICBL /IHCBL ,IMCBL ,ILCBL /
      DATA ITLCF/ITOA,ISFC,ICOLMN/
C
      DIMENSION WORK( 384 , 47 ),SLMSEP( 384 , 47 ),
     1          WORK2( 384 , 47 , 28 +2/ 28 ),
     1          WORKC( 384 ,20),IWORKC( 384 )
C
      REWIND NDG
      CALL IDSDEF(1,IDS)
      IYR=IDATE(4)
      IMO=IDATE(2)
      IDA=IDATE(3)
      IHR=IDATE(1)
      IFTIME=IFHOUR
      IFHR=NINT(FHOUR)
      ITHR=NINT(RHOUR)
      IF(ITHR.GT.255) THEN
        IFTIME=IFDAY
        IFHR=IFHR/24
        ITHR=ITHR/24
      ENDIF
      DHOUR=RHOUR-FHOUR
      IF(DHOUR.GT.0.) THEN
        RTIME=1./(3600.*DHOUR)
      ELSE
        RTIME=0.
      ENDIF
      SLMSEP=SLMASK
      CALL ROWSEP(SLMSEP)
C
      WORK=TSEA
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ITEMP,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      DO J = 1,  47
        DO I = 1,  384
          WORK(I,J) = SMSOIL(I,J,1)
        ENDDO
      ENDDO
      CALL ROWSEP(WORK)
      LBM=SLMSEP.EQ.1.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ISOILM,I2DBLS,0,10,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ISOILM),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      DO J = 1,  47
        DO I = 1,  384
          WORK(I,J) = SMSOIL(I,J,2)
        ENDDO
      ENDDO
      CALL ROWSEP(WORK)
      LBM=SLMSEP.EQ.1.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ISOILM,I2DBLS,10,200,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ISOILM),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=SHELEG
      CALL ROWSEP(WORK)
C      LBM=WORK.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISNOWD,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ISNOWD),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      DO J = 1,  47
        DO I = 1,  384
          WORK(I,J) = STSOIL(I,J,1)
        ENDDO
      ENDDO
      CALL ROWSEP(WORK)
      LBM=SLMSEP.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ITEMP,I2DBLS,0,10,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      DO J = 1,  47
        DO I = 1,  384
          WORK(I,J) = STSOIL(I,J,2)
        ENDDO
      ENDDO
      CALL ROWSEP(WORK)
      LBM=SLMSEP.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ITEMP,I2DBLS,10,200,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=TG3
      CALL ROWSEP(WORK)
      LBM=SLMSEP.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,ITEMP,IDBLS,0,300,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(ITEMP),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=ZORL*1.E-2
      CALL ROWSEP(WORK)
      LBM=SLMSEP.EQ.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            1,IZORL,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,ITHR,0,INST,0,0,ICEN2,IDS(IZORL),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      IF(DHOUR.GT.0.) THEN
      WORK=GESHEM*1.E3*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IPCPR,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPCPR),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=BENGSH*1.E3*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.GT.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ICPCPR,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ICPCPR),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=DTSFC*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ISHFLX,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISHFLX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=DUSFC*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IZWS,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IZWS),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=DVSFC*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IMWS,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IMWS),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      WORK=DQSFC*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ILHFLX,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ILHFLX),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
C
      CALL GGINTF(FLUXR(1,1,17), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME*1.E2
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IALBDO,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IALBDO),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
c	write(*,*) '>>making olr grib'
c	write(*,*) 'fluxr(1,1,*)=',(fluxr(i9,1,1),i9=1,20)

      CALL GGINTF(FLUXR(1,1,1), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IULWF,ITOA,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IULWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,2), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IUSWF,ITOA,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IUSWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,18), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWF,ITOA,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,4), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,3), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IUSWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IUSWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,19), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDLWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDLWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,20), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IULWF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IULWF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      DO 813 K=5,7
        DO 413 J=1, 31
        DO 413 I=1, 256
          IF(FLUXR(I,J,K).GT.0. E 0) THEN
            FLUXR(I,J,K+3) = FLUXR(I,J,K+3) / FLUXR(I,J,K)
            FLUXR(I,J,K+6) = FLUXR(I,J,K+6) / FLUXR(I,J,K)
            FLUXR(I,J,K) = FLUXR(I,J,K) * RTIME
          ENDIF
 413    CONTINUE
        CALL CVINTF(FLUXR(1,1,K),FLUXR(1,1,K+3),FLUXR(1,1,K+6),
     1                   256 , 31 , 31 ,
     2                  WORK2(1,1,1),WORK2(1,1,2),WORK2(1,1,3),
     3                   384 , 47 , 47 ,
     4                  ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,
     5                  WORKC(1,1),WORKC(1,5),WORKC(1,9),WORKC(1,13),
     6                  WORKC(1,17),IWORKC,1,1,1)
        DO 513 J=1, 31
        DO 513 I=1, 256
          IF(FLUXR(I,J,K).GT.0. E 0) THEN
            FLUXR(I,J,K) = FLUXR(I,J,K) / RTIME
            FLUXR(I,J,K+3) = FLUXR(I,J,K+3) * FLUXR(I,J,K)
            FLUXR(I,J,K+6) = FLUXR(I,J,K+6) * FLUXR(I,J,K)
          ENDIF
 513    CONTINUE
        WORK=WORK2(:,:,1)*1.E2
        CALL ROWSEP(WORK)
        LBM=WORK.GT.0.
        CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              0,ICLDF,ICLYR(K-4),0,0,IYR,IMO,IDA,IHR,
     &              IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ICLDF),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
        WORK=WORK2(:,:,2)
        CALL ROWSEP(WORK)
        CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              1,ISGLYR,ICTL(K-4),0,0,IYR,IMO,IDA,IHR,
     &              IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISGLYR),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
        WORK=WORK2(:,:,3)
        CALL ROWSEP(WORK)
        CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &              1,ISGLYR,ICBL(K-4),0,0,IYR,IMO,IDA,IHR,
     &              IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ISGLYR),
     &              G,LG,IERR)
        IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
 813  CONTINUE
      WORK=CVAVG*RTIME*1.E2
      CALL ROWSEP(WORK)
C      LBM=WORK.GT.0.
      CALL GRIBIT(WORK2(1,1,3),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,ICCLDF,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(ICCLDF),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
CLD FORCE
      CALL GGINTF(FLUXR(1,1,21), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IULWFC,ITOA,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IULWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,22), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IUSWFC,ITOA,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IUSWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,25), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDLWFC,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDLWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,23), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWFC,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(FLUXR(1,1,24), 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IUSWFC,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IUSWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
C.....   COMPUTE SW CLOUD FORCING AT TOA (CLD-CLEAR),
C         FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 600 J=1, 31
       DO 600 I=1, 256
        CFSW(I,J,1) = - (FLUXR(I,J,2)-FLUXR(I,J,22))
  600 CONTINUE
C.....    COMPUTE CLOUD FORCING AT SFC (CLD-CLEAR)
C    AGAIN FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 601 J=1, 31
       DO 601 I=1, 256
       CFSW(I,J,2) =-(FLUXR(I,J,3)-FLUXR(I,J,4)
     1                      -(FLUXR(I,J,24)-FLUXR(I,J,23)))
  601 CONTINUE
C.....  FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 602 J=1, 31
       DO 602 I=1, 256
        CFSW(I,J,3) = - (CFSW(I,J,2) - CFSW(I,J,1))
  602 CONTINUE
      DO 603 K=1,3
       CALL GGINTF(CFSW (1,1,K), 256 , 31 , 31 ,
     1             WORK, 384 , 47 , 47 ,1,
     2             ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
       WORK=WORK*RTIME
       CALL ROWSEP(WORK)
C       LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,INSWFC,ITLCF(K),0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(INSWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
  603 CONTINUE
C.....   COMPUTE LW CLOUD FORCING AT TOA (CLD-CLEAR),
C         FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 1600 J=1, 31
       DO 1600 I=1, 256
        CFLW(I,J,1) = - (FLUXR(I,J,1)-FLUXR(I,J,21))
 1600 CONTINUE
C.....    COMPUTE CLOUD FORCING AT SFC (CLD-CLEAR)
C    AGAIN FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 1601 J=1, 31
       DO 1601 I=1, 256
       CFLW(I,J,2) = - (FLUXR(I,J,25)-FLUXR(I,J,19))
 1601 CONTINUE
C.....  FLIP SIGN SO POSITIVE MEANS CLD IS WARMING RELATIVE TO CLEAR
      DO 1602 J=1, 31
       DO 1602 I=1, 256
        CFLW(I,J,3) = - (CFLW(I,J,2) - CFLW(I,J,1))
 1602 CONTINUE
      DO 1603 K=1,3
       CALL GGINTF(CFLW (1,1,K), 256 , 31 , 31 ,
     1             WORK, 384 , 47 , 47 ,1,
     2             ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
       WORK=WORK*RTIME
       CALL ROWSEP(WORK)
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,INLWFC,ITLCF(K),0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(INLWFC),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
 1603 CONTINUE
CLD FORCE
C..
CSIB
      CALL GGINTF(DFVBR, 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWVB,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWVB),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(DFVDR, 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWVD,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWVD),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(DFNBR, 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWNB,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWNB),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
      CALL GGINTF(DFNDR, 256 , 31 , 31 ,
     1            WORK, 384 , 47 , 47 ,1,
     2            ILEFT,IRGHT,WGTLON,INSLAT,WGTLAT,WORK2,1,1,1)
      WORK=WORK*RTIME
      CALL ROWSEP(WORK)
C      LBM=WORK.NE.0.
      CALL GRIBIT(WORK,LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            0,IDSWND,ISFC,0,0,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IDSWND),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
CSIB
C
      DO 750 KD=1,KDGDA
C
      DO 720 JR=1,NRGDA
      KGDA=(JR-1)*KDGDA+KD
      CALL GETDIA(KGDA,NWGDA,GDA)
      CALL SYNDIA
      J2A=(JR-1)* NCPUS +1
      J2B=MIN(JR* NCPUS , 47 )
      IGDA=0
      DO 710 J=J2A,J2B
      DO 710 K=1, 28
      DO 710 I=1, 384
      IGDA=IGDA+1
      WORK2(I,J,K)=GDA(IGDA)*RTIME
710   CONTINUE
720   CONTINUE
      IPU=IPUGDA(KD)
      IBM=IBMGDA(KD)
      DO 730 K=1, 28
      ISL=NINT(SL(K)*1.E4)
      CALL ROWSEP(WORK2(1,1,K))
      IF(IBM.NE.0) LBM=WORK2(:,:,K).NE.0.
      CALL GRIBIT(WORK2(1,1,K),LBM,4,LONB,LATB,16,COLRAB,28,2,ICEN,IGEN,
     &            IBM,IPU,ISGLEV,0,ISL,IYR,IMO,IDA,IHR,
     &            IFTIME,IFHR,ITHR,IAVG,0,0,ICEN2,IDS(IPU),
     &            G,LG,IERR)
      IF(IERR.EQ.0) CALL WRYTE(NDG,LG,G)
730   CONTINUE
C
750   CONTINUE
      ENDIF
C
      RETURN
      END
      SUBROUTINE GWAVE(RHOUR,LASTEP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GWAVE       INTERFACE TO WAVE MODEL.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-12-18
C
C ABSTRACT: THE WAVE MODEL IS INVOKED IF THE PARAMETER DTWAVE > 0 AND
C           THE STRESSES HAVE BEEN ACCUMULATING FOR DTWAVE HOURS.
C           THEN THE LAND-SEA MASK AND STRESSES ARE INTERPOLATED
C           TO THE WAVE GRID AND THE WAVE MODEL IS CALLED.
C           THE STRESSES ARE RESET FOR ACCUMULATING AGAIN.
C           THE WAVE MODEL IS COUPLED IF THE PARAMETER COWAVE > 0.
C           THEN THE ROUGHNESS GENERATED BY THE WAVE MODEL IS
C           INTERPOLATED BACK TO THE MODEL PHYSICS GRID.
C
C PROGRAM HISTORY LOG:
C   91-12-18  MARK IREDELL
C
C USAGE:    CALL GWAVE (RHOUR)
C   INPUT ARGUMENT LIST:
C     RHOUR    - CURRENT FORECAST HOUR
C
C   SUBPROGRAMS CALLED:
C     FLIP1    - TRANSFORM FIELD TO NEW STARTING LONGITUDE
C     FLIP2    - TRANSFORM FIELD TO REVERSE LATITUDE ORDER
C     GG2LL    - INTERPOLATE GAUSSIAN GRID TO LAT-LON GRID
C     LL2GG    - INTERPOLATE LAT-LON GRID TO GAUSSIAN GRID
C     ROWSEP   - SEPARATE LONGITUDES IN GAUSSIAN GRID
C     ROW1NS   - CONCATENATE LONGITUDES IN GAUSSIAN GRID
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C-WAV LOGICAL LASTEP
C.................................................................
C................BEGIN TWOLOOP(COMFIBM)........................
C....
C    VERSION WITH STACKED TRANSFORMS
C....
       COMMON RELVOR( 28 ),ABSVOR( 28 ),EPS( 4032 ),EPSI( 4032 )
       COMMON       GZ( 4033 ),
     *             ZEM( 4033 , 28 ),
     *              ZE( 4033 , 28 ),
     *              DI( 4033 , 28 ),
     *              TE( 4033 , 28 ),
     *              RQ( 4033 , 28 ),
     *          DPDLAM( 4033 ),
     *          DPDPHI( 4033 ),
     *             ULN( 4033 , 28 ),
     *             VLN( 4033 , 28 ),
     *               Q( 4033 ),
     *              RM( 4033 , 28 ),
     *               Z( 4033 )
       COMMON        Y( 4033 , 28 ),
     *              RT( 4033 , 28 ),
     *               W( 4033 , 28 ),
     *               X( 4033 , 28 ),
     *             RQ0( 4033 , 28 ),
     *             DIM( 4033 , 28 ),
     *             TEM( 4033 , 28 ),
     *              QM( 4033 )
       COMMON
     * COLRAD( 47 ),WGT( 47 ),WGTCS( 47 ),RCS2( 47 ),
     * COLRAB( 47 ),WGB( 47 ),WGBCS( 47 ),RBS2( 47 ),
     * SINLAT( 47 ),SINLAB( 47 ),COSLAB( 47 )
C....
      COMMON SLMSK( 384 , 47 ),HPRIME( 384 , 47 ),
     * SWH( 384 , 28 , 47 ),HLW( 384 , 28 , 47 ),
     * SFCNSW( 384 , 47 ),SFCDLW( 384 , 47 ),
     * COSZEN( 384 , 47 ),XLON( 192 ),
     * SDEC,CDEC,SLAG,SOLHR,CLSTP,
     * CV( 384 , 47 ),CVT( 384 , 47 ),CVB( 384 , 47 )
      COMMON TSFLW( 384 , 47 )
C....
      COMMON DUSFC( 384 , 47 ), DVSFC( 384 , 47 ),
     *       DTSFC( 384 , 47 ), DQSFC( 384 , 47 ),
     *      DLWSFC( 384 , 47 ),DSWSFC( 384 , 47 ),
     *      GESHEM( 384 , 47 ), TSEA( 384 , 47 )
      COMMON F10M( 384 , 47 )
      COMMON DUGWD( 384 , 47 ),DVGWD( 384 , 47 )
      COMMON PSMEAN( 384 , 47 )
      COMMON DTFLUX
C....
      COMMON  TG3( 384 , 47 ),ZORL( 384 , 47 ),
     *        PLANTR( 384 , 47 )
C 05/31/96 by MK
      COMMON  SNOWMELT( 384 , 47 ),SNOWFALL( 384 , 47 ),
     *        SNOWEVAP( 384 , 47 )
C....
      COMMON  SHELEG( 384 , 47 ),BENGSH( 384 , 47 ),
     *        GFLUX( 384 , 47 ),SLRAD( 384 )
      COMMON  SMC( 384 , 47 , 2 ),STC( 384 , 47 , 2 )
      COMMON  CANOPY( 384 , 47 ),RUNOFF( 384 , 47 )
      COMMON  TMPMAX( 384 , 47 ),TMPMIN( 384 , 47 )
      COMMON  EP( 384 , 47 ),CLDWRK( 384 , 47 ), idate(4)
C....
C....
C.....BEGIN COMVER................................................
	common /VERFID/dtcvav,dtlwav,filta,filtb,dk,tk,percut
	common /VERFID/dtswav,cowave,dtwave
      COMMON/VERFID/AM( 28 , 28 ),HM( 28 , 28 ),TM( 28 , 28 ),
     O              BM( 28 , 28 ),CM( 28 , 28 ),SPDMAX( 28 ),
     1 SI( 29 ),SL( 28 ),DEL( 28 ),RDEL2( 28 ),RMSDOT( 27 ),
     2 CI( 29 ),CL( 28 ),TOV( 28 ),   SV( 28 ),   RPI( 27 ),
     3 P1( 28 ),P2( 28 ), H1( 28 ),   H2( 28 ),RPIREC( 27 ),
     4    UQG( 384 , 28 ),VQG( 384 , 28 ), EK( 384 , 28 ),
     5      B( 384 , 28 ),TAU( 384 , 28 ),  A( 384 , 28 ),
     6      F( 384 , 28 ),  G( 384 , 28 ),RTG( 384 , 28 ),
     7   DLAX( 384 ),
C>YH 8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     8   THOUR,DELTIM,KDT,INISTP,SL1,Z00,FHOUR,SHOUR,LIMLOW,
     9   NFLIP,NFLOP,NR2DDA,N50UFL,NUMSUM,NUMMAX
C.......SOF COMVER................................................
C....
C....
      COMMON/COMBIT/SNNP1( 4032 ),LAB(4),IFIN,ICEN,IGEN,ICEN2
      CHARACTER*8 LAB
C....
C....
      COMMON /RADIAG/ wgtlon(384), wgtlat(47), FLUXR( 256 , 31 ,31)
C     EQUIVALENCE (FFLWUP(1,1),FLUXR(1,1,1)),(FFSWUP(1,1),FLUXR(1,1,2)),
C    1            (FSSWUP(1,1),FLUXR(1,1,3)),(FSSWDN(1,1),FLUXR(1,1,4)),
C    2            (CCHI  (1,1),FLUXR(1,1,5)),(CCMID (1,1),FLUXR(1,1,6)),
C    3            (CCLO  (1,1),FLUXR(1,1,7)),(CTPH  (1,1),FLUXR(1,1,8)),
C    4         (CTPM  (1,1),FLUXR(1,1,9)), (CTPL  (1,1),FLUXR(1,1,10)),
C    5         (CBTH  (1,1),FLUXR(1,1,11)),(CBTM  (1,1),FLUXR(1,1,12)),
C    6         (CBTL  (1,1),FLUXR(1,1,13)),(CTHTMP(1,1),FLUXR(1,1,14)),
C    7         (CTMTMP(1,1),FLUXR(1,1,15)),(CTLTMP(1,1),FLUXR(1,1,16)),
C    8         (ALBDO (1,1),FLUXR(1,1,17)),(FFSWDN(1,1),FLUXR(1,1,18)),
C    9         (SLWDN (1,1),FLUXR(1,1,19)),(SLWUP (1,1),FLUXR(1,1,20)),
C    1         (FLWUPC(1,1),FLUXR(1,1,21)),(FSWUPC(1,1),FLUXR(1,1,22)),
C    2         (SSWDNC(1,1),FLUXR(1,1,23)),(SSWUPC(1,1),FLUXR(1,1,24)),
C    3         (SLWDNC(1,1),FLUXR(1,1,25))
      COMMON /RADIAG/ CVAVG( 384 , 47 )
      COMMON /RADIAG/ ILEFT( 384 ),IRGHT( 384 )
      COMMON /RADIAG/ INSLAT( 47 )
C.............................................................
C.................SOF  TWOLOOP(COMFIBM)........................
C................................................................
C-WAV COMMON/COMWAV/ HSTR,USTRGG( 384 , 47 ),VSTRGG( 384 , 47 )
C-WAV COMMON /BLOCK2/ ISTEP,KPOINT,KSTEP1,KSTEP2,KWAX,LAT,LLAT,LONG,LNP
C-WAV$  ,MLAT,ZM,DH,QSTART,QSTEP1,Q11OUT,Q12OUT, MARCH,QINIT
C-WAV EXTERNAL FFAC
C-WAV INTEGER ZM,DH
C-WAV LOGICAL QINIT
C-WAV PARAMETER(LONB2= 384 ,LATB2= 47 ,LONB=LONB2/2,LATB=LATB2*2)
C-WAV PARAMETER(IWAVE=144,JWAVE=73,I1=11,I2=IWAVE+2-I1,J1=9,J2=67)
C-WAV DIMENSION SMSKGG(LONB2,LATB2),ZORLGG(LONB2,LATB2)
C-WAV DIMENSION SMSKLL(IWAVE,JWAVE),ZORLLL(IWAVE,JWAVE)
C-WAV DIMENSION USTRLL(IWAVE,JWAVE),VSTRLL(IWAVE,JWAVE)
C-WAV LOGICAL LMSKLL(IWAVE,JWAVE)
C-WAV SAVE LMSKLL,ZORLLL
C-WAV DATA IONCE/0/
C-WAV DATA SLCUT/0.75/,ZORLFL/0.01/,ZORLMX/0.2/
C-----------------------------------------------------------------------
C-WAV DTW=RHOUR-HSTR
C-WAV IF(LASTEP.OR.DTW.GT.DTWAVE-0.5*DELTIM/3600.) THEN
C  INTERPOLATE SEA-LAND MASK AND ROUGHNESS
C-WAV   IF(IONCE.EQ.0) THEN
C-WAV     IONCE=1
C-WAV     DO 10 J=1,LATB2
C-WAV     DO 10 I=1,LONB2
C-WAV       SMSKGG(I,J)=MIN(SLMSK(I,J),1.)
C-WAV       IF(SLMSK(I,J).EQ.0.) THEN
C-WAV         ZORLGG(I,J)=ZORL(I,J)
C-WAV       ELSE
C-WAV         ZORLGG(I,J)=ZORLFL
C-WAV       ENDIF
10        CONTINUE
C-WAV     CALL ROWSEP(SMSKGG)
C-WAV     CALL GG2LL(COLRAB,LONB,LATB,SMSKGG,IWAVE,JWAVE,SMSKLL)
C-WAV     CALL FLIP1(I1,IWAVE,JWAVE,SMSKLL)
C-WAV     CALL FLIP2(IWAVE,JWAVE,SMSKLL)
C-WAV     DO 20 J=1,JWAVE
C-WAV     DO 20 I=1,IWAVE
C-WAV       LMSKLL(I,J)=J.GE.J1.AND.J.LE.J2.AND.SMSKLL(I,J).LT.SLCUT
20        CONTINUE
C-WAV     CALL ROWSEP(ZORLGG)
C-WAV     CALL GG2LL(COLRAB,LONB,LATB,ZORLGG,IWAVE,JWAVE,ZORLLL)
C-WAV     CALL FLIP1(I1,IWAVE,JWAVE,ZORLLL)
C-WAV     CALL FLIP2(IWAVE,JWAVE,ZORLLL)
C-WAV   ENDIF
C  INTERPOLATE STRESSES
C-WAV   CALL ROWSEP(USTRGG)
C-WAV   CALL GG2LL(COLRAB,LONB,LATB,USTRGG,IWAVE,JWAVE,USTRLL)
C-WAV   CALL FLIP1(I1,IWAVE,JWAVE,USTRLL)
C-WAV   CALL FLIP2(IWAVE,JWAVE,USTRLL)
C-WAV   CALL ROWSEP(VSTRGG)
C-WAV   CALL GG2LL(COLRAB,LONB,LATB,VSTRGG,IWAVE,JWAVE,VSTRLL)
C-WAV   CALL FLIP1(I1,IWAVE,JWAVE,VSTRLL)
C-WAV   CALL FLIP2(IWAVE,JWAVE,VSTRLL)
C  NORMALIZE STRESSES
C-WAV   RTIME=1./(3600.*DTW)
C-WAV   DO 30 J=1,JWAVE
C-WAV   DO 30 I=1,IWAVE
C-WAV     USTRLL(I,J)=USTRLL(I,J)*RTIME
C-WAV     VSTRLL(I,J)=VSTRLL(I,J)*RTIME
30      CONTINUE
C  INVOKE WAVE MODEL
C-WAV   QINIT=LASTEP
C-WAV   IYMDH=1000000*IDATE(4)+10000*IDATE(2)+100*IDATE(3)+IDATE(1)
C-WAV   PRINT 930,IYMDH,RHOUR,HSTR
C-WAV   CALL WAVE(IYMDH,HSTR,DTW,USTRLL(1,J1),VSTRLL(1,J1),LMSKLL(1,J1),
C-WAV&            ZORLLL(1,J1))
C  INTERPOLATE ROUGHNESS
C-WAV   IF(COWAVE.GT.0.) THEN
C-WAV     DO 40 J=1,JWAVE
C-WAV     DO 40 I=1,IWAVE
C-WAV       IF(.NOT.LMSKLL(I,J).OR.ZORLLL(I,J).GT.ZORLMX)
C-WAV&        ZORLLL(I,J)=ZORLFL
40        CONTINUE
C-WAV     CALL FLIP1(I2,IWAVE,JWAVE,ZORLLL)
C-WAV     CALL FLIP2(IWAVE,JWAVE,ZORLLL)
C-WAV     CALL LL2GG(COLRAB,IWAVE,JWAVE,ZORLLL,LONB,LATB,ZORLGG)
C-WAV     CALL ROW1NS(ZORLGG)
C-WAV     DO 50 J=1,LATB2
C-WAV     DO 50 I=1,LONB2
C-WAV       IF(SLMSK(I,J).EQ.0.) ZORL(I,J)=ZORLGG(I,J)
50        CONTINUE
C-WAV     CALL FLIP1(I1,IWAVE,JWAVE,ZORLLL)
C-WAV     CALL FLIP2(IWAVE,JWAVE,ZORLLL)
C-WAV     PRINT 950
C-WAV   ENDIF
C  INITIALIZE STRESSES
C-WAV   HSTR=RHOUR
C-WAV   DO 60 J=1,LATB2
C-WAV   DO 60 I=1,LONB2
C-WAV     USTRGG(I,J)=0.
C-WAV     VSTRGG(I,J)=0.
60      CONTINUE
C-WAV ENDIF
C-----------------------------------------------------------------------
      RETURN
930   FORMAT(' WAVE MODEL CALLED FOR DATE ',I8,F8.1,'   FROM',F8.1)
950   FORMAT(' WAVE MODEL ROUGHNESS USED  ',I8,F8.1)
      END
      SUBROUTINE GG2LL(CGG,IN,JN,FN,IO,JO,FO)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    GG2LL       INTERPOLATE GAUSSIAN TO LAT-LON GRID.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-12-18
C
C ABSTRACT: A HORIZONTAL FIELD IS LINEARLY INTERPOLATED
C           FROM A GAUSSIAN GRID TO A LATITUDE-LONGITUDE GRID.
C           THE GAUSSIAN COLATITUDES MUST BE PASSED.
C           BOTH INPUT AND OUTPUT FIELDS MUST RUN FIRST EASTWARD
C           THEN SOUTHWARD AND START AT THE SAME LONGITUDE.
C
C PROGRAM HISTORY LOG:
C   91-12-18  MARK IREDELL
C
C USAGE:    CALL GG2LL(CGG,IN,JN,FN,IO,JO,FO)
C   INPUT ARGUMENT LIST:
C     CGG      - JN/2 GAUSSIAN COLATITUDES IN RADIANS
C     IN       - INPUT LONGITUDE (FIRST) DIMENSION
C     JN       - OUTPUT LATITUDE (SECOND) DIMENSION
C     FN       - FIELD TO INTERPOLATE
C     IO       - OUTPUT LONGITUDE (FIRST) DIMENSION
C     JO       - OUTPUT LATITUDE (SECOND) DIMENSION
C
C   OUTPUT ARGUMENT LIST:
C     FO       - INTERPOLATED FIELD
C
C REMARKS: THE CURRENT CODE IS OPTIMIZED FOR MULTIPROCESSING
C          OVER NCPU CPUS ON THE CRAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
c     PARAMETER(NCPU= 12 )
      PARAMETER(NCPU= 1 )
C-WAV PARAMETER(PI=3.141593)
C-WAV DIMENSION CGG(*),FN(IN,JN),FO(IO,JO)
C-WAV DIMENSION CN(JN),CO(JO)
C
C-WAV JGG=JN
C-WAV DO 10 J=1,JGG/2
C-WAV   CN(J)=CGG(J)
10    CONTINUE
C-WAV DO 20 J=JGG/2+1,JGG
C-WAV   CN(J)=PI-CGG(JGG+1-J)
20    CONTINUE
C-WAV JLL=JO
C-WAV CF=PI/(JLL-1)
C-WAV DO 30 J=1,JLL
C-WAV   CO(J)=CF*(J-1)
30    CONTINUE
C
C-WAV XF=FLOAT(IN)/FLOAT(IO)
      DO 60 N=1,NCPU
C-WAV J1=1
C-WAV J2=2
C-WAV DO 60 J=(N-1)*JO/NCPU+1,MIN(N*JO/NCPU,JO)
40      CONTINUE
C-WAV   IF(CO(J).GT.CN(J2).AND.J2.LT.JN) THEN
C-WAV     J1=J2
C-WAV     J2=J2+1
C-WAV     GOTO 40
C-WAV   ENDIF
C-WAV   WJ1=(CN(J2)-CO(J))/(CN(J2)-CN(J1))
C-WAV   WJ2=1.-WJ1
C-WAV   DO 50 I=1,IO
C-WAV     X=XF*(I-1)+1.
C-WAV     I1=X
C-WAV     I2=MOD(I1,IN)+1
C-WAV     WI2=X-I1
C-WAV     WI1=1.-WI2
C-WAV     FO(I,J)=WJ1*(WI1*FN(I1,J1)+WI2*FN(I2,J1))
C-WAV&           +WJ2*(WI1*FN(I1,J2)+WI2*FN(I2,J2))
50      CONTINUE
60    CONTINUE
      RETURN
      END
      SUBROUTINE LL2GG(CGG,IN,JN,FN,IO,JO,FO)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    LL2GG       INTERPOLATE LAT-LON TO GAUSSIAN GRID.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-12-18
C
C ABSTRACT: A HORIZONTAL FIELD IS LINEARLY INTERPOLATED
C           FROM A LATITUDE-LONGITUDE GRID TO A GAUSSIAN GRID.
C           THE GAUSSIAN COLATITUDES MUST BE PASSED.
C           BOTH INPUT AND OUTPUT FIELDS MUST RUN FIRST EASTWARD
C           THEN SOUTHWARD AND START AT THE SAME LONGITUDE.
C
C PROGRAM HISTORY LOG:
C   91-12-18  MARK IREDELL
C
C USAGE:    CALL LL2GG(CGG,IN,JN,FN,IO,JO,FO)
C   INPUT ARGUMENT LIST:
C     CGG      - JN/2 GAUSSIAN COLATITUDES IN RADIANS
C     IN       - INPUT LONGITUDE (FIRST) DIMENSION
C     JN       - OUTPUT LATITUDE (SECOND) DIMENSION
C     FN       - FIELD TO INTERPOLATE
C     IO       - OUTPUT LONGITUDE (FIRST) DIMENSION
C     JO       - OUTPUT LATITUDE (SECOND) DIMENSION
C
C   OUTPUT ARGUMENT LIST:
C     FO       - INTERPOLATED FIELD
C
C REMARKS: THE CURRENT CODE IS OPTIMIZED FOR MULTIPROCESSING
C          OVER NCPU CPUS ON THE CRAY.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
c     PARAMETER(NCPU= 12 )
      PARAMETER(NCPU= 1 )
C-WAV PARAMETER(PI=3.141593)
C-WAV DIMENSION CGG(*),FN(IN,JN),FO(IO,JO)
C-WAV DIMENSION CN(JN),CO(JO)
C
C-WAV JGG=JO
C-WAV DO 10 J=1,JGG/2
C-WAV   CO(J)=CGG(J)
10    CONTINUE
C-WAV DO 20 J=JGG/2+1,JGG
C-WAV   CO(J)=PI-CGG(JGG+1-J)
20    CONTINUE
C-WAV JLL=JN
C-WAV CF=PI/(JLL-1)
C-WAV DO 30 J=1,JLL
C-WAV   CN(J)=CF*(J-1)
30    CONTINUE
C
C-WAV XF=FLOAT(IN)/FLOAT(IO)
      DO 60 N=1,NCPU
C-WAV J1=1
C-WAV J2=2
C-WAV DO 60 J=(N-1)*JO/NCPU+1,MIN(N*JO/NCPU,JO)
40      CONTINUE
C-WAV   IF(CO(J).GT.CN(J2).AND.J2.LT.JN) THEN
C-WAV     J1=J2
C-WAV     J2=J2+1
C-WAV     GOTO 40
C-WAV   ENDIF
C-WAV   WJ1=(CN(J2)-CO(J))/(CN(J2)-CN(J1))
C-WAV   WJ2=1.-WJ1
C-WAV   DO 50 I=1,IO
C-WAV     X=XF*(I-1)+1.
C-WAV     I1=X
C-WAV     I2=MOD(I1,IN)+1
C-WAV     WI2=X-I1
C-WAV     WI1=1.-WI2
C-WAV     FO(I,J)=WJ1*(WI1*FN(I1,J1)+WI2*FN(I2,J1))
C-WAV&           +WJ2*(WI1*FN(I1,J2)+WI2*FN(I2,J2))
50      CONTINUE
60    CONTINUE
      RETURN
      END
CFPP$ SKIP R
      SUBROUTINE FLIP1(I1,IM,JM,F)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    FLIP1       TRANSFORM TO NEW STARTING LONGITUDE.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-12-18
C
C ABSTRACT: A HORIZONTAL FIELD IS TRANSFORMED BY STARTING ITS INDEXING
C           AT A NEW LONGITUDE.
C
C PROGRAM HISTORY LOG:
C   91-12-18  MARK IREDELL
C
C USAGE:    CALL FLIP1(I1,IM,JM,F)
C   INPUT ARGUMENT LIST:
C     I1       - LONGITUDE INDEX OF INPUT FIELD
C                AT WHICH TO START OUTPUT FIELD
C     IM       - LONGITUDE (FIRST) DIMENSION
C     JM       - LATITUDE (SECOND) DIMENSION
C     F        - FIELD TO TRANSFORM
C
C   OUTPUT ARGUMENT LIST:
C     F        - TRANSFORMED FIELD
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C-WAV DIMENSION F(IM,JM),F1(IM)
      DO 30 J=1,JM
C-WAV   DO 10 I=1,IM
C-WAV     F1(I)=F(MOD(I+I1-2,IM)+1,J)
10      CONTINUE
C-WAV   DO 20 I=1,IM
C-WAV     F(I,J)=F1(I)
20      CONTINUE
30    CONTINUE
      RETURN
      END
CFPP$ SKIP R
      SUBROUTINE FLIP2(IM,JM,F)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    FLIP2       REVERSE LATITUDE ORDER.
C   PRGMMR: MARK IREDELL     ORG: W/NMC23    DATE: 91-12-18
C
C ABSTRACT: A HORIZONTAL FIELD IS TRANSFORMED BY REVERSING ITS INDEXING
C           IN LATITUDE.
C
C PROGRAM HISTORY LOG:
C   91-12-18  MARK IREDELL
C
C USAGE:    CALL FLIP2(IM,JM,F)
C   INPUT ARGUMENT LIST:
C     IM       - LONGITUDE (FIRST) DIMENSION
C     JM       - LATITUDE (SECOND) DIMENSION
C     F        - FIELD TO TRANSFORM
C
C   OUTPUT ARGUMENT LIST:
C     F        - TRANSFORMED FIELD
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY YMP.
C
C$$$
C-WAV DIMENSION F(IM,JM)
      DO 20 J=1,JM/2
C-WAV   DO 10 I=1,IM
C-WAV     F1=F(I,J)
C-WAV     F(I,J)=F(I,JM+1-J)
C-WAV     F(I,JM+1-J)=F1
10      CONTINUE
20    CONTINUE
      RETURN
      END
      SUBROUTINE DIABH(N1,ND,NSTEP,INI,NANL)
      PRINT 200
  200 FORMAT ( ' HELLO FROM STUB DIABH ............... ')
      RETURN
      END
      SUBROUTINE DOINI(NANL,NANLH,IFGES,NGEST,NGESH,NGESTH,MODS,NITER,
     1 NF,INI)
      PRINT 200
  200 FORMAT ( ' HELLO FROM STUB DOINI ............... ')
      RETURN
      END
      SUBROUTINE GEST(N1,NG,NANL)
      PRINT 200
  200 FORMAT ( ' HELLO FROM STUB GEST ................ ')
      RETURN
      END
