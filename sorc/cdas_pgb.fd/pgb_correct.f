C-----------------------------------------------------------------------
      PROGRAM PGB
C$$$  MAIN PROGRAM DOCUMENTATION BLOCK
C
C MAIN PROGRAM:  PGB         TRANSFORM SIGMA TO PRESSURE GRIB
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: PROGRAM TRANSFORMS SIGMA INPUT TO PRESSURE GRIB OUTPUT.
C   THE OUTPUT CONSISTS OF DATA ON A REGULAR LAT/LON GRID.
C   GEOPOTENTIAL HEIGHT, WIND COMPONENTS, RELATIVE HUMIDITY,
C   TEMPERATURE, VERTICAL VELOCITY AND ABSOLUTE VORTICITY
C   ARE OUTPUT ON MANDATORY PRESSURES LEVELS.
C   CONSTANT PRESSURE THICKNESS FIELDS ARE ALSO OUTPUT.
C   CONSTANT HEIGHT ABOVE SEA LEVEL FIELDS ARE OUTPUT TOO.
C   ALSO OUTPUT ARE SUNDRY FIELDS CONSISTING OF
C   PRECIPITABLE WATER, SEA LEVEL PRESSURE, TWO LIFTED INDICES,
C   SURFACE OROGRAPHY, TEMPERATURE, PRESSURE, AND PRESSURE TENDENCY,
C   TROPOPAUSE TEMPERATURE, PRESSURE, WIND COMPONENTS AND SHEAR,
C   AND MAXWIND LEVEL TEMPERATURE, PRESSURE AND WIND COMPONENTS.
C   FIRST NAMPGB NAMELIST IS READ TO DETERMINE OUTPUT FORMAT.
C   THEN A SIGMA (GRID OR SPECTRAL) FILE IS READ FROM UNIT 11 AND
C   THE PROGRAM PRODUCES AND WRITES A PRESSURE GRIB1 FILE TO UNIT 51.
C   THEN A SIGMA FILE IS READ FROM UNIT 12 AND
C   THE PROGRAM PRODUCES AND WRITES A PRESSURE GRIB1 FILE TO UNIT 52.
C   THE PROGRAM CONTINUES UNTIL AN EMPTY INPUT FILE IS ENCOUNTERED.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C NAMELISTS:
C   NAMPGB:      PARAMETERS DETERMINING OUTPUT FORMAT
C     IO         NUMBER OF LONGITUDE POINTS (DEFAULT: SET BY IJKDEF)
C     JO         NUMBER OF LATITUDE POINTS (DEFAULT: SET BY IJKDEF)
C     KO         NUMBER OF PRESSURE LEVELS (DEFAULT: SET BY IJKDEF)
C     PO(KO)     PRESSURES IN MB (DEFAULT: MANDATORY LEVELS)
C     KTT        NUMBER OF PRESSURE THICKNESS LAYERS OUTPUT (DEFAULT: 1)
C     KT         NUMBER OF PRESSURE THICKNESS LAYERS COMPUTED
C                (DEFAULT: 6)
C     PT         PRESSURE THICKNESS IN MB (DEFAULT: 30.)
C     KZZ        NUMBER OF CONSTANT HEIGHT LEVELS (DEFAULT: 3)
C     ZZ(KZZ)    CONSTANT HEIGHTS IN M (DEFAULT: 1829.,2743.,3658.)
C     NCPUS      NUMBER OF PARALLEL PROCESSES (DEFAULT: ENVIRONMENT)
C     MXBIT      MAXIMUM NUMBER OF BITS TO PACK DATA (DEFAULT: 16)
C     IDS(255)   DECIMAL SCALING OF PACKED DATA
C                (DEFAULT: SET BY SUBPROGRAM IDSDEF)
C     POT(255)   HIGHEST PRESSURE IN MB TO OUTPUT DATA
C                AS A FUNCTION OF PARAMETER INDICATOR
C                (DEFAULT: 300 FOR RH, 100 FOR OMEGA, 0 OTHERWISE)
C     ICEN       FORECAST CENTER IDENTIFIER (DEFAULT: 7)
C     ICEN2      FORECAST SUB-CENTER IDENTIFIER (DEFAULT: 0)
C     IGEN       MODEL GENERATING CODE (DEFAULT: FROM SIGMA FILE)
C     IENST      INTEGER ENSEMBLE TYPE (DEFAULT: 1)
C     IENSI      INTEGER ENSEMBLE IDENTIFICATION (DEFAULT: 1)
C
C INPUT FILES:
C   UNIT   11-?  SIGMA FILE(S)
C
C OUTPUT FILES:
C   UNIT   51-?  PRESSURE GRIB1 FILE(S)
C
C SUBPROGRAMS CALLED:
C   GNCPUS       GET ENVIRONMENT NUMBER OF PARALLEL PROCESSES
C   IDSDEF       SET DEFAULTS FOR DECIMAL SCALING
C   GPVS         COMPUTE SATURATED VAPOR PRESSURE TABLE
C   GTDP         COMPUTE DEWPOINT TEMERATURE TABLE
C   GTHE         COMPUTE EQUIVALENT POTENTIAL TEMPERATURE TABLE
C   GTMA         COMPUTE MOIST ADIABAT TABLE
C   RDSGH        READ A SIGMA FILE HEADER
C   IJKDEF       SET DEFAULTS FOR OUTPUT RESOLUTION
C   PGB1         TRANSFORM ONE SIGMA FILE TO PRESSURE GRIB
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(LEVMAX=100,KOMAX=100)
      DIMENSION IDATE(4)
      DIMENSION SI(LEVMAX+1),SL(LEVMAX)
      DIMENSION PO(KOMAX),ZZ(KOMAX)
      DIMENSION IDS(255),POT(255)
	character pgbnam*8
      NAMELIST/NAMPGB/ IO,JO,KO,PO,KTT,KT,PT,KZZ,ZZ,NCPUS,MXBIT,IDS,POT,
     &                 ICEN,ICEN2,IGEN,IENST,IENSI
      DATA IO/0/,JO/0/,KO/0/
      DATA PO/1000.,925.,850.,700.,500.,400.,300.,250.,200.,150.,100.,
     &        70.,50.,30.,20.,10.,7.,5.,3.,2.,1.,0.4,78*0./
C     DATA PO/1000.,950.,925.,900.,850.,800.,750.,700.,650.,600.,550.,
C    &        500.,450.,400.,350.,300.,250.,200.,150.,100.,
C    &        70.,50.,30.,20.,10.,7.,5.,3.,2.,1.,0.4,69*0./
      DATA KTT/1/,KT/6/,PT/30./
      DATA KZZ/3/,ZZ/1829.,2743.,3658.,97*0./
      DATA NCPUS/1/,MXBIT/16/
      DATA IDS/255*0/,POT/255*0./
      DATA ICEN/7/,ICEN2/0/,IGEN/0/,IENST/1/,IENSI/1/
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET DEFAULTS AND READ NAMELIST
c     CALL W3LOG('$S','$M')
      CALL GNCPUS(NCPUS)
      CALL IDSDEF(2,IDS)
      POT(52)=300.
      POT(39)=100.
      READ(*,NAMPGB,END=5)
5     CONTINUE
      IGEN0=IGEN
      CALL GPVS
      CALL GTDP
      CALL GTHE
      CALL GTMA
      NSIG=10
      NPGB=50
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  READ FIRST SIGMA HEADER RECORD
      NSIG=NSIG+1
      CALL RDSGH(NSIG,FHOUR,IDATE,SI,SL,
     &           JCAP,LEVS,ITRUN,IORDER,IREALF,IGEN1,
     &           LATB2,LONB2,LONB22,NFLDS,NWHDR,NWFLD,
     &           NC,NCTOP,IRET)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TRANSFORM TO PRESSURE GRIB AND ATTEMPT TO READ NEXT SIGMA HEADER
      DOWHILE(IRET.EQ.0)
        NPGB=NPGB+1
        IF(IGEN0.EQ.0) IGEN=IGEN1
        CALL IJKDEF(JCAP,LEVS,IO,JO,KO)
        IYMDH=IDATE(4)*1000000+IDATE(2)*10000+IDATE(3)*100+IDATE(1)
        PRINT *,' POSTING DATE ',IYMDH,'+',NINT(FHOUR),
     &          '   SIGMA SPECTRAL T',JCAP,' L',LEVS,
     &          '   PRESSURE GRID ',IO,'*',JO,'*',KO

        write(pgbnam,'(a,i2)') 'fort.', npgb
        call baopen(npgb,pgbnam,iret)
        if (iret.ne.0) then
           write(*,*) 'error to baopen=',iret
           write(*,*) ' filename=',pgbnam
           stop 8
        endif

        CALL PGB1(FHOUR,IDATE,
     &            NSIG,JCAP,NC,NCTOP,LEVS,NFLDS,SI,SL,
     &            IO,JO,KO,PO,KTT,KT,PT,KZZ,ZZ,
     &            NPGB,NCPUS,MXBIT,IDS,POT,
     &            ICEN,ICEN2,IGEN,IENST,IENSI)
        CLOSE(NSIG)
        CLOSE(NPGB)
        NSIG=NSIG+1
	write(*,*) '>>rdsgh nsig=',nsig
        CALL RDSGH(NSIG,FHOUR,IDATE,SI,SL,
     &             JCAP,LEVS,ITRUN,IORDER,IREALF,IGEN1,
     &             LATB2,LONB2,LONB22,NFLDS,NWHDR,NWFLD,
     &             NC,NCTOP,IRET)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c     CALL W3LOG('$E')
      STOP
      END
C-----------------------------------------------------------------------
      SUBROUTINE PGB1(FHOUR,IDATE,
     &                NSIG,JCAP,NC,NCTOP,LEVS,NFLDS,SI,SL,
     &                IO,JO,KO,PO,KTT,KT,PT,KZZ,ZZ,
     &                NPGB,NCPUS,MXBIT,IDS,POT,
     &                ICEN,ICEN2,IGEN,IENST,IENSI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: PGB1           TRANSFORMS SIGMA TO PRESSURE GRIB
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: TRANSFORMS A SIGMA SPECTRAL FILE TO PRESSURE GRIB1.
C   ONE LATITUDE SLICE AT A TIME, FIRST SIGMA GRID DATA
C   IS TRANSFORMED FROM SIGMA SPECTRAL COEFFICIENTS.
C   THE INPUT DATA CONSISTS OF VORTICITY, DIVERGENCE, WIND COMPONENTS,
C   TEMPERATURE AND SPECIFIC HUMIDITY ON THE SIGMA SURFACES AS WELL AS
C   SURFACE PRESSURE AND OROGRAPHY AND THEIR HORIZONTAL GRADIENTS.
C   RELATIVE HUMIDITY, VERTICAL VELOCITY AND GEOPOTENTIAL HEIGHTS
C   ARE COMPUTED ON THE SIGMA SURFACES AND THEN INTERPOLATED TO PRESSURE
C   ALONG WITH WIND AND TEMPERATURE.  SUNDRY FIELDS ARE ALSO COMPUTED.
C   ABSOLUTE VORTICITY ON THE PRESSURE SURFACES IS COMPUTED SPECTRALLY.
C   HEIGHT, WIND, TEMPERATURE AND VERTICAL VELOCITY ARE SMOOTHED.
C   THE OUTPUT DATA IS PACKED INTO GRIB MESSAGES AND WRITTEN OUT.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL PGB1(FHOUR,IDATE,
C    &                NSIG,JCAP,NC,NCTOP,LEVS,NFLDS,SI,SL,
C    &                IO,JO,KO,PO,KTT,KT,PT,KZZ,ZZ,
C    &                NPGB,NCPUS,MXBIT,IDS,POT,
C    &                ICEN,ICEN2,IGEN,IENST,IENSI)
C   INPUT ARGUMENTS:
C     FHOUR        REAL FORECAST HOUR
C     IDATE        INTEGER (4) DATE
C     NSIG         INTEGER UNIT FROM WHICH TO READ SIGMA FILE
C     JCAP         INTEGER SPECTRAL TRUNCATION
C     NC           INTEGER NUMBER OF SPECTRAL COEFFICIENTS
C     NCTOP        INTEGER NUMBER OF SPECTRAL COEFFICIENTS OVER TOP
C     LEVS         INTEGER NUMBER OF SIGMA LEVELS
C     NFLDS        INTEGER TOTAL NUMBER OF INPUT HORIZONTAL FIELDS
C     SI           REAL (LEVS+1) SIGMA INTERFACE VALUES
C     SL           REAL (LEVS) SIGMA FULL LEVEL VALUES
C     IO           INTEGER NUMBER OF OUTPUT LONGITUDES
C     JO           INTEGER NUMBER OF OUTPUT LATITUDES
C     KO           INTEGER NUMBER OF OUTPUT PRESSURE LEVELS
C     PO           REAL (KO) MANDATORY PRESSURES IN MB
C     KTT          INTEGER NUMBER OF PRESSURE THICKNESS LAYER TO OUTPUT
C     KT           INTEGER NUMBER OF PRESSURE THICKNESS LAYERS
C     PT           REAL PRESSURE THICKNESS IN MB
C     KZZ          INTEGER NUMBER OF CONSTANT HEIGHT LEVELS
C     ZZ           REAL (KZZ) CONSTANT HEIGHTS IN M
C     NPGB         INTEGER UNIT TO WHICH TO WRITE GRIB MESSAGES
C     NCPUS        INTEGER NUMBER OF CPUS OVER WHICH TO DISTRIBUTE WORK
C     MXBIT        INTEGER MAXIMUM NUMBER OF BITS TO PACK DATA
C     IDS          INTEGER (255) DECIMAL SCALING
C     POT          REAL (255) TOPMOST PRESSURE IN KPA
C     ICEN         INTEGER FORECAST CENTER IDENTIFIER
C     ICEN2        INTEGER FORECAST SUBCENTER IDENTIFIER
C     IGEN         INTEGER GENERATING MODEL IDENTIFIER
C     IENST        INTEGER ENSEMBLE TYPE
C     IENSI        INTEGER ENSEMBLE IDENTIFICATION
C
C SUBPROGRAMS CALLED:
C   ISRCHFLT     FIND FIRST VALUE IN AN ARRAY LESS THAN TARGET VALUE
C   RDSS         READ SIGMA COEFFICIENTS
C   SUNPRM       SET PARAMETERS FOR SUNDRY FIELDS
C   TRSS         TRANSFORM SIGMA COEFFICIENTS
C   GETRH        COMPUTE RELATIVE HUMIDITY
C   OMEGA        COMPUTE VERTICAL VELOCITY
C   HYDRO        COMPUTE GEOPOTENTIAL HEIGHTS
C   SIG2P        INTERPOLATE SIGMA TO PRESSURE
C   SIG2PT       INTERPOLATE SIGMA TO PRESSURE THICKNESSES
C   SIG2Z        INTERPOLATE SIGMA TO HEIGHT
C   SUNDRY       COMPUTE SUNDRY FIELDS
C   LLSPC        SMOOTH FIELDS AND COMPUTE ABSOLUTE VORTICITY
C   ROWSEP       SEPARATE HEMISPHERIC ROWS ON GRID
C   GRIBIT       CREATE GRIB MESSAGE
C   WRYTE        WRITE DATA BY BYTES
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION IDATE(4),SI(LEVS+1),SL(LEVS),PO(KO),ZZ(KZZ)
      DIMENSION IDS(255),POT(255)
      PARAMETER(NUPA=7,NUPT=4,NUZZ=2,NSUN=26,NUPAS=5)
      DIMENSION TRIG(2*IO),IFAX(20),EPS(NC/2),EPSTOP(NCTOP/2)
      DIMENSION SS(NC,NFLDS),SSTOP(NCTOP,NFLDS)
      DIMENSION IPO(KO),NPO(KO),POKPA(KO)
      DIMENSION NPT1(KT),NPT2(KT)
      DIMENSION CLAT((JO+1)/2),SLAT((JO+1)/2),WLAT((JO+1)/2)
      DIMENSION FXS(2*IO+6,NFLDS)
      DIMENSION OXS(2*IO+6,LEVS),OSXS(2*IO)
      DIMENSION RXS(2*IO+6,LEVS),QSXS(2*IO+6,LEVS)
      DIMENSION ZXS(2*IO+6,LEVS),ZXI(2*IO+6,LEVS)
      DIMENSION QXP(2*IO+6,KT)
      DIMENSION FXP(2*IO+6,NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      DIMENSION FXY(2*IO,(JO+1)/2,NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      LOGICAL LXY
      DIMENSION IPU(NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      DIMENSION ITL(NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      DIMENSION IL1(NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      DIMENSION IL2(NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
      DIMENSION IENS(5),IES(NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN)
c NBPW is number of bits per integer word
c     PARAMETER(NBPW=64)
c     DIMENSION MGRIB((250*8+IO*JO*(MXBIT+1))/NBPW,NCPUS)
      character MGRIB((250*8+IO*JO*(MXBIT+1))/8,NCPUS)*1
      DIMENSION LGRIB(NCPUS)
      PARAMETER(IPUU=33,IPUV=34,IPUO=39,IPUZ=7,IPUT=11,IPUR=52,IPUA=41)
      DIMENSION IPUSUN(NSUN)
      DIMENSION ITLSUN(NSUN),IL1SUN(NSUN),IL2SUN(NSUN)
      DIMENSION KSLP(2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET SOME PARAMETERS
      IO2=2*IO
      IO22=2*IO+6
      JO2=(JO+1)/2
      CALL RDSS(NSIG,JCAP,NC,NCTOP,0,JO2,IO2,LEVS,SL,
     &          CLAT,SLAT,WLAT,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP)
      JFHOUR=NINT(FHOUR)
      NFLDP=NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN
      DO K=1,KO
        POKPA(K)=PO(K)/10.
        IF(FLOAT(NINT(PO(K))).EQ.PO(K).OR.PO(K).GT.655.) THEN
          IPO(K)=100
          NPO(K)=NINT(PO(K))
        ELSE
          IPO(K)=120
          NPO(K)=NINT(PO(K)*100.)
        ENDIF
      ENDDO
      PTKPA=PT/10.
      DO K=1,KT
        NPT1(K)=K*PT
        NPT2(K)=(K-1)*PT
      ENDDO
      KPMU=ISRCHFLT(KO,PO,1,POT(IPUU))-1
      KPMV=ISRCHFLT(KO,PO,1,POT(IPUV))-1
      KPMO=ISRCHFLT(KO,PO,1,POT(IPUO))-1
      KPMZ=ISRCHFLT(KO,PO,1,POT(IPUZ))-1
      KPMT=ISRCHFLT(KO,PO,1,POT(IPUT))-1
      KPMR=ISRCHFLT(KO,PO,1,POT(IPUR))-1
      KPMA=ISRCHFLT(KO,PO,1,POT(IPUA))-1
      CALL SUNPRM(KO,PO,IPUSUN,ITLSUN,IL1SUN,IL2SUN,KSLP,KLI)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET BOTH INPUT AND OUTPUT INDICES
      KSZ=1
      KSD=LEVS+1
      KST=2*LEVS+1
      KSQ=3*LEVS+1
      KSPSX=4*LEVS+1
      KSPSY=4*LEVS+2
      KSU=4*LEVS+3
      KSV=5*LEVS+3
      KSPS=6*LEVS+3
      KSZS=6*LEVS+4
      KSZSX=6*LEVS+5
      KSZSY=6*LEVS+6
      KPZ=1
      KPU=KO+1
      KPV=2*KO+1
      KPT=3*KO+1
      KPO=4*KO+1
      KPR=5*KO+1
      KPA=6*KO+1
      KPTU=7*KO+1
      KPTV=7*KO+KT+1
      KPTT=7*KO+2*KT+1
      KPTR=7*KO+3*KT+1
      KZZU=7*KO+4*KT+1
      KZZV=7*KO+4*KT+KZZ+1
      KPSUN=7*KO+4*KT+2*KZZ+1
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET SOME GRIB PARAMETERS
      IF(ICEN2.NE.2) THEN
        LENPDS=28
      ELSE
        LENPDS=45
      ENDIF
c     IPU(1:NFLDP)=0
	call ifill(ipu,1,nfldp,0)
c     IPU(KPU:KPU+KPMU-1)=IPUU
	call ifill(IPU,KPU,KPU+KPMU-1,IPUU)
c     IPU(KPV:KPV+KPMV-1)=IPUV
	call ifill(IPU,KPV,KPV+KPMV-1,IPUV)
c     IPU(KPO:KPO+KPMO-1)=IPUO
	call ifill(IPU,KPO,KPO+KPMO-1,IPUO)
c     IPU(KPZ:KPZ+KPMZ-1)=IPUZ
	call ifill(IPU,KPZ,KPZ+KPMZ-1,IPUZ)
c     IPU(KPT:KPT+KPMT-1)=IPUT
	call ifill(IPU,KPT,KPT+KPMT-1,IPUT)

c     IPU(KPR:KPR+KPMR-1)=IPUR
	call ifill(IPU,KPR,KPR+KPMR-1,IPUR)
c     IPU(KPA:KPA+KPMA-1)=IPUA
	call ifill(IPU,KPA,KPA+KPMA-1,IPUA)
c     IPU(KPTU:KPTU+KTT-1)=IPUU
	call ifill(IPU,KPTU,KPTU+KTT-1,IPUU)
c     IPU(KPTV:KPTV+KTT-1)=IPUV
	call ifill(IPU,KPTV,KPTV+KTT-1,IPUV)
c     IPU(KPTT:KPTT+KTT-1)=IPUT
	call ifill(IPU,KPTT,KPTT+KTT-1,IPUT)
c     IPU(KPTR:KPTR+KTT-1)=IPUR
	call ifill(IPU,KPTR,KPTR+KTT-1,IPUR)
c     IPU(KZZU:KZZU+KZZ-1)=IPUU
	call ifill(IPU,KZZU,KZZU+KZZ-1,IPUU)
c     IPU(KZZV:KZZV+KZZ-1)=IPUV
	call ifill(IPU,KZZV,KZZV+KZZ-1,IPUV)
c     IPU(KPSUN:KPSUN+NSUN-1)=IPUSUN
	do i9 = 1, nsun
	    ipu(kpsun+i9-1) = ipusun(i9)
	enddo

      ITL(KPU:KPU+KO-1)=IPO
C	call ifill(itl,kpu,kpu+ko-1,ipo)
      ITL(KPV:KPV+KO-1)=IPO
C	call ifill(itl,kpv,kpv+ko-1,ipo)
      ITL(KPO:KPO+KO-1)=IPO
C	call ifill(itl,kpo,kpo+ko-1,ipo)
      ITL(KPZ:KPZ+KO-1)=IPO
C	call ifill(itl,kpz,kpz+ko-1,ipo)
      ITL(KPT:KPT+KO-1)=IPO
C	call ifill(itl,kpt,kpt+ko-1,ipo)
      ITL(KPR:KPR+KO-1)=IPO
C	call ifill(itl,kpr,kpr+ko-1,ipo)
      ITL(KPA:KPA+KO-1)=IPO
C	call ifill(itl,kpa,kpa+ko-1,ipo)
c     ITL(NUPA*KO+1:NUPA*KO+NUPT*KT)=116
	call ifill(ITL,NUPA*KO+1,NUPA*KO+NUPT*KT,116)
c     ITL(NUPA*KO+NUPT*KT+1:NUPA*KO+NUPT*KT+NUZZ*KZZ)=103
	call ifill(ITL,NUPA*KO+NUPT*KT+1,NUPA*KO+NUPT*KT+NUZZ*KZZ,103)
c     ITL(KPSUN:KPSUN+NSUN-1)=ITLSUN
	do i9 = 1, nsun
	    itl(kpsun+i9-1) = itlsun(i9)
	enddo

c      IL1(:)=0
 	call ifill(il1,1,NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN,0)
       IL1(KPTU:KPTU+KT-1)=NPT1
C	call ifill(il1,kptu,kptu+kt-1,npt1)

      IL1(KPTV:KPTV+KT-1)=NPT1
C	call ifill(IL1,KPTV,KPTV+KT-1,NPT1)
      IL1(KPTT:KPTT+KT-1)=NPT1
C	call ifill(IL1,KPTT,KPTT+KT-1,NPT1)
      IL1(KPTR:KPTR+KT-1)=NPT1
C	call ifill(IL1,KPTR,KPTR+KT-1,NPT1)
c     IL1(KPSUN:KPSUN+NSUN-1)=IL1SUN
	do i9 = 1, nsun
	    il1(kpsun+i9-1) = il1sun(i9)
	enddo

c     IL2(KPU:KPU+KO-1)=NPO
c     IL2(KPV:KPV+KO-1)=NPO
c     IL2(KPO:KPO+KO-1)=NPO
c     IL2(KPZ:KPZ+KO-1)=NPO
c     IL2(KPT:KPT+KO-1)=NPO
c     IL2(KPR:KPR+KO-1)=NPO
c     IL2(KPA:KPA+KO-1)=NPO
	do i9 = 1, ko
	    il2(kpu-1+i9) = npo(i9)
	    il2(kpv-1+i9) = npo(i9)
	    il2(kpo-1+i9) = npo(i9)
	    il2(kpz-1+i9) = npo(i9)
	    il2(kpt-1+i9) = npo(i9)
	    il2(kpr-1+i9) = npo(i9)
	    il2(kpa-1+i9) = npo(i9)
	enddo

c     IL2(KPTU:KPTU+KT-1)=NPT2
c     IL2(KPTV:KPTV+KT-1)=NPT2
c     IL2(KPTT:KPTT+KT-1)=NPT2
c     IL2(KPTR:KPTR+KT-1)=NPT2
	do i9 = 1, kt
	    il2(kptu-1+i9) = npt2(i9)
	    il2(kptv-1+i9) = npt2(i9)
	    il2(kptt-1+i9) = npt2(i9)
	    il2(kptr-1+i9) = npt2(i9)
	enddo

c     IL2(KZZU:KZZU+KZZ-1)=NINT(ZZ)
c     IL2(KZZV:KZZV+KZZ-1)=NINT(ZZ)
	do i9 = 1, kzz
	   il2(kzzu+i9-1) = nint(zz(i9))
	   il2(kzzv+i9-1) = nint(zz(i9))
	enddo

c     IL2(KPSUN:KPSUN+NSUN-1)=IL2SUN
	do i9 = 1, nsun
	    il2(kpsun+i9-1) = il2sun(i9)
	enddo

      IENS(1)=1
      IENS(2)=IENST
      IENS(3)=IENSI
      IENS(4)=1
c     IES(:)=255
	call ifill(IES,1,NUPA*KO+NUPT*KT+NUZZ*KZZ+NSUN,255)
c     IES(1:KPU:KPU+KO-1)=JO2-2
c     IES(1:KPV:KPV+KO-1)=JO2-2
c     IES(1:KPO:KPO+KO-1)=JO2-2
c     IES(1:KPZ:KPZ+KO-1)=JO2-2
c     IES(1:KPT:KPT+KO-1)=JO2-2
c     IES(1:KPA:KPA+KO-1)=JO2-2
c wne -- is this right
	do i9 = 1, kpu, kpu+ko-1
	    ies(i9) = jo2-2
	enddo
	do i9 = 1, kpv, kpv+ko-1
	    ies(i9) = jo2-2
	enddo
	do i9 = 1, kpo, kpo+ko-1
	    ies(i9) = jo2-2
	enddo
	do i9 = 1, kpz, kpz+ko-1
	    ies(i9) = jo2-2
	enddo
	do i9 = 1, kpt, kpt+ko-1
	    ies(i9) = jo2-2
	enddo
	do i9 = 1, kpa, kpa+ko-1
	    ies(i9) = jo2-2
	enddo

C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  LOOP OVER LATITUDES.
C  COMPUTE AUXILIARY QUANTITIES ON SIGMA AND INTERPOLATE TO PRESSURE
C  AND COMPUTE SUNDRY FIELDS.
      DO J=1,JO2
        CALL TRSS(JCAP,NC,NCTOP,LEVS,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP,
     &            IO2,IO22,CLAT(J),SLAT(J),FXS)
        CALL GETRH(IO2,IO22,LEVS,SL,
     &             FXS(1,KSPS),FXS(1,KSQ),FXS(1,KST),
     &             QSXS,RXS)
        CALL OMEGA(IO2,IO22,LEVS,SI,SL,
     &             FXS(1,KSPS),FXS(1,KSPSX),FXS(1,KSPSY),
     &             FXS(1,KSD),FXS(1,KSU),FXS(1,KSV),
     &             OXS,OSXS)
        CALL HYDRO(IO2,IO22,LEVS,SI,SL,
     &             FXS(1,KSZS),FXS(1,KST),FXS(1,KSQ),
     &             ZXS,ZXI)
        CALL SIG2P(IO2,IO22,LEVS,SI,SL,FXS(1,KSPS),
     &             FXS(1,KSU),FXS(1,KSV),OXS,
     &             ZXS,ZXI,FXS(1,KST),RXS,FXS(1,KSQ),
     &             KO,POKPA,
     &             FXP(1,KPU),FXP(1,KPV),FXP(1,KPO),
     &             FXP(1,KPZ),FXP(1,KPT),FXP(1,KPR))
        CALL SIG2PT(IO2,IO22,LEVS,SI,SL,FXS(1,KSPS),
     &              FXS(1,KSU),FXS(1,KSV),FXS(1,KST),FXS(1,KSQ),QSXS,
     &              KT,PTKPA,
     &              FXP(1,KPTU),FXP(1,KPTV),
     &              FXP(1,KPTT),QXP,FXP(1,KPTR))
        CALL SIG2Z(IO2,IO22,LEVS,ZXS,FXS(1,KSU),FXS(1,KSV),
     &             KZZ,ZZ,FXP(1,KZZU),FXP(1,KZZV))
        CALL SUNDRY(IO2,IO22,LEVS,KSLP,KLI,CLAT(J),SI,SL,KT,PTKPA,
     &              FXS(1,KSZS),FXS(1,KSPS),OSXS,
     &              FXS(1,KSU),FXS(1,KSV),OXS,
     &              FXS(1,KST),RXS,FXS(1,KSQ),QSXS,
     &              FXP(1,KPTT),QXP,
     &              FXP(1,KPZ),FXP(1,KPT),
     &              FXP(1,KPSUN))
c       FXY(1:IO2,J,1:NFLDP)=FXP(1:IO2,1:NFLDP)
	do i9 = 1, nfldp
	    do i8 = 1, io2
		fxy(i8,j,i9) = fxp(i8,i9)
	    enddo
	enddo

      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SMOOTH FIELDS HORIZONTALLY AND COMPUTE ABSOLUTE VORTICITY
      CALL LLSPC(IO2,JO2,KO,JO2-2,NCPUS,CLAT,SLAT,WLAT,TRIG,IFAX,
     &           FXY(1,1,KPU),FXY(1,1,KPV),FXY(1,1,KPO),
     &           FXY(1,1,KPZ),FXY(1,1,KPT),FXY(1,1,KPA))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  LOOP OVER GROUPS OF HORIZONTAL FIELDS
      DO K1=1,NFLDP,NCPUS
        K2=MIN(K1+NCPUS-1,NFLDP)
C  ROUND FIELD TO THE NUMBER OF BITS AND ENGRIB THE FIELD IN PARALLEL
        DO K=K1,K2
          KAN=K-K1+1
          LGRIB(KAN)=0
          IF(IPU(K).GT.0.AND.IDS(IPU(K)).GT.-128) THEN
            IENS(5)=IES(K)
            CALL ROWSEP(IO,JO,FXY(1,1,K))
            CALL GRIBIT(FXY(1,1,K),LXY,0,IO,JO,MXBIT,90.,
     &                  LENPDS,2,ICEN,IGEN,0,
     &                  IPU(K),ITL(K),IL1(K),IL2(K),
     &                  IDATE(4),IDATE(2),IDATE(3),IDATE(1),
     &                  1,JFHOUR,0,10,0,0,ICEN2,IDS(IPU(K)),IENS,
     &                  0.,0.,0.,0.,0.,0.,
     &                  MGRIB(1,KAN),LGRIB(KAN),IERR)
          ENDIF
        ENDDO
C  WRITE OUT GRIB MESSAGES SEQUENTIALLY
        DO K=K1,K2
          KAN=K-K1+1
          IF(LGRIB(KAN).GT.0) THEN
            CALL WRYTE(NPGB,LGRIB(KAN),MGRIB(1,KAN))
            PRINT *,' GRIB1 WRITTEN TO ',NPGB,' OF LENGTH ',LGRIB(KAN)
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GNCPUS(NCPUS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GNCPUS         GETS ENVIRONMENT NUMBER OF CPUS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 94-08-19
C
C ABSTRACT: GETS AND RETURNS THE ENVIRONMENT VARIABLE NCPUS,
C   DESIGNATING THE NUMBER OF PROCESSORS OVER WHICH TO PARALLELIZE.
C
C PROGRAM HISTORY LOG:
C   94-08-19  IREDELL
C
C USAGE:    CALL GNCPUS(NCPUS)
C   OUTPUT ARGUMENTS:
C     NCPUS        INTEGER NUMBER OF CPUS
C
C SUBPROGRAMS CALLED:
C   get_environment_variable       GET ENVIRONMENT VARIABLE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      INTEGER get_environment_variable
      CHARACTER*8 CNCPUS
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c     call get_environment_variable('NCPUS',CNCPUS,status=IRET)
c     IF(IRET.EQ.0) THEN
c       READ(CNCPUS,'(BN,I8)') NCPUS
c     ELSE
c       NCPUS=1
c     ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      ncpus=1
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE IJKDEF(JCAP,LEVS,IO,JO,KO)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: IJKDEF         SETS DEFAULT OUTPUT DIMENSIONS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: SETS DEFAULT OUTPUT DIMENSIONS FOR GIVEN INPUT RESOLUTION.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL IJKDEF(JCAP,LEVS,IO,JO,KO)
C   INPUT ARGUMENTS:
C     JCAP         INTEGER INPUT SPECTRAL TRUCATION (62 OR 126)
C     LEVS         INTEGER INPUT NUMBER OF SIGMA LEVELS (18 OR 28)
C     IO           INTEGER DEFAULTED ONLY IF 0
C     JO           INTEGER DEFAULTED ONLY IF 0
C     KO           INTEGER DEFAULTED ONLY IF 0
C   OUTPUT ARGUMENTS:
C     IO           INTEGER OUTPUT NUMBER OF LONGITUDE POINTS
C     JO           INTEGER OUTPUT NUMBER OF LATITUDE POINTS
C     KO           INTEGER OUTPUT NUMBER OF PRESSURE LEVELS
C                  (UNKNOWN DECIMAL SCALINGS WILL NOT BE SET)
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  DEFAULT HORIZONTAL DIMENSION
      IF(IO.EQ.0.OR.JO.EQ.0) THEN
        IF(JCAP.EQ.62) THEN
          IO=144
          JO=73
        ELSEIF(JCAP.EQ.126) THEN
          IO=360
          JO=181
        ELSE
          IO=360
          JO=181
        ENDIF
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  DEFAULT VERTICAL DIMENSION
      IF(KO.EQ.0) THEN
        IF(LEVS.EQ.18) THEN
          KO=13
C         KO=22
        ELSEIF(LEVS.EQ.28) THEN
          KO=16
C         KO=25
        ELSE
          KO=16
C         KO=25
        ENDIF
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
CFPP$ EXPAND(FPVS)
      SUBROUTINE GETRH(IM,IX,KM,SL,PS,Q,T,QS,R)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GETRH       CALCULATE RELATIVE HUMIDITY
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: CALCULATES RELATIVE HUMIDITY AS A FUNCTION OF PRESSURE,
C   SPECIFIC HUMIDITY AND TEMPERATURE ON THE SIGMA LAYERS.
C   SATURATION SPECIFIC HUMIDITY IS CALCULATED FROM SATURATION VAPOR
C   PRESSURE WHICH IS RETURNED FROM A LOOKUP TABLE ROUTINE FPVS.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL GETRH(IM,IX,KM,SL,PS,Q,T,QS,R)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF LEVELS
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     Q        - REAL (IX,KM) SPECIFIC HUMIDITY IN KG/KG
C     T        - REAL (IX,KM) TEMPERATURE IN K
C
C   OUTPUT ARGUMENT LIST:
C     QS       - REAL (IX,KM) SATURATED SPECIFIC HUMIDITY IN KG/KG
C     R        - REAL (IX,KM) RELATIVE HUMIDITY IN PERCENT
C
C SUBPROGRAMS CALLED:
C   (FPVS)   - FUNCTION TO COMPUTE SATURATION VAPOR PRESSURE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SL(KM),PS(IM),Q(IX,KM),T(IX,KM),QS(IX,KM),R(IX,KM)
      PARAMETER(RD= 2.8705E+2 ,RV= 4.6150E+2 ,EPS=RD/RV,EPSM1=RD/RV-1.)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO K=1,KM
        DO I=1,IM
          ES=FPVS(T(I,K))
          QS(I,K)=EPS*ES/(SL(K)*PS(I)+EPSM1*ES)
          R(I,K)=MIN(MAX(Q(I,K)/QS(I,K),0.),1.)*100.
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE OMEGA(IM,IX,KM,SI,SL,PS,PSX,PSY,D,U,V,O,OS)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    OMEGA       CALCULATE PRESSURE VERTICAL VELOCITY
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: CALCULATES PRESSURE VERTICAL VELOCITY OMEGA AS A FUNCTION
C   OF SURFACE PRESSURE, SURFACE PRESSURE GRADIENTS, AND DIVERGENCE
C   AND WIND COMPONENTS ON THE SIGMA SURFACES.  THE FORMULA FOR OMEGA
C   IS DERIVED FROM THE CONTINUITY EQUATION
C     O=(SIG*V.GRAD(LNPS)-SUM((D+V.GRAD(LNPS))*DSIG))*PS*1.E3
C   WHERE THE SUM IS TAKEN FROM THE TOP OF THE ATMOSPHERE.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL OMEGA(IM,IX,KM,SI,SL,PS,PSX,PSY,D,U,V,O,OS)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF LEVELS
C     SI       - REAL (KM+1) SIGMA INTERFACE VALUES
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     PSX      - REAL (IM) ZONAL GRADIENT OF LOG PRESSURE IN 1/M
C     PSY      - REAL (IM) MERID GRADIENT OF LOG PRESSURE IN 1/M
C     D        - REAL (IX,KM) DIVERGENCE IN 1/S
C     U        - REAL (IX,KM) ZONAL WIND IN M/S
C     V        - REAL (IX,KM) MERID WIND IN M/S
C
C   OUTPUT ARGUMENT LIST:
C     O        - REAL (IX,KM) PRESSURE VERTICAL VELOCITY IN PA/S
C     OS       - REAL (IM) SURFACE PRESSURE TENDENCY IN PA/S
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SI(KM+1),SL(KM)
      DIMENSION PS(IM),PSX(IM),PSY(IM)
      DIMENSION D(IX,KM),U(IX,KM),V(IX,KM),O(IX,KM),OS(IM)
      DIMENSION SUM(IM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO I=1,IM
        SUM(I)=0.
      ENDDO
      DO K=KM,1,-1
        DO I=1,IM
          VGRADP=U(I,K)*PSX(I)+V(I,K)*PSY(I)
          GRADPV=VGRADP+D(I,K)
          SUM(I)=SUM(I)+GRADPV*(SL(K)-SI(K+1))
          O(I,K)=(VGRADP*SL(K)-SUM(I))*PS(I)*1.E3
          SUM(I)=SUM(I)+GRADPV*(SI(K)-SL(K))
        ENDDO
      ENDDO
      DO I=1,IM
        OS(I)=-SUM(I)*PS(I)*1.E3
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE HYDRO(IM,IX,KM,SI,SL,ZS,T,Q,Z,ZI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    HYDRO       CALCULATE GEOPOTENTIAL HEIGHTS
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: CALCULATES GEOPOTENTIAL HEIGHTS ON BOTH THE SIGMA INTERFACES
C   AND THE SIGMA FULL LEVELS AS A FUNCTION OF OROGRAPHY, TEMPERATURE
C   AND MOISTURE.  VIRTUAL TEMPERATURE IS CALCULATED FROM TEMPERATURE
C   AND MOISTURE AND THE HYDROSTATIC EQUATION IS INTEGRATED
C     DZ=RD/G*TV*DLNP
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL HYDRO(IM,IX,KM,SI,SL,ZS,T,Q,Z,ZI)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF LEVELS
C     SI       - REAL (KM+1) SIGMA INTERFACE VALUES
C     SL       - REAL (KM) SIGMA VALUES
C     ZS       - REAL (IM) OROGRAPHY IS M
C     T        - REAL (IX,KM) TEMPERATURE IN K
C     Q        - REAL (IX,KM) SPECIFIC HUMIDITY IN KG/KG
C
C   OUTPUT ARGUMENT LIST:
C     Z        - REAL (IX,KM) HEIGHTS ON THE FULL LEVELS IN M
C     ZI       - REAL (IX,KM) HEIGHTS ON THE INTERFACES IN M
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SI(KM+1),SL(KM),ZS(IM),T(IX,KM),Q(IX,KM)
      DIMENSION Z(IX,KM),ZI(IX,KM)
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+2 )
      PARAMETER(ROG=RD/G,FVIRT=RV/RD-1.)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO I=1,IM
        ZI(I,1)=ZS(I)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO K=1,KM-1
        CA=ROG*LOG(SI(K)/SL(K))
        CB=ROG*LOG(SL(K)/SI(K+1))
        DO I=1,IM
          TV=T(I,K)*(1.+FVIRT*Q(I,K))
          Z(I,K)=ZI(I,K)+CA*TV
          ZI(I,K+1)=Z(I,K)+CB*TV
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      CA=ROG*LOG(SI(KM)/SL(KM))
      DO I=1,IM
        TV=T(I,KM)*(1.+FVIRT*Q(I,KM))
        Z(I,KM)=ZI(I,KM)+CA*TV
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SIG2P(IM,IX,KM,SI,SL,
     &                 PS,US,VS,OS,ZS,ZI,TS,RS,QS,
     &                 KO,PO,UP,VP,OP,ZP,TP,RP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SIG2P       SIGMA TO PRESSURE INTERPOLATION
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: INTERPOLATES WINDS, OMEGA, HEIGHT, TEMPERATURE AND HUMIDITY
C   FROM THE SIGMA COORDINATE SYSTEM TO THE MANDATORY PRESSURE LEVELS.
C   ASSUMES THAT RELATIVE HUMIDITY, TEMPERATURE, GEOPOTENTIAL HEIGHTS,
C   WIND COMPONENTS AND VERTICAL VELOCITY VARY LINEARLY IN THE VERTICAL
C   WITH THE LOG OF PRESSURE.  UNDERGROUND HEIGHTS ARE OBTAINED USING
C   THE SHUELL METHOD AND UNDERGROUND TEMPERATURES ARE OBTAINED USING
C   A CONSTANT MOIST ADIABATIC LAPSE RATE.  HEIGHTS ABOVE THE TOP SIGMA
C   LEVEL ARE INTEGRATED HYDROSTATICALLY.  OTHERWISE FIELDS ARE HELD
C   CONSTANT OUTSIDE THE SIGMA STRUCTURE AND NO EXTRAPOLATION IS DONE.
C
C PROGRAM HISTORY LOG:
C   92-10-31  SELA,NEWELL,GERRITY,BALLISH,DEAVEN,IREDELL
C
C USAGE:    CALL SIG2P(IM,IX,KM,SI,SL,
C    &                 PS,US,VS,OS,ZS,ZI,TS,RS,QS,
C    &                 KO,PO,UP,VP,OP,ZP,TP,RP)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF SIGMA LEVELS
C     SI       - REAL (KM+1) SIGMA INTERFACE VALUES
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     US       - REAL (IX,KM) ZONAL WIND IN M/S
C     VS       - REAL (IX,KM) MERID WIND IN M/S
C     OS       - REAL (IX,KM) VERTICAL VELOCITY IN PA/S
C     ZS       - REAL (IX,KM) HEIGHTS ON THE FULL LEVELS IN M
C     ZI       - REAL (IX,KM) HEIGHTS ON THE INTERFACES IN M
C     TS       - REAL (IX,KM) TEMPERATURE IN K
C     RS       - REAL (IX,KM) RELATIVE HUMIDITY IN PERCENT
C     QS       - REAL (IX,KM) SPECIFIC HUMIDITY IN KG/KG
C     KO       - INTEGER NUMBER OF PRESSURE LEVELS
C     PO       - REAL (KO) MANDATORY PRESSURES IN KPA
C
C   OUTPUT ARGUMENT LIST:
C     UP       - REAL (IX,KO) ZONAL WIND IN M/S
C     VP       - REAL (IX,KO) MERID WIND IN M/S
C     OP       - REAL (IX,KO) VERTICAL VELOCITY IN PA/S
C     ZP       - REAL (IX,KO) HEIGHTS IN M
C     TP       - REAL (IX,KO) TEMPERATURE IN K
C     RP       - REAL (IX,KO) RELATIVE HUMIDITY IN PERCENT
C
C SUBPROGRAMS CALLED:
C   ISRCHFLT - FIND FIRST VALUE IN AN ARRAY LESS THAN TARGET VALUE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SI(KM+1),SL(KM),PS(IM)
      DIMENSION US(IX,KM),VS(IX,KM),OS(IX,KM)
      DIMENSION ZS(IX,KM),ZI(IX,KM),TS(IX,KM),RS(IX,KM),QS(IX,KM)
      DIMENSION PO(KO)
      DIMENSION UP(IX,KO),VP(IX,KO),OP(IX,KO)
      DIMENSION ZP(IX,KO),TP(IX,KO),RP(IX,KO)
      DIMENSION ASI(2:KM),ASL(KM),APO(KO),APS(IM)
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,RV= 4.6150E+2 )
      PARAMETER(ROG=RD/G,FVIRT=RV/RD-1.)
      PARAMETER(GAMMAM=-6.5E-3,ZSHUL=75.,TVSHUL=290.66)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE LOG PRESSURES FOR INTERPOLATION
c     ASI=LOG(SI(2:KM))
	do i9 = 2, km
	    asi(i9) = log(si(i9))
	enddo
c     ASL=LOG(SL)
 	do i9 = 1, km
 	    asl(i9) = log(sl(i9))
 	enddo
c     APO=LOG(PO)
 	do i9 = 1, ko
 	    apo(i9) = log(po(i9))
 	enddo
c     APS=LOG(PS)
 	do i9 = 1, im
 	    aps(i9) = log(ps(i9))
 	enddo
      APSMIN=APS(ISMIN(IM,APS,1))
      APSMAX=APS(ISMAX(IM,APS,1))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  DETERMINE SIGMA LAYERS BRACKETING PRESSURE LAYER.
C  WITHIN SIGMA STRUCTURE, INTERPOLATE FIELDS LINEARLY IN LOG PRESSURE
C  BETWEEN BRACKETING FULL SIGMA LAYERS EXCEPT HEIGHTS ARE INTERPOLATED
C  BETWEEN THE NEAREST FULL SIGMA LAYER AND THE NEAREST SIGMA INTERFACE
      KD1=1
      DO K=1,KO
        IF(KM-1-KD1.GT.0)
     &  KD1=KD1+ISRCHFLT(KM-1-KD1,ASL(KD1+1),1,APO(K)-APSMIN)-1
        KD2=KD1
        IF(KM-1-KD2.GT.0)
     &  KD2=KD2+ISRCHFLT(KM-1-KD2,ASL(KD2+1),1,APO(K)-APSMAX)-1
        DO KD=KD1,KD2
          KU=KD+1
          DO I=1,IM
            ASK=APO(K)-APS(I)
            IF(ASK.LE.ASL(KD).AND.ASK.GT.ASL(KU)) THEN
              WU=(ASL(KD)-ASK)/(ASL(KD)-ASL(KD+1))
              WD=1.-WU
              UP(I,K)=WU*US(I,KU)+WD*US(I,KD)
              VP(I,K)=WU*VS(I,KU)+WD*VS(I,KD)
              OP(I,K)=WU*OS(I,KU)+WD*OS(I,KD)
              KI=KD+1
              DI=ASI(KI)-ASK
              KL=NINT(KI-0.5+SIGN(0.5,DI))
              WL=DI/(ASI(KI)-ASL(KL))
              WI=1.-WL
              ZP(I,K)=WI*ZI(I,KI)+WL*ZS(I,KL)
              TP(I,K)=WU*TS(I,KU)+WD*TS(I,KD)
              RP(I,K)=WU*RS(I,KU)+WD*RS(I,KD)
            ENDIF
          ENDDO
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  INTERPOLATE SIGMA TO PRESSURE OUTSIDE THE MODEL DOMAIN
        DO I=1,IM
          ASK=APO(K)-APS(I)
C  BELOW GROUND USE SHUELL METHOD TO OBTAIN HEIGHT, CONSTANT LAPSE RATE
C  TO OBTAIN TEMPERATURE, AND HOLD OTHER FIELDS CONSTANT
          IF(ASK.GT.0.) THEN
            UP(I,K)=US(I,1)
            VP(I,K)=VS(I,1)
            OP(I,K)=OS(I,1)
            TVSF=TS(I,1)*(1.+FVIRT*QS(I,1))-GAMMAM*(ZS(I,1)-ZI(I,1))
            IF(ZI(I,1).GT.ZSHUL) THEN
              TVSL=TVSF-GAMMAM*ZI(I,1)
              IF(TVSL.GT.TVSHUL) THEN
                IF(TVSF.GT.TVSHUL) THEN
                  TVSL=TVSHUL-5.E-3*(TVSF-TVSHUL)**2
                ELSE
                  TVSL=TVSHUL
                ENDIF
              ENDIF
              GAMMAS=(TVSF-TVSL)/ZI(I,1)
            ELSE
              GAMMAS=0.
            ENDIF
            PART=ROG*ASK
            ZP(I,K)=ZI(I,1)-TVSF*PART/(1.+0.5*GAMMAS*PART)
            TP(I,K)=TS(I,1)+GAMMAM*(ZP(I,K)-ZS(I,1))
            RP(I,K)=RS(I,1)
C  BETWEEN BOTTOM SIGMA AND GROUND INTERPOLATE HEIGHT,
C  EXTRAPOLATE TEMPERATURE AND HOLD OTHER FIELDS CONSTANT
          ELSEIF(ASK.GE.ASL(1)) THEN
            UP(I,K)=US(I,1)
            VP(I,K)=VS(I,1)
            OP(I,K)=OS(I,1)
            WL=ASK/ASL(1)
            WI=1.-WL
            ZP(I,K)=WI*ZI(I,1)+WL*ZS(I,1)
            WU=(ASL(1)-ASK)/(ASL(1)-ASL(2))
            WD=1.-WU
            TP(I,K)=WU*TS(I,2)+WD*TS(I,1)
            RP(I,K)=RS(I,1)
C  ABOVE TOP SIGMA INTEGRATE HEIGHT HYDROSTATICALLY
C  AND HOLD OTHER FIELDS CONSTANT
          ELSEIF(ASK.LE.ASL(KM)) THEN
            UP(I,K)=US(I,KM)
            VP(I,K)=VS(I,KM)
            OP(I,K)=OS(I,KM)
            TVKM=TS(I,KM)*(1.+FVIRT*QS(I,KM))
            ZP(I,K)=ZS(I,KM)+ROG*TVKM*(ASL(KM)-ASK)
            TP(I,K)=TS(I,KM)
            RP(I,K)=RS(I,KM)
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SIG2PT(IM,IX,KM,SI,SL,
     &                  PS,US,VS,TS,QS,QSS,
     &                  KT,PT,UPT,VPT,TPT,QPT,RPT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SIG2PT      SIGMA TO PRESSURE THICKNESS
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: INTERPOLATES WINDS, TEMPERATURE AND HUMIDITY
C   FROM THE SIGMA COORDINATE SYSTEM TO CONSTANT PRESSURE THICKNESSES
C   ABOVE THE GROUND.
C
C PROGRAM HISTORY LOG:
C   94-07-08  IREDELL
C
C USAGE:    CALL SIG2PT(IM,IX,KM,SI,SL,
C    &                  PS,US,VS,TS,QS,QSS,
C    &                  KT,PT,UPT,VPT,TPT,QPT,RPT)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF SIGMA LEVELS
C     SI       - REAL (KM+1) SIGMA INTERFACE VALUES
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     US       - REAL (IX,KM) ZONAL WIND IN M/S
C     VS       - REAL (IX,KM) MERID WIND IN M/S
C     TS       - REAL (IX,KM) TEMPERATURE IN K
C     QS       - REAL (IX,KM) SPECIFIC HUMIDITY IN KG/KG
C     QSS      - REAL (IX,KM) SATURATED SPECIFIC HUMIDITY IN KG/KG
C     KT       - INTEGER NUMBER OF PRESSURE THICKNESS LAYERS
C     PT       - REAL PRESSURE THICKNESS IN KPA
C
C   OUTPUT ARGUMENT LIST:
C     UPT      - REAL (IX,KT) ZONAL WIND IN M/S
C     VPT      - REAL (IX,KT) MERID WIND IN M/S
C     TPT      - REAL (IX,KT) TEMPERATURE IN K
C     QPT      - REAL (IX,KT) SPECIFIC HUMIDITY IN KG/KG
C     RPT      - REAL (IX,KT) RELATIVE HUMIDITY IN PERCENT
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SI(KM+1),SL(KM),PS(IM)
      DIMENSION US(IX,KM),VS(IX,KM),TS(IX,KM),QS(IX,KM),QSS(IX,KM)
      DIMENSION UPT(IX,KT),VPT(IX,KT),TPT(IX,KT),QPT(IX,KT),RPT(IX,KT)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RMIN=PS(ISMIN(IM,PS,1))/PT
      RMAX=PS(ISMAX(IM,PS,1))/PT
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO K=1,KT
        DO I=1,IM
          UPT(I,K)=0.
          VPT(I,K)=0.
          TPT(I,K)=0.
          QPT(I,K)=0.
          RPT(I,K)=0.
        ENDDO
        DO KS=1,KM
          IF(K-(1-SI(KS))*RMIN.GT.0..AND.K-(1-SI(KS+1))*RMAX.LT.1.) THEN
            DO I=1,IM
              R=PS(I)/PT
              FKS=MIN(K-(1-SI(KS))*R,1.)-MAX(K-(1-SI(KS+1))*R,0.)
              IF(FKS.GT.0.) THEN
                UPT(I,K)=UPT(I,K)+FKS*US(I,KS)
                VPT(I,K)=VPT(I,K)+FKS*VS(I,KS)
                TPT(I,K)=TPT(I,K)+FKS*TS(I,KS)
                QPT(I,K)=QPT(I,K)+FKS*QS(I,KS)
                RPT(I,K)=RPT(I,K)+FKS*QSS(I,KS)
              ENDIF
            ENDDO
          ENDIF
        ENDDO
        DO I=1,IM
          RPT(I,K)=MIN(MAX(QPT(I,K)/RPT(I,K),0.),1.)*100.
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SIG2Z(IM,IX,KM,ZS,US,VS,KZZ,ZZ,UZZ,VZZ)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SIG2Z       SIGMA TO HEIGHT INTERPOLATION
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: INTERPOLATES WINDS
C   FROM THE SIGMA COORDINATE SYSTEM TO CONSTANT HEIGHT LEVELS.
C   ASSUMES THAT FIELDS VARY LINEARLY WITH HEIGHT.
C   FIELDS ARE HELD CONSTANT OUTSIDE THE SIGMA STRUCTURE.
C
C PROGRAM HISTORY LOG:
C   94-10-31  IREDELL
C
C USAGE:    CALL SIG2Z(IM,IX,KM,ZS,US,VS,KZZ,ZZ,UZZ,VZZ)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF SIGMA LEVELS
C     ZS       - REAL (IX,KM) HEIGHTS ON THE FULL LEVELS IN M
C     US       - REAL (IX,KM) ZONAL WIND IN M/S
C     VS       - REAL (IX,KM) MERID WIND IN M/S
C     KZZ      - INTEGER NUMBER OF HEIGHT LEVELS
C     ZZ       - REAL (KZZ) CONSTANT HEIGHTS IN M
C
C   OUTPUT ARGUMENT LIST:
C     UZZ      - REAL (IX,KZZ) ZONAL WIND IN M/S
C     VZZ      - REAL (IX,KZZ) MERID WIND IN M/S
C
C SUBPROGRAMS CALLED:
C   ISRCHFGT - FIND FIRST VALUE IN AN ARRAY GREATER THAN TARGET VALUE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION US(IX,KM),VS(IX,KM),ZS(IX,KM)
      DIMENSION ZZ(KZZ)
      DIMENSION UZZ(IX,KZZ),VZZ(IX,KZZ)
      DIMENSION ZSMIN(KM),ZSMAX(KM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE BOUNDS FOR INTERPOLATION
      DO K=1,KM
        ZSMIN(K)=ZS(1,K)
        ZSMAX(K)=ZS(1,K)
        DO I=2,IM
          ZSMIN(K)=MIN(ZSMIN(K),ZS(I,K))
          ZSMAX(K)=MAX(ZSMAX(K),ZS(I,K))
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  DETERMINE SIGMA LAYERS BRACKETING HEIGHT LEVEL.
C  WITHIN SIGMA STRUCTURE, INTERPOLATE FIELDS LINEARLY IN HEIGHT
C  BETWEEN BRACKETING FULL SIGMA LAYERS.
      KD1=1
      DO K=1,KZZ
        IF(KM-1-KD1.GT.0)
     &  KD1=KD1+ISRCHFGT(KM-1-KD1,ZSMAX(KD1+1),1,ZZ(K))-1
        KD2=KD1
        IF(KM-1-KD2.GT.0)
     &  KD2=KD2+ISRCHFGT(KM-1-KD2,ZSMIN(KD1+1),1,ZZ(K))-1
        DO KD=KD1,KD2
          KU=KD+1
          DO I=1,IM
            IF(ZZ(K).GE.ZS(I,KD).AND.ZZ(K).LT.ZS(I,KU)) THEN
              WU=(ZZ(K)-ZS(I,KD))/(ZS(I,KU)-ZS(I,KD))
              UZZ(I,K)=US(I,KD)+WU*(US(I,KU)-US(I,KD))
              VZZ(I,K)=VS(I,KD)+WU*(VS(I,KU)-VS(I,KD))
            ENDIF
          ENDDO
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  EXTRAPOLATE SIGMA TO HEIGHT OUTSIDE MODEL DOMAIN
        DO I=1,IM
          IF(ZZ(K).LT.ZS(I,1)) THEN
            UZZ(I,K)=US(I,1)
            VZZ(I,K)=VS(I,1)
          ELSEIF(ZZ(K).GE.ZS(I,KM)) THEN
            UZZ(I,K)=US(I,KM)
            VZZ(I,K)=VS(I,KM)
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SUNPRM(KO,PO,IPUSUN,ITLSUN,IP1SUN,IP2SUN,KSLP,KLI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    SUNPRM      SET PARAMETERS FOR SUNDRY FIELDS
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: SETS PARAMETERS FOR THE SUNDRY FIELDS.
C   PARAMETERS RETURNED ARE PARAMETER INDICATOR, LEVEL TYPE INDICATOR
C   AND TWO LEVEL NUMBERS.
C   THE CURRENT NSUN=26 SUNDRY FIELDS ARE:
C     1) SURFACE PRESSURE
C     2) SURFACE PRESSURE TENDENCY
C     3) COLUMN PRECIPITABLE WATER
C     4) COLUMN RELATIVE HUMIDITY
C     5) TROPOPAUSE TEMPERATURE
C     6) TROPOPAUSE PRESSURE
C     7) TROPOPAUSE ZONAL WIND
C     8) TROPOPAUSE MERIDIONAL WIND
C     9) TROPOPAUSE VERTICAL WIND SPEED SHEAR
C    10) SURFACE LIFTED INDEX
C    11) BEST LIFTED INDEX
C    12) MAXIMUM WIND LEVEL TEMPERATURE
C    13) MAXIMUM WIND LEVEL PRESSURE
C    14) MAXIMUM WIND LEVEL ZONAL WIND
C    15) MAXIMUM WIND LEVEL MERIDIONAL WIND
C    16) SURFACE OROGRAPHY
C    17) SEA LEVEL PRESSURE
C    18) RELATIVE HUMIDITY IN SIGMA RANGE (0.44,1.00)
C    19) RELATIVE HUMIDITY IN SIGMA RANGE (0.72,0.94)
C    20) RELATIVE HUMIDITY IN SIGMA RANGE (0.44,0.72)
C    21) POTENTIAL TEMPERATURE AT SIGMA 0.9950
C    22) TEMPERATURE AT SIGMA 0.9950
C    23) PRESSURE VERTICAL VELOCITY AT SIGMA 0.9950
C    24) RELATIVE HUMIDITY AT SIGMA 0.9950
C    25) ZONAL WIND AT SIGMA 0.9950
C    26) MERIDIONAL WIND AT SIGMA 0.9950
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C   94-08-01  IREDELL
C
C USAGE:    CALL SUNPRM(KO,PO,IPUSUN,ITLSUN,IP1SUN,IP2SUN,KSLP,KLI)
C
C   INPUT ARGUMENT LIST:
C     KO       - INTEGER NUMBER OF PRESSURE LEVELS
C     PO       - REAL (KO) PRESSURE IN MILLIBARS
C
C   OUTPUT ARGUMENT LIST:
C     IPUSUN   - INTEGER (NSUN) PARAMETER INDICATORS
C     ITLSUN   - INTEGER (NSUN) LEVEL TYPE INDICATORS
C     IP1SUN   - INTEGER (NSUN) FIRST LEVEL NUMBERS
C     IP2SUN   - INTEGER (NSUN) SECOND LEVEL NUMBERS
C     KSLP     - INTEGER (2) RELEVANT PRESSURE LEVELS FOR SLP
C     KLI      - INTEGER RELEVANT PRESSURE LEVEL FOR LIFTED INDEX
C
C SUBPROGRAMS CALLED:
C   ISRCHEQ  - FIND FIRST VALUE IN AN ARRAY EQUAL TO TARGET VALUE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION PO(KO)
      PARAMETER(NSUN=26)
      PARAMETER(NPS  = 1,NPST = 2,NTPW = 3,NTRH = 4,NTPT = 5,
     &          NTPP = 6,NTPU = 7,NTPV = 8,NTPSH= 9,NSLI =10,
     &          NBLI =11,NMWT =12,NMWP =13,NMWU =14,NMWV =15,
     &          NZS  =16,NSLP =17,NRH1 =18,NRH2 =19,NRH3 =20,
     &          NS1TH=21,NS1T =22,NS1O =23,NS1R =24,NS1U =25,
     &          NS1V =26)
      DIMENSION IPUSUN(NSUN),ITLSUN(NSUN)
      DIMENSION IP1SUN(NSUN),IP2SUN(NSUN)
      DIMENSION KSLP(2)
      DIMENSION IPUDEF(NSUN),ITLDEF(NSUN)
      DIMENSION IP1DEF(NSUN),IP2DEF(NSUN)
      DIMENSION PSLP(2)
      DATA IPUDEF/001,003,054,052,011,001,033,034,136,131,
     &            132,011,001,033,034,007,002,052,052,052,
     &            013,011,039,052,033,034/
      DATA ITLDEF/001,001,200,200,007,007,007,007,007,001,
     &            001,006,006,006,006,001,102,108,108,108,
     &            107,107,107,107,107,107/
      DATA IP1DEF/000,000,000,000,000,000,000,000,000,000,
     &            000,000,000,000,000,000,000,044,072,044,
     &            00000,00000,00000,00000,00000,00000/
      DATA IP2DEF/000,000,000,000,000,000,000,000,000,000,
     &            000,000,000,000,000,000,000,100,094,072,
     &            09950,09950,09950,09950,09950,09950/
      DATA PSLP/1000.,500./,PLI/500./
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c     IPUSUN=IPUDEF
c     ITLSUN=ITLDEF
c     IP1SUN=IP1DEF
c     IP2SUN=IP2DEF
	do i9 = 1, nsun
           IPUSUN(i9) = IPUDEF(i9)
	   ITLSUN(i9) = ITLDEF(i9)
 	   IP1SUN(i9) = IP1DEF(i9)
	   ip2sun(i9) = ip2def(i9)
	enddo
      KSLP(1)=MOD(ISRCHEQr(KO,PO,1,PSLP(1)),KO+1)
      KSLP(2)=MOD(ISRCHEQr(KO,PO,1,PSLP(2)),KO+1)
      KLI=MOD(ISRCHEQr(KO,PO,1,PLI),KO+1)
      IF(KSLP(1).EQ.0.OR.KSLP(2).EQ.0) IPUSUN(NSLP)=0
      IF(KLI.EQ.0) IPUSUN(NSLI)=0
      IF(KLI.EQ.0) IPUSUN(NBLI)=0
      IPUSUN(NPST)=0
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SUNDRY(IM,IX,KM,KSLP,KLI,CLAT,SI,SL,KT,PT,
     &                  ZS,PS,OS,U,V,O,T,R,Q,QS,TPT,QPT,ZM,TM,SUN)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    SUNDRY      COMPUTE SUNDRY FIELDS
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: COMPUTES SUNDRY FIELDS.
C   THE CURRENT NSUN=26 SUNDRY FIELDS ARE:
C     1) SURFACE PRESSURE
C     2) SURFACE PRESSURE TENDENCY
C     3) COLUMN PRECIPITABLE WATER
C     4) COLUMN RELATIVE HUMIDITY
C     5) TROPOPAUSE TEMPERATURE
C     6) TROPOPAUSE PRESSURE
C     7) TROPOPAUSE ZONAL WIND
C     8) TROPOPAUSE MERIDIONAL WIND
C     9) TROPOPAUSE VERTICAL WIND SPEED SHEAR
C    10) SURFACE LIFTED INDEX
C    11) BEST LIFTED INDEX
C    12) MAXIMUM WIND LEVEL TEMPERATURE
C    13) MAXIMUM WIND LEVEL PRESSURE
C    14) MAXIMUM WIND LEVEL ZONAL WIND
C    15) MAXIMUM WIND LEVEL MERIDIONAL WIND
C    16) SURFACE OROGRAPHY
C    17) SEA LEVEL PRESSURE
C    18) RELATIVE HUMIDITY IN SIGMA RANGE (0.44,1.00)
C    19) RELATIVE HUMIDITY IN SIGMA RANGE (0.72,0.94)
C    20) RELATIVE HUMIDITY IN SIGMA RANGE (0.44,0.72)
C    21) POTENTIAL TEMPERATURE AT SIGMA 0.9950
C    22) TEMPERATURE AT SIGMA 0.9950
C    23) PRESSURE VERTICAL VELOCITY AT SIGMA 0.9950
C    24) RELATIVE HUMIDITY AT SIGMA 0.9950
C    25) ZONAL WIND AT SIGMA 0.9950
C    26) MERIDIONAL WIND AT SIGMA 0.9950
C
C SUBPROGRAMS CALLED:
C   SIG2TP       INTERPOLATE SIGMA TO TROPOPAUSE LEVEL
C   SIG2MW       INTERPOLATE SIGMA TO MAXWIND LEVEL
C   LIFTIX       COMPUTE BEST LIFTED INDEX
C
C PROGRAM HISTORY LOG:
C   92-10-31  MCCALLA,IREDELL
C
C USAGE:    CALL SUNDRY(IM,IX,KM,KSLP,KLI,CLAT,SI,SL,KT,PT,
C    &                  ZS,PS,OS,U,V,O,T,R,Q,QS,TPT,QPT,ZM,TM,SUN)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF LEVELS
C     KSLP     - INTEGER (2) RELEVANT PRESSURE LEVELS FOR SLP
C     KLI      - INTEGER RELEVANT PRESSURE LEVEL FOR LIFTED INDEX
C     CLAT     - REAL COSINE OF LATITUDE
C     SI       - REAL (KM) SIGMA INTERFACES
C     SL       - REAL (KM) SIGMA VALUES
C     KT       - INTEGER NUMBER OF PRESSURE THICKNESS LAYERS
C     PT       - REAL PRESSURE THICKNESS IN KPA
C     ZS       - REAL (IM) SURFACE OROGRAPHY IN M
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     OS       - REAL (IM) SURFACE PRESSURE TENDENCY IN PA/S
C     U        - REAL (IX,KM) ZONAL WIND IN M/S
C     V        - REAL (IX,KM) MERIDIONAL WIND IN M/S
C     O        - REAL (IX,KM) VERTICAL VELOCITY IN PA/S
C     T        - REAL (IX,KM) TEMPERATURE IN K
C     R        - REAL (IX,KM) RELATIVE HUMIDITY IN PERCENT
C     Q        - REAL (IX,KM) SPECIFIC HUMIDITY IN KG/KG
C     QS       - REAL (IX,KM) SATURATED SPECIFIC HUMIDITY IN KG/KG
C     TPT      - REAL (IX,KT) TEMPERATURE IN K
C     QPT      - REAL (IX,KT) SPECIFIC HUMIDITY IN KG/KG
C     ZM       - REAL (IX,*) HEIGHT ON PRESSURE SURFACE IN M
C     TM       - REAL (IX,*) TEMPERATURE ON PRESSURE SURFACE IN K
C
C   OUTPUT ARGUMENT LIST:
C     SUN      - REAL (IX,NSUN) SUNDRY FIELDS GIVEN ABOVE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(NSUN=26)
      PARAMETER(NPS  = 1,NPST = 2,NTPW = 3,NTRH = 4,NTPT = 5,
     &          NTPP = 6,NTPU = 7,NTPV = 8,NTPSH= 9,NSLI =10,
     &          NBLI =11,NMWT =12,NMWP =13,NMWU =14,NMWV =15,
     &          NZS  =16,NSLP =17,NRH1 =18,NRH2 =19,NRH3 =20,
     &          NS1TH=21,NS1T =22,NS1O =23,NS1R =24,NS1U =25,
     &          NS1V =26)
      DIMENSION KSLP(2)
      DIMENSION SI(KM+1),SL(KM)
      DIMENSION ZS(IM),PS(IM),OS(IM)
      DIMENSION U(IX,KM),V(IX,KM),O(IX,KM)
      DIMENSION T(IX,KM),R(IX,KM),Q(IX,KM),QS(IX,KM)
      DIMENSION TPT(IX,KT),QPT(IX,KT)
      DIMENSION ZM(IX,*),TM(IX,*)
      DIMENSION SUN(IX,NSUN)
      DIMENSION WRK(IM)
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 ,CP= 1.0046E+3 )
      PARAMETER(ROCP=RD/CP)
      PARAMETER(PM1=1.E5,TM1=287.45,ZM1=113.,ZM2=5572.)
      PARAMETER(FSLP=G*(ZM2-ZM1)/(RD*TM1))
      PARAMETER(STRH1=0.44,STRH2=0.72,STRH3=0.44,
     &          SBRH1=1.00,SBRH2=0.94,SBRH3=0.72)
      PARAMETER(SL1=0.9950)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SURFACE OROGRAPHY, SURFACE PRESSURE AND SURFACE PRESSURE TENDENCY
      DO I=1,IM
        SUN(I,NZS)=ZS(I)
        SUN(I,NPS)=PS(I)*1.E3
        SUN(I,NPST)=OS(I)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COLUMN PRECIPITABLE WATER AND RELATIVE HUMIDITY
      DO I=1,IM
        SUN(I,NTPW)=0.
        WRK(I)=0.
      ENDDO
      DO K=1,KM
        DS=SI(K)-SI(K+1)
        DO I=1,IM
          SUN(I,NTPW)=SUN(I,NTPW)+Q(I,K)*DS
          WRK(I)=WRK(I)+QS(I,K)*DS
        ENDDO
      ENDDO
      DO I=1,IM
        SUN(I,NTRH)=MIN(MAX(SUN(I,NTPW)/WRK(I),0.),1.)*100.
        SUN(I,NTPW)=SUN(I,NTPW)*PS(I)*1.E3/G
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SUNDRY TROPOPAUSE FIELDS
      CALL SIG2TP(IM,IX,KM,CLAT,SL,PS,U,V,T,
     &            SUN(1,NTPP),SUN(1,NTPU),SUN(1,NTPV),
     &            SUN(1,NTPT),SUN(1,NTPSH))
      DO I=1,IM
        SUN(I,NTPP)=SUN(I,NTPP)*1.E3
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  LIFTED INDEX
      IF(KLI.GT.0) THEN
        CALL LIFTIX(IM,IX,KT,PT,PS,TPT,QPT,TM(1,KLI),
     &              SUN(1,NSLI),SUN(1,NBLI))
      ELSE
        DO I=1,IM
          SUN(I,NSLI)=0.
          SUN(I,NBLI)=0.
        ENDDO
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SUNDRY MAXWIND FIELDS
      CALL SIG2MW(IM,IX,KM,SL,PS,U,V,T,
     &            SUN(1,NMWP),SUN(1,NMWU),SUN(1,NMWV),SUN(1,NMWT))
      DO I=1,IM
        SUN(I,NMWP)=SUN(I,NMWP)*1.E3
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SEA LEVEL PRESSURE
      IF(KSLP(1).GT.0.AND.KSLP(2).GT.0) THEN
        K1=KSLP(1)
        K2=KSLP(2)
        DO I=1,IM
          SUN(I,NSLP)=PM1*EXP(FSLP*ZM(I,K1)/(ZM(I,K2)-ZM(I,K1)))
        ENDDO
      ELSE
        DO I=1,IM
          SUN(I,NSLP)=0.
        ENDDO
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  AVERAGE RELATIVE HUMIDITY 1
      DO I=1,IM
        SUN(I,NRH1)=0.
        WRK(I)=0.
      ENDDO
      DO K=1,KM
        DS=MIN(SI(K),SBRH1)-MAX(SI(K+1),STRH1)
        IF(DS.GT.0.) THEN
          DO I=1,IM
            SUN(I,NRH1)=SUN(I,NRH1)+Q(I,K)*DS
            WRK(I)=WRK(I)+QS(I,K)*DS
          ENDDO
        ENDIF
      ENDDO
      DO I=1,IM
        SUN(I,NRH1)=MIN(MAX(SUN(I,NRH1)/WRK(I),0.),1.)*100.
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  AVERAGE RELATIVE HUMIDITY 2
      DO I=1,IM
        SUN(I,NRH2)=0.
        WRK(I)=0.
      ENDDO
      DO K=1,KM
        DS=MIN(SI(K),SBRH2)-MAX(SI(K+1),STRH2)
        IF(DS.GT.0.) THEN
          DO I=1,IM
            SUN(I,NRH2)=SUN(I,NRH2)+Q(I,K)*DS
            WRK(I)=WRK(I)+QS(I,K)*DS
          ENDDO
        ENDIF
      ENDDO
      DO I=1,IM
        SUN(I,NRH2)=MIN(MAX(SUN(I,NRH2)/WRK(I),0.),1.)*100.
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  AVERAGE RELATIVE HUMIDITY 3
      DO I=1,IM
        SUN(I,NRH3)=0.
        WRK(I)=0.
      ENDDO
      DO K=1,KM
        DS=MIN(SI(K),SBRH3)-MAX(SI(K+1),STRH3)
        IF(DS.GT.0.) THEN
          DO I=1,IM
            SUN(I,NRH3)=SUN(I,NRH3)+Q(I,K)*DS
            WRK(I)=WRK(I)+QS(I,K)*DS
          ENDDO
        ENDIF
      ENDDO
      DO I=1,IM
        SUN(I,NRH3)=MIN(MAX(SUN(I,NRH3)/WRK(I),0.),1.)*100.
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  BOTTOM SIGMA FIELDS INTERPOLATED FROM FIRST TWO MODEL LAYERS
      F2=LOG(SL(1)/SL1)/LOG(SL(1)/SL(2))
      SL1K=(SL1*1.E-2)**(-ROCP)
      DO I=1,IM
        SUN(I,NS1T)=T(I,1)+F2*(T(I,2)-T(I,1))
        SUN(I,NS1TH)=SUN(I,NS1T)*SL1K*PS(I)**(-ROCP)
        SUN(I,NS1O)=O(I,1)+F2*(O(I,2)-O(I,1))
        SUN(I,NS1R)=R(I,1)+F2*(R(I,2)-R(I,1))
        SUN(I,NS1U)=U(I,1)+F2*(U(I,2)-U(I,1))
        SUN(I,NS1V)=V(I,1)+F2*(V(I,2)-V(I,1))
      ENDDO
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SIG2TP(IM,IX,KM,CLAT,SL,
     &                  PS,U,V,T,
     &                  PTP,UTP,VTP,TTP,SHTP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SIG2TP      SIGMA TO TROPOPAUSE INTERPOLATION
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: LOCATES THE TROPOPAUSE PRESSURE LEVEL AND INTERPOLATES
C   THE WINDS AND TEMPERATURE AND WIND SHEAR TO THE TROPOPAUSE.
C   THE TROPOPAUSE IS IDENTIFIED BY THE LOWEST LEVEL ABOVE 450 MB
C   AT THE POLES TO 350 MB AT THE EQUATOR
C   WHERE THE TEMPERATURE LAPSE RATE -DT/DZ BECOMES LESS THAN 2 K/KM.
C   THE TROPOPAUSE IS NOT ALLOWED HIGHER THAN 85 MB.
C   INTERPOLATIONS ARE DONE LINEARLY IN LOG OF PRESSURE.
C
C PROGRAM HISTORY LOG:
C   92-10-31  MCCALLA,IREDELL
C   94-06-27  IREDELL            LOWEST TROPOPAUSE DEPENDENT ON LATITUDE
C
C USAGE:    CALL SIG2TP(IM,IX,KM,CLAT,SL,
C    &                  PS,U,V,T,
C    &                  PTP,UTP,VTP,TTP,SHTP)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF SIGMA LEVELS
C     CLAT     - REAL COSINE OF LATITUDE
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     U        - REAL (IX,KM) ZONAL WIND IN M/S
C     V        - REAL (IX,KM) MERID WIND IN M/S
C     T        - REAL (IX,KM) TEMPERATURE IN K
C
C   OUTPUT ARGUMENT LIST:
C     PTP      - REAL (IM) TROPOPAUSE PRESSURE IN KPA
C     UTP      - REAL (IM) TROPOPAUSE ZONAL WIND IN M/S
C     VTP      - REAL (IM) TROPOPAUSE MERID WIND IN M/S
C     TTP      - REAL (IM) TROPOPAUSE TEMPERATURE IN K
C     SHTP     - REAL (IM) TROPOPAUSE WIND SPEED SHEAR IN (M/S)/M
C
C SUBPROGRAMS CALLED:
C   ISRCHEQ  - FIND FIRST VALUE IN AN ARRAY EQUAL TO TARGET VALUE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL SL(KM),PS(IM)
      REAL U(IX,KM),V(IX,KM),T(IX,KM)
      REAL PTP(IM),UTP(IM),VTP(IM),TTP(IM),SHTP(IM)
      REAL ASL(KM)
      LOGICAL LEFT(IM)
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 )
      PARAMETER(ROG=RD/G)
      PARAMETER(PTBOTP=450.E-1,PTBOTE=350.E-1,PTTOP=85.E-1,GAMT=2.E-3)
      FGAMMA(K)=(T(I,K-1)-T(I,K+1))/(ROG*T(I,K)*(ASL(K-1)-ASL(K+1)))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  IDENTIFY TROPOPAUSE AS FIRST LAYER ABOVE PTBOT BUT BELOW PTTOP
C  WHERE THE TEMPERATURE LAPSE RATE DROPS BELOW GAMT.
C  INTERPOLATE TROPOPAUSE PRESSURE, TEMPERATURE, WINDS AND WIND SHEAR
      PTBOT=PTBOTE+(PTBOTP-PTBOTE)*ACOS(CLAT)/ACOS(0.)
c     ASL=LOG(SL)
	do i9 = 1, km
	    asl(i9) = log(sl(i9))
	enddo
c     LEFT=.TRUE.
	do i9 = 1, im
	    left(i9) = .true.
	enddo
      I1=1
      DO KU=3,KM-1
        IF(I1.LE.IM) THEN
          DO I=I1,IM
            IF(LEFT(I)) THEN
              PU=PS(I)*SL(KU)
              IF(PU.LE.PTBOT) THEN
                GAMU=FGAMMA(KU)
                IF(PU.LE.PTTOP) GAMU=MIN(GAMU,GAMT)
                IF(GAMU.LE.GAMT) THEN
                  KD=KU-1
                  GAMD=FGAMMA(KD)
                  GAMD=MAX(GAMD,GAMT)
                  WU=(GAMD-GAMT)/(GAMD-GAMU)
                  DLP=ASL(KU)-ASL(KD)
                  PTP(I)=PS(I)*SL(KD)*EXP(WU*DLP)
                  IF(PTP(I).GT.PTBOT) THEN
                    WU=WU+LOG(PTBOT/PTP(I))/DLP
                    PTP(I)=PTBOT
                  ELSEIF(PTP(I).LT.PTTOP) THEN
                    WU=WU+LOG(PTTOP/PTP(I))/DLP
                    PTP(I)=PTTOP
                  ENDIF
                  TTP(I)=T(I,KD)+WU*(T(I,KU)-T(I,KD))
                  UTP(I)=U(I,KD)+WU*(U(I,KU)-U(I,KD))
                  VTP(I)=V(I,KD)+WU*(V(I,KU)-V(I,KD))
                  SPDD=SQRT(U(I,KD)**2+V(I,KD)**2)
                  SPDU=SQRT(U(I,KU)**2+V(I,KU)**2)
                  SHTP(I)=(SPDU-SPDD)/(ROG*0.5*(T(I,KU)+T(I,KD))*DLP)
                  LEFT(I)=.FALSE.
                ENDIF
              ENDIF
            ENDIF
          ENDDO
          I1=I1+ISRCHEQl(IM-I1+1,LEFT(I1),1,.TRUE.)-1
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE SIG2MW(IM,IX,KM,SL,PS,U,V,T,PMW,UMW,VMW,TMW)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SIG2MW      SIGMA TO MAXWIND INTERPOLATION
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: LOCATES THE MAXIMUM WIND SPEED LEVEL (MAXWIND LEVEL) AND
C   RETURNS THE WIND SPEED, COMPONENTS AND PRESSURE AT THAT LEVEL.
C   THE MAXWIND LEVEL IS RESTRICTED TO BE BETWEEN 50KPA AND 7KPA.
C   THE MAXWIND LEVEL IS IDENTIFIED BY CUBIC SPLINE INTERPOLATION
C   OF THE WIND SPEEDS IN LOG PRESSURE.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C   94-08-01  IREDELL   RETURN MAXWIND TEMPERATURE TOO
C
C USAGE:    CALL SIG2MW(IM,IX,KM,SL,PS,U,V,T,PMW,UMW,VMW,TMW)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KM       - INTEGER NUMBER OF SIGMA LEVELS
C     SL       - REAL (KM) SIGMA VALUES
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     U        - REAL (IX,KM) ZONAL WIND IN M/S
C     V        - REAL (IX,KM) MERID WIND IN M/S
C     T        - REAL (IX,KM) TEMPERATURE IN K
C
C   OUTPUT ARGUMENT LIST:
C     PMW      - REAL (IM) MAXWIND PRESSURE IN KPA
C     UMW      - REAL (IM) MAXWIND ZONAL WIND IN M/S
C     VMW      - REAL (IM) MAXWIND MERID WIND IN M/S
C     TMW      - REAL (IM) MAXWIND TEMPERATURE IN K
C
C SUBPROGRAMS CALLED:
C   SPCOEF       COMPUTE SECOND DERIVATIVES FOR CUBIC SPLINE
C   SPFMAX       DETERMINE MAXIMUM VALUE OF CUBIC SPLINE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SL(KM),PS(IM)
      DIMENSION U(IX,KM),V(IX,KM),T(IX,KM)
      DIMENSION PMW(IM),UMW(IM),VMW(IM),TMW(IM)
      DIMENSION SPDMW(IM),SMW(IM),S(KM),SPD(IM,KM),D2SPD(IM,KM)
      PARAMETER(PMWBOT=500.E-1,PMWTOP=70.E-1)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FIX VERTICAL COORDINATE PROPORTIONAL TO LOG PRESSURE
C  AND CALCULATE WIND SPEEDS BETWEEN PMWBOT AND PMWTOP
      DO K=1,KM
        S(K)=-LOG(SL(K))
      ENDDO
      DO K=1,KM
        DO I=1,IM
          P=SL(K)*PS(I)
          IF(P.LE.PMWBOT.AND.P.GE.PMWTOP) THEN
            SPD(I,K)=SQRT(U(I,K)**2+V(I,K)**2)
          ELSE
            SPD(I,K)=0.
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  USE SPLINE ROUTINES TO DETERMINE MAXWIND LEVEL AND WIND SPEED
      CALL SPCOEF(IM,KM,S,SPD,D2SPD)
      CALL SPFMAX(IM,KM,S,SPD,D2SPD,SMW,PMW,SPDMW)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE MAXWIND PRESSURE AND WIND COMPONENTS
      DO I=1,IM
        PMW(I)=EXP(-PMW(I))*PS(I)
        K=INT(SMW(I))
        IF(FLOAT(K).EQ.SMW(I)) THEN
          UB=U(I,K)
          VB=V(I,K)
          TB=T(I,K)
        ELSE
          UB=(K+1-SMW(I))*U(I,K)+(SMW(I)-K)*U(I,K+1)
          VB=(K+1-SMW(I))*V(I,K)+(SMW(I)-K)*V(I,K+1)
          TB=(K+1-SMW(I))*T(I,K)+(SMW(I)-K)*T(I,K+1)
        ENDIF
        SPDB=SQRT(UB**2+VB**2)
        UMW(I)=UB*SPDMW(I)/SPDB
        VMW(I)=VB*SPDMW(I)/SPDB
        TMW(I)=TB
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE LIFTIX(IM,IX,KT,PT,PS,T,Q,TM,SLI,BLI)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    LIFTIX      COMPUTE LIFTED INDICES FROM SIGMA
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: COMPUTES BOTH THE SURFACE LIFTED INDEX AND BEST LIFTED INDEX
C   FROM PROFILES IN CONSTANT PRESSURE THICKNESS LAYERS ABOVE GROUND.
C   THE SURFACE LIFTED INDEX IS COMPUTED BY RAISING THE LOWEST LAYER
C   TO 500 MB AND SUBTRACTING ITS PARCEL TEMPERATURE
C   FROM THE ENVIRONMENT TEMPERATURE.
C   THE BEST LIFTED INDEX IS COMPUTED BY FINDING THE PARCEL
C   WITH THE WARMEST EQUIVALENT POTENTIAL TEMPERATURE,
C   THEN RAISING IT TO 500 MB AND SUBTRACTING ITS PARCEL TEMPERATURE
C   FROM THE ENVIRONMENT TEMPERATURE.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C   94-04-28  IREDELL   FIXED PARAMETERS
C   94-06-03  IREDELL   RETURNED TWO INDICES
C   94-07-29  IREDELL   USED CONSTANT PRESSURE THICKNESS PROFILES
C
C USAGE:    CALL LIFTIX(IM,IX,KT,PT,PS,T,Q,TM,SLI,BLI)
C
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF POINTS
C     IX       - INTEGER FIRST DIMENSION OF UPPER AIR DATA
C     KT       - INTEGER NUMBER OF LAYERS IN PROFILE
C     PT       - REAL PRESSURE THICKNESS IN KPA
C     PS       - REAL (IM) SURFACE PRESSURE IN KPA
C     T        - REAL (IX,KT) TEMPERATURE IN K
C     Q        - REAL (IX,KT) SPECIFIC HUMIDITY IN KG/KG
C     TM       - REAL (IM) 500 MB TEMPERATURE IN K
C
C   OUTPUT ARGUMENT LIST:
C     SLI      - REAL (IX) SURFACE LIFTED INDEX IN K
C     BLI      - REAL (IX) BEST LIFTED INDEX IN K
C
C SUBPROGRAMS CALLED:
C   (FPKAP)   - FUNCTION TO COMPUTE PRESSURE TO THE KAPPA
C   (FTDP)    - FUNCTION TO COMPUTE DEWPOINT TEMPERATURE
C   (FTLCL)   - FUNCTION TO COMPUTE LIFTING CONDENSATION LEVEL
C   (FTHE)    - FUNCTION TO COMPUTE EQUIVALENT POTENTIAL TEMPERATURE
C   (FTMA)    - FUNCTION TO COMPUTE MOIST ADIABAT TEMPERATURE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
CFPP$ EXPAND(FPKAP,FTDP,FTLCL,FTHE,FTMA)
      DIMENSION PS(IM),T(IX,KT),Q(IX,KT),TM(IM),SLI(IM),BLI(IM)
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 )
      PARAMETER(RK=RD/CP,EPS=RD/RV,EPSM1=RD/RV-1.)
      PARAMETER(PLIFT=50.)
      DIMENSION P2KMAS(IM),THEMAS(IM),P2KMAB(IM),THEMAB(IM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SELECT THE WARMEST EQUIVALENT POTENTIAL TEMPERATURE
      DO K=1,KT
        DO I=1,IM
          P=PS(I)-(K-0.5)*PT
          PV=P*Q(I,K)/(EPS-EPSM1*Q(I,K))
          TDPD=MAX(T(I,K)-FTDP(PV),0.)
          TLCL=FTLCL(T(I,K),TDPD)
          P2KLCL=FPKAP(P)*TLCL/T(I,K)
          THELCL=FTHE(TLCL,P2KLCL)
          IF(K.EQ.1) THEN
            P2KMAS(I)=P2KLCL
            THEMAS(I)=THELCL
            P2KMAB(I)=P2KLCL
            THEMAB(I)=THELCL
          ELSEIF(THELCL.GT.THEMAB(I)) THEN
            P2KMAB(I)=P2KLCL
            THEMAB(I)=THELCL
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  LIFT THE PARCEL TO 500 MB ALONG A DRY ADIABAT BELOW THE LCL
C  OR ALONG A MOIST ADIABAT ABOVE THE LCL.
C  THE LIFTED INDEX IS THE ENVIRONMENT MINUS PARCEL TEMPERATURE.
      PLIFTK=(PLIFT/100.)**RK
      DO I=1,IM
        IF(PS(I).GT.PLIFT) THEN
          P2KS=MIN(PLIFTK,P2KMAS(I))
          SLI(I)=TM(I)-PLIFTK/P2KS*FTMA(THEMAS(I),P2KS,QMA)
          P2KB=MIN(PLIFTK,P2KMAB(I))
          BLI(I)=TM(I)-PLIFTK/P2KB*FTMA(THEMAB(I),P2KB,QMA)
        ELSE
          SLI(I)=0.
          BLI(I)=0.
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE LLSPC(IM2,JM2,KM,M,NCPUS,CLAT,SLAT,WLAT,TRIG,IFAX,
     &                 U,V,O,Z,T,A)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: LLSPC          PERFORM SPECTRAL FUNCTIONS ON LATLON FIELDS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 94-08-31
C
C ABSTRACT: THIS SUBPROGRAM PERFORMS SPECTRAL FUNCTIONS ON LATLON FIELDS
C   WINDS, VERTICAL VELOCITIES, HEIGHTS AND TEMPERATURES ARE SMOOTHED
C   AND THE ABSOLUTE VORTICITY IS COMPUTED FROM THE WINDS.
C   ALL FIELDS ARE ON A GLOBAL LATLON GRID THAT INCLUDES THE POLES
C   WITH NORTHERN AND SOUTHERN HEMISPHERES PAIRED.
C
C PROGRAM HISTORY LOG:
C   95-08-31  IREDELL
C
C USAGE:    CALL LLSPC(IM2,JM2,KM,M,NCPUS,CLAT,SLAT,WLAT,TRIG,IFAX,
C    &                 U,V,O,Z,T,A)
C   INPUT ARGUMENTS:
C     IM2          INTEGER TWICE THE NUMBER OF LONGITUDE POINTS
C     JM2          INTEGER HALF THE NUMBER OF LATITUDE POINTS
C     KM           INTEGER NUMBER OF LEVELS
C     M            INTEGER SPECTRAL TRUNCATION (JM2-2 RECOMMENDED)
C     NCPUS        INTEGER NUMBER OF CPUS OVER WHICH TO DISTRIBUTE WORK
C     CLAT         REAL (JM2) COSINES OF LATITUDE
C     SLAT         REAL (JM2) POSITIVE SINES OF LATITUDE
C     WLAT         REAL (JM2) GAUSSIAN WEIGHTS
C     TRIG         REAL (IM2) TRIGONOMETRIC QUANTITIES FOR THE FFT
C     IFAX         INTEGER (20) FACTORS FOR THE FFT
C     U            REAL (IM2,JM2,KM) ZONAL WIND IN M/S
C     V            REAL (IM2,JM2,KM) MERIDIONAL WIND IN M/S
C     O            REAL (IM2,JM2,KM) VERTICAL VELOCITY IN PA/S
C     Z            REAL (IM2,JM2,KM) HEIGHTS IN M
C     T            REAL (IM2,JM2,KM) TEMPERATURE IN K
C   OUTPUT ARGUMENTS:
C     U            REAL (IM2,JM2,KM) SMOOTHED ZONAL WIND IN M/S
C     V            REAL (IM2,JM2,KM) SMOOTHED MERIDIONAL WIND IN M/S
C     O            REAL (IM2,JM2,KM) SMOOTHED VERTICAL VELOCITY IN PA/S
C     Z            REAL (IM2,JM2,KM) SMOOTHED HEIGHTS IN M
C     T            REAL (IM2,JM2,KM) SMOOTHED TEMPERATURE IN K
C     A            REAL (IM2,JM2,KM) ABSOLUTE VORTICITY IN 1/S
C
C SUBPROGRAMS CALLED:
C   GSPC         COMPUTE SPECTRAL CONSTANTS
C   RFFTMLT      COMPUTE FFT
C   PLEG         COMPUTE LEGENDRE FUNCTIONS
C   PANALY       COMPUTE SPECTRAL FROM FOURIER
C   UV2DZ        COMPUTE DIVERGENCE AND VORTICITY IN SPECTRAL SPACE
C   DZ2UV        COMPUTE WIND COMPONENTS IN SPECTRAL SPACE
C   PSYNTH       COMPUTE FOURIER FROM SPECTRAL
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL SLAT(JM2),CLAT(JM2),WLAT(JM2)
      REAL TRIG(IM2)
      INTEGER IFAX(20)
      REAL U(IM2,JM2,KM),V(IM2,JM2,KM),O(IM2,JM2,KM)
      REAL Z(IM2,JM2,KM),T(IM2,JM2,KM),A(IM2,JM2,KM)
      REAL EPS((M+1)*(M+2)/2),EPSTOP(M+1)
      REAL ENN1((M+1)*(M+2)/2),ELONN1((M+1)*(M+2)/2)
      REAL EON((M+1)*(M+2)/2),EONTOP(M+1)
      REAL WFFT(IM2,2*6*KM)
      REAL PLN((M+1)*(M+2)/2),PLNTOP(M+1)
      REAL F1(IM2/2+3,2,5*KM,NCPUS),F2(IM2/2+3,2,6*KM)
      REAL S1((M+1)*(M+2)+1,6*KM),S1TOP(2*(M+1),6*KM)
      REAL SD((M+1)*(M+2))
      INTEGER MP(6*KM)
      PARAMETER(OMEGA= 7.2921E-5 )
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET TRANSFORM CONSTANTS
      IM=IM2/2
      IX=IM+3
c     MP(1:2*KM)=1
	call ifill(mp,1,2*km,1)
c     MP(2*KM+1:6*KM)=0
	call ifill(MP,2*KM+1,6*KM,0)
      NC=(M+1)*(M+2)+1
      NCTOP=2*(M+1)
      CALL GSPC(M,EPS,EPSTOP,ENN1,ELONN1,EON,EONTOP)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TRANSFORM TO SPECTRAL SPACE
      DO K=1,KM
        DO I=1,NC
          S1(I,K)=0.
          S1(I,K+KM)=0.
          S1(I,K+2*KM)=0.
          S1(I,K+3*KM)=0.
          S1(I,K+4*KM)=0.
        ENDDO
        DO I=1,NCTOP
          S1TOP(I,K)=0.
          S1TOP(I,K+KM)=0.
          S1TOP(I,K+2*KM)=0.
          S1TOP(I,K+3*KM)=0.
          S1TOP(I,K+4*KM)=0.
          S1TOP(I,K+5*KM)=0.
        ENDDO
      ENDDO
      DO J1=2,JM2,NCPUS
        J2=MIN(J1+NCPUS-1,JM2)
        DO J=J1,J2
          JC=J-J1+1
          DO K=1,KM
            DO I=1,IM
              F1(I,1,K,JC)=U(I,J,K)/CLAT(J)**2
              F1(I,2,K,JC)=U(I+IM,J,K)/CLAT(J)**2
              F1(I,1,K+KM,JC)=V(I,J,K)/CLAT(J)**2
              F1(I,2,K+KM,JC)=V(I+IM,J,K)/CLAT(J)**2
              F1(I,1,K+2*KM,JC)=O(I,J,K)
              F1(I,2,K+2*KM,JC)=O(I+IM,J,K)
              F1(I,1,K+3*KM,JC)=Z(I,J,K)
              F1(I,2,K+3*KM,JC)=Z(I+IM,J,K)
              F1(I,1,K+4*KM,JC)=T(I,J,K)
              F1(I,2,K+4*KM,JC)=T(I+IM,J,K)
            ENDDO
          ENDDO
          CALL RFFTMLT(F1(1,1,1,JC),WFFT,TRIG,IFAX,1,IX,IM,2*5*KM,-1)
        ENDDO
        DO J=J1,J2
          JC=J-J1+1
          CALL PLEG(M,SLAT(J),CLAT(J),EPS,EPSTOP,PLN,PLNTOP)
          WA=WLAT(J)
          CALL PANALY(M,IM,IX,NC,NCTOP,5*KM,WA,CLAT(J),PLN,PLNTOP,MP,
     &                F1(1,1,1,JC),S1,S1TOP)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SPECTRALLY COMPUTE VORTICITY
      DO K=1,KM
        CALL UV2DZ(M,ENN1,ELONN1,EON,EONTOP,
     &             S1(1,K),S1(1,K+KM),S1TOP(1,K),S1TOP(1,K+KM),
     &             SD,S1(1,K+5*KM))
        CALL DZ2UV(M,ENN1,ELONN1,EON,EONTOP,
     &             SD,S1(1,K+5*KM),
     &             S1(1,K),S1(1,K+KM),S1TOP(1,K),S1TOP(1,K+KM))
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TRANSFORM TO GRID
      DO J=1,JM2
        CALL PLEG(M,SLAT(J),CLAT(J),EPS,EPSTOP,PLN,PLNTOP)
        CALL PSYNTH(M,IM,IX,NC,NCTOP,6*KM,CLAT(J),PLN,PLNTOP,MP,
     &              S1,S1TOP,F2)
        CALL RFFTMLT(F2,WFFT,TRIG,IFAX,1,IX,IM,2*6*KM,1)
        DO K=1,KM
          DO I=1,IM
            U(I,J,K)=F2(I,1,K)
            U(I+IM,J,K)=F2(I,2,K)
            V(I,J,K)=F2(I,1,K+KM)
            V(I+IM,J,K)=F2(I,2,K+KM)
            O(I,J,K)=F2(I,1,K+2*KM)
            O(I+IM,J,K)=F2(I,2,K+2*KM)
            Z(I,J,K)=F2(I,1,K+3*KM)
            Z(I+IM,J,K)=F2(I,2,K+3*KM)
            T(I,J,K)=F2(I,1,K+4*KM)
            T(I+IM,J,K)=F2(I,2,K+4*KM)
            A(I,J,K)=F2(I,1,K+5*KM)+2*OMEGA*SLAT(J)
            A(I+IM,J,K)=F2(I,2,K+5*KM)-2*OMEGA*SLAT(J)
          ENDDO
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
CFPP$ NOCONCUR R
      SUBROUTINE ROWSEP(IM,JM,A)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    ROWSEP      SEPARATE NORTHERN AND SOUTHERN LATITUDES.
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: SEPARATE NORTHERN AND SOUTHERN LATITUDES OF GRID.
C   INLINE FUNCTION JLOC RETURNS INPUT LATITUDE GIVEN OUTPUT LATITUDE.
C   LATITUDE ROWS ARE SWAPPED IN THE ARRAY UNTIL ALL ARE DONE.
C
C PROGRAM HISTORY LOG:
C   88-04-12  JOSEPH SELA
C   92-10-31  IREDELL
C
C USAGE:    CALL ROWSEP(IM,JM,A)
C   INPUT ARGUMENT LIST:
C     IM       - INTEGER NUMBER OF LONGITUDES IN GRID
C     JM       - INTEGER NUMBER OF LATITUDES IN GRID
C     A        - REAL (IM,JM) GRID DATA
C                WITH PAIRED NORTHERN AND SOUTHERN LATITUDES.
C                INPUT ARRAY IS OVERWRITTEN BY OUTPUT ARRAY.
C
C   OUTPUT ARGUMENT LIST:
C     A        - REAL (IM,JM) GRID DATA
C                WITH SEPARATED NORTHERN AND SOUTHERN LATITUDES.
C
C SUBPROGRAMS CALLED:
C   ISRCHEQ  - FIND FIRST VALUE IN AN ARRAY EQUAL TO TARGET VALUE
C
C REMARKS:
C   FORTRAN 77 EXTENSIONS ARE USED
C   SUCH AS AUTOMATIC ARRAYS, ARRAY SECTIONS AND DOWHILE STATEMENTS
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION A(IM,JM)
      DIMENSION B(IM),JDONE(JM)
      JLOC(JA)=MIN(2*JA-1,2*(JM+1-JA))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
c     JDONE=0
	call ifill(jdone,1,jm,0)
      JSAVE=1
      DOWHILE(JSAVE.LE.JM)
c       B(:)=A(:,JSAVE)
	do i9 = 1, im
	    b(i9) = a(i9,jsave)
	enddo
        JPUT=JSAVE
        JGET=JLOC(JPUT)
        DOWHILE(JGET.NE.JSAVE)
c         A(:,JPUT)=A(:,JGET)
	    do i9 = 1, im
		a(i9,jput) = a(i9,jget)
	    enddo
          JDONE(JPUT)=1
          JPUT=JGET
          JGET=JLOC(JPUT)
        ENDDO
c       A(:,JPUT)=B(:)
	do i9 = 1, im
	    a(i9,jput) = b(i9)
	enddo
        JDONE(JPUT)=1
        IF(JSAVE.LT.JM) THEN
          JSAVE=JSAVE+ISRCHEQ(JM-JSAVE,JDONE(JSAVE+1),1,0)
        ELSE
          JSAVE=JSAVE+1
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE RDSGH(NSIG,FHOUR,IDATE,SI,SL,
     &                 JCAP,LEVS,ITRUN,IORDER,IREALF,IGEN,
     &                 LATB2,LONB2,LONB22,NFLDS,NWHDR,NWFLD,
     &                 NC,NCTOP,IRET)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    RDSGH       READ SIGMA FILE HEADER RECORD
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: READS THE HEADER RECORD FROM THE SIGMA FILE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:      CALL RDSGH(NSIG,FHOUR,IDATE,SI,SL,
C    &                   JCAP,LEVS,ITRUN,IORDER,IREALF,IGEN,
C    &                   LATB2,LONB2,LONB22,NFLDS,NWHDR,NWFLD,
C    &                   NC,NCTOP,IRET)
C
C   INPUT ARGUMENT LIST:
C     NSIG     - INTEGER UNIT FROM WHICH TO READ HEADER
C
C   OUTPUT ARGUMENT LIST:
C     FHOUR    - REAL FORECAST HOUR
C     IDATE    - INTEGER (4) DATE
C     SI       - REAL (LEVS+1) SIGMA INTERFACES
C     SL       - REAL (LEVS) SIGMA LEVELS
C     JCAP     - INTEGER SPECTRAL TRUNCATION
C     LEVS     - INTEGER NUMBER OF LEVELS
C     ITRUN    - INTEGER TRUNCATION FLAG (=1 FOR TRIANGULAR)
C     IORDER   - INTEGER COEFFICIENT ORDER FLAG (=2 FOR IBM ORDER)
C     IREALF   - INTEGER FLOATING POINT FLAG (=1 FOR IBM)
C     IGEN     - INTEGER MODEL GENERATING FLAG
C     LATB2    - INTEGER NUMBER OF LATITUDE PAIRS IN GAUSSIAN GRID
C                (=(JCAP+1)*3/4)
C     LONB2    - INTEGER NUMBER OF VALID DATA POINTS PER LATITUDE PAIR
C                (>=(JCAP+1)*6 APPROPRIATE FOR FFT)
C     LONB22   - INTEGER NUMBER OF TOTAL POINTS PER LATITUDE PAIR
C                (=LONB2+6)
C     NFLDS    - INTEGER NUMBER OF DATA FIELDS PER GRIDPOINT
C     NWHDR    - INTEGER NUMBER OF WORDS IN THE HEADER RECORD
C     NWFLD    - INTEGER NUMBER OF WORDS IN EACH DATA RECORD
C     NC       - INTEGER NUMBER OF SPECTRAL COEFFICIENTS
C     NCTOP    - INTEGER NUMBER OF SPECTRAL COEFFICIENTS
C     IRET     - INTEGER RETURN CODE (=0 FOR OK, =1 FOR EOF, =2 FOR ERR)
C
C   INPUT FILES:
C     NSIG     - SIGMA FILE
C
C SUBPROGRAMS CALLED:
C   MAXFAC       RETURN MAXIMUM PRIME FACTOR
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(LEVMAX=100,NWEXT=512-(6+2*LEVMAX))
      CHARACTER*32 CLABE
      DIMENSION IDATE(4)
	integer*4 idate4(4)
      DIMENSION SI(LEVMAX+1),SL(LEVMAX),SISL(2*LEVMAX+1),EXT(NWEXT)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  READ AND EXTRACT HEADER RECORD
C  READ SIGMA SPECTRAL FILE HEADER AND DETERMINE GAUSSIAN GRID
      IRET=0
      READ(NSIG,END=91,ERR=92) CLABE
c     READ(NSIG,END=91,ERR=92) FHOUR,IDATE,SISL,(EXT(I),I=1,6)
      READ(NSIG,END=91,ERR=92) FHOUR,idate4,SISL,(EXT(I),I=1,6)
	IDATE(1) = idate4(1)
	IDATE(2) = idate4(2)
	IDATE(3) = idate4(3)
	IDATE(4) = idate4(4)
	write(*,*) 'rdsgh: fhour=',fhour,' idate=',idate
      JCAP  =EXT(1)
      LEVS  =EXT(2)
      ITRUN =EXT(3)
      IORDER=EXT(4)
      IREALF=EXT(5)
      IGEN  =EXT(6)
      LATB2=(3*JCAP)/4+1
      LONB2=(3*JCAP+1)*2
      LONB2=((LONB2-1)/4+1)*4
      DOWHILE(MAXFAC(LONB2).GT.5)
        LONB2=LONB2+4
      ENDDO
      LONB22=LONB2+6
      NFLDS =6*LEVS+6
      NWHDR =212
      NWFLD =2+LONB22*NFLDS
c     SI(1:LEVS+1)=SISL(1:LEVS+1)
	do i9 = 1, levs+1
	    si(i9) = sisl(i9)
	enddo
c     SL(1:LEVS)=SISL(LEVS+2:2*LEVS+1)
	do i9 = 1, levs
	    sl(i9) = sisl(levs+1+i9)
	enddo
      NC=(JCAP+1)*(JCAP+2)+1
      NCTOP=2*(JCAP+1)
      RETURN
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  END OF FILE ENCOUNTERED
91    IRET=1
      RETURN
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  I/O ERROR ENCOUNTERED
92    IRET=2
      RETURN
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      END
C-----------------------------------------------------------------------
      FUNCTION MAXFAC(N)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    MAXFAC      RETURN MAXIMUM PRIME FACTOR
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: DETERMINES THE MAXIMUM PRIME FACTOR OF A POSITIVE INTEGER.
C           USEFUL FOR DETERMINING FITNESS FOR FFT FACTORIZATION.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:   ...=MAXFAC(N)
C
C   INPUT ARGUMENT LIST:
C     N        - INTEGER NUMBER TO FACTOR
C
C   OUTPUT ARGUMENT LIST:
C     MAXFAC   - MAXIMUM PRIME FACTOR OF N
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      IN=N
      K=2
      M=1
      DOWHILE(IN.GT.1)
        INX=IN/K
        IF(IN.EQ.INX*K) THEN
          IN=INX
          M=K
        ELSE
          K=K+1
          IF(K.GT.3) K=K+1
          IF(K.GT.INX) K=IN
        ENDIF
      ENDDO
      MAXFAC=M
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE RDSS(NSS,JCAP,NC,NCTOP,IDRT,LATB2,LONB2,LEVS,SL,
     &                CLAT,SLAT,WLAT,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    RDSS        READ DATA FROM A SIGMA SPECTRAL FILE
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: READS THE RECORDS OF OROGRAPHY, SURFACE PRESSURE,
C           DIVERGENCE AND VORTICITY, TEMPERATURE AND HUMIDITY
C           FROM A SIGMA SPECTRAL FILE.  IT IS ASSUMED THAT THE FIRST
C           TWO HEADER RECORDS OF THE FILE HAVE ALREADY BEEN READ.
C           THE GRADIENTS OF OROGRAPHY AND LOG SURFACE PRESSURE
C           AND THE WIND COMPONENTS ARE ALSO COMPUTED IN SPECTRAL SPACE.
C           ALSO, SOME SPECTRAL TRANSFORM UTILITY FIELDS ARE COMPUTED.
C           SUBPROGRAM TRSS SHOULD BE USED TO TRANSFORM TO GRID
C           AS WELL AS COMPUTE DRY TEMPERATURE AND SURFACE PRESSURE
C           AND WINDS AND GRADIENTS WITHOUT A COSINE LATITUDE FACTOR.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL RDSS(NSS,JCAP,NC,NCTOP,IDRT,LATB2,LONB2,LEVS,SL,
C   &                 CLAT,SLAT,WLAT,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP)
C
C   INPUT ARGUMENT LIST:
C     NSS      - INTEGER UNIT FROM WHICH TO READ FILE
C     JCAP     - INTEGER SPECTRAL TRUNCATION
C     NC       - INTEGER NUMBER OF SPECTRAL COEFFICIENTS
C     NCTOP    - INTEGER NUMBER OF SPECTRAL COEFFICIENTS OVER TOP
C     IDRT     - INTEGER GRID FLAG (=0 FOR LATLON, =4 FOR GAUSSIAN)
C     LATB2    - INTEGER NUMBER OF LATITUDE PAIRS IN GRID
C     LONB2    - INTEGER NUMBER OF VALID DATA POINTS PER LATITUDE PAIR
C     LEVS     - INTEGER NUMBER OF LEVELS
C     SL       - REAL (LEVS) SIGMA FULL LEVEL VALUES
C
C   OUTPUT ARGUMENT LIST:
C     CLAT     - REAL (LATB2) COSINES OF LATITUDE
C     SLAT     - REAL (LATB2) SINES OF LATITUDE
C     WLAT     - REAL (LATB2) GAUSSIAN WEIGHTS
C     TRIG     - REAL (LONB2) TRIGONOMETRIC QUANTITIES FOR THE FFT
C     IFAX     - INTEGER (20) FACTORS FOR THE FFT
C     EPS      - REAL ((JCAP+1)*(JCAP+2)/2) SQRT((N**2-L**2)/(4*N**2-1))
C     EPSTOP   - REAL (JCAP+1) SQRT((N**2-L**2)/(4*N**2-1)) OVER TOP
C     SS       - REAL (NC,6*LEVS+6) SPECTRAL COEFS
C     SSTOP    - REAL (NCTOP,6*LEVS+6) SPECTRAL COEFS OVER TOP
C                (:,1:LEVS)             VORTICITY
C                (:,LEVS+1:2*LEVS)      DIVERGENCE
C                (:,2*LEVS+1:3*LEVS)    TEMPERATURE
C                (:,3*LEVS+1:4*LEVS)    SPECIFIC HUMIDITY
C                (:,4*LEVS+1)           D(LNPS)/DX
C                (:,4*LEVS+2)           D(LNPS)/DY
C                (:,4*LEVS+3:5*LEVS+2)  ZONAL WIND
C                (:,5*LEVS+3:6*LEVS+2)  MERIDIONAL WIND
C                (:,6*LEVS+3)           SURFACE PRESSURE
C                (:,6*LEVS+4)           OROGRAPHY
C                (:,6*LEVS+5)           D(OROG)/DX
C                (:,6*LEVS+6)           D(OROG)/DY
C
C   INPUT FILES:
C     NSS      - SIGMA SPECTRAL FILE
C
C SUBPROGRAMS CALLED:
C   ELAT         COMPUTE EQUALLY SPACED LATITUDES
C   GLAT         COMPUTE GAUSSIAN LATITUDES
C   FFTFAX       COMPUTE UTILITY FIELDS FOR FFT
C   GSPC         COMPUTE UTILITY FIELDS FOR SPECTRAL TRANSFORM
C   GRADQ        COMPUTE GRADIENT IN SPECTRAL SPACE
C   DZ2UV        COMPUTE VECTOR COMPONENTS IN SPECTRAL SPACE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SL(LEVS)
      DIMENSION CLAT(LATB2),SLAT(LATB2),WLAT(LATB2),TRIG(LONB2),IFAX(20)
      REAL EPS((JCAP+1)*(JCAP+2)/2),EPSTOP(JCAP+1)
      REAL SS(NC,6*LEVS+6),SSTOP(NCTOP,6*LEVS+6)
      REAL ENN1((JCAP+1)*(JCAP+2)),ELONN1((JCAP+1)*(JCAP+2)/2)
      REAL EON((JCAP+1)*(JCAP+2)/2),EONTOP(JCAP+1)
      PARAMETER(G= 9.8000E+0 ,RD= 2.8705E+2 )
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE UTILITY FIELDS
      IF(IDRT.EQ.0) CALL ELAT(LATB2,SLAT,CLAT,WLAT)
      IF(IDRT.EQ.4) CALL GLAT(LATB2,SLAT,CLAT,WLAT)
      CALL FFTFAX(LONB2/2,IFAX,TRIG)
      CALL GSPC(JCAP,EPS,EPSTOP,ENN1,ELONN1,EON,EONTOP)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  READ SIGMA SPECTRAL DATA
      NR=(JCAP+1)*(JCAP+2)
      READ(NSS) (SS(I,6*LEVS+4),I=1,NR)
      READ(NSS) (SS(I,6*LEVS+3),I=1,NR)
      DO K=1,LEVS
        READ(NSS) (SS(I,2*LEVS+K),I=1,NR)
      ENDDO
      DO K=1,LEVS
        READ(NSS) (SS(I,LEVS+K),I=1,NR)
        READ(NSS) (SS(I,K),I=1,NR)
      ENDDO
      DO K=1,LEVS
        READ(NSS) (SS(I,3*LEVS+K),I=1,NR)
      ENDDO
      DO K=1,6*LEVS+6
        DO L=0,JCAP
          SSTOP(2*L+1,K)=0.
          SSTOP(2*L+2,K)=0.
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE GRADIENTS AND WINDS
      CALL GRADQ(JCAP,ENN1,ELONN1,EON,EONTOP,SS(1,6*LEVS+4),
     &           SS(1,6*LEVS+5),SS(1,6*LEVS+6),SSTOP(1,6*LEVS+6))
      CALL GRADQ(JCAP,ENN1,ELONN1,EON,EONTOP,SS(1,6*LEVS+3),
     &           SS(1,4*LEVS+1),SS(1,4*LEVS+2),SSTOP(1,4*LEVS+2))
      DO K=1,LEVS
        CALL DZ2UV(JCAP,ENN1,ELONN1,EON,EONTOP,SS(1,LEVS+K),SS(1,K),
     &             SS(1,4*LEVS+2+K),SS(1,5*LEVS+2+K),
     &             SSTOP(1,4*LEVS+2+K),SSTOP(1,5*LEVS+2+K))
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE TRSS(JCAP,NC,NCTOP,LEVS,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP,
     &                LONB2,LONB22,COSLAT,SINLAT,F)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    TRSS        TRANSFORM SPECTRAL TO GRID
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: TRANSFORMS SPECTRAL TO GRIDDED DATA ON A LATITUDE PAIR
C           AND COMPUTES DRY TEMPERATURE AND SURFACE PRESSURE
C           AND WINDS AND GRADIENTS WITHOUT A COSINE LATITUDE FACTOR.
C           SUBPROGRAM RDSS SHOULD BE CALLED ALREADY
C           TO READ SPECTRAL DATA AND INITIALIZE UTILITY FIELDS.
C           THIS SUBPROGRAM CAN BE CALLED FROM A MULTIPROCESSED SEGMENT.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL TRSS(JCAP,NC,NCTOP,LEVS,TRIG,IFAX,EPS,EPSTOP,SS,SSTOP,
C    &                LONB2,LONB22,COSLAT,SINLAT,F)
C
C   INPUT ARGUMENT LIST:
C     JCAP     - INTEGER SPECTRAL TRUNCATION
C     NC       - INTEGER NUMBER OF SPECTRAL COEFFICIENTS
C     NCTOP    - INTEGER NUMBER OF SPECTRAL COEFFICIENTS OVER TOP
C     LEVS     - INTEGER NUMBER OF LEVELS
C     TRIG     - REAL (LONB2) TRIGONOMETRIC QUANTITIES FOR THE FFT
C     IFAX     - INTEGER (20) FACTORS FOR THE FFT
C     EPS      - REAL ((JCAP+1)*(JCAP+2)/2) SQRT((N**2-L**2)/(4*N**2-1))
C     EPSTOP   - REAL (JCAP+1) SQRT((N**2-L**2)/(4*N**2-1)) OVER TOP
C     SS       - REAL (NC,6*LEVS+6) SPECTRAL COEFS
C     SSTOP    - REAL (NCTOP,6*LEVS+6) SPECTRAL COEFS OVER TOP
C     LONB2    - INTEGER NUMBER OF VALID DATA POINTS PER LATITUDE PAIR
C     LONB22   - INTEGER LONGITUDE DIMENSION OF DATA (>=LONB2+4)
C     COSLAT   - REAL COSINE OF LATITUDE OF THE LATITUDE PAIR
C     SINLAT   - REAL SINE OF LATITUDE OF THE NORTHERN LATITUDE
C
C   OUTPUT ARGUMENT LIST:
C     F        - REAL (LONB22,6*LEVS+6) GRIDDED DATA
C                (LONB2/2 NH POINTS FOLLOWED BY LONB2/2 SH POINTS)
C                (:,1:LEVS)             VORTICITY
C                (:,LEVS+1:2*LEVS)      DIVERGENCE
C                (:,2*LEVS+1:3*LEVS)    TEMPERATURE
C                (:,3*LEVS+1:4*LEVS)    SPECIFIC HUMIDITY
C                (:,4*LEVS+1)           D(LNPS)/DX
C                (:,4*LEVS+2)           D(LNPS)/DY
C                (:,4*LEVS+3:5*LEVS+2)  ZONAL WIND
C                (:,5*LEVS+3:6*LEVS+2)  MERIDIONAL WIND
C                (:,6*LEVS+3)           SURFACE PRESSURE
C                (:,6*LEVS+4)           OROGRAPHY
C                (:,6*LEVS+5)           D(OROG)/DX
C                (:,6*LEVS+6)           D(OROG)/DY
C
C SUBPROGRAMS CALLED:
C   PLEG         COMPUTE ASSOCIATED LEGENDRE POLYNOMIALS
C   PSYNTH       SYNTHESIZE FOURIER FROM SPECTRAL COEFFICIENTS
C   RFFTMLT      FAST FOURIER TRANSFORM
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION TRIG(LONB2),IFAX(20)
      REAL EPS((JCAP+1)*(JCAP+2)/2),EPSTOP(JCAP+1)
      REAL SS(NC,6*LEVS+6),SSTOP(NCTOP,6*LEVS+6)
      REAL F(LONB22,6*LEVS+6)
      REAL PLN((JCAP+1)*(JCAP+2)/2),PLNTOP(JCAP+1)
      REAL WFFT(LONB2,2*(6*LEVS+6))
      INTEGER MP(6*LEVS+6)
      PARAMETER(FV= 4.6150E+2 / 2.8705E+2 -1.)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SET UP PARAMETERS
      IS=LONB2/2
      IS2=LONB22/2
c     MP=0
	call ifill(mp,1,6*levs+6,0)
      MP(4*LEVS+1)=1
      MP(4*LEVS+2)=1
c     MP(4*LEVS+3:5*LEVS+2)=1
      call ifill(MP,4*LEVS+3,5*LEVS+2,1)
c     MP(5*LEVS+3:6*LEVS+2)=1
      call ifill(MP,5*LEVS+3,6*LEVS+2,1)
      MP(6*LEVS+5)=1
      MP(6*LEVS+6)=1
      NFLDS=6*LEVS+6
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TRANSFORM SPECTRAL COEFFICIENTS TO FOURIER COEFFICIENTS
      CALL PLEG(JCAP,SINLAT,COSLAT,EPS,EPSTOP,PLN,PLNTOP)
      CALL PSYNTH(JCAP,IS,IS2,NC,NCTOP,NFLDS,COSLAT,PLN,PLNTOP,MP,
     &            SS,SSTOP,F)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TRANSFORM FOURIER COEFFICIENTS TO GRIDDED DATA
      CALL RFFTMLT(F,WFFT,TRIG,IFAX,1,IS2,IS,2*NFLDS,1)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  MOVE SOUTHERN HEMISPHERE LATITUDE AFTER NORTHERN HEMISPHERE LATITUDE
      DO K=1,NFLDS
        DO I=1,IS
          F(IS+I,K)=F(IS2+I,K)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE DRY TEMPERATURE FROM VIRTUAL TEMPERATURE
C  AND SURFACE PRESSURE FROM LOG SURFACE PRESSURE
      DO K=1,LEVS
        DO I=1,LONB2
          F(I,2*LEVS+K)=F(I,2*LEVS+K)/(1.+FV*F(I,3*LEVS+K))
        ENDDO
      ENDDO
      DO I=1,LONB2
        F(I,6*LEVS+3)=EXP(F(I,6*LEVS+3))
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE ELAT(JH,SLAT,CLAT,WLAT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    ELAT        COMPUTE EQUALLY-SPACED LATITUDE FUNCTIONS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES SINES AND COSINES AND GAUSSIAN WEIGHTS
C           OF EQUALLY-SPACED LATITUDES FROM POLE TO EQUATOR.
C           THE WEIGHTS ARE COMPUTED BASED ON ELLSAESSER (JAM,1966).
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C   93-12-28  IREDELL  MODIFIED WEIGHTS BASED ON ELLSAESSER
C
C USAGE:    CALL ELAT(JH,SLAT,CLAT,WLAT)
C
C   INPUT ARGUMENT LIST:
C     JH       - INTEGER NUMBER OF LATITUDES IN A HEMISPHERE
C
C   OUTPUT ARGUMENT LIST:
C     SLAT     - REAL (JH) SINES OF LATITUDE
C     CLAT     - REAL (JH) COSINES OF LATITUDE
C     WLAT     - REAL (JH) GAUSSIAN WEIGHTS
C
C SUBPROGRAMS CALLED:
C   MINV         SOLVES FULL MATRIX PROBLEM
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SLAT(JH),CLAT(JH),WLAT(JH)
      DIMENSION AWORK(JH-1,JH),BWORK(JH*2)
      PARAMETER(PI=3.14159265358979)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DLAT=0.5*PI/(JH-1)
      SLAT(1)=1.
      CLAT(1)=0.
      DO J=2,JH-1
        SLAT(J)=COS((J-1)*DLAT)
        CLAT(J)=SIN((J-1)*DLAT)
      ENDDO
      SLAT(JH)=0.
      CLAT(JH)=1.
      DO JS=1,JH-1
        DO J=2,JH
          AWORK(JS,J-1)=COS(2*(JS-1)*(J-1)*DLAT)
        ENDDO
      ENDDO
      DO JS=1,JH-1
        AWORK(JS,JH)=-1./(4*(JS-1)**2-1)
      ENDDO
      CALL MINV(AWORK,JH-1,JH-1,BWORK,DA,1.E-12,1,0)
      WLAT(1)=0.
      DO J=2,JH
        WLAT(J)=AWORK(J-1,JH)
      ENDDO
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GLAT(JH,SLAT,CLAT,WLAT)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GLAT        COMPUTE GAUSSIAN LATITUDE FUNCTIONS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES SINES OF GAUSSIAN LATITUDE BY ITERATION.
C           THE COSINES OF GAUSSIAN LATITUDE AND GAUSSIAN WEIGHTS
C           ARE ALSO COMPUTED.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL GLAT(JH,SLAT,CLAT,WLAT)
C
C   INPUT ARGUMENT LIST:
C     JH       - INTEGER NUMBER OF GAUSSIAN LATITUDES IN A HEMISPHERE
C
C   OUTPUT ARGUMENT LIST:
C     SLAT     - REAL (JH) SINES OF (POSITIVE) GAUSSIAN LATITUDE
C     CLAT     - REAL (JH) COSINES OF GAUSSIAN LATITUDE
C     WLAT     - REAL (JH) GAUSSIAN WEIGHTS FOR THE NH
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION SLAT(JH),CLAT(JH),WLAT(JH)
      double precision pi, c, eps
      PARAMETER(PI=3.14159265358979,C=(1.-(2./PI)**2)*0.25,EPS=1.D-14)
      PARAMETER(JBZ=50)
c     DIMENSION PK(JH),PKM1(JH),BZ(JBZ)
      double precision pk(jh), pkm1(jh), bz(jbz)
      double precision r, pkm2, sp

      DATA BZ        / 2.4048255577,  5.5200781103,
     $  8.6537279129, 11.7915344391, 14.9309177086, 18.0710639679,
     $ 21.2116366299, 24.3524715308, 27.4934791320, 30.6346064684,
     $ 33.7758202136, 36.9170983537, 40.0584257646, 43.1997917132,
     $ 46.3411883717, 49.4826098974, 52.6240518411, 55.7655107550,
     $ 58.9069839261, 62.0484691902, 65.1899648002, 68.3314693299,
     $ 71.4729816036, 74.6145006437, 77.7560256304, 80.8975558711,
     $ 84.0390907769, 87.1806298436, 90.3221726372, 93.4637187819,
     $ 96.6052679510, 99.7468198587, 102.888374254, 106.029930916,
     $ 109.171489649, 112.313050280, 115.454612653, 118.596176630,
     $ 121.737742088, 124.879308913, 128.020877005, 131.162446275,
     $ 134.304016638, 137.445588020, 140.587160352, 143.728733573,
     $ 146.870307625, 150.011882457, 153.153458019, 156.295034268 /
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  ESTIMATE LATITUDES USING BESSEL FUNCTION
      R=1./SQRT((2*JH+0.5)**2+C)
      DO J=1,MIN(JH,JBZ)
        SLAT(J)=COS(BZ(J)*R)
      ENDDO
      DO J=JBZ+1,JH
        SLAT(J)=COS((BZ(JBZ)+(J-JBZ)*PI)*R)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  CONVERGE UNTIL ALL SINES OF GAUSSIAN LATITUDE ARE WITHIN EPS
      SPMAX=1.
      DO WHILE(SPMAX.GT.EPS)
        SPMAX=0.
        DO J=1,JH
          PKM1(J)=1.
          PK(J)=SLAT(J)
        ENDDO
        DO N=2,2*JH
          DO J=1,JH
            PKM2=PKM1(J)
            PKM1(J)=PK(J)
            PK(J)=((2*N-1)*SLAT(J)*PKM1(J)-(N-1)*PKM2)/N
          ENDDO
        ENDDO
        DO J=1,JH
          SP=PK(J)*(1.-SLAT(J)**2)/(2*JH*(PKM1(J)-SLAT(J)*PK(J)))
          SLAT(J)=SLAT(J)-SP
          if (sp.lt.0.0) sp=-sp
          if (sp.gt.spmax) spmax = sp
c         SPMAX=MAX(SPMAX,ABS(SP))
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE COSINES AND GAUSSIAN WEIGHTS
      DO J=1,JH
        CLAT(J)=SQRT(1.-SLAT(J)**2)
        WLAT(J)=2.*(1.-SLAT(J)**2)/(2*JH*PKM1(J))**2
      ENDDO
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GSPC(M,EPS,EPSTOP,ENN1,ELONN1,EON,EONTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GSPC        COMPUTE UTILITY SPECTRAL FIELDS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES CONSTANT FIELDS INDEXED IN THE SPECTRAL TRIANGLE
C           IN "IBM ORDER" (ZONAL WAVENUMBER IS THE SLOWER INDEX).
C           IF L IS THE ZONAL WAVENUMBER AND N IS THE TOTAL WAVENUMBER
C           AND A IS THE EARTH RADIUS, THEN THE FIELDS RETURNED ARE:
C           (1) NORMALIZING FACTOR EPSILON=SQRT((N**2-L**2)/(4*N**2-1))
C           (2) LAPLACIAN FACTOR N*(N+1)/A**2
C           (3) ZONAL DERIVATIVE/LAPLACIAN FACTOR L/(N*(N+1))*A
C           (4) MERIDIONAL DERIVATIVE/LAPLACIAN FACTOR EPSILON/N*A
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL GSPC(M,EPS,EPSTOP,ENN1,ELONN1,EON,EONTOP)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C
C   OUTPUT ARGUMENT LIST:
C     EPS      - REAL ((M+1)*(M+2)/2) SQRT((N**2-L**2)/(4*N**2-1))
C     EPSTOP   - REAL (M+1) SQRT((N**2-L**2)/(4*N**2-1)) OVER TOP
C     ENN1     - REAL ((M+1)*(M+2)/2) N*(N+1)/A**2
C     ELONN1   - REAL ((M+1)*(M+2)/2) L/(N*(N+1))*A
C     EON      - REAL ((M+1)*(M+2)/2) EPSILON/N*A
C     EONTOP   - REAL (M+1) EPSILON/N*A OVER TOP
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL EPS((M+1)*(M+2)/2),EPSTOP(M+1)
      REAL ENN1((M+1)*(M+2)/2),ELONN1((M+1)*(M+2)/2)
      REAL EON((M+1)*(M+2)/2),EONTOP(M+1)
      PARAMETER(RERTH= 6.3712E+6 ,RA2=1./RERTH**2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO L=0,M
        ILL=L*(2*M+3-L)/2+1
        EPS(ILL)=0.
        ENN1(ILL)=RA2*L*(L+1)
        ELONN1(ILL)=RERTH/(L+1)
        EON(ILL)=0.
      ENDDO
      DO L=0,M
        IS=L*(2*M+1-L)
        IP=IS/2+1
        DO N=L+1,M
          EPS(IP+N)=SQRT(FLOAT(N**2-L**2)/FLOAT(4*N**2-1))
          ENN1(IP+N)=RA2*N*(N+1)
          ELONN1(IP+N)=RERTH*L/(N*(N+1))
          EON(IP+N)=RERTH/N*EPS(IP+N)
        ENDDO
      ENDDO
      DO L=0,M
        EPSTOP(L+1)=SQRT(FLOAT((M+1)**2-L**2)/FLOAT(4*(M+1)**2-1))
        EONTOP(L+1)=RERTH/(M+1)*EPSTOP(L+1)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GRADQ(M,ENN1,ELONN1,EON,EONTOP,Q,
     &                 QDX,QDY,QDYTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    GRADQ       COMPUTE GRADIENT IN SPECTRAL SPACE
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES THE HORIZONTAL VECTOR GRADIENT OF A SCALAR FIELD
C           IN SPECTRAL SPACE. SUBPROGRAM GSPC SHOULD BE CALLED ALREADY.
C           IF L IS THE ZONAL WAVENUMBER, N IS THE TOTAL WAVENUMBER,
C           EPS(L,N)=SQRT((N**2-L**2)/(4*N**2-1)) AND A IS EARTH RADIUS,
C           THEN THE ZONAL GRADIENT OF Q(L,N) IS SIMPLY I*L/A*Q(L,N)
C           WHILE THE MERIDIONAL GRADIENT OF Q(L,N) IS COMPUTED AS
C           EPS(L,N+1)*(N+2)/A*Q(L,N+1)-EPS(L,N+1)*(N-1)/A*Q(L,N-1).
C           EXTRA TERMS ARE COMPUTED OVER TOP OF THE SPECTRAL TRIANGLE.
C           ADVANTAGE IS TAKEN OF THE FACT THAT EPS(L,L)=0
C           IN ORDER TO VECTORIZE OVER THE ENTIRE SPECTRAL TRIANGLE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL GRADQ(M,ENN1,ELONN1,EON,EONTOP,Q,
C    &                 QDX,QDY,QDYTOP)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     ENN1     - REAL ((M+1)*(M+2)/2) N*(N+1)/A**2
C     ELONN1   - REAL ((M+1)*(M+2)/2) L/(N*(N+1))*A
C     EON      - REAL ((M+1)*(M+2)/2) EPSILON/N*A
C     EONTOP   - REAL (M+1) EPSILON/N*A OVER TOP
C     Q        - REAL ((M+1)*(M+2)) SCALAR FIELD
C
C   OUTPUT ARGUMENT LIST:
C     QDX      - REAL ((M+1)*(M+2)) ZONAL GRADIENT (TIMES COSLAT)
C     QDY      - REAL ((M+1)*(M+2)) MERID GRADIENT (TIMES COSLAT)
C     QDYTOP   - REAL (2*(M+1)) MERID GRADIENT (TIMES COSLAT) OVER TOP
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL ENN1((M+1)*(M+2)/2),ELONN1((M+1)*(M+2)/2)
      REAL EON((M+1)*(M+2)/2),EONTOP(M+1)
      REAL Q((M+1)*(M+2))
      REAL QDX((M+1)*(M+2)),QDY((M+1)*(M+2)),QDYTOP(2*(M+1))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TAKE ZONAL AND MERIDIONAL GRADIENTS
      I=1
      QDX(2*I-1)=0.
      QDX(2*I)=0.
      QDY(2*I-1)=EON(I+1)*ENN1(I+1)*Q(2*I+1)
      QDY(2*I)=EON(I+1)*ENN1(I+1)*Q(2*I+2)
      DO I=2,(M+1)*(M+2)/2-1
        QDX(2*I-1)=-ELONN1(I)*ENN1(I)*Q(2*I)
        QDX(2*I)=ELONN1(I)*ENN1(I)*Q(2*I-1)
        QDY(2*I-1)=EON(I+1)*ENN1(I+1)*Q(2*I+1)-EON(I)*ENN1(I-1)*Q(2*I-3)
        QDY(2*I)=EON(I+1)*ENN1(I+1)*Q(2*I+2)-EON(I)*ENN1(I-1)*Q(2*I-2)
      ENDDO
      I=(M+1)*(M+2)/2
      QDX(2*I-1)=-ELONN1(I)*ENN1(I)*Q(2*I)
      QDX(2*I)=ELONN1(I)*ENN1(I)*Q(2*I-1)
      QDY(2*I-1)=-EON(I)*ENN1(I-1)*Q(2*I-3)
      QDY(2*I)=-EON(I)*ENN1(I-1)*Q(2*I-2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  TAKE MERIDIONAL GRADIENT OVER TOP
      DO L=0,M
        I=L*(2*M+1-L)/2+M+1
        QDYTOP(2*L+1)=-EONTOP(L+1)*ENN1(I)*Q(2*I-1)
        QDYTOP(2*L+2)=-EONTOP(L+1)*ENN1(I)*Q(2*I)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE DZ2UV(M,ENN1,ELONN1,EON,EONTOP,D,Z,
     &                 U,V,UTOP,VTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    DZ2UV       COMPUTE WINDS FROM DIVERGENCE AND VORTICITY
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES THE WIND COMPONENTS FROM DIVERGENCE AND VORTICITY
C           IN SPECTRAL SPACE. SUBPROGRAM GSPC SHOULD BE CALLED ALREADY.
C           IF L IS THE ZONAL WAVENUMBER, N IS THE TOTAL WAVENUMBER,
C           EPS(L,N)=SQRT((N**2-L**2)/(4*N**2-1)) AND A IS EARTH RADIUS,
C           THEN THE ZONAL WIND COMPONENT U IS COMPUTED AS
C             U(L,N)=-I*L/(N*(N+1))*A*D(L,N)
C                    +EPS(L,N+1)/(N+1)*A*Z(L,N+1)-EPS(L,N)/N*A*Z(L,N-1)
C           AND THE MERIDIONAL WIND COMPONENT V IS COMPUTED AS
C             V(L,N)=-I*L/(N*(N+1))*A*Z(L,N)
C                    -EPS(L,N+1)/(N+1)*A*D(L,N+1)+EPS(L,N)/N*A*D(L,N-1)
C           WHERE D IS DIVERGENCE AND Z IS VORTICITY.
C           U AND V ARE WEIGHTED BY THE COSINE OF LATITUDE.
C           EXTRA TERMS ARE COMPUTED OVER TOP OF THE SPECTRAL TRIANGLE.
C           ADVANTAGE IS TAKEN OF THE FACT THAT EPS(L,L)=0
C           IN ORDER TO VECTORIZE OVER THE ENTIRE SPECTRAL TRIANGLE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL DZ2UV(M,ENN1,ELONN1,EON,EONTOP,D,Z,
C    &                 U,V,UTOP,VTOP)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     ENN1     - REAL ((M+1)*(M+2)/2) N*(N+1)/A**2
C     ELONN1   - REAL ((M+1)*(M+2)/2) L/(N*(N+1))*A
C     EON      - REAL ((M+1)*(M+2)/2) EPSILON/N*A
C     EONTOP   - REAL (M+1) EPSILON/N*A OVER TOP
C     D        - REAL ((M+1)*(M+2)) DIVERGENCE
C     Z        - REAL ((M+1)*(M+2)) VORTICITY
C
C   OUTPUT ARGUMENT LIST:
C     U        - REAL ((M+1)*(M+2)) ZONAL WIND (TIMES COSLAT)
C     V        - REAL ((M+1)*(M+2)) MERID WIND (TIMES COSLAT)
C     UTOP     - REAL (2*(M+1)) ZONAL WIND (TIMES COSLAT) OVER TOP
C     VTOP     - REAL (2*(M+1)) MERID WIND (TIMES COSLAT) OVER TOP
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL ENN1((M+1)*(M+2)/2),ELONN1((M+1)*(M+2)/2)
      REAL EON((M+1)*(M+2)/2),EONTOP(M+1)
      REAL D((M+1)*(M+2)),Z((M+1)*(M+2))
      REAL U((M+1)*(M+2)),V((M+1)*(M+2)),UTOP(2*(M+1)),VTOP(2*(M+1))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE WINDS IN THE SPECTRAL TRIANGLE
      I=1
      U(2*I-1)=EON(I+1)*Z(2*I+1)
      U(2*I)=EON(I+1)*Z(2*I+2)
      V(2*I-1)=-EON(I+1)*D(2*I+1)
      V(2*I)=-EON(I+1)*D(2*I+2)
      DO I=2,(M+1)*(M+2)/2-1
        U(2*I-1)=ELONN1(I)*D(2*I)+EON(I+1)*Z(2*I+1)-EON(I)*Z(2*I-3)
        U(2*I)=-ELONN1(I)*D(2*I-1)+EON(I+1)*Z(2*I+2)-EON(I)*Z(2*I-2)
        V(2*I-1)=ELONN1(I)*Z(2*I)-EON(I+1)*D(2*I+1)+EON(I)*D(2*I-3)
        V(2*I)=-ELONN1(I)*Z(2*I-1)-EON(I+1)*D(2*I+2)+EON(I)*D(2*I-2)
      ENDDO
      I=(M+1)*(M+2)/2
      U(2*I-1)=ELONN1(I)*D(2*I)-EON(I)*Z(2*I-3)
      U(2*I)=-ELONN1(I)*D(2*I-1)-EON(I)*Z(2*I-2)
      V(2*I-1)=ELONN1(I)*Z(2*I)+EON(I)*D(2*I-3)
      V(2*I)=-ELONN1(I)*Z(2*I-1)+EON(I)*D(2*I-2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE WINDS OVER TOP OF THE SPECTRAL TRIANGLE
      DO L=0,M
        I=L*(2*M+1-L)/2+M+1
        UTOP(2*L+1)=-EONTOP(L+1)*Z(2*I-1)
        UTOP(2*L+2)=-EONTOP(L+1)*Z(2*I)
        VTOP(2*L+1)=EONTOP(L+1)*D(2*I-1)
        VTOP(2*L+2)=EONTOP(L+1)*D(2*I)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE UV2DZ(M,ENN1,ELONN1,EON,EONTOP,U,V,UTOP,VTOP,D,Z)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    UV2DZ       COMPUTE DIVERGENCE AND VORTICITY FROM WINDS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: COMPUTES THE DIVERGENCE AND VORTICITY FROM WIND COMPONENTS
C           IN SPECTRAL SPACE. SUBPROGRAM GSPC SHOULD BE CALLED ALREADY.
C           IF L IS THE ZONAL WAVENUMBER, N IS THE TOTAL WAVENUMBER,
C           EPS(L,N)=SQRT((N**2-L**2)/(4*N**2-1)) AND A IS EARTH RADIUS,
C           THEN THE DIVERGENCE D IS COMPUTED AS
C             D(L,N)=I*L*A*U(L,N)
C                    +EPS(L,N+1)*N*A*V(L,N+1)-EPS(L,N)*(N+1)*A*V(L,N-1)
C           AND THE VORTICITY Z IS COMPUTED AS
C             Z(L,N)=I*L*A*V(L,N)
C                    -EPS(L,N+1)*N*A*U(L,N+1)+EPS(L,N)*(N+1)*A*U(L,N-1)
C           WHERE U IS THE ZONAL WIND AND V IS THE MERIDIONAL WIND.
C           U AND V ARE WEIGHTED BY THE SECANT OF LATITUDE.
C           EXTRA TERMS ARE USED OVER TOP OF THE SPECTRAL TRIANGLE.
C           ADVANTAGE IS TAKEN OF THE FACT THAT EPS(L,L)=0
C           IN ORDER TO VECTORIZE OVER THE ENTIRE SPECTRAL TRIANGLE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL UV2DZ(M,ENN1,ELONN1,EON,EONTOP,U,V,UTOP,VTOP,D,Z)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     ENN1     - REAL ((M+1)*(M+2)/2) N*(N+1)/A**2
C     ELONN1   - REAL ((M+1)*(M+2)/2) L/(N*(N+1))*A
C     EON      - REAL ((M+1)*(M+2)/2) EPSILON/N*A
C     EONTOP   - REAL (M+1) EPSILON/N*A OVER TOP
C     U        - REAL ((M+1)*(M+2)) ZONAL WIND (OVER COSLAT)
C     V        - REAL ((M+1)*(M+2)) MERID WIND (OVER COSLAT)
C     UTOP     - REAL (2*(M+1)) ZONAL WIND (OVER COSLAT) OVER TOP
C     VTOP     - REAL (2*(M+1)) MERID WIND (OVER COSLAT) OVER TOP
C
C   OUTPUT ARGUMENT LIST:
C     D        - REAL ((M+1)*(M+2)) DIVERGENCE
C     Z        - REAL ((M+1)*(M+2)) VORTICITY
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      REAL ENN1((M+1)*(M+2)/2),ELONN1((M+1)*(M+2)/2)
      REAL EON((M+1)*(M+2)/2),EONTOP(M+1)
      REAL U((M+1)*(M+2)),V((M+1)*(M+2)),UTOP(2*(M+1)),VTOP(2*(M+1))
      REAL D((M+1)*(M+2)),Z((M+1)*(M+2))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE TERMS FROM THE SPECTRAL TRIANGLE
      I=1
      D(2*I-1)=0.
      D(2*I)=0.
      Z(2*I-1)=0.
      Z(2*I)=0.
      DO I=2,(M+1)*(M+2)/2-1
        D(2*I-1)=-ELONN1(I)*U(2*I)+EON(I+1)*V(2*I+1)-EON(I)*V(2*I-3)
        D(2*I)=ELONN1(I)*U(2*I-1)+EON(I+1)*V(2*I+2)-EON(I)*V(2*I-2)
        Z(2*I-1)=-ELONN1(I)*V(2*I)-EON(I+1)*U(2*I+1)+EON(I)*U(2*I-3)
        Z(2*I)=ELONN1(I)*V(2*I-1)-EON(I+1)*U(2*I+2)+EON(I)*U(2*I-2)
      ENDDO
      I=(M+1)*(M+2)/2
      D(2*I-1)=-ELONN1(I)*U(2*I)-EON(I)*V(2*I-3)
      D(2*I)=ELONN1(I)*U(2*I-1)-EON(I)*V(2*I-2)
      Z(2*I-1)=-ELONN1(I)*V(2*I)+EON(I)*U(2*I-3)
      Z(2*I)=ELONN1(I)*V(2*I-1)+EON(I)*U(2*I-2)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE TERMS FROM OVER TOP OF THE SPECTRAL TRIANGLE
      DO L=0,M
        I=L*(2*M+1-L)/2+M+1
        D(2*I-1)=D(2*I-1)+EONTOP(L+1)*VTOP(2*L+1)
        D(2*I)=D(2*I)+EONTOP(L+1)*VTOP(2*L+2)
        Z(2*I-1)=Z(2*I-1)-EONTOP(L+1)*UTOP(2*L+1)
        Z(2*I)=Z(2*I)-EONTOP(L+1)*UTOP(2*L+2)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  MULTIPLY BY LAPLACIAN TERM
      DO I=2,(M+1)*(M+2)/2
        D(2*I-1)=D(2*I-1)*ENN1(I)
        D(2*I)=D(2*I)*ENN1(I)
        Z(2*I-1)=Z(2*I-1)*ENN1(I)
        Z(2*I)=Z(2*I)*ENN1(I)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE PLEG(M,SLAT,CLAT,EPS,EPSTOP,PLN,PLNTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    PLEG        COMPUTE LEGENDRE POLYNOMIALS
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: EVALUATES THE ORTHONORMAL ASSOCIATED LEGENDRE POLYNOMIALS
C           IN THE SPECTRAL TRIANGLE AT A GIVEN LATITUDE.
C           SUBPROGRAM GSPC SHOULD BE CALLED ALREADY.
C           IF L IS THE ZONAL WAVENUMBER, N IS THE TOTAL WAVENUMBER,
C           AND EPS(L,N)=SQRT((N**2-L**2)/(4*N**2-1)) THEN
C           THE FOLLOWING BOOTSTRAPPING FORMULAS ARE USED:
C           PLN(0,0)=SQRT(0.5)
C           PLN(L,L)=PLN(L-1,L-1)*CLAT*SQRT(FLOAT(2*L+1)/FLOAT(2*L))
C           PLN(L,N)=(SLAT*PLN(L,N-1)-EPS(L,N-1)*PLN(L,N-2))/EPS(L,N)
C           SYNTHESIS AT THE POLE NEEDS ONLY TWO ZONAL WAVENUMBERS.
C           SCALAR FIELDS ARE SYNTHESIZED WITH ZONAL WAVENUMBER 0 WHILE
C           VECTOR FIELDS ARE SYNTHESIZED WITH ZONAL WAVENUMBER 1.
C           (THUS POLAR VECTOR FIELDS ARE IMPLICITLY DIVIDED BY CLAT.)
C           THE FOLLOWING BOOTSTRAPPING FORMULAS ARE USED AT THE POLE:
C           PLN(0,0)=SQRT(0.5)
C           PLN(1,1)=SQRT(0.75)
C           PLN(L,N)=(PLN(L,N-1)-EPS(L,N-1)*PLN(L,N-2))/EPS(L,N)
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL PLEG(M,SLAT,CLAT,EPS,EPSTOP,PLN,PLNTOP)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     SLAT     - REAL SINE OF LATITUDE
C     CLAT     - REAL COSINE OF LATITUDE
C     EPS      - REAL ((M+1)*(M+2)/2) SQRT((N**2-L**2)/(4*N**2-1))
C     EPSTOP   - REAL (M+1) SQRT((N**2-L**2)/(4*N**2-1)) OVER TOP
C
C   OUTPUT ARGUMENT LIST:
C     PLN      - REAL ((M+1)*(M+2)/2) LEGENDRE POLYNOMIAL
C     PLNTOP   - REAL (M+1) LEGENDRE POLYNOMIAL OVER TOP
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
CFPP$ NOCONCUR R
      REAL EPS((M+1)*(M+2)/2),EPSTOP(M+1)
      REAL PLN((M+1)*(M+2)/2),PLNTOP(M+1)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  ITERATIVELY COMPUTE PLN WITHIN SPECTRAL TRIANGLE AT POLE
      IF(CLAT.EQ.0.) THEN
        PLN(1)=SQRT(0.5)
        PLN(M+2)=SQRT(0.75)
        PLN(2)=PLN(1)/EPS(2)
        PLN(M+3)=PLN(M+2)/EPS(M+3)
        PLN(3)=(PLN(2)-EPS(2)*PLN(1))/EPS(3)
        DO N=3,M
          I=N+1
          PLN(I)=(PLN(I-1)-EPS(I-1)*PLN(I-2))/EPS(I)
          I=N+M+1
          PLN(I)=(PLN(I-1)-EPS(I-1)*PLN(I-2))/EPS(I)
        ENDDO
        DO I=2*M+2,(M+1)*(M+2)/2
          PLN(I)=0.
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE POLYNOMIALS OVER TOP OF SPECTRAL TRIANGLE
        I=M+2
        PLNTOP(1)=(PLN(I-1)-EPS(I-1)*PLN(I-2))/EPSTOP(1)
        I=2*M+2
        PLNTOP(2)=(PLN(I-1)-EPS(I-1)*PLN(I-2))/EPSTOP(2)
        DO L=2,M
          PLNTOP(L+1)=0.
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  ITERATIVELY COMPUTE PLN(L,L) (BOTTOM HYPOTENUSE OF TRIANGLE)
      ELSE
        NML=0
        I=1
        PLN(I)=SQRT(0.5)
        DO L=1,M-NML
          PLNI=PLN(I)
          I=L*(2*M+3-L)/2+(NML+1)
          PLN(I)=PLNI*CLAT*SQRT(FLOAT(2*L+1)/FLOAT(2*L))
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE PLN(L,L+1) (DIAGONAL NEXT TO BOTTOM HYPOTENUSE OF TRIANGLE)
        NML=1
        DO L=0,M-NML
          I=L*(2*M+3-L)/2+(NML+1)
          PLN(I)=SLAT*PLN(I-1)/EPS(I)
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE REMAINING PLN IN SPECTRAL TRIANGLE
        DO NML=2,M
          DO L=0,M-NML
            I=L*(2*M+3-L)/2+(NML+1)
            PLN(I)=(SLAT*PLN(I-1)-EPS(I-1)*PLN(I-2))/EPS(I)
          ENDDO
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COMPUTE POLYNOMIALS OVER TOP OF SPECTRAL TRIANGLE
        DO L=0,M
          NML=M+1-L
          I=L*(2*M+3-L)/2+(NML+1)
          PLNTOP(L+1)=(SLAT*PLN(I-1)-EPS(I-1)*PLN(I-2))/EPSTOP(L+1)
        ENDDO
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE PSYNTH(M,IM,IX,NC,NCTOP,KM,CLAT,PLN,PLNTOP,MP,
     &                  SPC,SPCTOP,F)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    PSYNTH      SYNTHESIZE FOURIER FROM SPECTRAL
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: SYNTHESIZES FOURIER COEFFICIENTS FROM SPECTRAL COEFFICIENTS
C           FOR A LATITUDE PAIR (NORTHERN AND SOUTHERN HEMISPHERES).
C           VECTOR COMPONENTS ARE DIVIDED BY COSINE OF LATITUDE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL PSYNTH(M,IM,IX,NC,NCTOP,KM,CLAT,PLN,PLNTOP,MP,
C    &                  SPC,SPCTOP,F)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     IM       - INTEGER EVEN NUMBER OF FOURIER COEFFICIENTS
C     IX       - INTEGER DIMENSION OF FOURIER COEFFICIENTS (IX>=IM+2)
C     NC       - INTEGER DIMENSION OF SPECTRAL COEFFICIENTS
C                (NC>=(M+1)*(M+2))
C     NCTOP    - INTEGER DIMENSION OF SPECTRAL COEFFICIENTS OVER TOP
C                (NCTOP>=2*(M+1))
C     KM       - INTEGER NUMBER OF FIELDS
C     CLAT     - REAL COSINE OF LATITUDE
C     PLN      - REAL ((M+1)*(M+2)/2) LEGENDRE POLYNOMIAL
C     PLNTOP   - REAL (M+1) LEGENDRE POLYNOMIAL OVER TOP
C     SPC      - REAL (NC,KM) SPECTRAL COEFFICIENTS
C     SPCTOP   - REAL (NCTOP,KM) SPECTRAL COEFFICIENTS OVER TOP
C     MP       - INTEGER (KM) IDENTIFIERS (0 FOR SCALAR, 1 FOR VECTOR)
C
C   OUTPUT ARGUMENT LIST:
C     F        - REAL (IX,2,KM) FOURIER COEFFICIENTS FOR LATITUDE PAIR
C
C SUBPROGRAMS CALLED:
C   SGEMVX1      CRAY LIBRARY MATRIX TIMES VECTOR
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
CFPP$ NOCONCUR R
      REAL PLN((M+1)*(M+2)/2),PLNTOP(M+1)
      INTEGER MP(KM)
      REAL SPC(NC,KM),SPCTOP(NCTOP,KM)
      REAL F(IX,2,KM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SYNTHESIS OVER POLE.
C  ZERO OUT FOURIER WAVES.
      IF(CLAT.EQ.0) THEN
        DO K=1,KM
          DO L=0,IM/2
            F(2*L+1,1,K)=0.
            F(2*L+2,1,K)=0.
            F(2*L+1,2,K)=0.
            F(2*L+2,2,K)=0.
          ENDDO
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  INITIALIZE FOURIER COEFFICIENTS WITH TERMS OVER TOP OF THE SPECTRUM.
C  INITIALIZE EVEN AND ODD POLYNOMIALS SEPARATELY.
        LTOPE=MOD(M+1,2)
        DO K=1,KM
          L=MP(K)
          IF(L.EQ.LTOPE) THEN
            F(2*L+1,1,K)=PLNTOP(L+1)*SPCTOP(2*L+1,K)
            F(2*L+2,1,K)=PLNTOP(L+1)*SPCTOP(2*L+2,K)
            F(2*L+1,2,K)=0.
            F(2*L+2,2,K)=0.
          ELSE
            F(2*L+1,1,K)=0.
            F(2*L+2,1,K)=0.
            F(2*L+1,2,K)=PLNTOP(L+1)*SPCTOP(2*L+1,K)
            F(2*L+2,2,K)=PLNTOP(L+1)*SPCTOP(2*L+2,K)
          ENDIF
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FOR EACH ZONAL WAVENUMBER, SYNTHESIZE TERMS OVER TOTAL WAVENUMBER.
C  SYNTHESIZE EVEN AND ODD POLYNOMIALS SEPARATELY.
        DO K=1,KM
          L=MP(K)
          IS=L*(2*M+1-L)
          IP=IS/2+1
          DO N=L,M,2
            F(2*L+1,1,K)=F(2*L+1,1,K)+PLN(IP+N)*SPC(IS+2*N+1,K)
            F(2*L+2,1,K)=F(2*L+2,1,K)+PLN(IP+N)*SPC(IS+2*N+2,K)
          ENDDO
          DO N=L+1,M,2
            F(2*L+1,2,K)=F(2*L+1,2,K)+PLN(IP+N)*SPC(IS+2*N+1,K)
            F(2*L+2,2,K)=F(2*L+2,2,K)+PLN(IP+N)*SPC(IS+2*N+2,K)
          ENDDO
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SEPARATE FOURIER COEFFICIENTS FROM EACH HEMISPHERE.
C  ODD POLYNOMIALS CONTRIBUTE NEGATIVELY TO THE SOUTHERN HEMISPHERE.
        DO K=1,KM
          L=MP(K)
          F1R=F(2*L+1,1,K)
          F1I=F(2*L+2,1,K)
          F(2*L+1,1,K)=F1R+F(2*L+1,2,K)
          F(2*L+2,1,K)=F1I+F(2*L+2,2,K)
          F(2*L+1,2,K)=F1R-F(2*L+1,2,K)
          F(2*L+2,2,K)=F1I-F(2*L+2,2,K)
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SYNTHESIS OVER FINITE LATITUDE.
C  INITIALIZE FOURIER COEFFICIENTS WITH TERMS OVER TOP OF THE SPECTRUM.
C  INITIALIZE EVEN AND ODD POLYNOMIALS SEPARATELY.
      ELSE
        LX=MIN(M,IM/2)
        LTOPE=MOD(M+1,2)
        LTOPO=1-LTOPE
        DO K=1,KM
          IF(MP(K).EQ.0) THEN
            DO L=LTOPE,LX,2
              F(2*L+1,1,K)=0.
              F(2*L+2,1,K)=0.
              F(2*L+1,2,K)=0.
              F(2*L+2,2,K)=0.
            ENDDO
            DO L=LTOPO,LX,2
              F(2*L+1,1,K)=0.
              F(2*L+2,1,K)=0.
              F(2*L+1,2,K)=0.
              F(2*L+2,2,K)=0.
            ENDDO
          ELSE
            DO L=LTOPE,LX,2
              F(2*L+1,1,K)=PLNTOP(L+1)*SPCTOP(2*L+1,K)
              F(2*L+2,1,K)=PLNTOP(L+1)*SPCTOP(2*L+2,K)
              F(2*L+1,2,K)=0.
              F(2*L+2,2,K)=0.
            ENDDO
            DO L=LTOPO,LX,2
              F(2*L+1,1,K)=0.
              F(2*L+2,1,K)=0.
              F(2*L+1,2,K)=PLNTOP(L+1)*SPCTOP(2*L+1,K)
              F(2*L+2,2,K)=PLNTOP(L+1)*SPCTOP(2*L+2,K)
            ENDDO
          ENDIF
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FOR EACH ZONAL WAVENUMBER, SYNTHESIZE TERMS OVER TOTAL WAVENUMBER.
C  SYNTHESIZE EVEN AND ODD POLYNOMIALS SEPARATELY.
C  COMMENTED CODE REPLACED BY LIBRARY CALLS.
        DO L=0,LX
          IS=L*(2*M+1-L)
          IP=IS/2+1
          DO N=L,M,2
            DO K=1,KM
              F(2*L+1,1,K)=F(2*L+1,1,K)+PLN(IP+N)*SPC(IS+2*N+1,K)
              F(2*L+2,1,K)=F(2*L+2,1,K)+PLN(IP+N)*SPC(IS+2*N+2,K)
            ENDDO
          ENDDO
C         CALL SGEMVX1(KM,(M+2-L)/2,1.,SPC(IS+2*L+1,1),NC,4,
C    &                 PLN(IP+L),2,1.,F(2*L+1,1,1),IX*2)
C         CALL SGEMVX1(KM,(M+2-L)/2,1.,SPC(IS+2*L+2,1),NC,4,
C    &                 PLN(IP+L),2,1.,F(2*L+2,1,1),IX*2)
          DO N=L+1,M,2
            DO K=1,KM
              F(2*L+1,2,K)=F(2*L+1,2,K)+PLN(IP+N)*SPC(IS+2*N+1,K)
              F(2*L+2,2,K)=F(2*L+2,2,K)+PLN(IP+N)*SPC(IS+2*N+2,K)
            ENDDO
          ENDDO
C         CALL SGEMVX1(KM,(M+1-L)/2,1.,SPC(IS+2*L+3,1),NC,4,
C    &                 PLN(IP+L+1),2,1.,F(2*L+1,2,1),IX*2)
C         CALL SGEMVX1(KM,(M+1-L)/2,1.,SPC(IS+2*L+4,1),NC,4,
C    &                 PLN(IP+L+1),2,1.,F(2*L+2,2,1),IX*2)
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  SEPARATE FOURIER COEFFICIENTS FROM EACH HEMISPHERE.
C  ODD POLYNOMIALS CONTRIBUTE NEGATIVELY TO THE SOUTHERN HEMISPHERE.
C  DIVIDE VECTOR COMPONENTS BY COSINE LATITUDE.
        DO K=1,KM
          DO L=0,LX
            F1R=F(2*L+1,1,K)
            F1I=F(2*L+2,1,K)
            F(2*L+1,1,K)=F1R+F(2*L+1,2,K)
            F(2*L+2,1,K)=F1I+F(2*L+2,2,K)
            F(2*L+1,2,K)=F1R-F(2*L+1,2,K)
            F(2*L+2,2,K)=F1I-F(2*L+2,2,K)
          ENDDO
          IF(MP(K).EQ.1) THEN
            DO L=0,LX
              F(2*L+1,1,K)=F(2*L+1,1,K)/CLAT
              F(2*L+2,1,K)=F(2*L+2,1,K)/CLAT
              F(2*L+1,2,K)=F(2*L+1,2,K)/CLAT
              F(2*L+2,2,K)=F(2*L+2,2,K)/CLAT
            ENDDO
          ENDIF
        ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  ZERO OUT FOURIER WAVES OUTSIDE OF SPECTRUM
        DO L=LX+1,IM/2
          DO K=1,KM
            F(2*L+1,1,K)=0.
            F(2*L+2,1,K)=0.
            F(2*L+1,2,K)=0.
            F(2*L+2,2,K)=0.
          ENDDO
        ENDDO
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE PANALY(M,IM,IX,NC,NCTOP,KM,WGT,CLAT,PLN,PLNTOP,MP,
     &                  F,SPC,SPCTOP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    PANALY      ANALYZE SPECTRAL FROM FOURIER
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: ANALYZES SPECTRAL COEFFICIENTS FROM FOURIER COEFFICIENTS
C           FOR A LATITUDE PAIR (NORTHERN AND SOUTHERN HEMISPHERES).
C           VECTOR COMPONENTS ARE MULTIPLIED BY COSINE OF LATITUDE.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C   94-08-01  MARK IREDELL   MOVED ZONAL WAVENUMBER LOOP INSIDE
C
C USAGE:    CALL PANALY(M,IM,IX,NC,NCTOP,KM,WGT,CLAT,PLN,PLNTOP,MP,
C    &                  F,SPC,SPCTOP)
C
C   INPUT ARGUMENT LIST:
C     M        - INTEGER SPECTRAL TRUNCATION
C     IM       - INTEGER EVEN NUMBER OF FOURIER COEFFICIENTS
C     IX       - INTEGER DIMENSION OF FOURIER COEFFICIENTS (IX>=IM+2)
C     NC       - INTEGER DIMENSION OF SPECTRAL COEFFICIENTS
C                (NC>=(M+1)*(M+2))
C     NCTOP    - INTEGER DIMENSION OF SPECTRAL COEFFICIENTS OVER TOP
C                (NCTOP>=2*(M+1))
C     KM       - INTEGER NUMBER OF FIELDS
C     WGT      - REAL GAUSSIAN WEIGHT
C     CLAT     - REAL COSINE OF LATITUDE
C     PLN      - REAL ((M+1)*(M+2)/2) LEGENDRE POLYNOMIALS
C     PLNTOP   - REAL (M+1) LEGENDRE POLYNOMIAL OVER TOP
C     MP       - INTEGER (KM) IDENTIFIERS (0 FOR SCALAR, 1 FOR VECTOR)
C     F        - REAL (IX,2,KM) FOURIER COEFFICIENTS COMBINED
C     SPC      - REAL (NC,KM) SPECTRAL COEFFICIENTS
C     SPCTOP   - REAL (NCTOP,KM) SPECTRAL COEFFICIENTS OVER TOP
C
C   OUTPUT ARGUMENT LIST:
C     SPC      - REAL (NC,KM) SPECTRAL COEFFICIENTS
C     SPCTOP   - REAL (NCTOP,KM) SPECTRAL COEFFICIENTS OVER TOP
C
C SUBPROGRAMS CALLED:
C   SGERX1       CRAY LIBRARY MATRIX RANK 1 UPDATE
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      INTEGER MP(KM)
      REAL PLN((M+1)*(M+2)/2),PLNTOP(M+1)
      REAL F(IX,2,KM)
      REAL SPC(NC,KM),SPCTOP(NCTOP,KM)
      REAL FW(2,2,KM)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FOR EACH ZONAL WAVENUMBER, ANALYZE TERMS OVER TOTAL WAVENUMBER.
C  ANALYZE EVEN AND ODD POLYNOMIALS SEPARATELY.
C  COMMENTED CODE REPLACED BY LIBRARY CALLS.
      LX=MIN(M,IM/2)
      DO L=0,LX
        NT=MOD(M+1-L,2)+1
        DO K=1,KM
          IF(MP(K).EQ.0) THEN
            FW(1,1,K)=WGT*(F(2*L+1,1,K)+F(2*L+1,2,K))
            FW(2,1,K)=WGT*(F(2*L+2,1,K)+F(2*L+2,2,K))
            FW(1,2,K)=WGT*(F(2*L+1,1,K)-F(2*L+1,2,K))
            FW(2,2,K)=WGT*(F(2*L+2,1,K)-F(2*L+2,2,K))
          ELSE
            FW(1,1,K)=WGT*CLAT*(F(2*L+1,1,K)+F(2*L+1,2,K))
            FW(2,1,K)=WGT*CLAT*(F(2*L+2,1,K)+F(2*L+2,2,K))
            FW(1,2,K)=WGT*CLAT*(F(2*L+1,1,K)-F(2*L+1,2,K))
            FW(2,2,K)=WGT*CLAT*(F(2*L+2,1,K)-F(2*L+2,2,K))
            SPCTOP(2*L+1,K)=SPCTOP(2*L+1,K)+PLNTOP(L+1)*FW(1,NT,K)
            SPCTOP(2*L+2,K)=SPCTOP(2*L+2,K)+PLNTOP(L+1)*FW(2,NT,K)
          ENDIF
        ENDDO
        IS=L*(2*M+1-L)
        IP=IS/2+1
        DO N=L,M,2
          DO K=1,KM
            SPC(IS+2*N+1,K)=SPC(IS+2*N+1,K)+PLN(IP+N)*FW(1,1,K)
            SPC(IS+2*N+2,K)=SPC(IS+2*N+2,K)+PLN(IP+N)*FW(2,1,K)
          ENDDO
        ENDDO
C       CALL SGERX1((M+2-L)/2,KM,1.,PLN(IP+L),2,FW(1,1,1),4,
C    &              SPC(IS+2*L+1,1),4,NC)
C       CALL SGERX1((M+2-L)/2,KM,1.,PLN(IP+L),2,FW(2,1,1),4,
C    &              SPC(IS+2*L+2,1),4,NC)
        DO N=L+1,M,2
          DO K=1,KM
            SPC(IS+2*N+1,K)=SPC(IS+2*N+1,K)+PLN(IP+N)*FW(1,2,K)
            SPC(IS+2*N+2,K)=SPC(IS+2*N+2,K)+PLN(IP+N)*FW(2,2,K)
          ENDDO
        ENDDO
C       CALL SGERX1((M+1-L)/2,KM,1.,PLN(IP+L+1),2,FW(1,2,1),4,
C    &              SPC(IS+2*L+3,1),4,NC)
C       CALL SGERX1((M+1-L)/2,KM,1.,PLN(IP+L+1),2,FW(2,2,1),4,
C    &              SPC(IS+2*L+4,1),4,NC)
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE SPCOEF(L,N,X,F,S)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SPCOEF      COMPUTE 2ND DERIVATIVES FOR CUBIC SPLINES
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: COMPUTE THE SECOND DERIVATIVES OF CUBIC SPLINE PROFILES
C   IN PREPARATION FOR CUBIC SPLINE INTERPOLATIONS.
C   CUBIC SPLINES ARE PIECEWISE CUBIC POLYNOMIALS FITTING THE DATA
C   WITH CONTINUOUS FIRST AND SECOND DERIVATIVES AT INTERIOR POINTS
C   AND SECOND DERIVATIVES SET TO ZERO AT AND BEYOND THE END POINTS.
C   THE COMPUTATIONS ARE DONE BY MARCHING UP THEN DOWN THE PROFILES.
C   NOTE THE INNER DIMENSION OF THE DATA IS THE NUMBER OF PROFILES.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL SPCOEF(L,N,X,F,S)
C
C   INPUT ARGUMENT LIST:
C     L        - INTEGER NUMBER OF PROFILES
C     N        - INTEGER NUMBER OF POINTS IN EACH PROFILE
C     X        - REAL (N) MONOTONICALLY INCREASING ABSCISSA VALUES
C     F        - REAL (L,N) DATA VALUES
C
C   OUTPUT ARGUMENT LIST:
C     S        - REAL (L,N) 2ND DERIVATIVE OF F WITH RESPECT TO X
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION X(N),F(L,N),S(L,N)
      DIMENSION RHO(N-1)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  INITIALIZE END POINTS
      RHO(1)=0.
      DO I=1,L
        S(I,1)=0.
        S(I,N)=0.
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  MARCH UP THE PROFILES
      DO K=2,N-1
        HM1=X(K)-X(K-1)
        RH=1./(X(K+1)-X(K))
        RHO(K)=-1./(HM1*(RHO(K-1)+2.)*RH+2.)
        DO I=1,L
          D=6.*((F(I,K+1)-F(I,K))*RH-(F(I,K)-F(I,K-1))/HM1)*RH
          S(I,K)=(HM1*S(I,K-1)*RH-D)*RHO(K)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  MARCH DOWN THE PROFILES
      DO K=N-1,2,-1
        DO I=1,L
          S(I,K)=RHO(K)*S(I,K+1)+S(I,K)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE SPLINE(L,N,X,F,S,P,XP,FP,DP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SPLINE      INTERPOLATE DATA USING CUBIC SPLINES
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: INTERPOLATE CUBIC SPLINE PROFILES TO GIVEN POINTS.
C   CUBIC SPLINES ARE PIECEWISE CUBIC POLYNOMIALS FITTING THE DATA
C   WITH CONTINUOUS FIRST AND SECOND DERIVATIVES AT INTERIOR POINTS
C   AND SECOND DERIVATIVES SET TO ZERO AT AND BEYOND THE END POINTS.
C   SUBPROGRAM SPCOEF MUST BE ALREADY CALLED TO COMPUTE 2ND DERIVATIVES.
C   NOTE THE INNER DIMENSION OF THE DATA IS THE NUMBER OF PROFILES.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL SPLINE(L,N,X,F,S,P,XP,FP,DP)
C
C   INPUT ARGUMENT LIST:
C     L        - INTEGER NUMBER OF PROFILES
C     N        - INTEGER NUMBER OF POINTS IN EACH PROFILE
C     X        - REAL (N) MONOTONICALLY INCREASING ABSCISSA VALUES
C     F        - REAL (L,N) DATA VALUES
C     S        - REAL (L,N) 2ND DERIVATIVE OF F (FROM SUBPROGRAM SPCOEF)
C     P        - REAL (L) POINT NUMBER OR 0 TO CALCULATE POINT NUMBER
C     XP       - REAL (L) ABSCISSA VALUES TO WHICH TO INTERPOLATE
C
C   OUTPUT ARGUMENT LIST:
C     P        - REAL (L) POINT NUMBER OR
C     FP       - REAL (L) INTERPOLATED DATA VALUES
C     DP       - REAL (L) 1ST DERIVATIVE OF F AT XP
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION X(N),F(L,N),S(L,N),P(L),XP(L),FP(L),DP(L)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  CALCULATE POINT NUMBER IF NECESSARY
      DO I=1,L
        IF(P(I).LE.0.) THEN
          K=1
          DOWHILE(K.LE.N.AND.XP(I).GT.X(K))
            K=K+1
          ENDDO
          P(I)=K-0.5
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  EXTRAPOLATE OR INTERPOLATE CUBIC SPLINE
      DO I=1,L
        IF(P(I).LE.1.) THEN
          P(I)=0.
          DX=X(2)-X(1)
          DP(I)=(F(I,2)-F(I,1))/DX-DX*S(I,2)/6.
          FP(I)=F(I,1)+(XP(I)-X(1))*DP(I)
        ELSEIF(P(I).GT.N) THEN
          P(I)=N+1
          DX=X(N)-X(N-1)
          DP(I)=(F(I,N)-F(I,N-1))/DX+DX*S(I,N-1)/6.
          FP(I)=F(I,N)+(XP(I)-X(N))*DP(I)
        ELSE
          KD=P(I)
          KU=KD+1
          DX=X(KU)-X(KD)
          DD=XP(I)-X(KD)
          DU=DX-DD
          P(I)=KD+DD/DX
          FU=F(I,KU)
          FD=F(I,KD)
          DF=FU-FD
          SU=S(I,KU)
          SD=S(I,KD)
          DS=SU-SD
          DP(I)=(DF+SU*DD**2/2-SD*DU**2/2-DS*DX**2/6)/DX
          FP(I)=FD+DD/DX*(DF-DU*(DD*DS+DX*(SU+2*SD))/6)
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE SPFMAX(L,N,X,F,S,P,XP,FP)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C  SUBPROGRAM:    SPFMAX      FIND MAXIMUM VALUE USING CUBIC SPLINES
C   PRGMMR: IREDELL          ORG: W/NMC23    DATE: 92-10-31
C
C ABSTRACT: COMPUTE THE MAXIMUM DATA VALUE OF CUBIC SPLINE PROFILES.
C   CUBIC SPLINES ARE PIECEWISE CUBIC POLYNOMIALS FITTING THE DATA
C   WITH CONTINUOUS FIRST AND SECOND DERIVATIVES AT INTERIOR POINTS
C   AND SECOND DERIVATIVES SET TO ZERO AT AND BEYOND THE END POINTS.
C   SUBPROGRAM SPCOEF MUST BE ALREADY CALLED TO COMPUTE 2ND DERIVATIVES.
C   NOTE THE INNER DIMENSION OF THE DATA IS THE NUMBER OF PROFILES.
C
C PROGRAM HISTORY LOG:
C   92-10-31  IREDELL
C
C USAGE:    CALL SPFMAX(L,N,X,F,S,P,XP,FP)
C
C   INPUT ARGUMENT LIST:
C     L        - INTEGER NUMBER OF PROFILES
C     N        - INTEGER NUMBER OF POINTS IN EACH PROFILE
C     X        - REAL (N) MONOTONICALLY INCREASING ABSCISSA VALUES
C     F        - REAL (L,N) DATA VALUES
C     S        - REAL (L,N) 2ND DERIVATIVE OF F (FROM SUBPROGRAM SPCOEF)
C
C   OUTPUT ARGUMENT LIST:
C     P        - REAL (L) POINT NUMBER
C     XP       - REAL (L) ABSCISSA VALUES OF MAXIMUM VALUE
C     FP       - REAL (L) MAXIMUM DATA VALUES
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      DIMENSION X(N),F(L,N),S(L,N),P(L),XP(L),FP(L)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  FIND MAXIMUM GIVEN VALUE
      DO I=1,L
        P(I)=1
        FP(I)=F(I,1)
      ENDDO
      DO K=2,N
        DO I=1,L
          IF(F(I,K).GT.FP(I)) THEN
            P(I)=K
            FP(I)=F(I,K)
          ENDIF
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  DETERMINE MAXIMUM VALUE OF CUBIC SPLINE
      DO I=1,L
        K1=NINT(P(I))
        KT=K1+SIGN(1,N+1-2*K1)
        DX=X(K1)-X(KT)
        DF=F(I,K1)-F(I,KT)
        S1=S(I,K1)
        ST=S(I,KT)
        DP=DF/DX+DX*(2*S1+ST)/6
        K2=K1+SIGN(1.,DP)
        IF(K2.GE.1.AND.K2.LE.N) THEN
          X1=X(K1)
          X2=X(K2)
          XM=(X2+X1)/2
          DX=X2-X1
          F1=F(I,K1)
          F2=F(I,K2)
          DF=F2-F1
          S1=S(I,K1)
          S2=S(I,K2)
          SM=(S2+S1)/2
          DS=S2-S1
          IF(DS.NE.0.) THEN
            XPA=XM-SM*DX/DS
            XPB=SQRT((DX**2*(4*SM**2-S1*S2)/(3*DS)-2*DF)/DS)
            XP(I)=XPA+XPB
            SP=S1+DS*(XP(I)-X(K1))/DX
            IF(SP.GT.0.) XP(I)=XPA-XPB
          ELSEIF(S1.LT.0.) THEN
            XP(I)=XM-DF/(DX*S1)
          ELSE
            XP(I)=X1
          ENDIF
          DXP=XP(I)-X1
          P(I)=K1+DXP/DX
          FP(I)=F1+DXP/DX*(DF-(DX-DXP)*(DXP*DS+DX*(2*S1+S2))/6)
        ELSE
          P(I)=K1
          XP(I)=X(K1)
          FP(I)=F(I,K1)
        ENDIF
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GPVS
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GPVS         COMPUTE SATURATION VAPOR PRESSURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE SATURATION VAPOR PRESSURE TABLE AS A FUNCTION OF
C   TEMPERATURE FOR FUNCTION FPVS. THE WATER MODEL ASSUMES A PERFECT GAS
C   CONSTANT SPECIFIC HEATS FOR GAS AND LIQUID, AND NEGLECTS
C   THE VOLUME OF THE LIQUID. THE ICE OPTION IS NO LONGER INCLUDED.
C   THE MODEL DOES ACCOUNT FOR THE VARIATION OF THE LATENT HEAT
C   OF CONDENSATION WITH TEMPERATURE. THE CLAUSIUS-CLAPEYRON EQUATION
C   IS INTEGRATED FROM THE TRIPLE POINT TO GET THE FORMULA
C       PVS=PSATK*(TR**XA)*EXP(XB*(1.-TR))
C   WHERE TR IS TTP/T AND OTHER VALUES ARE PHYSICAL CONSTANTS
C   DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A LENGTH
C   OF 1501 FOR TEMPERATURES RANGING FROM 180. TO 330. KELVIN.
C
C USAGE:  CALL GPVS
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMPVS   - SCALING PARAMETERS AND TABLE FOR FUNCTION FPVS.
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=1501)
      DIMENSION TBPVS(NX)
      COMMON/COMPVS/ C1XPVS,C2XPVS,ANXPVS,TBPVS
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XMIN=180.0
      XMAX=330.0
      XINC=(XMAX-XMIN)/(NX-1)
      C1XPVS=1.-XMIN/XINC
      C2XPVS=1./XINC
      ANXPVS=NX-0.01
      DO JX=1,NX
        X=XMIN+(JX-1)*XINC
        T=X
        TR=TTP/T
        TBPVS(JX)=PSATK*(TR**XA)*EXP(XB*(1.-TR))
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FPVS(T)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FPVS         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE SATURATION VAPOR PRESSURE FROM THE TEMPERATURE.
C   A LINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GPVS. SEE DOCUMENTATION FOR GPVS FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   PVS=FPVS(T)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     T        - REAL TEMPERATURE IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     FPVS     - REAL SATURATION VAPOR PRESSURE IN KILOPASCALS (CB)
C
C COMMON BLOCKS:
C   COMPVS   - SCALING PARAMETERS AND TABLE COMPUTED IN GPVS.
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      PARAMETER(NX=1501)
      DIMENSION TBPVS(NX)
      COMMON/COMPVS/ C1XPVS,C2XPVS,ANXPVS,TBPVS
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XJ=MIN(MAX(C1XPVS+C2XPVS*T,1.),ANXPVS)
      JX=XJ
      FPVS=TBPVS(JX)+(XJ-JX)*(TBPVS(JX+1)-TBPVS(JX))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTDP
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTDP         COMPUTE DEWPOINT TEMPERATURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE DEWPOINT TEMPERATURE TABLE AS A FUNCTION OF
C   VAPOR PRESSURE FOR FUNCTION FTDP. THE WATER MODEL ASSUMES
C   A PERFECT GAS, CONSTANT SPECIFIC HEATS FOR GAS AND LIQUID,
C   AND NEGLECTS THE VOLUME OF THE LIQUID AND ICE FORMATION.
C   THE MODEL DOES ACCOUNT FOR THE VARIATION OF THE LATENT HEAT
C   OF CONDENSATION WITH TEMPERATURE. THE CLAUSIUS-CLAPEYRON EQUATION
C   IS INTEGRATED FROM THE TRIPLE POINT TO GET THE FORMULA
C   FOR SATURATION VAPOR PRESSURE PVS AS A FUNCTION OF TEMPERATURE T
C       PVS=PSATK*(TR**XA)*EXP(XB*(1.-TR))
C   WHERE TR IS TTP/T AND OTHER VALUES ARE PHYSICAL CONSTANTS
C   DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE FORMULA IS INVERTED BY ITERATING NEWTONIAN APPROXIMATIONS
C   FOR EACH PVS UNTIL T IS FOUND TO WITHIN 1.E-6 KELVIN.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A LENGTH
C   OF 2000 FOR VAPOR PRESSURES RANGING FROM 0.005 TO 10.000 KILOPASCALS
C   GIVING A DEWPOINT TEMPERATURE RANGE OF 221.0 TO 319.0 KELVIN.
C
C USAGE:  CALL GTDP
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMTDP   - SCALING PARAMETERS AND TABLE FOR FUNCTION FTDP.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=2000)
      DIMENSION TBTDP(NX)
      double precision x, xmin, xmax, xinc
      double precision t, pv, pvt, dpvt, terr, terrm
      double precision tr, el
      COMMON/COMTDP/ C1XTDP,C2XTDP,ANXTDP,TBTDP
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XMIN= 0.005
      XMAX=10.000
      XINC=(XMAX-XMIN)/(NX-1)
      C1XTDP=1.-XMIN/XINC
      C2XTDP=1./XINC
      ANXTDP=NX-0.01
      TERRM=1.E-6
      T=TTP
      PVT=PSATK
      DPVT=HVAP*PSATK/(RV*TTP**2)
      DO JX=1,NX
        X=XMIN+(JX-1)*XINC
        PV=X
        TERR=(PVT-PV)/DPVT
        DOWHILE(ABS(TERR).GT.TERRM)
          T=T-TERR
          TR=TTP/T
          PVT=PSATK*(TR**XA)*EXP(XB*(1.-TR))
          EL=HVAP+DLDT*(T-TTP)
          DPVT=EL*PVT/(RV*T**2)
          TERR=(PVT-PV)/DPVT
        ENDDO
        TBTDP(JX)=T-TERR
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTDP(PV)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTDP         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE DEWPOINT TEMPERATURE FROM VAPOR PRESSURE.
C   A LINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTDP. SEE DOCUMENTATION FOR GTDP FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   TDP=FTDP(PV)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     PV       - REAL VAPOR PRESSURE IN KILOPASCALS (CB)
C
C   OUTPUT ARGUMENT LIST:
C     FTDP     - REAL DEWPOINT TEMPERATURE IN KELVIN
C
C COMMON BLOCKS:
C   COMTDP   - SCALING PARAMETERS AND TABLE COMPUTED IN GTDP.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=2000)
      DIMENSION TBTDP(NX)
      COMMON/COMTDP/ C1XTDP,C2XTDP,ANXTDP,TBTDP
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XJ=MIN(MAX(C1XTDP+C2XTDP*PV,1.),ANXTDP)
      JX=XJ
      FTDP=TBTDP(JX)+(XJ-JX)*(TBTDP(JX+1)-TBTDP(JX))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTHE
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTHE        COMPUTE EQUIVALENT POTENTIAL TEMPERATURE TABLE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE EQUIVALENT POTENTIAL TEMPERATURE TABLE
C   AS A FUNCTION OF LCL TEMPERATURE AND PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER FOR FUNCTION FTHE. ROSSBY SHOWED THAT THE
C   EQUIVALENT POTENTIAL TEMPERATURE IS CONSTANT FOR A SATURATED PARCEL
C   RISING ADIABATICALLY UP A MOIST ADIABAT WHEN THE HEAT AND MASS
C   OF THE CONDENSED WATER ARE NEGLECTED. THE FORMULA FOR
C   EQUIVALENT POTENTIAL TEMPERATURE (DERIVED IN HOLTON) IS
C       THE=T*(PD**(-ROCP))*EXP(EL*EPS*PV/(CP*T*PD))
C   WHERE T IS THE TEMPERATURE, PV IS THE SATURATED VAPOR PRESSURE,
C   PD IS THE DRY PRESSURE P-PV, EL IS THE TEMPERATURE DEPENDENT
C   LATENT HEAT OF CONDENSATION HVAP+DLDT*(T-TTP), AND OTHER VALUES
C   ARE PHYSICAL CONSTANTS DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A FIRST DIMENSION
C   OF 101 FOR TEMPERATURES RANGING FROM 203.16 TO 303.16 KELVIN
C   AND A SECOND DIMENSION OF 25 FOR PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER RANGING FROM 0.1**ROCP TO 1.1**ROCP.
C
C USAGE:  CALL GTHE
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMTHE   - SCALING PARAMETERS AND TABLE FOR FUNCTION FTHE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(ROCP=RD/CP,CPOR=CP/RD,PSATB=PSATK*1.E-2,EPS=RD/RV,
     &          DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=101,NY=25)
      DIMENSION TBTHE(NX,NY)
      COMMON/COMTHE/ C1XTHE,C2XTHE,ANXTHE,C1YTHE,C2YTHE,ANYTHE,TBTHE
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XMIN=TTP-70.
      XMAX=TTP+30.
      XINC=(XMAX-XMIN)/(NX-1)
      C1XTHE=1.-XMIN/XINC
      C2XTHE=1./XINC
      ANXTHE=NX-0.01
      YMIN=0.1**ROCP
      YMAX=1.1**ROCP
      YINC=(YMAX-YMIN)/(NY-1)
      C1YTHE=1.-YMIN/YINC
      C2YTHE=1./YINC
      ANYTHE=NY-0.01
      DO JY=1,NY
        Y=YMIN+(JY-1)*YINC
        P=Y**CPOR
        DO JX=1,NX
          X=XMIN+(JX-1)*XINC
          T=X
          TR=TTP/T
          PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
          PD=P-PV
          EL=HVAP+DLDT*(T-TTP)
          EXPO=EL*EPS*PV/(CP*T*PD)
          TBTHE(JX,JY)=T*PD**(-ROCP)*EXP(EXPO)
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTHE(T,PK)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTHE         COMPUTE SATURATION VAPOR PRESSURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE EQUIVALENT POTENTIAL TEMPERATURE AT THE LCL
C   FROM TEMPERATURE AND PRESSURE OVER 100 KPA TO THE KAPPA POWER.
C   A BILINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTHE. SEE DOCUMENTATION FOR GTHE FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA,
C   EXCEPT ZERO IS RETURNED FOR TOO COLD OR HIGH LCLS.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   THE=FTHE(PV)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     T        - REAL LCL TEMPERATURE IN KELVIN
C     PK       - REAL LCL PRESSURE OVER 100 KPA TO THE KAPPA POWER
C
C   OUTPUT ARGUMENT LIST:
C     FTHE     - REAL EQUIVALENT POTENTIAL TEMPERATURE IN KELVIN
C
C COMMON BLOCKS:
C   COMTHE   - SCALING PARAMETERS AND TABLE COMPUTED IN GTHE.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=101,NY=25)
      DIMENSION TBTHE(NX,NY)
      COMMON/COMTHE/ C1XTHE,C2XTHE,ANXTHE,C1YTHE,C2YTHE,ANYTHE,TBTHE
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XJ=MIN(C1XTHE+C2XTHE*T,ANXTHE)
      YJ=MIN(C1YTHE+C2YTHE*PK,ANYTHE)
      IF(XJ.GE.1..AND.YJ.GE.1.) THEN
        JX=XJ
        JY=YJ
        F1=TBTHE(JX,JY)+(XJ-JX)*(TBTHE(JX+1,JY)-TBTHE(JX,JY))
        F2=TBTHE(JX,JY+1)+(XJ-JX)*(TBTHE(JX+1,JY+1)-TBTHE(JX,JY+1))
        FTHE=F1+(YJ-JY)*(F2-F1)
      ELSE
        FTHE=0.
      ENDIF
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE GTMA
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: GTMA         COMPUTE MOIST ADIABAT TABLES
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AND SPECIFIC HUMIDITY TABLES
C   AS A FUNCTION OF EQUIVALENT POTENTIAL TEMPERATURE AND
C   PRESSURE OVER 100 KPA TO THE KAPPA POWER FOR FUNCTION FTMA.
C   EQUIVALENT POTENTIAL TEMPERATURE IS CONSTANT FOR A SATURATED PARCEL
C   RISING ADIABATICALLY UP A MOIST ADIABAT WHEN THE HEAT AND MASS
C   OF THE CONDENSED WATER ARE NEGLECTED. THE FORMULA FOR
C   EQUIVALENT POTENTIAL TEMPERATURE (DERIVED IN HOLTON) IS
C       THE=T*(PD**(-ROCP))*EXP(EL*EPS*PV/(CP*T*PD))
C   WHERE T IS THE TEMPERATURE, PV IS THE SATURATED VAPOR PRESSURE,
C   PD IS THE DRY PRESSURE P-PV, EL IS THE TEMPERATURE DEPENDENT
C   LATENT HEAT OF CONDENSATION HVAP+DLDT*(T-TTP), AND OTHER VALUES
C   ARE PHYSICAL CONSTANTS DEFINED IN PARAMETER STATEMENTS IN THE CODE.
C   THE FORMULA IS INVERTED BY ITERATING NEWTONIAN APPROXIMATIONS
C   FOR EACH THE AND P UNTIL T IS FOUND TO WITHIN 1.E-4 KELVIN.
C   THE SPECIFIC HUMIDITY IS THEN COMPUTED FROM PV AND PD.
C   THE CURRENT IMPLEMENTATION COMPUTES A TABLE WITH A FIRST DIMENSION
C   OF 61 FOR EQUIVALENT POTENTIAL TEMPERATURES RANGING FROM 200 TO 500
C   KELVIN AND A SECOND DIMENSION OF 51 FOR PRESSURE OVER 100 KPA
C   TO THE KAPPA POWER RANGING FROM 0.01**ROCP TO 1.1**ROCP.
C
C USAGE:  CALL GTMA
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL
C
C COMMON BLOCKS:
C   COMMA    - SCALING PARAMETERS AND TABLE FOR FUNCTION FTMA.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CP= 1.0046E+3 ,RD= 2.8705E+2 ,RV= 4.6150E+2 ,
     &          TTP= 2.7316E+2 ,HVAP= 2.5000E+6 ,PSATK= 6.1078E+2 *1.E-3
     1,
     &          CLIQ= 4.1855E+3 ,CVAP= 1.8460E+3 )
      PARAMETER(ROCP=RD/CP,CPOR=CP/RD,PSATB=PSATK*1.E-2,EPS=RD/RV,
     &          DLDT=CVAP-CLIQ,XA=-DLDT/RV,XB=XA+HVAP/(RV*TTP))
      PARAMETER(NX=61,NY=51)
      DIMENSION TBTMA(NX,NY),TBQMA(NX,NY)
      COMMON/COMMA/ C1XMA,C2XMA,ANXMA,C1YMA,C2YMA,ANYMA,TBTMA,TBQMA
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XMIN=200.
      XMAX=500.
      XINC=(XMAX-XMIN)/(NX-1)
      C1XMA=1.-XMIN/XINC
      C2XMA=1./XINC
      ANXMA=NX-0.01
      YMIN=0.01**ROCP
      YMAX=1.1**ROCP
      YINC=(YMAX-YMIN)/(NY-1)
      C1YMA=1.-YMIN/YINC
      C2YMA=1./YINC
      ANYMA=NY-0.01
      TERRM=1.E-4
      DO JY=1,NY
        Y=YMIN+(JY-1)*YINC
        P=Y**CPOR
        T=XMIN*Y
        TR=TTP/T
        PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
        PD=P-PV
        EL=HVAP+DLDT*(T-TTP)
        EXPO=EL*EPS*PV/(CP*T*PD)
        THET=T*PD**(-ROCP)*EXP(EXPO)
        DTHET=THET/T*(1.+EXPO*(DLDT*T/EL+EL*P/(RV*T*PD)))
        DO JX=1,NX
          X=XMIN+(JX-1)*XINC
          THE=X
          TERR=(THET-THE)/DTHET
          DOWHILE(ABS(TERR).GT.TERRM)
            T=T-TERR
            TR=TTP/T
            PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
            PD=P-PV
            EL=HVAP+DLDT*(T-TTP)
            EXPO=EL*EPS*PV/(CP*T*PD)
            THET=T*PD**(-ROCP)*EXP(EXPO)
            DTHET=THET/T*(1.+EXPO*(DLDT*T/EL+EL*P/(RV*T*PD)))
            TERR=(THET-THE)/DTHET
          ENDDO
          TBTMA(JX,JY)=T-TERR
          TR=TTP/TBTMA(JX,JY)
          PV=PSATB*(TR**XA)*EXP(XB*(1.-TR))
          PD=P-PV
          Q=EPS*PV/(PD+EPS*PV)
          TBQMA(JX,JY)=Q
        ENDDO
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTMA(THE,PK,QMA)
C$$$     SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM: FTMA         COMPUTE MOIST ADIABAT TEMPERATURE
C   AUTHOR: N PHILLIPS            W/NMC2X2   DATE: 30 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AND SPECIFIC HUMIDITY OF A PARCEL
C   LIFTED UP A MOIST ADIABAT FROM EQUIVALENT POTENTIAL TEMPERATURE
C   AT THE LCL AND PRESSURE OVER 100 KPA TO THE KAPPA POWER.
C   A BILINEAR INTERPOLATION IS DONE BETWEEN VALUES IN A LOOKUP TABLE
C   COMPUTED IN GTMA. SEE DOCUMENTATION FOR GTMA FOR DETAILS.
C   INPUT VALUES OUTSIDE TABLE RANGE ARE RESET TO TABLE EXTREMA.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:   TMA=FTMA(THE,PK,QMA)
C
C PROGRAM HISTORY LOG:
C   91-05-07  IREDELL             MADE INTO INLINABLE FUNCTION
C
C   INPUT ARGUMENT LIST:
C     THE      - REAL EQUIVALENT POTENTIAL TEMPERATURE IN KELVIN
C     PK       - REAL PRESSURE OVER 100 KPA TO THE KAPPA POWER
C
C   OUTPUT ARGUMENT LIST:
C     FTMA     - REAL PARCEL TEMPERATURE IN KELVIN
C     QMA      - REAL PARCEL SPECIFIC HUMIDITY IN KG/KG
C
C COMMON BLOCKS:
C   COMTMA   - SCALING PARAMETERS AND TABLE COMPUTED IN GTMA.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(NX=61,NY=51)
      DIMENSION TBTMA(NX,NY),TBQMA(NX,NY)
      COMMON/COMMA/ C1XMA,C2XMA,ANXMA,C1YMA,C2YMA,ANYMA,TBTMA,TBQMA
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      XJ=MIN(MAX(C1XMA+C2XMA*THE,1.),ANXMA)
      YJ=MIN(MAX(C1YMA+C2YMA*PK,1.),ANYMA)
      JX=XJ
      JY=YJ
      F1=TBTMA(JX,JY)+(XJ-JX)*(TBTMA(JX+1,JY)-TBTMA(JX,JY))
      F2=TBTMA(JX,JY+1)+(XJ-JX)*(TBTMA(JX+1,JY+1)-TBTMA(JX,JY+1))
      FTMA=F1+(YJ-JY)*(F2-F1)
      F1=TBQMA(JX,JY)+(XJ-JX)*(TBQMA(JX+1,JY)-TBQMA(JX,JY))
      F2=TBQMA(JX,JY+1)+(XJ-JX)*(TBQMA(JX+1,JY+1)-TBQMA(JX,JY+1))
      QMA=F1+(YJ-JY)*(F2-F1)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FPKAP(P)
C$$$   SUBPROGRAM  DOCUMENTATION  BLOCK
C
C SUBPROGRAM: FPKAP        RAISE SURFACE PRESSURE TO THE KAPPA POWER.
C   AUTHOR: PHILLIPS         ORG: W/NMC2X2   DATE: 29 DEC 82
C
C ABSTRACT: RAISE SURFACE PRESSURE OVER 100 KPA TO THE KAPPA POWER
C   USING THE RATIO OF TWO POLYNOMIALS IN PRESSURE. THE POLYNOMIAL
C   COEFFICIENTS WERE OBTAINED FROM THE IMSL PROGRAM IRATCU
C   WITH INPUT P/100 RANGE OF 0.5-1.1 AND KAPPA EQUAL TO 0.2856219.
C   THE ACCURACY IS ABOUT THE SAME AS 32-BIT ARITHMETIC.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:  PKAP=FPKAP(P)
C
C   INPUT ARGUMENT LIST:
C     P        - REAL SURFACE PRESSURE IN KILOPASCALS (CB)
C                P SHOULD BE IN THE RANGE 50. TO 110.
C
C   OUTPUT ARGUMENT LIST:
C     FPKAP    - REAL P/100 TO THE KAPPA POWER
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CN0=3.47575490E-1,CN1=4.36732956E-2,CN2= 3.91557032E-4,
     &   CD0=1.,CD1=5.44053037E-2,CD2=2.27693825E-4,CD3=-8.69930591E-8)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      FPKAP=(CN0+P*(CN1+P*CN2))/(CD0+P*(CD1+P*(CD2+P*CD3)))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      FUNCTION FTLCL(T,TDPD)
C$$$   SUBPROGRAM  DOCUMENTATION  BLOCK
C
C SUBPROGRAM: FTLCL        COMPUTE LCL TEMPERATURE.
C   AUTHOR: PHILLIPS         ORG: W/NMC2X2   DATE: 29 DEC 82
C
C ABSTRACT: COMPUTE TEMPERATURE AT THE LIFTING CONDENSATION LEVEL
C   FROM TEMPERATURE AND DEWPOINT DEPRESSION. THE FORMULA USED IS
C   A POLYNOMIAL TAKEN FROM PHILLIPS MSTADB ROUTINE. ITS ACCURAY IS
C   ON THE ORDER OF 0.03 KELVIN FOR A DEWPOINT DEPRESSION OF 30 KELVIN.
C   THIS FUNCTION CAN BE EXPANDED INLINE IN CALLING ROUTINE.
C
C USAGE:  TLCL=FTLCL(T,TDPD)
C
C   INPUT ARGUMENT LIST:
C     T        - REAL TEMPERATURE IN KELVIN
C     TDPD     - REAL DEWPOINT DEPRESSION IN KELVIN
C
C   OUTPUT ARGUMENT LIST:
C     FTLCL    - REAL TEMPERATURE AT THE LCL IN KELVIN
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 77.
C   MACHINE:  CRAY.
C
C$$$
      PARAMETER(CLCL1= 0.954442E+0,CLCL2= 0.967772E-3,
     &          CLCL3=-0.710321E-3,CLCL4=-0.270742E-5)
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      FTLCL=T-TDPD*(CLCL1+CLCL2*T+TDPD*(CLCL3+CLCL4*T))
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE C2Z(L,C,Z)
C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C
C SUBPROGRAM:    C2Z         CONVERT BYTE TO HEXADECIMAL CHARACTER PAIR
C   PRGMMR: IREDELL          ORG: W/NMC23     DATE: 92-10-31
C
C ABSTRACT: CONVERTS AN ARRAY OF BYTES TO ITS HEXADECIMAL REPRESENTATION
C   (2 CHARACTERS PER BYTE) FOR DIAGNOSTIC PURPOSES.
C
C PROGRAM HISTORY LOG:
C   91-10-31  MARK IREDELL
C
C USAGE:    CALL C2Z(L,C,Z)
C
C   INPUT ARGUMENT LIST:
C     L        - INTEGER NUMBER OF BYTES TO REPRESENT
C     C        - CHARACTER (L) BYTE DATA TO CONVERT
C
C   OUTPUT ARGUMENT LIST:
C     Z        - CHARACTER (2*L) HEXADECIMAL REPRESENTATION
C
C ATTRIBUTES:
C   LANGUAGE: CRAY FORTRAN
C
C$$$
      CHARACTER C(L)*1,Z(L)*2
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      DO I=1,L
        WRITE(Z(I),'(Z2)') MOVA2I(C(I))
      ENDDO
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      RETURN
      END
	subroutine ifill(iarr,i,j,iconstant)
	integer iarr(*), i, j, iconstant
	do jj = i, j
	   iarr(jj) = iconstant
	enddo
	return
	end
